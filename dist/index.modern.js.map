{"version":3,"file":"index.modern.js","sources":["../src/utils/strings.ts","../src/constants.ts","../src/templates/ordP2pkh.ts","../src/types.ts","../src/utils/utxo.ts","../src/signData.ts","../src/utils/subtypeData.ts","../src/createOrdinals.ts","../src/sendOrdinals.ts","../src/sendUtxos.ts","../src/transferOrdinals.ts","../src/validate.ts","../src/templates/ordLock.ts","../src/createListings.ts","../src/cancelListing.ts","../src/purchaseOrdListing.ts"],"sourcesContent":["/**\n * Converts a string to its hexadecimal representation\n *\n * @param {string} utf8Str - The string to convert\n * @returns {string} The hexadecimal representation of the input string\n */\nconst toHex = (utf8Str: string): string => {\n  return Buffer.from(utf8Str).toString(\"hex\");\n};\n\nexport { toHex };\n","export const MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\nexport const DEFAULT_SAT_PER_KB = 10;\nexport const API_HOST = \"https://ordinals.gorillapool.io/api\";","import {\n\tLockingScript,\n\tP2PKH,\n\ttype Script,\n} from \"@bsv/sdk\";\nimport type { MAP } from \"../types\";\nimport { toHex } from \"../utils/strings\";\nimport { MAP_PREFIX } from \"../constants\";\n\n/**\n * OrdP2PKH (1Sat Ordinal + Pay To Public Key Hash) class implementing ScriptTemplate.\n *\n * This class provides methods to create an Ordinal with Pay To Public Key Hash locking and unlocking scripts. \n * It extends the standard P2PKH script template and provides a custom lock method.\n */\nexport default class OrdP2PKH extends P2PKH {\n\t/**\n\t * Creates a 1Sat Ordinal + P2PKH locking script for a given address string\n\t *\n\t * @param {string} address - An destination address for the Ordinal.\n\t * @param {string} [b64File] - Base64 encoded file data.\n\t * @param {string} [mediaType] - Media type of the file.\n\t * @param {MAP} [metaData] - (optional) MAP Metadata to be included in OP_RETURN.\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\t// unlock method inherits from p2pkh\n\tlock(\n\t\taddress: string,\n\t\tb64File?: string | undefined,\n\t\tmediaType?: string | undefined,\n\t\tmetaData?: MAP | undefined,\n\t): Script {\n\t\tlet ordAsm = \"\";\n\t\t// This can be omitted for reinscriptions that just update metadata\n\t\tif (b64File !== undefined && mediaType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(b64File, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(mediaType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`;\n\t\t}\n\n\t\t// Create ordinal output and inscription in a single output\n\t\tconst lockingScript = new P2PKH().lock(address);\n\t\tlet inscriptionAsm = `${ordAsm ? `${ordAsm} ` : \"\"}${lockingScript.toASM()}`;\n\n\t\t// MAP.app and MAP.type keys are required\n\t\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t\t}\n\n\t\tif (metaData?.app && metaData?.type) {\n\t\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\t\tconst mapCmdValue = toHex(\"SET\");\n\t\t\tinscriptionAsm = `${inscriptionAsm} OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\t\tif (key !== \"cmd\") {\n\t\t\t\t\tinscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\n\t\t\t\t\t\tvalue as string,\n\t\t\t\t\t)}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn LockingScript.fromASM(inscriptionAsm);\n\t}\n}\n","import type { PrivateKey, Script, Transaction } from \"@bsv/sdk\";\nimport type { AuthToken } from \"sigma-protocol\";\n\n// biome-ignore lint/complexity/noBannedTypes: Reserved for future use\ntype Signer = {};\n\nexport interface LocalSigner extends Signer {\n\tidKey: PrivateKey;\n}\n\nexport interface RemoteSigner extends Signer {\n\tkeyHost: string;\n\tauthToken?: AuthToken;\n}\n\nexport type Destination = {\n\taddress: string;\n\tinscription?: Inscription;\n};\n\n//jsdoc\n/**\n * @typedef {Object} Listing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n */\nexport type Listing = {\n  payAddress: string;\n  price: number;\n  ordAddress: string;\n  listingUtxo: Utxo\n}\n\n/**\n * @typedef {Object} Distribution\n * @property {string} address - Destination address. Must be a Ordinals address (BSV address for recieving 1Sat ordinals tokens).\n * @property {string} amt - Number of tokens as a string, considering decimals. Not display format. Ex. 100000000 for 1 token with 8 decimal places.\n */\nexport type Distribution = {\n\taddress: string;\n\tamt: string;\n};\n\n/**\n * @typedef {Object} Utxo\n * @property {number} satoshis - Amount in satoshis\n * @property {string} txid - Transaction id\n * @property {number} vout - Output index\n * @property {string} script - Base64 encoded locking script\n */\nexport type Utxo = {\n\tsatoshis: number;\n\ttxid: string;\n\tvout: number;\n\tscript: string;\n};\n\n/**\n * @typedef {Object} NftUtxo\n * @property {string} collectionId - Optional. Collection id of the NFT\n * @property {string} contentType - Media type of the NFT\n * @property {string} creatorBapId - Optional. Creator BAP id of the NFT\n * @property {string} origin - Origin address of the NFT\n * @property {number} satoshis - Always 1\n */\nexport interface NftUtxo extends Utxo {\n\tcollectionId?: string;\n\tcontentType: string;\n\tcreatorBapId?: string;\n\torigin: string;\n\tsatoshis: 1;\n}\n\n/**\n * @typedef {Object} TokenUtxo\n * @property {string} amt - Number of tokens as a string\n * @property {string} id - Token id -  either tick or id depending on protocol\n * @property {string} satoshis - Always 1\n */\nexport interface TokenUtxo extends Utxo {\n\tamt: string;\n\tid: string;\n\tsatoshis: 1;\n}\n\nexport type Inscription = {\n\tdataB64: string;\n\tcontentType: string;\n};\n\nexport type ImageContentType =\n\t| \"image/png\"\n\t| \"image/jpeg\"\n\t| \"image/gif\"\n\t| \"image/svg+xml\"\n\t| \"image/webp\";\n\n/**\n * @typedef {Object} IconInscription\n * @property {string} dataB64 - Base64 encoded image data. Must be a square image.\n * @property {ImageContentType} contentType - Media type of the image\n */\nexport type IconInscription = {\n\tdataB64: string;\n\tcontentType: ImageContentType;\n};\n\nexport type Payment = {\n\tto: string;\n\tamount: number;\n};\n\nexport type TokenInscription = {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\" | \"mint\" | \"deploy+mint\" | \"burn\";\n};\n\nexport interface MintTokenInscription extends TokenInscription {\n\top: \"mint\";\n}\n\nexport interface DeployMintTokenInscription extends TokenInscription {\n\top: \"deploy+mint\";\n\tsym: string;\n\ticon: string;\n}\n\nexport interface TransferTokenInscription extends TokenInscription {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\" | \"burn\";\n}\n\nexport interface TransferBSV20Inscription extends TransferTokenInscription {\n\ttick: string;\n}\n\nexport interface TransferBSV21Inscription extends TransferTokenInscription {\n\tid: string;\n}\n\nexport enum TokenType {\n\tBSV20 = \"bsv20\",\n\tBSV21 = \"bsv21\",\n}\n\nexport type CreateOrdinalsResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\n/**\n * MAP (Magic Attribute Protocol) metadata object with stringified values for writing to the blockchain\n * @typedef {Object} MAP\n * @property {string} app - Application identifier\n * @property {string} type - Metadata type\n * @property {string} [prop] - Optional. Additional metadata properties\n */\nexport type MAP = {\n\tapp: string;\n\ttype: string;\n\t[prop: string]: string;\n};\n\nexport type PreMAP = {\n\tapp: string;\n\ttype: string;\n\t[prop: string]: unknown;\n\troyalties?: Royalty[];\n\tsubTypeData?: CollectionSubTypeData | CollectionItemSubTypeData;\n};\n\nexport type CreateOrdinalsConfig = {\n\tutxos: Utxo[];\n\tdestinations: Destination[];\n\tpaymentPk: PrivateKey;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: PreMAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n};\n\nexport enum RoytaltyType {\n\tPaymail = \"paymail\",\n\tAddress = \"address\",\n\tScript = \"script\",\n}\n\n/**\n * Royalty object\n * @typedef {Object} Royalty\n * @property {RoytaltyType} type - Royalty type, string, one of \"paymail\", \"address\", \"script\"\n * @property {string} destination - Royalty destination\n * @property {string} percentage - Royalty percentage as a string float 0-1\n */\nexport type Royalty = {\n\ttype: RoytaltyType;\n\tdestination: string;\n\tpercentage: string; // string float 0-1\n};\n\nexport interface CreateOrdinalsMetadata extends PreMAP {\n\ttype: \"ord\",\n\tname: string,\n\tpreviewUrl?: string,\n}\n\nexport interface CreateOrdinalsCollectionMetadata extends CreateOrdinalsMetadata {\n\tsubType: \"collection\",\n\tsubTypeData: CollectionSubTypeData, // JSON stringified CollectionSubTypeData\n\troyalties?: Royalty[],\n};\n\nexport interface CreateOrdinalsCollectionItemMetadata extends CreateOrdinalsMetadata {\n\tsubType: \"collectionItem\",\n\tsubTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n};\n\n/**\n * Configuration object for creating an ordinals collection\n * @typedef {Object} CreateOrdinalsCollectionConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collection\"\n * @property metaData.name - Collection name\n * @property metaData.subTypeData - JSON stringified CollectionSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface  CreateOrdinalsCollectionConfig extends CreateOrdinalsConfig {\n\tmetaData: CreateOrdinalsCollectionMetadata\n}\n\nexport type CollectionTraits = {\n\t[trait: string]: CollectionTrait;\n};\n\nexport type CollectionTrait = {\n\tvalues: string[];\n\toccurancePercentages: string[];\n};\n\nexport type Rarity = {\n  [key:string]: string;\n}\n\nexport type RarityLabels = Rarity[]\nexport interface CollectionSubTypeData {\n\tdescription: string;\n\tquantity: number;\n\trarityLabels: RarityLabels;\n\ttraits: CollectionTraits;\n}\n\nexport interface CreateOrdinalsCollectionItemMetadata extends PreMAP {\n\t\ttype: \"ord\",\n\t\tname: string,\n\t\tsubType: \"collectionItem\",\n\t\tsubTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n\t\troyalties?: Royalty[],\n\t\tpreviewUrl?: string,\t\n}\n\n/**\n * Configuration object for creating an ordinals collection item\n * @typedef {Object} CreateOrdinalsCollectionItemConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection item\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collectionItem\"\n * @property metaData.name - Collection item name\n * @property metaData.subTypeData - JSON stringified CollectionItemSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionItemConfig extends CreateOrdinalsConfig {\n\tmetaData: CreateOrdinalsCollectionItemMetadata\n}\n\n/**\n * Subtype data for an ordinals collection item\n * @typedef {Object} CollectionItemSubTypeData\n * @property {string} collectionId - Collection id\n * @property {number} mintNumner - Mint number\n * @property {number} rank - Rank\n * @property {string} rarityLabel - Rarity label\n * @property {string} traits - traits object\n * @property {string} attachments - array of attachment objects\n */\nexport interface CollectionItemSubTypeData {\n\tcollectionId: string;\n\tmintNumber?: number;\n\trank?: number;\n\trarityLabel?: RarityLabels;\n\ttraits?: CollectionItemTraits;\n\tattachments?: CollectionItemAttachment[];\n}\n\nexport type CollectionItemTraits = {\n\tname: string;\n\tvalue: string;\n\trarityLabel?: string;\n\toccurancePercentrage?: string;\n};\n\nexport type CollectionItemAttachment \t= {\n\tname: string;\n\tdescription?: string;\n\t\"content-type\": string;\n\turl: string;\n}\n\nexport type SendOrdinalsResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type SendOrdinalsConfig = {\n\tpaymentUtxos: Utxo[];\n\tordinals: Utxo[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tdestinations: Destination[];\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: PreMAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n\tenforceUniformSend?: boolean;\n}\n\nexport type DeployBsv21TokenResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type DeployBsv21TokenConfig = {\n\tsymbol: string;\n\ticon: string | IconInscription;\n\tutxos: Utxo[];\n\tinitialDistribution: Distribution;\n\tpaymentPk: PrivateKey;\n\tdestinationAddress: string;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[];\n};\n\nexport type SendUtxosResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type SendUtxosConfig = {\n\tutxos: Utxo[];\n\tpaymentPk: PrivateKey;\n\tpayments: Payment[];\n\tsatsPerKb?: number;\n\tchangeAddress?: string;\n};\n\nexport interface TransferOrdTokensResult extends SendOrdinalsResult {\n\ttokenChange?: TokenUtxo;\n}\n\nexport type TransferOrdTokensConfig = {\n\tprotocol: TokenType;\n\ttokenID: string;\n\tutxos: Utxo[];\n\tinputTokens: TokenUtxo[];\n\tdistributions: Distribution[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tchangeAddress?: string;\n\ttokenChangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: PreMAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n  burn?: boolean;\n}\n\nexport type CreateOrdListingsConfig = {\n\tutxos: Utxo[];\n\tlistings: Listing[];\n  royalty: number;\n\tpaymentPk: PrivateKey;\n  ordPk: PrivateKey,\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[];\n}\n\nexport type PurchaseOrdListingConfig = {\n  utxos: Utxo[];\n  paymentPk: PrivateKey;\n  listingUtxo: Utxo;\n  ordAddress: string;\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[],\n}\n\nexport type CancelOrdListingsConfig = {\n  utxos: Utxo[],\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  listingUtxos: Utxo[];\n  additionalPayments: Payment[];\n  changeAddress?: string;\n  satsPerKb?: number;\n}\n\nexport type CraeteOrdTokenListingsConfig = {\n  protocol: TokenType;\n  tokenID: string;\n  utxos: Utxo[];\n  inputTokens: TokenUtxo[];\n  distributions: Distribution[];\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  changeAddress?: string;\n  tokenChangeAddress: string;\n  satsPerKb?: number;\n  additionalPayments: Payment[];\n}","import {\n\ttype Transaction,\n\ttype UnlockingScript,\n\tfromUtxo,\n\ttype TransactionInput,\n\tUtils,\n\tP2PKH,\n  Script,\n} from \"@bsv/sdk\";\nimport { type NftUtxo, TokenType, type TokenUtxo, type Utxo } from \"../types\";\nimport { API_HOST } from \"../constants\";\n\nconst { fromBase58Check } = Utils;\n\n/**\n * Converts a Utxo object with a base64 encoded script to a Utxo object with a hex encoded script\n * @param {Utxo} utxo - Utxo object with base64 encoded script\n * @param {Object} unlockScriptTemplate - Object with sign and estimateLength functions\n * @returns {TransactionInput} Utxo object with hex encoded script\n */\nexport const inputFromB64Utxo = (\n\tutxo: Utxo,\n\tunlockScriptTemplate: {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>;\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>;\n\t},\n): TransactionInput => {\n\tconst input = fromUtxo(\n\t\t{\n\t\t\t...utxo,\n\t\t\tscript: Buffer.from(utxo.script, \"base64\").toString(\"hex\"),\n\t\t},\n\t\tunlockScriptTemplate,\n\t);\n\treturn input;\n};\n\n/**\n * Fetches pay utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<Utxo[]>} Array of pay utxos\n */\nexport const fetchPayUtxos = async (address: string, scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\"): Promise<Utxo[]> => {\n\tconst payUrl = `${API_HOST}/txos/address/${address}/unspent?bsv20=false`;\n\tconsole.log({ payUrl });\n\tconst payRes = await fetch(payUrl);\n\tif (!payRes.ok) {\n\t\tthrow new Error(\"Error fetching pay utxos\");\n\t}\n\tlet payUtxos = await payRes.json();\n\t// exclude all 1 satoshi utxos\n\tpayUtxos = payUtxos.filter((u: { satoshis: number }) => u.satoshis !== 1);\n\n\t// Get pubkey hash from address\n\tconst pubKeyHash = fromBase58Check(address);\n\tconst p2pkhScript = new P2PKH().lock(pubKeyHash.data);\n\tpayUtxos = payUtxos.map((utxo: Partial<Utxo>) => ({\n\t\ttxid: utxo.txid,\n\t\tvout: utxo.vout,\n\t\tsatoshis: utxo.satoshis,\n\t\tscript: scriptEncoding === \"hex\" || scriptEncoding === \"base64\" ? Buffer.from(p2pkhScript.toBinary()).toString(scriptEncoding) : p2pkhScript.toASM(),\n\t}));\n\treturn payUtxos as Utxo[];\n};\n\n/**\n * Fetches NFT utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @param {string} [collectionId] - Optional. Collection id (collection insciprtion origin)\n * @param {number} [limit=10] - Optional. Number of utxos to fetch. Default is 10\n * @param {number} [offset=0] - Optional. Offset for fetching utxos. Default is 0\n * @param {string} [scriptEncoding=\"base64\"] - Optional. Encoding for the script. Default is base64. Options are hex, base64, or asm.\n * @returns {Promise<Utxo[]>} Array of NFT utxos\n */\nexport const fetchNftUtxos = async (\n\taddress: string,\n\tcollectionId?: string,\n\tlimit = 10,\n\toffset = 0,\n  scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\",\n): Promise<NftUtxo[]> => {\n\tlet url = `${API_HOST}/txos/address/${address}/unspent?limit=${limit}&offset=${offset}&`;\n\n\tif (collectionId) {\n\t\tconst query = {\n\t\t\tmap: {\n\t\t\t\tsubTypeData: { collectionId },\n\t\t\t},\n\t\t};\n\t\tconst b64Query = Buffer.from(JSON.stringify(query)).toString(\"base64\");\n\t\turl += `q=${b64Query}`;\n\t}\n\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching NFT utxos for ${address}`);\n\t}\n\n\t// Returns a BSV20Txo but we only need a few fields\n\tlet nftUtxos = await res.json();\n\n\t// Only include 1 satoshi outputs, non listings\n\tnftUtxos = nftUtxos.filter(\n\t\t(u: {\n\t\t\tsatoshis: number;\n\t\t\tdata: { list: { price: number; payout: string } | undefined } | null;\n\t\t}) => u.satoshis === 1 && !u.data?.list,\n\t);\n\n\tconst outpoints = nftUtxos.map(\n\t\t(utxo: { txid: string; vout: number }) => `${utxo.txid}_${utxo.vout}`,\n\t);\n\t// Fetch the scripts up to the limit\n\tconst nftRes = await fetch(`${API_HOST}/txos/outpoints?script=true`, {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t\tbody: JSON.stringify([...outpoints]),\n\t});\n\n\tif (!nftRes.ok) {\n\t\tthrow new Error(`Error fetching NFT scripts for ${address}`);\n\t}\n\n\tconst nfts = (await nftRes.json() || [])\n\n\tnftUtxos = nfts.map(\n\t\t(utxo: {\n\t\t\torigin: { outpoint: string };\n\t\t\tscript: string;\n\t\t\tvout: number;\n\t\t\ttxid: string;\n\t\t}) => {\n      let script = utxo.script;\n      if (scriptEncoding === \"hex\") {\n        script = Buffer.from(script, \"base64\").toString(\"hex\");\n      } else if (scriptEncoding === \"asm\") {\n        script = Script.fromHex(Buffer.from(script, \"base64\").toString(\"hex\")).toASM();\n      }\n\t\t\tconst nftUtxo = {\n\t\t\t\torigin: utxo.origin.outpoint,\n\t\t\t\tscript,\n\t\t\t\tvout: utxo.vout,\n\t\t\t\ttxid: utxo.txid,\n\t\t\t\tsatoshis: 1,\n\t\t\t} as NftUtxo;\n\t\t\tif (collectionId) {\n\t\t\t\tnftUtxo.collectionId = collectionId;\n\t\t\t}\n\t\t\treturn nftUtxo;\n\t\t},\n\t);\n\n\treturn nftUtxos as NftUtxo[];\n};\n\n/**\n * Fetches token utxos from the API\n * @param {TokenType} protocol - Token protocol. Either BSV20 or BSV21\n * @param {string} tokenId - Token id. Ticker for BSV20 and id (mint+deploy inscription origin) for BSV21\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<TokenUtxo[]>} Array of token utxos\n */\nexport const fetchTokenUtxos = async (\n\tprotocol: TokenType,\n\ttokenId: string,\n\taddress: string,\n): Promise<TokenUtxo[]> => {\n\tconst url = `${API_HOST}/bsv20/${address}/${protocol === TokenType.BSV20 ? \"tick\" : \"id\"}/${tokenId}?bsv20=true&listing=false`;\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching ${protocol} utxos`);\n\t}\n\n\t// returns a BSV20Txo but we only need a few fields\n\tlet tokenUtxos = await res.json();\n\n\ttokenUtxos = tokenUtxos.map((utxo: Partial<TokenUtxo>) => ({\n\t\tamt: utxo.amt,\n\t\tscript: utxo.script,\n\t\tvout: utxo.vout,\n\t\ttxid: utxo.txid,\n\t\tid: tokenId,\n\t\tsatoshis: 1,\n\t}));\n\n\treturn tokenUtxos as TokenUtxo[];\n};\n","import type { Transaction } from \"@bsv/sdk\";\nimport { Sigma } from \"sigma-protocol\";\nimport type { LocalSigner, RemoteSigner } from \"./types\";\n\n/**\n * Signs data in the transaction with Sigma protocol\n * @param {Transaction} tx - Transaction to sign\n * @param {LocalSigner | RemoteSigner} signer - Local or remote signer (used for data signature)\n * @returns {Transaction} Transaction with signed data\n */\nexport const signData = async (\n\ttx: Transaction,\n\tsigner: LocalSigner | RemoteSigner,\n): Promise<Transaction> => {\n\t// Sign tx if idKey or remote signer like starfish/tokenpass\n\tconst idKey = (signer as LocalSigner)?.idKey;\n\tconst keyHost = (signer as RemoteSigner)?.keyHost;\n\n\tif (idKey) {\n\t\tconst sigma = new Sigma(tx);\n\t\tconst { signedTx } = sigma.sign(idKey);\n\t\treturn signedTx;\n\t}\n\tif (keyHost) {\n\t\tconst authToken = (signer as RemoteSigner)?.authToken;\n\t\tconst sigma = new Sigma(tx);\n\t\ttry {\n\t\t\tconst { signedTx } = await sigma.remoteSign(keyHost, authToken);\n\t\t\treturn signedTx;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthrow new Error(`Remote signing to ${keyHost} failed`);\n\t\t}\n\t}\n\tthrow new Error(\"Signer must be a LocalSigner or RemoteSigner\");\n};\n","import type { MAP, PreMAP } from \"../types\";\n\nconst stringifyMetaData = (metaData?: PreMAP): MAP | undefined => {\n  if (!metaData) return undefined;\n\tconst result: MAP = {\n\t\tapp: metaData.app,\n\t\ttype: metaData.type,\n\t};\n\n\tfor (const [key, value] of Object.entries(metaData)) {\n\t\tif (value !== undefined) {\n\t\t\tif (typeof value === \"string\") {\n\t\t\t\tresult[key] = value;\n\t\t\t} else if (Array.isArray(value) || typeof value === \"object\") {\n\t\t\t\tresult[key] = JSON.stringify(value);\n\t\t\t} else {\n\t\t\t\tresult[key] = String(value);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\nexport default stringifyMetaData;\n","import { Transaction, SatoshisPerKilobyte, P2PKH } from \"@bsv/sdk\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n\tUtxo,\n\tCreateOrdinalsConfig,\n\tCreateOrdinalsResult,\n\tCreateOrdinalsCollectionConfig,\n\tCreateOrdinalsCollectionItemConfig,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Creates a transaction with inscription outputs\n * @param {CreateOrdinalsConfig | CreateOrdinalsCollectionConfig | CreateOrdinalsCollectionItemConfig} config - Configuration object for creating ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {string} config.changeAddress - Optional. Address to send change to. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Local or remote signer (used for data signature)\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<CreateOrdinalsResult>} Transaction with inscription outputs\n */\nexport const createOrdinals = async (\n\tconfig:\n\t\t| CreateOrdinalsConfig\n\t\t| CreateOrdinalsCollectionConfig\n\t\t| CreateOrdinalsCollectionItemConfig,\n): Promise<CreateOrdinalsResult> => {\n\tconst {\n\t\tutxos,\n\t\tdestinations,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Inputs\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\t}\n\n\t// Warn if creating many inscriptions at once\n\tif (destinations.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Outputs\n\t// Add inscription outputs\n\tfor (const destination of destinations) {\n\t\tif (!destination.inscription) {\n\t\t\tthrow new Error(\"Inscription is required for all destinations\");\n\t\t}\n\n\t\t// remove any undefined fields from metadata\n\t\tif (metaData) {\n\t\t\tfor(const key of Object.keys(metaData)) {\n\t\t\t\tif (metaData[key] === undefined) {\n\t\t\t\t\tdelete metaData[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription.dataB64,\n\t\t\t\tdestination.inscription.contentType,\n\t\t\t\tstringifyMetaData(metaData),\n\t\t\t),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Calculate total input and output amounts\n\tconst totalInput = utxos.reduce(\n\t\t(sum, utxo) => sum + BigInt(utxo.satoshis),\n\t\t0n,\n\t);\n\tconst totalOutput = tx.outputs.reduce(\n\t\t(sum, output) => sum + BigInt(output.satoshis || 0),\n\t\t0n,\n\t);\n\n\t// Estimate fee\n\tconst estimatedFee = await modelOrFee.computeFee(tx);\n\n\t// Check if change is needed\n\tlet payChange: Utxo | undefined;\n\tif (totalInput > totalOutput + BigInt(estimatedFee)) {\n\t\tconst changeScript = new P2PKH().lock(\n\t\t\tchangeAddress || paymentPk.toAddress().toString(),\n\t\t);\n\t\tconst changeOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\t// Add change output\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet,\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\n\t\ttx.addOutput(changeOutput);\n\t}\n\n\tif (signer) {\n\t\ttx = await signData(tx, signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype Script,\n\ttype TransactionOutput,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type { SendOrdinalsResult, SendOrdinalsConfig, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Sends ordinals to the given destinations\n * @param {SendOrdinalsConfig} config - Configuration object for sending ordinals\n * @param {Utxo[]} config.paymentUtxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.ordinals - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {string} config.changeAddress - Optional. Address to send change to, if any. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @param {boolean} config.enforceUniformSend - Optional. Default: true. Enforce that the number of destinations matches the number of ordinals being sent. Sending ordinals requires a 1:1 mapping of destinations to ordinals. This is only used for sub-protocols like BSV21 that manage tokens without sending the inscriptions directly.\n * @returns {Promise<SendOrdinalsResult>} Transaction, spent outpoints, and change vout\n */\nexport const sendOrdinals = async (\n\tconfig: SendOrdinalsConfig,\n): Promise<SendOrdinalsResult> => {\n\tif (!config.satsPerKb) {\n\t\tconfig.satsPerKb = DEFAULT_SAT_PER_KB;\n\t}\n\tif (!config.additionalPayments) {\n\t\tconfig.additionalPayments = [];\n\t}\n\tif (config.enforceUniformSend === undefined) {\n\t\tconfig.enforceUniformSend = true;\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(config.satsPerKb);\n\tlet tx = new Transaction();\n\tconst spentOutpoints: string[] = [];\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of config.ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(\n\t\t\tordUtxo,\n\t\t\tnew OrdP2PKH().unlock(config.ordPk),\n\t\t);\n\t\tspentOutpoints.push(`${ordUtxo.txid}_${ordUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// check that ordinals coming in matches ordinals going out if supplied\n\tif (\n\t\tconfig.enforceUniformSend &&\n\t\tconfig.destinations.length !== config.ordinals.length\n\t) {\n\t\tthrow new Error(\n\t\t\t\"Number of destinations must match number of ordinals being sent\",\n\t\t);\n\t}\n\n\t// Add ordinal outputs\n\tfor (const destination of config.destinations) {\n\t\tlet s: Script;\n\t\tif (\n\t\t\tdestination.inscription?.dataB64 &&\n\t\t\tdestination.inscription?.contentType\n\t\t) {\n\t\t\ts = new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription.dataB64,\n\t\t\t\tdestination.inscription.contentType,\n\t\t\t\tstringifyMetaData(config.metaData),\n\t\t\t);\n\t\t} else {\n\t\t\ts = new P2PKH().lock(destination.address);\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: s,\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of config.additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of config.paymentUtxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(config.paymentPk));\n\t\tspentOutpoints.push(`${utxo.txid}_${utxo.vout}`);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (totalSatsIn < totalSatsOut) {\n\t\tthrow new Error(\"Not enough ordinals to send\");\n\t}\n\n\tlet payChange: Utxo | undefined;\n\tif (totalSatsIn > totalSatsOut + BigInt(fee)) {\n\t\tconst changeScript = new P2PKH().lock(\n\t\t\tconfig.changeAddress || config.paymentPk.toAddress().toString(),\n\t\t);\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not available until the transaction is signed\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t}\n\n\tif (config.signer) {\n\t\ttx = await signData(tx, config.signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChange,\n\t};\n};\n","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype TransactionOutput,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type { SendUtxosConfig, SendUtxosResult, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Sends utxos to the given destination\n * @param {SendUtxosConfig} config - Configuration object for sending utxos\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {Payment[]} config.payments - Array of payments with addresses and amounts\n * @param {number} [config.satsPerKb] - Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {string} [config.changeAddress] - Address to send change to. If not provided, defaults to paymentPk address\n * @returns {Promise<SendUtxosResult>} Transaction with utxo outputs\n */\nexport const sendUtxos = async (\n\tconfig: SendUtxosConfig,\n): Promise<SendUtxosResult> => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tpayments,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tchangeAddress = paymentPk.toAddress().toString(),\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\t// Outputs\n\tfor (const payment of payments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new P2PKH().lock(payment.to),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + (out.satoshis || 0),\n\t\t0,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + fee) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + fee) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to send. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChange: Utxo | undefined;\n\tif (totalSatsIn > totalSatsOut + fee) {\n\t\t// Change\n\t\tconst changeScript = new P2PKH().lock(changeAddress);\n\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t} else if (totalSatsIn < totalSatsOut + fee) {\n\t\tconsole.log(\"No change needed\");\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\ttype Destination,\n\tTokenType,\n\ttype TransferBSV20Inscription,\n\ttype TransferTokenInscription,\n  type TransferBSV21Inscription,\n\ttype TransferOrdTokensConfig,\n\ttype TransferOrdTokensResult,\n\ttype SendOrdinalsConfig,\n\ttype TokenUtxo,\n} from \"./types\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { sendOrdinals } from \"./sendOrdinals\";\n\n/**\n * Transfer tokens to a destination\n * @param {TransferOrdTokensConfig} config - Configuration object for transferring tokens\n * @param {TokenType} config.protocol - Token protocol. Must be TokenType.BSV20 or TokenType.BSV21\n * @param {string} config.tokenID - Token ID. Either the tick or id value depending on the protocol\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {TokenUtxo[]} config.inputTokens - Token utxos to spend\n * @param {Distribution[]} config.distributions - Array of destinations with addresses and amounts\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {string} config.changeAddress - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {string} config.tokenChangeAddress - Optional. Address to send token change to, if any. If not provided, defaults to ordPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @param {burn} config.burn - Optional. Set to true to burn the tokens.\n * @returns {Promise<TransferOrdTokensResult>} Transaction with token transfer outputs\n */\nexport const transferOrdTokens = async (config: TransferOrdTokensConfig): Promise<TransferOrdTokensResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tinputTokens,\n\t\tdistributions,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tchangeAddress,\n\t\ttokenChangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n    burn = false\n\t} = config;\n\n\t// calculate change amount\n\tlet changeAmt = 0n;\n\tlet totalAmtIn = 0n;\n\tlet totalAmtOut = 0n;\n\n  // Ensure these inputs are for the expected token\n\tif(!inputTokens.every(\n\t\t(token) => token.id === tokenID,\n\t)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n\tfor (const token of inputTokens) {\n\t\ttotalAmtIn += BigInt(token.amt);\n\t}\n\n\tfor (const dest of distributions) {\n\t\ttotalAmtOut += BigInt(dest.amt);\n\t}\n\n\t// check that you have enough tokens to send\n\tif (totalAmtIn < totalAmtOut) {\n\t\tthrow new Error(\"Not enough tokens to send\");\n\t}\n\n\tchangeAmt = totalAmtIn - totalAmtOut;\n\n\t// add change to distributions\n\tif (changeAmt > 0n) {\n\t\tconst changeDistribution = {\n\t\t\taddress: tokenChangeAddress || ordPk.toAddress().toString(),\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t\tdistributions.push(changeDistribution);\n\t}\n\n\t// build destination inscriptions\n\tconst destinations: Destination[] = distributions.map((dest) => {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: burn ? \"burn\" : \"transfer\",\n\t\t\tamt: dest.amt,\n\t\t}\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n\t\treturn {\n\t\t\taddress: dest.address,\n\t\t\tinscription: {\n\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\t\tcontentType: \"application/bsv-20\",\n\t\t\t},\n\t\t};\n\t});\n\n\tconst sendOrdinalsConfig: SendOrdinalsConfig = {\n\t\tpaymentUtxos: utxos,\n\t\tordinals: inputTokens,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tdestinations,\n\t\tchangeAddress: changeAddress || paymentPk.toAddress().toString(),\n\t\tsatsPerKb,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments,\n\t\tenforceUniformSend: false\n\t};\n\n\tconst { tx, spentOutpoints, payChange } = await sendOrdinals(sendOrdinalsConfig);\n\t\n\t// find the tokenChangeVout by looking for the destination with the tokenChangeAddress\n\tconst tokenChangeVout = destinations.findIndex(\n\t\t(d) => d.address === (tokenChangeAddress || ordPk.toAddress().toString())\n\t);\n\t\n\tlet tokenChange: TokenUtxo | undefined;\n\tif (tokenChangeVout !== -1) {\n\t\ttokenChange = {\n\t\t\tid: tokenID,\n\t\t\tamt: changeAmt.toString(),\n\t\t\tsatoshis: 1,\n\t\t\ttxid: tx.id(\"hex\"),\n\t\t\tvout: tokenChangeVout,\n\t\t\tscript: Buffer.from(tx.outputs[tokenChangeVout].lockingScript.toHex(), \"hex\").toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChange,\n\t\ttokenChange,\n\t}\n};","import type { CollectionItemSubTypeData, CollectionSubTypeData } from \"./types\";\n\n/**\n * Validates sub type data\n * @param {string} subType - Sub type of the ordinals token\n * @param {string} subTypeData - Sub type data of the ordinals token\n * @returns {Error | undefined} Error if validation fails, undefined if validation passes\n */\nexport const validateSubTypeData = (\n  subType: \"collection\" | \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData | CollectionSubTypeData,\n): Error | undefined => {\n  try {\n    if (subType === \"collection\") {\n      const collectionData = subTypeData as CollectionSubTypeData;\n      if (!collectionData.description) {\n        return new Error(\"Collection description is required\");\n      }\n      if (!collectionData.quantity) {\n        return new Error(\"Collection quantity is required\");\n      }\n      if (collectionData.rarityLabels) {\n        if (!Array.isArray(collectionData.rarityLabels)) {\n          return new Error(\"Rarity labels must be an array\");\n        }\n        // make sure keys and values are strings\n        if (!collectionData.rarityLabels.every((label) => {\n          return Object.values(label).every(value => typeof value === 'string');\n        })) {\n          return new Error(`Invalid rarity labels ${collectionData.rarityLabels}`);\n        }\n      }\n      if (collectionData.traits ) {\n        if (typeof collectionData.traits !== \"object\") {\n        return new Error(\"Collection traits must be an object\");\n        }\n        if (collectionData.traits && !Object.keys(collectionData.traits).every(key => typeof key === 'string' && typeof collectionData.traits[key] === 'object')) {\n          return new Error(\"Collection traits must be a valid CollectionTraits object\");\n        }\n      }\n    }\n    if (subType === \"collectionItem\") {\n      const itemData = subTypeData as CollectionItemSubTypeData;\n      if (!itemData.collectionId) {\n        return new Error(\"Collection id is required\");\n      }\n      if (!itemData.collectionId.includes(\"_\")) {\n        return new Error(\"Collection id must be a valid outpoint\");\n      }\n      if (itemData.collectionId.split(\"_\")[0].length !== 64) {\n        return new Error(\"Collection id must contain a valid txid\");\n      }\n      if (Number.isNaN(Number.parseInt(itemData.collectionId.split(\"_\")[1]))) {\n        return new Error(\"Collection id must contain a valid vout\");\n      }\n\n      if (itemData.mintNumber && typeof itemData.mintNumber !== \"number\") {\n        return new Error(\"Mint number must be a number\");\n      }\n      if (itemData.rank && typeof itemData.rank !== \"number\") {\n        return new Error(\"Rank must be a number\");\n      }\n      if (itemData.rarityLabel && typeof itemData.rarityLabel !== \"string\") {\n        return new Error(\"Rarity label must be a string\");\n      }\n      if (itemData.traits && typeof itemData.traits !== \"object\") {\n        return new Error(\"Traits must be an object\");\n      }\n      if (itemData.attachments && !Array.isArray(itemData.attachments)) {\n        return new Error(\"Attachments must be an array\");\n      }\n    }\n    return undefined;\n  } catch (error) {\n    return new Error(\"Invalid JSON data\");\n  }\n};","import {\n\tBigNumber,\n\tLockingScript,\n\tOP,\n\tP2PKH,\n\tPrivateKey,\n\tScript,\n\tTransaction,\n\tTransactionSignature,\n\tUnlockingScript,\n\tUtils,\n} from \"@bsv/sdk\";\n\nexport const oLockPrefix =\n\t\"2097dfd76851bf465e8f715593b217714858bbe9570ff3bd5e33840a34e20ff0262102ba79df5f8ae7604a9830f03c7933028186aede0675a16f025dc4f8be8eec0382201008ce7480da41702918d1ec8e6849ba32b4d65b1e40dc669c31a1e6306b266c0000\";\nexport const oLockSuffix =\n\t\"615179547a75537a537a537a0079537a75527a527a7575615579008763567901c161517957795779210ac407f0e4bd44bfc207355a778b046225a7068fc59ee7eda43ad905aadbffc800206c266b30e6a1319c66dc401e5bd6b432ba49688eecd118297041da8074ce081059795679615679aa0079610079517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01007e81517a75615779567956795679567961537956795479577995939521414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff00517951796151795179970079009f63007952799367007968517a75517a75517a7561527a75517a517951795296a0630079527994527a75517a6853798277527982775379012080517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01205279947f7754537993527993013051797e527e54797e58797e527e53797e52797e57797e0079517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a756100795779ac517a75517a75517a75517a75517a75517a75517a75517a75517a7561517a75517a756169587951797e58797eaa577961007982775179517958947f7551790128947f77517a75517a75618777777777777777777767557951876351795779a9876957795779ac777777777777777767006868\";\n\n/**\n * OrdLock class implementing ScriptTemplate.\n *\n * This class provides methods for interacting with OrdinalLock contract \n */\nexport default class OrdLock {\n\t/**\n\t * Creates a 1Sat Ordinal Lock script\n\t *\n\t * @param {string} ordAddress - An address which can cancel listing.\n\t * @param {string} payAddress - Address which is paid on purchase\n\t * @param {number} price - Listing price in satoshis\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\tlock(\n\t\tordAddress: string,\n\t\tpayAddress: string,\n\t\tprice: number,\n\t): Script {\n\t\tconst cancelPkh = Utils.fromBase58Check(ordAddress).data as number[];\n\t\tconst payPkh = Utils.fromBase58Check(payAddress).data as number[];\n\n\t\treturn Script.fromHex(oLockPrefix)\n\t\t\t.writeBin(cancelPkh)\n\t\t\t.writeBin(OrdLock.buildOutput(price, new P2PKH().lock(payPkh).toBinary()))\n\t\t\t.writeScript(Script.fromHex(oLockSuffix))\n\t}\n\n\tcancelListing(\n\t\tprivateKey: PrivateKey,\n\t\tsignOutputs: 'all' | 'none' | 'single' = 'all',\n\t\tanyoneCanPay: boolean = false,\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: () => Promise<number>\n\t} {\n\t\tconst p2pkh = new P2PKH().unlock(privateKey, signOutputs, anyoneCanPay, sourceSatoshis, lockingScript)\n\t\treturn {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await p2pkh.sign(tx, inputIndex)).writeOpCode(OP.OP_1)\n\t\t\t},\n\t\t\testimateLength: async () => {\n\t\t\t\treturn 107\n\t\t\t}\n\t\t}\n\t}\n\n\tpurchaseListing(\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>\n\t} {\n\t\tconst purchase = {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\tif (tx.outputs.length < 2) {\n\t\t\t\t\tthrow new Error(\"Malformed transaction\")\n\t\t\t\t}\n\t\t\t\tconst script = new UnlockingScript()\n\t\t\t\t\t.writeBin(OrdLock.buildOutput(\n\t\t\t\t\t\ttx.outputs[0].satoshis || 0,\n\t\t\t\t\t\ttx.outputs[0].lockingScript.toBinary()\n\t\t\t\t\t))\n\t\t\t\tif(tx.outputs.length > 2) {\n\t\t\t\t\tconst writer = new Utils.Writer()\n\t\t\t\t\tfor(const output of tx.outputs.slice(2)) {\n\t\t\t\t\t\twriter.write(OrdLock.buildOutput(output.satoshis || 0, output.lockingScript.toBinary()))\n\t\t\t\t\t}\n\t\t\t\t\tscript.writeBin(writer.toArray())\n\t\t\t\t} else {\n\t\t\t\t\tscript.writeOpCode(OP.OP_0)\n\t\t\t\t}\n\n\t\t\t\tconst input = tx.inputs[inputIndex]\n\t\t\t\tconst preimage = TransactionSignature.format({\n\t\t\t\t\tsourceTXID: input.sourceTXID || input.sourceTransaction!.id('hex'),\n\t\t\t\t\tsourceOutputIndex: input.sourceOutputIndex,\n\t\t\t\t\tsourceSatoshis: sourceSatoshis || \n\t\t\t\t\tinput.sourceTransaction!.outputs[input.sourceOutputIndex].satoshis!,\n\t\t\t\t\ttransactionVersion: tx.version,\n\t\t\t\t\totherInputs: [],\n\t\t\t\t\tinputIndex,\n\t\t\t\t\toutputs: tx.outputs,\n\t\t\t\t\tinputSequence: input.sequence,\n\t\t\t\t\tsubscript: lockingScript || input.sourceTransaction!.outputs[input.sourceOutputIndex].lockingScript,\n\t\t\t\t\tlockTime: tx.lockTime,\n\t\t\t\t\tscope: TransactionSignature.SIGHASH_ALL |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_ANYONECANPAY |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_FORKID\n\t\t\t\t  });\n\n\t\t\t\treturn script.writeBin(preimage).writeOpCode(OP.OP_0)\n\t\t\t},\n\t\t\testimateLength: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await purchase.sign(tx, inputIndex)).toBinary().length\n\t\t\t}\n\t\t}\n\t\treturn purchase\n\t}\n\n\tstatic buildOutput(satoshis: number, script: number[]): number[] {\n\t\tconst writer = new Utils.Writer()\n\t\twriter.writeUInt64LEBn(new BigNumber(satoshis))\n\t\twriter.writeVarIntNum(script.length)\n\t\twriter.write(script)\n\t\treturn writer.toArray()\n\t}\n}\n","// TODO: Create listing for NFT and FT\n\nimport {\n\tP2PKH,\n\tSatoshisPerKilobyte,\n\tScript,\n\tTransaction,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type {\n\tCraeteOrdTokenListingsConfig,\n\tCreateOrdListingsConfig,\n\tUtxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nconst { toArray } = Utils;\n\nexport const createOrdListings = async (config: CreateOrdListingsConfig) => {\n\tconst {\n\t\tutxos,\n\t\tlistings,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Warn if creating many inscriptions at once\n\tif (listings.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Outputs\n\t// Add listing outputs\n\tfor (const listing of listings) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdLock().lock(\n\t\t\t\tlisting.payAddress,\n\t\t\t\tlisting.ordAddress,\n\t\t\t\tlisting.price,\n\t\t\t),\n\t\t});\n\t\tconst inputScriptBinary = toArray(listing.listingUtxo.script, \"base64\");\n\t\tconst inputScript = Script.fromBinary(inputScriptBinary);\n\t\ttx.addInput({\n\t\t\tunlockingScriptTemplate: new OrdP2PKH().unlock(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlisting.listingUtxo.satoshis,\n\t\t\t\tinputScript,\n\t\t\t),\n\t\t\tsourceTXID: listing.listingUtxo.txid,\n\t\t\tsourceOutputIndex: listing.listingUtxo.vout,\n\t\t\tsequence: 0xffffffff,\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Check if change is needed\n\tlet payChange: Utxo | undefined;\n\tconst changeScript = new P2PKH().lock(\n\t\tchangeAddress || paymentPk.toAddress().toString(),\n\t);\n\tconst changeOutput = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOutput);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\nexport const createOrdTokenListings = async (\n\tconfig: CraeteOrdTokenListingsConfig,\n) => {};\n","// TODO: Cancel listing for NFT and FT\n\nimport { P2PKH, SatoshisPerKilobyte, Script, Transaction } from \"@bsv/sdk\";\nimport type { CancelOrdListingsConfig, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\n\nexport const cancelOrdListings = async (config: CancelOrdListingsConfig) => {\n\tconst {\n\t\tutxos,\n\t\tlistingUtxos,\n\t\tordPk,\n\t\tpaymentPk,\n\t\tchangeAddress,\n    additionalPayments,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinals we're cancelling\n\tfor (const listingUtxo of listingUtxos) {\n\t\ttx.addInput({\n\t\t\tunlockingScript: Script.fromHex(\n\t\t\t\tBuffer.from(listingUtxo.script, \"base64\").toString(\"hex\"),\n\t\t\t),\n\t\t\tunlockingScriptTemplate: new OrdLock().cancelListing(ordPk),\n\t\t\tsourceOutputIndex: listingUtxo.vout,\n\t\t\tsequence: 0xffffffff,\n\t\t});\n\t\t// Add cancel outputs returning listed ordinals\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new P2PKH().lock(ordPk.toAddress().toString()),\n\t\t});\n\t}\n\n  \t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\n\t// Warn if creating many inscriptions at once\n\tif (listingUtxos.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n  // make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map((i) => `${i.sourceTXID}_${i.sourceOutputIndex}`),\n\t\tpayChange,\n\t};\n};\n\n// const cancelTx = new Transaction(1, 0);\n\n// if (listing.id || listing.tick) {\n//   cancelling.value = false;\n//   throw new Error(\"BSV20 listing!\");\n// }\n\n// const cancelInput = new TxIn(\n//   Buffer.from(listing.txid, \"hex\"),\n//   listing.vout,\n//   Script.from_asm_string(\"\")\n// );\n// cancelTx.add_input(cancelInput);\n// const ordinalsAddress = P2PKHAddress.from_string(ordAddress.value);\n\n// const satOutScript = ordinalsAddress.get_locking_script();\n// const transferOut = new TxOut(BigInt(1), satOutScript);\n\n// cancelTx.add_output(transferOut);\n\n// const changeAddress = P2PKHAddress.from_string(fundingAddress.value);\n\n// // dummy outputs - change\n// const dummyChangeOutput = new TxOut(\n//   BigInt(0),\n//   changeAddress.get_locking_script()\n// );\n// cancelTx.add_output(dummyChangeOutput);\n\n// // Calculate the network fee\n// // account for funding input and market output (not added to tx yet)\n// const paymentUtxos: Utxo[] = [];\n// let satsCollected = 0;\n// // initialize fee and satsNeeded (updated with each added payment utxo)\n// let fee = calculateFee(1, cancelTx);\n// let satsNeeded = fee;\n// // collect the required utxos\n// const sortedFundingUtxos = utxos.value.sort((a, b) =>\n//   a.satoshis > b.satoshis ? -1 : 1\n// );\n// for (const utxo of sortedFundingUtxos) {\n//   if (satsCollected < satsNeeded) {\n//     satsCollected += utxo.satoshis;\n//     paymentUtxos.push(utxo);\n\n//     // if we had to add additional\n//     fee = calculateFee(paymentUtxos.length, cancelTx);\n//     satsNeeded = fee + BigInt(indexerBuyFee);\n//   }\n// }\n\n// // add payment utxos to the tx\n// for (const u of paymentUtxos) {\n//   const inx = new TxIn(\n//     Buffer.from(u.txid, \"hex\"),\n//     u.vout,\n//     Script.from_asm_string(\"\")\n//   );\n//   inx.set_satoshis(BigInt(u.satoshis));\n//   cancelTx.add_input(inx);\n// }\n\n// // Replace dummy change output\n// const changeAmt = BigInt(satsCollected) - satsNeeded;\n\n// const changeOutput = new TxOut(\n//   BigInt(changeAmt),\n//   changeAddress.get_locking_script()\n// );\n\n// cancelTx.set_output(1, changeOutput);\n\n// // sign the cancel input\n// const sig = cancelTx.sign(\n//   PrivateKey.from_wif(ordPk.value),\n//   SigHash.InputOutputs,\n//   0,\n//   Script.from_bytes(Buffer.from(listing.script, \"base64\")),\n//   BigInt(1)\n// );\n\n// cancelInput.set_unlocking_script(\n//   Script.from_asm_string(\n//     `${sig.to_hex()} ${PrivateKey.from_wif(ordPk.value)\n//       .to_public_key()\n//       .to_hex()} OP_1`\n//   )\n// );\n\n// cancelTx.set_input(0, cancelInput);\n\n// // sign the funding inputs\n// let idx = 1;\n// for (const u of paymentUtxos) {\n//   const inx = cancelTx.get_input(idx);\n\n//   if (!inx) {\n//     cancelling.value = false;\n//     return;\n//   }\n\n//   const sig = cancelTx.sign(\n//     PrivateKey.from_wif(payPk.value),\n//     SigHash.InputOutputs,\n//     idx,\n//     Script.from_asm_string(u.script),\n//     BigInt(u.satoshis)\n//   );\n\n//   inx.set_unlocking_script(\n//     Script.from_asm_string(\n//       `${sig.to_hex()} ${PrivateKey.from_wif(payPk.value)\n//         .to_public_key()\n//         .to_hex()}`\n//     )\n//   );\n\n//   cancelTx.set_input(idx, inx);\n//   idx++;\n// }\n","import { P2PKH, SatoshisPerKilobyte, Script, Transaction } from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type { PurchaseOrdListingConfig, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport OrdLock from \"./templates/ordLock\";\n\nexport const purchaseOrdListings = async (config: PurchaseOrdListingConfig) => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tlistingUtxo,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tadditionalPayments = [],\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinal we're purchasing\n\ttx.addInput({\n\t\tunlockingScriptTemplate: new OrdLock().purchaseListing(\n\t\t\t1,\n\t\t\tScript.fromHex(Buffer.from(listingUtxo.script, \"base64\").toString(\"hex\")),\n\t\t),\n\t\tsourceTXID: listingUtxo.txid,\n\t\tsourceOutputIndex: listingUtxo.vout,\n\t\tsequence: 0xffffffff,\n\t});\n\n\t// Outputs\n\t// Add the purchased output\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript: new P2PKH().lock(ordAddress),\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n  \n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n  // make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map((i) => `${i.sourceTXID}_${i.sourceOutputIndex}`),\n\t\tpayChange,\n\t};\n};"],"names":["toHex","utf8Str","Buffer","from","toString","DEFAULT_SAT_PER_KB","API_HOST","OrdP2PKH","P2PKH","lock","address","b64File","mediaType","metaData","ordAsm","undefined","ordHex","fileHex","trim","Error","fileMediaType","inscriptionAsm","toASM","app","type","key","value","Object","entries","LockingScript","fromASM","TokenType","RoytaltyType","fromBase58Check","Utils","inputFromB64Utxo","utxo","unlockScriptTemplate","fromUtxo","_extends","script","fetchPayUtxos","async","scriptEncoding","payUrl","console","log","payRes","fetch","ok","payUtxos","json","filter","u","satoshis","pubKeyHash","p2pkhScript","data","map","txid","vout","toBinary","fetchNftUtxos","collectionId","limit","offset","url","JSON","stringify","subTypeData","res","nftUtxos","_u$data","list","outpoints","nftRes","method","headers","body","Script","fromHex","nftUtxo","origin","outpoint","fetchTokenUtxos","protocol","tokenId","BSV20","tokenUtxos","amt","id","signData","tx","signer","idKey","keyHost","sigma","Sigma","signedTx","sign","authToken","remoteSign","e","stringifyMetaData","result","Array","isArray","String","createOrdinals","utxos","destinations","paymentPk","changeAddress","satsPerKb","additionalPayments","config","modelOrFee","SatoshisPerKilobyte","Transaction","input","unlock","addInput","length","warn","destination","inscription","keys","addOutput","lockingScript","dataB64","contentType","p","amount","to","totalInput","reduce","sum","BigInt","totalOutput","outputs","output","estimatedFee","computeFee","payChange","changeScript","toAddress","changeOutput","change","fee","spentOutpoints","sendOrdinals","enforceUniformSend","ordUtxo","ordinals","ordPk","push","_destination$inscript","_destination$inscript2","s","totalSatsIn","totalSatsOut","total","out","paymentUtxos","changeOut","sendUtxos","payments","payment","sendTxOut","transferOrdTokens","tokenID","inputTokens","distributions","tokenChangeAddress","burn","changeAmt","totalAmtIn","totalAmtOut","every","token","dest","changeDistribution","transferInscription","op","tick","BSV21","sendOrdinalsConfig","tokenChangeVout","findIndex","d","tokenChange","validateSubTypeData","subType","collectionData","description","quantity","rarityLabels","label","values","traits","itemData","includes","split","Number","isNaN","parseInt","mintNumber","rank","rarityLabel","attachments","error","OrdLock","ordAddress","payAddress","price","cancelPkh","payPkh","writeBin","buildOutput","writeScript","cancelListing","privateKey","signOutputs","anyoneCanPay","sourceSatoshis","p2pkh","inputIndex","writeOpCode","OP","OP_1","estimateLength","purchaseListing","purchase","UnlockingScript","writer","Writer","slice","write","toArray","OP_0","inputs","preimage","TransactionSignature","format","sourceTXID","sourceTransaction","sourceOutputIndex","transactionVersion","version","otherInputs","inputSequence","sequence","subscript","lockTime","scope","SIGHASH_ALL","SIGHASH_ANYONECANPAY","SIGHASH_FORKID","writeUInt64LEBn","BigNumber","writeVarIntNum","createOrdListings","listings","listing","inputScriptBinary","listingUtxo","inputScript","fromBinary","unlockingScriptTemplate","payChangeOutIdx","o","i","cancelOrdListings","listingUtxos","unlockingScript","purchaseOrdListings"],"mappings":"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"}