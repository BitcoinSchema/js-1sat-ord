{"version":3,"file":"index.modern.js","sources":["../src/utils/strings.ts","../src/index.ts"],"sourcesContent":["const toHex = (asciiStr: string) => {\r\n  var arr1: string[] = [];\r\n  for (var n = 0, l = asciiStr.length; n < l; n++) {\r\n    var hex = Number(asciiStr.charCodeAt(n)).toString(16);\r\n    arr1.push(hex);\r\n  }\r\n  return arr1.join(\"\");\r\n};\r\n\r\nconst toAscii = (hexStr: string) => {\r\n  var hex, i;\r\n\r\n  var result = \"\";\r\n  for (i = 0; i < hexStr.length; i++) {\r\n    hex = hexStr.charCodeAt(i).toString(16);\r\n    result += (\"000\" + hex).slice(-4);\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nexport { toHex, toAscii };\r\n","import {\r\n  P2PKHAddress,\r\n  PrivateKey,\r\n  Script,\r\n  SigHash,\r\n  Transaction,\r\n  TxIn,\r\n  TxOut,\r\n} from \"bsv-wasm\";\r\nimport { Buffer } from \"buffer\";\r\nimport * as dotenv from \"dotenv\";\r\nimport { AuthToken, Sigma } from \"sigma-protocol\";\r\nimport { toHex } from \"./utils/strings\";\r\n\r\ndotenv.config();\r\n\r\ntype Signer = {};\r\n\r\nexport interface LocalSigner extends Signer {\r\n  idKey: PrivateKey;\r\n}\r\n\r\nexport interface RemoteSigner extends Signer {\r\n  keyHost: string;\r\n  authToken?: AuthToken;\r\n}\r\n\r\nexport type Utxo = {\r\n  satoshis: number;\r\n  txid: string;\r\n  vout: number;\r\n  script: string;\r\n};\r\n\r\nexport type Inscription = {\r\n  dataB64: string;\r\n  contentType: string;\r\n};\r\n\r\nexport type MAP = {\r\n  app: string;\r\n  type: string;\r\n  [prop: string]: string | string[];\r\n};\r\n\r\nconst MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\r\n\r\nconst buildInscription = (\r\n  destinationAddress: P2PKHAddress,\r\n  b64File?: string | undefined,\r\n  mediaType?: string | undefined,\r\n  metaData?: MAP | undefined\r\n): Script => {\r\n  let ordAsm = \"\";\r\n  // This can be omitted for reinscriptions that just update metadata\r\n  if (b64File !== undefined && mediaType !== undefined) {\r\n    const ordHex = toHex(\"ord\");\r\n    const fsBuffer = Buffer.from(b64File, \"base64\");\r\n    const fireShardHex = fsBuffer.toString(\"hex\");\r\n    const fireShardMediaType = toHex(mediaType);\r\n    ordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fireShardMediaType} OP_0 ${fireShardHex} OP_ENDIF`;\r\n  }\r\n\r\n  // Create ordinal output and inscription in a single output\r\n  let inscriptionAsm = `${destinationAddress\r\n    .get_locking_script()\r\n    .to_asm_string()}${ordAsm ? \" \" + ordAsm : \"\"}`;\r\n\r\n  // MAP.app and MAP.type keys are required\r\n  if (metaData && metaData?.app && metaData?.type) {\r\n    const mapPrefixHex = toHex(MAP_PREFIX);\r\n    const mapCmdValue = toHex(\"SET\");\r\n    inscriptionAsm = `${inscriptionAsm} OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\r\n\r\n    for (const [key, value] of Object.entries(metaData)) {\r\n      if (key !== \"cmd\") {\r\n        inscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\r\n          value as string\r\n        )}`;\r\n      }\r\n    }\r\n  }\r\n\r\n  return Script.from_asm_string(inscriptionAsm);\r\n};\r\n\r\nexport const reinscribeOrdinalTemplate = async (\r\n  ordinal: Utxo,\r\n  destinationAddress: string,\r\n  reinscription?: Inscription,\r\n  metaData?: MAP\r\n): Promise<Transaction> => {\r\n  let tx = new Transaction(1, 0);\r\n\r\n  // Inputs\r\n  let utxoIn = new TxIn(\r\n    Buffer.from(ordinal.txid, \"hex\"),\r\n    ordinal.vout,\r\n    Script.from_asm_string(ordinal.script)\r\n  );\r\n\r\n  tx.add_input(utxoIn);\r\n\r\n  // Outputs\r\n  const inscriptionScript = buildInscription(\r\n    P2PKHAddress.from_string(destinationAddress),\r\n    reinscription?.dataB64,\r\n    reinscription?.contentType,\r\n    metaData\r\n  );\r\n\r\n  let satOut = new TxOut(BigInt(1), inscriptionScript);\r\n  tx.add_output(satOut);\r\n\r\n  return tx;\r\n};\r\n\r\nconst createOrdinal = async (\r\n  utxo: Utxo,\r\n  destinationAddress: string,\r\n  paymentPk: PrivateKey,\r\n  changeAddress: string,\r\n  satPerByteFee: number,\r\n  inscription: Inscription,\r\n  metaData?: MAP,\r\n  signer?: LocalSigner | RemoteSigner\r\n): Promise<Transaction> => {\r\n  let tx = new Transaction(1, 0);\r\n\r\n  // Inputs\r\n  let utxoIn = new TxIn(\r\n    Buffer.from(utxo.txid, \"hex\"),\r\n    utxo.vout,\r\n    Script.from_asm_string(\"\")\r\n  );\r\n\r\n  tx.add_input(utxoIn);\r\n\r\n  // Outputs\r\n  const inscriptionScript = buildInscription(\r\n    P2PKHAddress.from_string(destinationAddress),\r\n    inscription.dataB64,\r\n    inscription.contentType,\r\n    metaData\r\n  );\r\n\r\n  let satOut = new TxOut(BigInt(1), inscriptionScript);\r\n  tx.add_output(satOut);\r\n\r\n  // add change\r\n  const changeaddr = P2PKHAddress.from_string(changeAddress);\r\n  const changeScript = changeaddr.get_locking_script();\r\n  let emptyOut = new TxOut(BigInt(1), changeScript);\r\n  const fee = Math.ceil(\r\n    satPerByteFee * (tx.get_size() + emptyOut.to_bytes().byteLength)\r\n  );\r\n  const change = utxo.satoshis - 1 - fee;\r\n  if (change < 0) throw new Error(\"Inadequate satoshis for fee\");\r\n  if (change > 0) {\r\n    let changeOut = new TxOut(BigInt(change), changeScript);\r\n    tx.add_output(changeOut);\r\n  }\r\n\r\n  // sign tx if idKey or remote signer like starfish/tokenpass\r\n  const idKey = (signer as LocalSigner)?.idKey;\r\n  const keyHost = (signer as RemoteSigner)?.keyHost;\r\n  if (idKey) {\r\n    // input txids are available so sigma signature\r\n    // can be final before signing the tx\r\n    const sigma = new Sigma(tx);\r\n    const { signedTx } = sigma.sign(idKey);\r\n    tx = signedTx;\r\n  } else if (keyHost) {\r\n    const authToken = (signer as RemoteSigner)?.authToken;\r\n    const sigma = new Sigma(tx);\r\n    try {\r\n      const { signedTx } = await sigma.remoteSign(keyHost, authToken);\r\n      tx = signedTx;\r\n    } catch (e) {\r\n      console.log(e);\r\n      throw new Error(\"Remote signing to \" + keyHost + \" failed\");\r\n    }\r\n  }\r\n\r\n  const sig = tx.sign(\r\n    paymentPk,\r\n    SigHash.ALL | SigHash.FORKID,\r\n    0,\r\n    Script.from_asm_string(utxo.script),\r\n    BigInt(utxo.satoshis)\r\n  );\r\n\r\n  utxoIn.set_unlocking_script(\r\n    Script.from_asm_string(\r\n      `${sig.to_hex()} ${paymentPk.to_public_key().to_hex()}`\r\n    )\r\n  );\r\n\r\n  tx.set_input(0, utxoIn);\r\n\r\n  return tx;\r\n};\r\n\r\nconst sendOrdinal = async (\r\n  paymentUtxo: Utxo,\r\n  ordinal: Utxo,\r\n  paymentPk: PrivateKey,\r\n  changeAddress: string,\r\n  satPerByteFee: number,\r\n  ordPk: PrivateKey,\r\n  ordDestinationAddress: string,\r\n  reinscription?: Inscription,\r\n  metaData?: MAP\r\n): Promise<Transaction> => {\r\n  let tx = new Transaction(1, 0);\r\n\r\n  let ordIn = new TxIn(\r\n    Buffer.from(ordinal.txid, \"hex\"),\r\n    ordinal.vout,\r\n    Script.from_asm_string(\"\")\r\n  );\r\n  tx.add_input(ordIn);\r\n\r\n  // Inputs\r\n  let utxoIn = new TxIn(\r\n    Buffer.from(paymentUtxo.txid, \"hex\"),\r\n    paymentUtxo.vout,\r\n    Script.from_asm_string(\"\")\r\n  );\r\n\r\n  tx.add_input(utxoIn);\r\n\r\n  let s: Script;\r\n  const destinationAddress = P2PKHAddress.from_string(ordDestinationAddress);\r\n  if (reinscription?.dataB64 && reinscription?.contentType) {\r\n    s = buildInscription(\r\n      destinationAddress,\r\n      reinscription.dataB64,\r\n      reinscription.contentType,\r\n      metaData\r\n    );\r\n  } else {\r\n    s = destinationAddress.get_locking_script();\r\n  }\r\n  let satOut = new TxOut(BigInt(1), s);\r\n  tx.add_output(satOut);\r\n\r\n  // add change\r\n  const changeaddr = P2PKHAddress.from_string(changeAddress);\r\n  const changeScript = changeaddr.get_locking_script();\r\n  let emptyOut = new TxOut(BigInt(1), changeScript);\r\n  const fee = Math.ceil(\r\n    satPerByteFee * (tx.get_size() + emptyOut.to_bytes().byteLength)\r\n  );\r\n  const change = paymentUtxo.satoshis - fee;\r\n  let changeOut = new TxOut(BigInt(change), changeScript);\r\n\r\n  tx.add_output(changeOut);\r\n\r\n  // sign ordinal\r\n  const sig = tx.sign(\r\n    ordPk,\r\n    SigHash.InputOutput,\r\n    0,\r\n    Script.from_asm_string(ordinal.script),\r\n    BigInt(ordinal.satoshis)\r\n  );\r\n\r\n  ordIn.set_unlocking_script(\r\n    Script.from_asm_string(`${sig.to_hex()} ${ordPk.to_public_key().to_hex()}`)\r\n  );\r\n\r\n  tx.set_input(0, ordIn);\r\n\r\n  // sign fee payment\r\n  const sig2 = tx.sign(\r\n    paymentPk,\r\n    SigHash.InputOutput,\r\n    1,\r\n    Script.from_asm_string(paymentUtxo.script),\r\n    BigInt(paymentUtxo.satoshis)\r\n  );\r\n\r\n  utxoIn.set_unlocking_script(\r\n    Script.from_asm_string(\r\n      `${sig2.to_hex()} ${paymentPk.to_public_key().to_hex()}`\r\n    )\r\n  );\r\n\r\n  tx.set_input(1, utxoIn);\r\n\r\n  return tx;\r\n};\r\n\r\n// sendUtxos sends p2pkh utxos to the given destinationAddress\r\nconst sendUtxos = async (\r\n  utxos: Utxo[],\r\n  paymentPk: PrivateKey,\r\n  address: P2PKHAddress,\r\n  feeSats: number\r\n): Promise<Transaction> => {\r\n  const tx = new Transaction(1, 0);\r\n\r\n  // Outputs\r\n  let inputValue = 0;\r\n  for (let u of utxos || []) {\r\n    inputValue += u.satoshis;\r\n  }\r\n  const satsIn = inputValue;\r\n  const satsOut = satsIn - feeSats;\r\n  console.log({ feeSats, satsIn, satsOut });\r\n  tx.add_output(new TxOut(BigInt(satsOut), address.get_locking_script()));\r\n\r\n  // build txins from our UTXOs\r\n  let idx = 0;\r\n  for (let u of utxos || []) {\r\n    console.log({ u });\r\n    const inx = new TxIn(\r\n      Buffer.from(u.txid, \"hex\"),\r\n      u.vout,\r\n      Script.from_asm_string(\"\")\r\n    );\r\n    console.log({ inx });\r\n    inx.set_satoshis(BigInt(u.satoshis));\r\n    tx.add_input(inx);\r\n\r\n    const sig = tx.sign(\r\n      paymentPk,\r\n      SigHash.InputOutputs,\r\n      idx,\r\n      Script.from_asm_string(u.script),\r\n      BigInt(u.satoshis)\r\n    );\r\n\r\n    inx.set_unlocking_script(\r\n      Script.from_asm_string(\r\n        `${sig.to_hex()} ${paymentPk.to_public_key().to_hex()}`\r\n      )\r\n    );\r\n\r\n    tx.set_input(idx, inx);\r\n    idx++;\r\n  }\r\n  return tx;\r\n};\r\n\r\nexport { buildInscription, createOrdinal, sendOrdinal, sendUtxos };\r\n"],"names":["toHex","asciiStr","arr1","n","l","length","hex","Number","charCodeAt","toString","push","join","dotenv","config","buildInscription","destinationAddress","b64File","mediaType","metaData","ordAsm","undefined","ordHex","fireShardHex","Buffer","from","inscriptionAsm","get_locking_script","to_asm_string","app","type","key","value","Object","entries","Script","from_asm_string","reinscribeOrdinalTemplate","async","ordinal","reinscription","tx","Transaction","utxoIn","TxIn","txid","vout","script","add_input","inscriptionScript","P2PKHAddress","from_string","dataB64","contentType","satOut","TxOut","BigInt","add_output","createOrdinal","utxo","paymentPk","changeAddress","satPerByteFee","inscription","signer","changeScript","emptyOut","fee","Math","ceil","get_size","to_bytes","byteLength","change","satoshis","Error","changeOut","idKey","keyHost","sigma","Sigma","signedTx","sign","authToken","remoteSign","e","console","log","sig","SigHash","ALL","FORKID","set_unlocking_script","to_hex","to_public_key","set_input","sendOrdinal","paymentUtxo","ordPk","ordDestinationAddress","ordIn","s","InputOutput","sig2","sendUtxos","utxos","address","feeSats","inputValue","u","satsOut","satsIn","idx","inx","set_satoshis","InputOutputs"],"mappings":"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"}