{"version":3,"file":"index.modern.js","sources":["../src/utils/strings.ts","../src/index.ts"],"sourcesContent":["const toHex = (asciiStr: string) => {\r\n  var arr1: string[] = [];\r\n  for (var n = 0, l = asciiStr.length; n < l; n++) {\r\n    var hex = Number(asciiStr.charCodeAt(n)).toString(16);\r\n    arr1.push(hex);\r\n  }\r\n  return arr1.join(\"\");\r\n};\r\n\r\nconst toAscii = (hexStr: string) => {\r\n  var hex, i;\r\n\r\n  var result = \"\";\r\n  for (i = 0; i < hexStr.length; i++) {\r\n    hex = hexStr.charCodeAt(i).toString(16);\r\n    result += (\"000\" + hex).slice(-4);\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nexport { toHex, toAscii };\r\n","import {\r\n  P2PKHAddress,\r\n  PrivateKey,\r\n  Script,\r\n  SigHash,\r\n  Transaction,\r\n  TxIn,\r\n  TxOut,\r\n} from \"bsv-wasm\";\r\nimport { Buffer } from \"buffer\";\r\nimport * as dotenv from \"dotenv\";\r\nimport { AuthToken, Sigma } from \"sigma-protocol\";\r\nimport { toHex } from \"./utils/strings\";\r\n\r\ndotenv.config();\r\n\r\ntype Signer = {};\r\n\r\nexport interface LocalSigner extends Signer {\r\n  idKey: PrivateKey;\r\n}\r\n\r\nexport interface RemoteSigner extends Signer {\r\n  keyHost: string;\r\n  authToken?: AuthToken;\r\n}\r\n\r\nexport type Utxo = {\r\n  satoshis: number;\r\n  txid: string;\r\n  vout: number;\r\n  script: string;\r\n};\r\n\r\nexport type Inscription = {\r\n  dataB64: string;\r\n  contentType: string;\r\n};\r\n\r\nexport type MAP = {\r\n  app: string;\r\n  type: string;\r\n  [prop: string]: string | string[];\r\n};\r\n\r\nconst MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\r\n\r\nconst buildInscription = (\r\n  destinationAddress: P2PKHAddress,\r\n  b64File: string,\r\n  mediaType: string,\r\n  metaData?: MAP\r\n): Script => {\r\n  const ordHex = toHex(\"ord\");\r\n  const fsBuffer = Buffer.from(b64File, \"base64\");\r\n  const fireShardHex = fsBuffer.toString(\"hex\");\r\n  const fireShardMediaType = toHex(mediaType);\r\n\r\n  // Create ordinal output and inscription in a single output\r\n  let inscriptionAsm = `${destinationAddress\r\n    .get_locking_script()\r\n    .to_asm_string()} OP_0 OP_IF ${ordHex} OP_1 ${fireShardMediaType} OP_0 ${fireShardHex} OP_ENDIF`;\r\n\r\n  // MAP.app and MAP.type keys are required\r\n  if (metaData && metaData?.app && metaData?.type) {\r\n    const mapPrefixHex = toHex(MAP_PREFIX);\r\n    const mapCmdValue = toHex(\"SET\");\r\n    inscriptionAsm = `${inscriptionAsm} OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\r\n\r\n    for (const [key, value] of Object.entries(metaData)) {\r\n      if (key !== \"cmd\") {\r\n        inscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\r\n          value as string\r\n        )}`;\r\n      }\r\n    }\r\n  }\r\n\r\n  return Script.from_asm_string(inscriptionAsm);\r\n};\r\n\r\nconst createOrdinal = async (\r\n  utxo: Utxo,\r\n  destinationAddress: string,\r\n  paymentPk: PrivateKey,\r\n  changeAddress: string,\r\n  satPerByteFee: number,\r\n  inscription: Inscription,\r\n  metaData?: MAP,\r\n  signer?: LocalSigner | RemoteSigner\r\n): Promise<Transaction> => {\r\n  let tx = new Transaction(1, 0);\r\n\r\n  // Inputs\r\n  let utxoIn = new TxIn(\r\n    Buffer.from(utxo.txid, \"hex\"),\r\n    utxo.vout,\r\n    Script.from_asm_string(\"\")\r\n  );\r\n\r\n  tx.add_input(utxoIn);\r\n\r\n  // Outputs\r\n  const inscriptionScript = buildInscription(\r\n    P2PKHAddress.from_string(destinationAddress),\r\n    inscription.dataB64,\r\n    inscription.contentType,\r\n    metaData\r\n  );\r\n\r\n  let satOut = new TxOut(BigInt(1), inscriptionScript);\r\n  tx.add_output(satOut);\r\n\r\n  // add change\r\n  const changeaddr = P2PKHAddress.from_string(changeAddress);\r\n  const changeScript = changeaddr.get_locking_script();\r\n  let emptyOut = new TxOut(BigInt(1), changeScript);\r\n  const fee = Math.ceil(\r\n    satPerByteFee * (tx.get_size() + emptyOut.to_bytes().byteLength)\r\n  );\r\n  const change = utxo.satoshis - 1 - fee;\r\n  if (change < 0) throw new Error(\"Inadequate satoshis for fee\");\r\n  if (change > 0) {\r\n    let changeOut = new TxOut(BigInt(change), changeScript);\r\n    tx.add_output(changeOut);\r\n  }\r\n\r\n  // sign tx if idKey or remote signer like starfish/tokenpass\r\n  const idKey = (signer as LocalSigner)?.idKey;\r\n  const keyHost = (signer as RemoteSigner)?.keyHost;\r\n  if (idKey) {\r\n    // input txids are available so sigma signature\r\n    // can be final before signing the tx\r\n    const sigma = new Sigma(tx);\r\n    const { signedTx } = sigma.sign(idKey);\r\n    tx = signedTx;\r\n  } else if (keyHost) {\r\n    const authToken = (signer as RemoteSigner)?.authToken;\r\n    const sigma = new Sigma(tx);\r\n    try {\r\n      const { signedTx } = await sigma.remoteSign(keyHost, authToken);\r\n      tx = signedTx;\r\n    } catch (e) {\r\n      console.log(e);\r\n      throw new Error(\"Remote signing to \" + keyHost + \" failed\");\r\n    }\r\n  }\r\n\r\n  const sig = tx.sign(\r\n    paymentPk,\r\n    SigHash.ALL | SigHash.FORKID,\r\n    0,\r\n    Script.from_asm_string(utxo.script),\r\n    BigInt(utxo.satoshis)\r\n  );\r\n\r\n  utxoIn.set_unlocking_script(\r\n    Script.from_asm_string(\r\n      `${sig.to_hex()} ${paymentPk.to_public_key().to_hex()}`\r\n    )\r\n  );\r\n\r\n  tx.set_input(0, utxoIn);\r\n\r\n  return tx;\r\n};\r\n\r\nconst sendOrdinal = async (\r\n  paymentUtxo: Utxo,\r\n  ordinal: Utxo,\r\n  paymentPk: PrivateKey,\r\n  changeAddress: string,\r\n  satPerByteFee: number,\r\n  ordPk: PrivateKey,\r\n  ordDestinationAddress: string,\r\n  reinscription?: Inscription,\r\n  metaData?: MAP\r\n): Promise<Transaction> => {\r\n  let tx = new Transaction(1, 0);\r\n\r\n  let ordIn = new TxIn(\r\n    Buffer.from(ordinal.txid, \"hex\"),\r\n    ordinal.vout,\r\n    Script.from_asm_string(\"\")\r\n  );\r\n  tx.add_input(ordIn);\r\n\r\n  // Inputs\r\n  let utxoIn = new TxIn(\r\n    Buffer.from(paymentUtxo.txid, \"hex\"),\r\n    paymentUtxo.vout,\r\n    Script.from_asm_string(\"\")\r\n  );\r\n\r\n  tx.add_input(utxoIn);\r\n\r\n  let s: Script;\r\n  const destinationAddress = P2PKHAddress.from_string(ordDestinationAddress);\r\n  if (reinscription?.dataB64 && reinscription?.contentType) {\r\n    s = buildInscription(\r\n      destinationAddress,\r\n      reinscription.dataB64,\r\n      reinscription.contentType,\r\n      metaData\r\n    );\r\n  } else {\r\n    s = destinationAddress.get_locking_script();\r\n  }\r\n  let satOut = new TxOut(BigInt(1), s);\r\n  tx.add_output(satOut);\r\n\r\n  // add change\r\n  const changeaddr = P2PKHAddress.from_string(changeAddress);\r\n  const changeScript = changeaddr.get_locking_script();\r\n  let emptyOut = new TxOut(BigInt(1), changeScript);\r\n  const fee = Math.ceil(\r\n    satPerByteFee * (tx.get_size() + emptyOut.to_bytes().byteLength)\r\n  );\r\n  const change = paymentUtxo.satoshis - fee;\r\n  let changeOut = new TxOut(BigInt(change), changeScript);\r\n\r\n  tx.add_output(changeOut);\r\n\r\n  // sign ordinal\r\n  const sig = tx.sign(\r\n    ordPk,\r\n    SigHash.InputOutput,\r\n    0,\r\n    Script.from_asm_string(ordinal.script),\r\n    BigInt(ordinal.satoshis)\r\n  );\r\n\r\n  ordIn.set_unlocking_script(\r\n    Script.from_asm_string(`${sig.to_hex()} ${ordPk.to_public_key().to_hex()}`)\r\n  );\r\n\r\n  tx.set_input(0, ordIn);\r\n\r\n  // sign fee payment\r\n  const sig2 = tx.sign(\r\n    paymentPk,\r\n    SigHash.InputOutput,\r\n    1,\r\n    Script.from_asm_string(paymentUtxo.script),\r\n    BigInt(paymentUtxo.satoshis)\r\n  );\r\n\r\n  utxoIn.set_unlocking_script(\r\n    Script.from_asm_string(\r\n      `${sig2.to_hex()} ${paymentPk.to_public_key().to_hex()}`\r\n    )\r\n  );\r\n\r\n  tx.set_input(1, utxoIn);\r\n\r\n  return tx;\r\n};\r\n\r\n// sendUtxos sends p2pkh utxos to the given destinationAddress\r\nconst sendUtxos = async (\r\n  utxos: Utxo[],\r\n  paymentPk: PrivateKey,\r\n  address: P2PKHAddress,\r\n  feeSats: number\r\n): Promise<Transaction> => {\r\n  const tx = new Transaction(1, 0);\r\n\r\n  // Outputs\r\n  let inputValue = 0;\r\n  for (let u of utxos || []) {\r\n    inputValue += u.satoshis;\r\n  }\r\n  const satsIn = inputValue;\r\n  const satsOut = satsIn - feeSats;\r\n  console.log({ feeSats, satsIn, satsOut });\r\n  tx.add_output(new TxOut(BigInt(satsOut), address.get_locking_script()));\r\n\r\n  // build txins from our UTXOs\r\n  let idx = 0;\r\n  for (let u of utxos || []) {\r\n    console.log({ u });\r\n    const inx = new TxIn(\r\n      Buffer.from(u.txid, \"hex\"),\r\n      u.vout,\r\n      Script.from_asm_string(\"\")\r\n    );\r\n    console.log({ inx });\r\n    inx.set_satoshis(BigInt(u.satoshis));\r\n    tx.add_input(inx);\r\n\r\n    const sig = tx.sign(\r\n      paymentPk,\r\n      SigHash.InputOutputs,\r\n      idx,\r\n      Script.from_asm_string(u.script),\r\n      BigInt(u.satoshis)\r\n    );\r\n\r\n    inx.set_unlocking_script(\r\n      Script.from_asm_string(\r\n        `${sig.to_hex()} ${paymentPk.to_public_key().to_hex()}`\r\n      )\r\n    );\r\n\r\n    tx.set_input(idx, inx);\r\n    idx++;\r\n  }\r\n  return tx;\r\n};\r\n\r\nexport { buildInscription, createOrdinal, sendOrdinal, sendUtxos };\r\n"],"names":["toHex","asciiStr","arr1","n","l","length","hex","Number","charCodeAt","toString","push","join","dotenv","config","buildInscription","destinationAddress","b64File","mediaType","metaData","ordHex","fireShardHex","Buffer","from","fireShardMediaType","inscriptionAsm","get_locking_script","to_asm_string","app","type","key","value","Object","entries","Script","from_asm_string","createOrdinal","async","utxo","paymentPk","changeAddress","satPerByteFee","inscription","signer","tx","Transaction","utxoIn","TxIn","txid","vout","add_input","inscriptionScript","P2PKHAddress","from_string","dataB64","contentType","satOut","TxOut","BigInt","add_output","changeScript","emptyOut","fee","Math","ceil","get_size","to_bytes","byteLength","change","satoshis","Error","changeOut","idKey","keyHost","sigma","Sigma","signedTx","sign","authToken","remoteSign","e","console","log","sig","SigHash","ALL","FORKID","script","set_unlocking_script","to_hex","to_public_key","set_input","sendOrdinal","paymentUtxo","ordinal","ordPk","ordDestinationAddress","reinscription","ordIn","s","InputOutput","sig2","sendUtxos","utxos","address","feeSats","inputValue","u","satsOut","satsIn","idx","inx","set_satoshis","InputOutputs"],"mappings":"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"}