{"version":3,"file":"index.modern.js","sources":["../src/utils/strings.ts","../src/constants.ts","../src/templates/ordP2pkh.ts","../src/types.ts","../src/utils/utxo.ts","../src/signData.ts","../src/utils/subtypeData.ts","../src/createOrdinals.ts","../src/sendOrdinals.ts","../src/sendUtxos.ts","../src/transferOrdinals.ts","../src/validate.ts","../src/templates/ordLock.ts","../src/createListings.ts","../src/cancelListings.ts","../src/utils/paymail.ts","../src/purchaseOrdListing.ts","../src/utils/icon.ts","../src/deployBsv21.ts","../src/burnOrdinals.ts"],"sourcesContent":["/**\n * Converts a string to its hexadecimal representation\n *\n * @param {string} utf8Str - The string to convert\n * @returns {string} The hexadecimal representation of the input string\n */\nconst toHex = (utf8Str: string): string => {\n  return Buffer.from(utf8Str).toString(\"hex\");\n};\n\nexport { toHex };\n","export const MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\nexport const DEFAULT_SAT_PER_KB = 10;\nexport const API_HOST = \"https://ordinals.gorillapool.io/api\";","import {\n\tLockingScript,\n\tP2PKH,\n\ttype Script,\n} from \"@bsv/sdk\";\nimport type { Inscription, MAP } from \"../types\";\nimport { toHex } from \"../utils/strings\";\nimport { MAP_PREFIX } from \"../constants\";\n\n/**\n * OrdP2PKH (1Sat Ordinal + Pay To Public Key Hash) class implementing ScriptTemplate.\n *\n * This class provides methods to create an Ordinal with Pay To Public Key Hash locking and unlocking scripts. \n * It extends the standard P2PKH script template and provides a custom lock method.\n */\nexport default class OrdP2PKH extends P2PKH {\n\t/**\n\t * Creates a 1Sat Ordinal + P2PKH locking script for a given address string\n\t *\n\t * @param {string} address - An destination address for the Ordinal.\n\t * @param {Object} [inscription] - Base64 encoded file data and Content type of the file.\n\t * @param {MAP} [metaData] - (optional) MAP Metadata to be included in OP_RETURN.\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\t// unlock method inherits from p2pkh\n\tlock(\n\t\taddress: string,\n    inscription?: Inscription,\n\t\tmetaData?: MAP | undefined,\n\t): Script {\n\t\tlet ordAsm = \"\";\n\t\t// This can be omitted for reinscriptions that just update metadata\n\t\tif (inscription?.dataB64 !== undefined && inscription?.contentType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(inscription.dataB64, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(inscription.contentType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`;\n\t\t}\n\n\t\t// Create ordinal output and inscription in a single output\n\t\tconst lockingScript = new P2PKH().lock(address);\n\t\tlet inscriptionAsm = `${ordAsm ? `${ordAsm} ` : \"\"}${lockingScript.toASM()}`;\n\n\t\t// MAP.app and MAP.type keys are required\n\t\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t\t}\n\n\t\tif (metaData?.app && metaData?.type) {\n\t\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\t\tconst mapCmdValue = toHex(\"SET\");\n\t\t\tinscriptionAsm = `${inscriptionAsm ? `${inscriptionAsm} `: \"\"}OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\t\tif (key !== \"cmd\") {\n\t\t\t\t\tinscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\n\t\t\t\t\t\tvalue as string,\n\t\t\t\t\t)}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn LockingScript.fromASM(inscriptionAsm);\n\t}\n}\n","import type { PrivateKey, Transaction } from \"@bsv/sdk\";\nimport type { AuthToken } from \"sigma-protocol\";\n\n// biome-ignore lint/complexity/noBannedTypes: Reserved for future use\ntype Signer = {};\n\nexport interface LocalSigner extends Signer {\n  idKey: PrivateKey;\n}\n\nexport interface RemoteSigner extends Signer {\n  keyHost: string;\n  authToken?: AuthToken;\n}\n\nexport type Destination = {\n  address: string;\n  inscription?: Inscription;\n};\n\n/**\n * @typedef {Object} Listing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n * @property {Utxo} listingUtxo - Utxo of the listing\n */\nexport type NewListing = {\n  payAddress: string;\n  price: number;\n  ordAddress: string;\n  listingUtxo: Utxo;\n}\n\n/**\n * @typedef {Object} ExistingListing\n * @property {string} payout - Payment output script base64 encoded\n * @property {Utxo} listingUtxo - Utxo of the listing\n */\nexport type ExistingListing = {\n  payout: string;\n  listingUtxo: Utxo;\n}\n\n/**\n * @typedef {Object} NewTokenListing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n * @property {number} amt - Number of tokens as a number. Not adjusted for decimals (library will add zeros according to dec value).\n */\nexport type NewTokenListing = {\n  payAddress: string;\n  price: number;\n  amt: number;\n  ordAddress: string;\n}\n\n/**\n * @typedef {Object} Distribution\n * @property {string} address - Destination address. Must be a Ordinals address (BSV address for recieving 1Sat ordinals tokens).\n * @property {number} amt - Number of tokens as a string, considering decimals. Not display format. Ex. 100000000 for 1 token with 8 decimal places.\n */\nexport type Distribution = {\n  address: string;\n  amt: number;\n};\n\n/**\n * @typedef {Object} Utxo\n * @property {number} satoshis - Amount in satoshis\n * @property {string} txid - Transaction id\n * @property {number} vout - Output index\n * @property {string} script - Base64 encoded locking script\n */\nexport type Utxo = {\n  satoshis: number;\n  txid: string;\n  vout: number;\n  script: string;\n};\n\n/**\n * @typedef {Object} NftUtxo\n * @property {string} collectionId - Optional. Collection id of the NFT\n * @property {string} contentType - Media type of the NFT\n * @property {string} creatorBapId - Optional. Creator BAP id of the NFT\n * @property {string} origin - Origin address of the NFT\n * @property {number} satoshis - Always 1\n */\nexport interface NftUtxo extends Utxo {\n  collectionId?: string;\n  contentType: string;\n  creatorBapId?: string;\n  origin: string;\n  satoshis: 1;\n}\n\n/**\n * @typedef {Object} TokenUtxo\n * @property {string} amt - Number of tokens as a string, adjusted for decimals. Ex. 100000000 for 1 token with 8 decimal places.\n * @property {string} id - Token id -  either tick or id depending on protocol\n * @property {string} satoshis - Always 1\n * @property {string} [payout] - Optional. Payment output script base64 encoded\n * @property {number} [price] - Optional. Listing price in satoshis\n * @property {boolean} [isListing] - Optional. True if the token is a listing\n */\nexport interface TokenUtxo extends Utxo {\n  amt: string;\n  id: string;\n  satoshis: 1;\n  payout?: string;\n  price?: number;\n  isListing?: boolean;\n}\n\nexport type Inscription = {\n  dataB64: string;\n  contentType: string;\n};\n\nexport type ImageContentType =\n  | \"image/png\"\n  | \"image/jpeg\"\n  | \"image/gif\"\n  | \"image/svg+xml\"\n  | \"image/webp\";\n\n/**\n * @typedef {Object} IconInscription\n * @property {string} dataB64 - Base64 encoded image data. Must be a square image.\n * @property {ImageContentType} contentType - Media type of the image\n */\nexport type IconInscription = {\n  dataB64: string;\n  contentType: ImageContentType;\n};\n\nexport type Payment = {\n  to: string;\n  amount: number;\n};\n\nexport type TokenInscription = {\n  p: \"bsv-20\";\n  amt: string;\n  op: \"transfer\" | \"mint\" | \"deploy+mint\" | \"burn\";\n  dec?: string;\n};\n\nexport interface MintTokenInscription extends TokenInscription {\n  op: \"mint\";\n}\n\nexport interface DeployMintTokenInscription extends TokenInscription {\n  op: \"deploy+mint\";\n  sym: string;\n  icon: string;\n}\n\nexport interface TransferTokenInscription extends TokenInscription {\n  p: \"bsv-20\";\n  amt: string;\n  op: \"transfer\" | \"burn\";\n}\n\nexport interface TransferBSV20Inscription extends TransferTokenInscription {\n  tick: string;\n}\n\nexport interface TransferBSV21Inscription extends TransferTokenInscription {\n  id: string;\n}\n\nexport enum TokenType {\n  BSV20 = \"bsv20\",\n  BSV21 = \"bsv21\",\n}\n\nexport type BaseResult = {\n  tx: Transaction;\n  spentOutpoints: string[];\n};\n\nexport interface ChangeResult extends BaseResult {\n  payChange?: Utxo;\n};\n\n/**\n * MAP (Magic Attribute Protocol) metadata object with stringified values for writing to the blockchain\n * @typedef {Object} MAP\n * @property {string} app - Application identifier\n * @property {string} type - Metadata type\n * @property {string} [prop] - Optional. Additional metadata properties\n */\nexport type MAP = {\n  app: string;\n  type: string;\n  [prop: string]: string;\n};\n\nexport type PreMAP = {\n  app: string;\n  type: string;\n  [prop: string]: unknown;\n  royalties?: Royalty[];\n  subTypeData?: CollectionSubTypeData | CollectionItemSubTypeData;\n};\n\nexport type CreateOrdinalsConfig = {\n  utxos: Utxo[];\n  destinations: Destination[];\n  paymentPk: PrivateKey;\n  changeAddress?: string;\n  satsPerKb?: number;\n  metaData?: PreMAP;\n  signer?: LocalSigner | RemoteSigner;\n  additionalPayments?: Payment[];\n};\n\nexport enum RoytaltyType {\n  Paymail = \"paymail\",\n  Address = \"address\",\n  Script = \"script\",\n}\n\n/**\n * Royalty object\n * @typedef {Object} Royalty\n * @property {RoytaltyType} type - Royalty type, string, one of \"paymail\", \"address\", \"script\"\n * @property {string} destination - Royalty destination\n * @property {string} percentage - Royalty percentage as a string float 0-1 (0.01 = 1%)\n */\nexport type Royalty = {\n  type: RoytaltyType;\n  destination: string;\n  percentage: string; // string float 0-1\n};\n\nexport interface CreateOrdinalsMetadata extends PreMAP {\n  type: \"ord\",\n  name: string,\n  previewUrl?: string,\n}\n\nexport interface CreateOrdinalsCollectionMetadata extends CreateOrdinalsMetadata {\n  subType: \"collection\",\n  subTypeData: CollectionSubTypeData, // JSON stringified CollectionSubTypeData\n  royalties?: Royalty[],\n};\n\nexport interface CreateOrdinalsCollectionItemMetadata extends CreateOrdinalsMetadata {\n  subType: \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n};\n\n/**\n * Configuration object for creating an ordinals collection\n * @typedef {Object} CreateOrdinalsCollectionConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collection\"\n * @property metaData.name - Collection name\n * @property metaData.subTypeData - JSON stringified CollectionSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionConfig extends CreateOrdinalsConfig {\n  metaData: CreateOrdinalsCollectionMetadata\n}\n\nexport type CollectionTraits = {\n  [trait: string]: CollectionTrait;\n};\n\nexport type CollectionTrait = {\n  values: string[];\n  occurancePercentages: string[];\n};\n\nexport type Rarity = {\n  [key: string]: string;\n}\n\nexport type RarityLabels = Rarity[]\nexport interface CollectionSubTypeData {\n  description: string;\n  quantity: number;\n  rarityLabels: RarityLabels;\n  traits: CollectionTraits;\n}\n\nexport interface CreateOrdinalsCollectionItemMetadata extends PreMAP {\n  type: \"ord\",\n  name: string,\n  subType: \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n  royalties?: Royalty[],\n  previewUrl?: string,\n}\n\n/**\n * Configuration object for creating an ordinals collection item\n * @typedef {Object} CreateOrdinalsCollectionItemConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection item\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collectionItem\"\n * @property metaData.name - Collection item name\n * @property metaData.subTypeData - JSON stringified CollectionItemSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionItemConfig extends CreateOrdinalsConfig {\n  metaData: CreateOrdinalsCollectionItemMetadata\n}\n\n/**\n * Subtype data for an ordinals collection item\n * @typedef {Object} CollectionItemSubTypeData\n * @property {string} collectionId - Collection id\n * @property {number} mintNumner - Mint number\n * @property {number} rank - Rank\n * @property {string} rarityLabel - Rarity label\n * @property {string} traits - traits object\n * @property {string} attachments - array of attachment objects\n */\nexport interface CollectionItemSubTypeData {\n  collectionId: string;\n  mintNumber?: number;\n  rank?: number;\n  rarityLabel?: RarityLabels;\n  traits?: CollectionItemTrait[];\n  attachments?: CollectionItemAttachment[];\n}\n\nexport type CollectionItemTrait = {\n  name: string;\n  value: string;\n  rarityLabel?: string;\n  occurancePercentrage?: string;\n};\n\nexport type CollectionItemAttachment = {\n  name: string;\n  description?: string;\n  \"content-type\": string;\n  url: string;\n}\n\nexport interface BurnMAP extends MAP {\n  type: \"ord\";\n  op: \"burn\";\n}\n\nexport type BurnOrdinalsConfig = {\n  ordPk: PrivateKey;\n  ordinals: Utxo[];\n  metaData?: BurnMAP;\n}\n\nexport type SendOrdinalsConfig = {\n  paymentUtxos: Utxo[];\n  ordinals: Utxo[];\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  destinations: Destination[];\n  changeAddress?: string;\n  satsPerKb?: number;\n  metaData?: PreMAP;\n  signer?: LocalSigner | RemoteSigner;\n  additionalPayments?: Payment[];\n  enforceUniformSend?: boolean;\n}\n\nexport type DeployBsv21TokenConfig = {\n  symbol: string;\n  decimals?: number;\n  icon: string | IconInscription;\n  utxos: Utxo[];\n  initialDistribution: Distribution;\n  paymentPk: PrivateKey;\n  destinationAddress: string;\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[];\n};\n\nexport type SendUtxosConfig = {\n  utxos: Utxo[];\n  paymentPk: PrivateKey;\n  payments: Payment[];\n  satsPerKb?: number;\n  changeAddress?: string;\n  metaData?: MAP;\n};\n\nexport interface TokenChangeResult extends ChangeResult {\n  tokenChange?: TokenUtxo;\n}\n\nexport type TransferOrdTokensConfig = {\n  protocol: TokenType;\n  tokenID: string;\n  decimals: number;\n  utxos: Utxo[];\n  inputTokens: TokenUtxo[];\n  distributions: Distribution[];\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  changeAddress?: string;\n  tokenChangeAddress?: string;\n  satsPerKb?: number;\n  metaData?: PreMAP;\n  signer?: LocalSigner | RemoteSigner;\n  additionalPayments?: Payment[];\n  burn?: boolean;\n}\n\nexport type CreateOrdListingsConfig = {\n  utxos: Utxo[];\n  listings: NewListing[];\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey,\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[];\n}\n\nexport type PurchaseOrdListingConfig = {\n  utxos: Utxo[];\n  paymentPk: PrivateKey;\n  listing: ExistingListing;\n  ordAddress: string;\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[],\n  royalties?: Royalty[],\n  metaData?: MAP,\n}\n\nexport type PurchaseOrdTokenListingConfig = {\n  protocol: TokenType;\n  tokenID: string;\n  utxos: Utxo[];\n  paymentPk: PrivateKey;\n  listingUtxo: TokenUtxo;\n  ordAddress: string;\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[],\n  metaData?: MAP,\n}\n\nexport type CancelOrdListingsConfig = {\n  utxos: Utxo[],\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  listingUtxos: Utxo[];\n  additionalPayments?: Payment[];\n  changeAddress?: string;\n  satsPerKb?: number;\n}\n\nexport interface CancelOrdTokenListingsConfig extends CancelOrdListingsConfig {\n  utxos: Utxo[],\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  listingUtxos: TokenUtxo[];\n  additionalPayments: Payment[];\n  changeAddress?: string;\n  satsPerKb?: number;\n  protocol: TokenType,\n  tokenID: string;\n  ordAddress?: string;\n}\n\n/**\n * Configuration object for creating a token listing\n * @typedef {Object} CreateOrdTokenListingsConfig\n * @property {Utxo[]} utxos - Array of payment Utxos\n * @property {TokenUtxo[]} inputTokens - Array of TokenUtxos to be listed\n * @property {NewTokenListing[]} listings - Array of NewTokenListings\n * @property {PrivateKey} paymentPk - Private key of the payment address\n * @property {PrivateKey} ordPk - Private key of the ord address\n * @property {string} tokenChangeAddress - Address to send the token change\n * @property {number} [satsPerKb] - Optional. Satoshis per kilobyte\n * @property {Payment[]} [additionalPayments] - Optional. Array of additional payments\n * @property {TokenType} protocol - Token protocol\n * @property {string} tokenID - Token id\n * @property {number} decimals - Number of decimal places for this token.\n */\nexport interface CreateOrdTokenListingsConfig {\n  utxos: Utxo[];\n  listings: NewTokenListing[];\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey,\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[];\n  protocol: TokenType;\n  tokenID: string;\n  decimals: number;\n  inputTokens: TokenUtxo[];\n  tokenChangeAddress: string;\n}\n\nexport const MAX_TOKEN_SUPPLY = 2n ** 64n - 1n;","import {\n\ttype Transaction,\n\ttype UnlockingScript,\n\tfromUtxo,\n\ttype TransactionInput,\n\tUtils,\n\tP2PKH,\n  Script,\n} from \"@bsv/sdk\";\nimport { type NftUtxo, TokenType, type TokenUtxo, type Utxo } from \"../types\";\nimport { API_HOST } from \"../constants\";\n\nconst { fromBase58Check } = Utils;\n\n/**\n * Converts a Utxo object with a base64 encoded script to a Utxo object with a hex encoded script\n * @param {Utxo} utxo - Utxo object with base64 encoded script\n * @param {Object} unlockScriptTemplate - Object with sign and estimateLength functions\n * @returns {TransactionInput} Utxo object with hex encoded script\n */\nexport const inputFromB64Utxo = (\n\tutxo: Utxo,\n\tunlockScriptTemplate: {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>;\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>;\n\t},\n): TransactionInput => {\n\tconst input = fromUtxo(\n\t\t{\n\t\t\t...utxo,\n\t\t\tscript: Buffer.from(utxo.script, \"base64\").toString(\"hex\"),\n\t\t},\n\t\tunlockScriptTemplate,\n\t);\n\treturn input;\n};\n\n/**\n * Fetches pay utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<Utxo[]>} Array of pay utxos\n */\nexport const fetchPayUtxos = async (address: string, scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\"): Promise<Utxo[]> => {\n\tconst payUrl = `${API_HOST}/txos/address/${address}/unspent?bsv20=false`;\n\tconsole.log({ payUrl });\n\tconst payRes = await fetch(payUrl);\n\tif (!payRes.ok) {\n\t\tthrow new Error(\"Error fetching pay utxos\");\n\t}\n\tlet payUtxos = await payRes.json();\n\t// exclude all 1 satoshi utxos\n\tpayUtxos = payUtxos.filter((u: Utxo) => u.satoshis !== 1 && !isLock(u));\n\n\t// Get pubkey hash from address\n\tconst pubKeyHash = fromBase58Check(address);\n\tconst p2pkhScript = new P2PKH().lock(pubKeyHash.data);\n\tpayUtxos = payUtxos.map((utxo: Partial<Utxo>) => ({\n\t\ttxid: utxo.txid,\n\t\tvout: utxo.vout,\n\t\tsatoshis: utxo.satoshis,\n\t\tscript: scriptEncoding === \"hex\" || scriptEncoding === \"base64\" ? Buffer.from(p2pkhScript.toBinary()).toString(scriptEncoding) : p2pkhScript.toASM(),\n\t}));\n\treturn payUtxos as Utxo[];\n};\n\n/**\n * Fetches NFT utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @param {string} [collectionId] - Optional. Collection id (collection insciprtion origin)\n * @param {number} [limit=10] - Optional. Number of utxos to fetch. Default is 10\n * @param {number} [offset=0] - Optional. Offset for fetching utxos. Default is 0\n * @param {string} [scriptEncoding=\"base64\"] - Optional. Encoding for the script. Default is base64. Options are hex, base64, or asm.\n * @returns {Promise<Utxo[]>} Array of NFT utxos\n */\nexport const fetchNftUtxos = async (\n\taddress: string,\n\tcollectionId?: string,\n\tlimit = 10,\n\toffset = 0,\n  scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\",\n): Promise<NftUtxo[]> => {\n\tlet url = `${API_HOST}/txos/address/${address}/unspent?limit=${limit}&offset=${offset}&`;\n\n\tif (collectionId) {\n\t\tconst query = {\n\t\t\tmap: {\n\t\t\t\tsubTypeData: { collectionId },\n\t\t\t},\n\t\t};\n\t\tconst b64Query = Buffer.from(JSON.stringify(query)).toString(\"base64\");\n\t\turl += `q=${b64Query}`;\n\t}\n\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching NFT utxos for ${address}`);\n\t}\n\n\t// Returns a BSV20Txo but we only need a few fields\n\tlet nftUtxos = await res.json();\n\n\t// Only include 1 satoshi outputs, non listings\n\tnftUtxos = nftUtxos.filter(\n\t\t(u: {\n\t\t\tsatoshis: number;\n\t\t\tdata: { list: { price: number; payout: string } | undefined } | null;\n\t\t}) => u.satoshis === 1 && !u.data?.list,\n\t);\n\n\tconst outpoints = nftUtxos.map(\n\t\t(utxo: { txid: string; vout: number }) => `${utxo.txid}_${utxo.vout}`,\n\t);\n\t// Fetch the scripts up to the limit\n\tconst nftRes = await fetch(`${API_HOST}/txos/outpoints?script=true`, {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t\tbody: JSON.stringify([...outpoints]),\n\t});\n\n\tif (!nftRes.ok) {\n\t\tthrow new Error(`Error fetching NFT scripts for ${address}`);\n\t}\n\n\tconst nfts = (await nftRes.json() || [])\n\n\tnftUtxos = nfts.map(\n\t\t(utxo: {\n\t\t\torigin: { outpoint: string };\n\t\t\tscript: string;\n\t\t\tvout: number;\n\t\t\ttxid: string;\n\t\t}) => {\n      let script = utxo.script;\n      if (scriptEncoding === \"hex\") {\n        script = Buffer.from(script, \"base64\").toString(\"hex\");\n      } else if (scriptEncoding === \"asm\") {\n        script = Script.fromHex(Buffer.from(script, \"base64\").toString(\"hex\")).toASM();\n      }\n\t\t\tconst nftUtxo = {\n\t\t\t\torigin: utxo.origin.outpoint,\n\t\t\t\tscript,\n\t\t\t\tvout: utxo.vout,\n\t\t\t\ttxid: utxo.txid,\n\t\t\t\tsatoshis: 1,\n\t\t\t} as NftUtxo;\n\t\t\tif (collectionId) {\n\t\t\t\tnftUtxo.collectionId = collectionId;\n\t\t\t}\n\t\t\treturn nftUtxo;\n\t\t},\n\t);\n\n\treturn nftUtxos as NftUtxo[];\n};\n\n/**\n * Fetches token utxos from the API\n * @param {TokenType} protocol - Token protocol. Either BSV20 or BSV21\n * @param {string} tokenId - Token id. Ticker for BSV20 and id (mint+deploy inscription origin) for BSV21\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<TokenUtxo[]>} Array of token utxos\n */\nexport const fetchTokenUtxos = async (\n\tprotocol: TokenType,\n\ttokenId: string,\n\taddress: string,\n): Promise<TokenUtxo[]> => {\n\tconst url = `${API_HOST}/bsv20/${address}/${protocol === TokenType.BSV20 ? \"tick\" : \"id\"}/${tokenId}?bsv20=true&listing=false`;\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching ${protocol} utxos`);\n\t}\n\n\t// returns a BSV20Txo but we only need a few fields\n\tlet tokenUtxos = await res.json();\n\n\ttokenUtxos = tokenUtxos.map((utxo: Partial<TokenUtxo>) => ({\n\t\tamt: utxo.amt,\n\t\tscript: utxo.script,\n\t\tvout: utxo.vout,\n\t\ttxid: utxo.txid,\n\t\tid: tokenId,\n\t\tsatoshis: 1,\n\t}));\n\n\treturn tokenUtxos as TokenUtxo[];\n};\n\nconst isLock = (utxo: Utxo) => {\n  return !!(utxo as unknown as { lock: { address: string, until: number } }).lock;\n}","import type { Transaction } from \"@bsv/sdk\";\nimport { Sigma } from \"sigma-protocol\";\nimport type { LocalSigner, RemoteSigner } from \"./types\";\n\n/**\n * Signs data in the transaction with Sigma protocol\n * @param {Transaction} tx - Transaction to sign\n * @param {LocalSigner | RemoteSigner} signer - Local or remote signer (used for data signature)\n * @returns {Transaction} Transaction with signed data\n */\nexport const signData = async (\n\ttx: Transaction,\n\tsigner: LocalSigner | RemoteSigner,\n): Promise<Transaction> => {\n\t// Sign tx if idKey or remote signer like starfish/tokenpass\n\tconst idKey = (signer as LocalSigner)?.idKey;\n\tconst keyHost = (signer as RemoteSigner)?.keyHost;\n\n\tif (idKey) {\n\t\tconst sigma = new Sigma(tx);\n\t\tconst { signedTx } = sigma.sign(idKey);\n\t\treturn signedTx;\n\t}\n\tif (keyHost) {\n\t\tconst authToken = (signer as RemoteSigner)?.authToken;\n\t\tconst sigma = new Sigma(tx);\n\t\ttry {\n\t\t\tconst { signedTx } = await sigma.remoteSign(keyHost, authToken);\n\t\t\treturn signedTx;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthrow new Error(`Remote signing to ${keyHost} failed`);\n\t\t}\n\t}\n\tthrow new Error(\"Signer must be a LocalSigner or RemoteSigner\");\n};\n","import type { MAP, PreMAP } from \"../types\";\n\nconst stringifyMetaData = (metaData?: PreMAP): MAP | undefined => {\n  if (!metaData) return undefined;\n\tconst result: MAP = {\n\t\tapp: metaData.app,\n\t\ttype: metaData.type,\n\t};\n\n\tfor (const [key, value] of Object.entries(metaData)) {\n\t\tif (value !== undefined) {\n\t\t\tif (typeof value === \"string\") {\n\t\t\t\tresult[key] = value;\n\t\t\t} else if (Array.isArray(value) || typeof value === \"object\") {\n\t\t\t\tresult[key] = JSON.stringify(value);\n\t\t\t} else {\n\t\t\t\tresult[key] = String(value);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\nexport default stringifyMetaData;\n","import { Transaction, SatoshisPerKilobyte, P2PKH, Script, Utils } from \"@bsv/sdk\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n\tUtxo,\n\tCreateOrdinalsConfig,\n\tCreateOrdinalsCollectionConfig,\n\tCreateOrdinalsCollectionItemConfig,\n  ChangeResult,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Creates a transaction with inscription outputs\n * @param {CreateOrdinalsConfig | CreateOrdinalsCollectionConfig | CreateOrdinalsCollectionItemConfig} config - Configuration object for creating ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {string} config.changeAddress - Optional. Address to send change to. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Local or remote signer (used for data signature)\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<ChangeResult>} Transaction with inscription outputs\n */\nexport const createOrdinals = async (\n\tconfig:\n\t\t| CreateOrdinalsConfig\n\t\t| CreateOrdinalsCollectionConfig\n\t\t| CreateOrdinalsCollectionItemConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tutxos,\n\t\tdestinations,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t} = config;\n\t\n\t// Warn if creating many inscriptions at once\n\tif (destinations.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Outputs\n\t// Add inscription outputs\n\tfor (const destination of destinations) {\n\t\tif (!destination.inscription) {\n\t\t\tthrow new Error(\"Inscription is required for all destinations\");\n\t\t}\n\n\t\t// remove any undefined fields from metadata\n\t\tif (metaData) {\n\t\t\tfor(const key of Object.keys(metaData)) {\n\t\t\t\tif (metaData[key] === undefined) {\n\t\t\t\t\tdelete metaData[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription,\n\t\t\t\tstringifyMetaData(metaData),\n\t\t\t),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\tlet payChange: Utxo | undefined;\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\n\tif(signer) {\n\t\tconst utxo = utxos.pop() as Utxo\n\t\ttx.addInput(inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t)));\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\ttx = await signData(tx, signer);\n\t}\n\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to create ordinals. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\tScript,\n\ttype TransactionOutput,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type { SendOrdinalsConfig, Utxo, ChangeResult } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Sends ordinals to the given destinations\n * @param {SendOrdinalsConfig} config - Configuration object for sending ordinals\n * @param {Utxo[]} config.paymentUtxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.ordinals - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {string} [config.changeAddress] - Optional. Address to send change to, if any. If not provided, defaults to paymentPk address\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} [config.signer] - Optional. Signer object to sign the transaction\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to include in the transaction\n * @param {boolean} [config.enforceUniformSend] - Optional. Default: true. Enforce that the number of destinations matches the number of ordinals being sent. Sending ordinals requires a 1:1 mapping of destinations to ordinals. This is only used for sub-protocols like BSV21 that manage tokens without sending the inscriptions directly.\n * @returns {Promise<ChangeResult>} Transaction, spent outpoints, and change utxo\n */\nexport const sendOrdinals = async (\n\tconfig: SendOrdinalsConfig,\n): Promise<ChangeResult> => {\n\tif (!config.satsPerKb) {\n\t\tconfig.satsPerKb = DEFAULT_SAT_PER_KB;\n\t}\n\tif (!config.additionalPayments) {\n\t\tconfig.additionalPayments = [];\n\t}\n\tif (config.enforceUniformSend === undefined) {\n\t\tconfig.enforceUniformSend = true;\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(config.satsPerKb);\n\tlet tx = new Transaction();\n\tconst spentOutpoints: string[] = [];\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of config.ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(\n\t\t\tordUtxo,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tconfig.ordPk, \n\t\t\t\t\"all\",\n\t\t\t\ttrue, \n\t\t\t\tordUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(ordUtxo.script, 'base64'))\n\t\t\t),\n\t\t);\n\t\tspentOutpoints.push(`${ordUtxo.txid}_${ordUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// check that ordinals coming in matches ordinals going out if supplied\n\tif (\n\t\tconfig.enforceUniformSend &&\n\t\tconfig.destinations.length !== config.ordinals.length\n\t) {\n\t\tthrow new Error(\n\t\t\t\"Number of destinations must match number of ordinals being sent\",\n\t\t);\n\t}\n\n\t// Add ordinal outputs\n\tfor (const destination of config.destinations) {\n\t\tlet s: Script;\n\t\tif (\n\t\t\tdestination.inscription?.dataB64 &&\n\t\t\tdestination.inscription?.contentType\n\t\t) {\n\t\t\ts = new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription,\n\t\t\t\tstringifyMetaData(config.metaData),\n\t\t\t);\n\t\t} else {\n\t\t\ts = new P2PKH().lock(destination.address);\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: s,\n\t\t});\n\t}\n\n  \n\t// Add additional payments if any\n\tfor (const p of config.additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n  // add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = config.changeAddress || config.paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of config.paymentUtxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tconfig.paymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\tspentOutpoints.push(`${utxo.txid}_${utxo.vout}`);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (totalSatsIn < totalSatsOut) {\n\t\tthrow new Error(\"Not enough ordinals to send\");\n\t}\n\n\tif (config.signer) {\n\t\ttx = await signData(tx, config.signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChange,\n\t};\n};\n","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype TransactionOutput,\n\tUtils,\n\tScript,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type { ChangeResult, SendUtxosConfig, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\n\n/**\n * Sends utxos to the given destination\n * @param {SendUtxosConfig} config - Configuration object for sending utxos\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {Payment[]} config.payments - Array of payments with addresses and amounts\n * @param {number} [config.satsPerKb] - (Optional) Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {string} [config.changeAddress] - (Optional) Address to send change to. If not provided, defaults to paymentPk address\n * @param {string} [config.metaData] - (Optional) Metadata to include in OP_RETURN of the payment output\n * @returns {Promise<ChangeResult>} Transaction with utxo outputs\n */\nexport const sendUtxos = async (\n\tconfig: SendUtxosConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tpayments,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tchangeAddress = paymentPk.toAddress().toString(),\n    metaData,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\t// Outputs\n\tfor (const payment of payments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new OrdP2PKH().lock(payment.to, undefined, metaData),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + (out.satoshis || 0),\n\t\t0,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\ttx.addInput(input);\n\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + fee) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + fee) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to send. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChange: Utxo | undefined;\n\tif (totalSatsIn > totalSatsOut + fee) {\n\t\t// Change\n\t\tconst changeScript = new P2PKH().lock(changeAddress);\n\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t} else if (totalSatsIn < totalSatsOut + fee) {\n\t\tconsole.log(\"No change needed\");\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\t\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import { P2PKH, SatoshisPerKilobyte, Script, Transaction, Utils } from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport {\n  TokenType,\n  type TokenUtxo,\n  type TransferBSV20Inscription,\n  type TransferBSV21Inscription,\n  type TransferOrdTokensConfig,\n  type TokenChangeResult,\n  type TransferTokenInscription,\n  type Utxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Transfer tokens to a destination\n * @param {TransferOrdTokensConfig} config - Configuration object for transferring tokens\n * @param {TokenType} config.protocol - Token protocol. Must be TokenType.BSV20 or TokenType.BSV21\n * @param {string} config.tokenID - Token ID. Either the tick or id value depending on the protocol\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {TokenUtxo[]} config.inputTokens - Token utxos to spend\n * @param {Distribution[]} config.distributions - Array of destinations with addresses and amounts\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {decimals} config.decimals - Number of decimal places for the token\n * @param {string} [config.changeAddress] - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {string} [config.tokenChangeAddress] - Optional. Address to send token change to, if any. If not provided, defaults to ordPk address\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} [config.signer] - Optional. Signer object to sign the transaction\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to include in the transaction\n * @param {burn} [config.burn] - Optional. Set to true to burn the tokens.\n * @returns {Promise<TokenChangeResult>} Transaction with token transfer outputs\n */\nexport const transferOrdTokens = async (config: TransferOrdTokensConfig): Promise<TokenChangeResult> => {\n  const {\n    protocol,\n    tokenID,\n    utxos,\n    inputTokens,\n    distributions,\n    paymentPk,\n    ordPk,\n    changeAddress,\n    tokenChangeAddress,\n    satsPerKb = DEFAULT_SAT_PER_KB,\n    metaData,\n    signer,\n    decimals,\n    additionalPayments = [],\n    burn = false\n  } = config;\n\n  // calculate change amount\n  let changeAmt = 0n;\n  let totalAmtIn = 0n;\n  let totalAmtOut = 0n;\n\n  // Ensure these inputs are for the expected token\n  if (!inputTokens.every((token) => token.id === tokenID)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n  for (const token of inputTokens) {\n    const inputScriptBinary = Utils.toArray(token.script, \"base64\");\n    const inputScript = Script.fromBinary(inputScriptBinary);\n    tx.addInput(inputFromB64Utxo(\n      token,\n      new OrdP2PKH().unlock(\n        ordPk,\n        \"all\",\n        true,\n        token.satoshis,\n        inputScript,\n      ),\n    ));\n\n    totalAmtIn += BigInt(token.amt);\n  }\n\n  // build destination inscriptions\n  for (const dest of distributions) {\n    const bigAmt = BigInt(dest.amt * 10 ** decimals);\n    const transferInscription: TransferTokenInscription = {\n      p: \"bsv-20\",\n      op: burn ? \"burn\" : \"transfer\",\n      amt: bigAmt.toString(),\n    }\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n    if (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n    } else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n    tx.addOutput({\n      satoshis: 1,\n      lockingScript: new OrdP2PKH().lock(\n        dest.address,\n        {\n          dataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n          contentType: \"application/bsv-20\",\n        },\n      ),\n    });\n    totalAmtOut += bigAmt;\n  };\n  changeAmt = totalAmtIn - totalAmtOut;\n\n  let tokenChange: TokenUtxo | undefined;\n  // check that you have enough tokens to send and return change\n  if (changeAmt < 0n) {\n    throw new Error(\"Not enough tokens to send\");\n  }\n  if (changeAmt > 0n) {\n    const transferInscription: TransferTokenInscription = {\n      p: \"bsv-20\",\n      op: \"transfer\",\n      amt: changeAmt.toString(),\n    };\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n    if (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n    } else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n    // remove any undefined fields from metadata\n\t\tif (metaData) {\n\t\t\tfor(const key of Object.keys(metaData)) {\n\t\t\t\tif (metaData[key] === undefined) {\n\t\t\t\t\tdelete metaData[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst lockingScript = new OrdP2PKH().lock(\n\t\t\ttokenChangeAddress || ordPk.toAddress().toString(), \n\t\t\t{\n\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString('base64'),\n\t\t\t\tcontentType: \"application/bsv-20\",\n\t\t\t},\n      stringifyMetaData(metaData)\n\t\t);\n    \n\t\tconst vout = tx.outputs.length;\n\t\ttx.addOutput({ lockingScript, satoshis: 1 });\n\t\ttokenChange = {\n\t\t\tid: tokenID,\n\t\t\tsatoshis: 1,\n\t\t\tscript: Buffer.from(lockingScript.toBinary()).toString(\"base64\"),\n\t\t\ttxid: \"\",\n\t\t\tvout,\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t}\n\n  // Add additional payments if any\n  for (const p of additionalPayments) {\n    tx.addOutput({\n      satoshis: p.amount,\n      lockingScript: new P2PKH().lock(p.to),\n    });\n  }\n\n  // add change to the outputs\n  let payChange: Utxo | undefined;\n\n  const change = changeAddress || paymentPk.toAddress().toString();\n  const changeScript = new P2PKH().lock(change);\n  const changeOut = {\n    lockingScript: changeScript,\n    change: true,\n  };\n  tx.addOutput(changeOut);\n\n  let totalSatsIn = 0n;\n  const totalSatsOut = tx.outputs.reduce(\n    (total, out) => total + BigInt(out.satoshis || 0),\n    0n,\n  );\n  let fee = 0;\n  for (const utxo of utxos) {\n    const input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n      paymentPk,\n      \"all\",\n      true,\n      utxo.satoshis,\n      Script.fromBinary(Utils.toArray(utxo.script, 'base64'))\n    ));\n\n    tx.addInput(input);\n    // stop adding inputs if the total amount is enough\n    totalSatsIn += BigInt(utxo.satoshis);\n    fee = await modelOrFee.computeFee(tx);\n\n    if (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n      break;\n    }\n  }\n\n  // make sure we have enough\n  if (totalSatsIn < totalSatsOut + BigInt(fee)) {\n    throw new Error(\n      `Not enough funds to transfer tokens. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n    );\n  }\n\n  if (config.signer) {\n\t\ttx = await signData(tx, config.signer);\n\t}\n  \n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n  // Sign the transaction\n  await tx.sign();\n\n  const txid = tx.id(\"hex\") as string;\n  if (tokenChange) {\n    tokenChange.txid = txid;\n  }\n  // check for change\n  const payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n  if (payChangeOutIdx !== -1) {\n    const changeOutput = tx.outputs[payChangeOutIdx];\n    payChange = {\n      satoshis: changeOutput.satoshis as number,\n      txid,\n      vout: payChangeOutIdx,\n      script: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n        \"base64\",\n      ),\n    };\n  }\n\n  if (payChange) {\n    const changeOutput = tx.outputs[tx.outputs.length - 1];\n    payChange.satoshis = changeOutput.satoshis as number;\n    payChange.txid = tx.id(\"hex\") as string;\n  }\n\n  return {\n    tx,\n    spentOutpoints: tx.inputs.map(\n      (i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n    ),\n    payChange,\n    tokenChange,\n  };\n};","import type { CollectionItemSubTypeData, CollectionSubTypeData } from \"./types\";\n\n/**\n * Validates sub type data\n * @param {string} subType - Sub type of the ordinals token\n * @param {string} subTypeData - Sub type data of the ordinals token\n * @returns {Error | undefined} Error if validation fails, undefined if validation passes\n */\nexport const validateSubTypeData = (\n  subType: \"collection\" | \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData | CollectionSubTypeData,\n): Error | undefined => {\n  try {\n    if (subType === \"collection\") {\n      const collectionData = subTypeData as CollectionSubTypeData;\n      if (!collectionData.description) {\n        return new Error(\"Collection description is required\");\n      }\n      if (!collectionData.quantity) {\n        return new Error(\"Collection quantity is required\");\n      }\n      if (collectionData.rarityLabels) {\n        if (!Array.isArray(collectionData.rarityLabels)) {\n          return new Error(\"Rarity labels must be an array\");\n        }\n        // make sure keys and values are strings\n        if (!collectionData.rarityLabels.every((label) => {\n          return Object.values(label).every(value => typeof value === 'string');\n        })) {\n          return new Error(`Invalid rarity labels ${collectionData.rarityLabels}`);\n        }\n      }\n      if (collectionData.traits ) {\n        if (typeof collectionData.traits !== \"object\") {\n        return new Error(\"Collection traits must be an object\");\n        }\n        if (collectionData.traits && !Object.keys(collectionData.traits).every(key => typeof key === 'string' && typeof collectionData.traits[key] === 'object')) {\n          return new Error(\"Collection traits must be a valid CollectionTraits object\");\n        }\n      }\n    }\n    if (subType === \"collectionItem\") {\n      const itemData = subTypeData as CollectionItemSubTypeData;\n      if (!itemData.collectionId) {\n        return new Error(\"Collection id is required\");\n      }\n      if (!itemData.collectionId.includes(\"_\")) {\n        return new Error(\"Collection id must be a valid outpoint\");\n      }\n      if (itemData.collectionId.split(\"_\")[0].length !== 64) {\n        return new Error(\"Collection id must contain a valid txid\");\n      }\n      if (Number.isNaN(Number.parseInt(itemData.collectionId.split(\"_\")[1]))) {\n        return new Error(\"Collection id must contain a valid vout\");\n      }\n\n      if (itemData.mintNumber && typeof itemData.mintNumber !== \"number\") {\n        return new Error(\"Mint number must be a number\");\n      }\n      if (itemData.rank && typeof itemData.rank !== \"number\") {\n        return new Error(\"Rank must be a number\");\n      }\n      if (itemData.rarityLabel && typeof itemData.rarityLabel !== \"string\") {\n        return new Error(\"Rarity label must be a string\");\n      }\n      if (itemData.traits && typeof itemData.traits !== \"object\") {\n        return new Error(\"Traits must be an object\");\n      }\n      if (itemData.attachments && !Array.isArray(itemData.attachments)) {\n        return new Error(\"Attachments must be an array\");\n      }\n    }\n    return undefined;\n  } catch (error) {\n    return new Error(\"Invalid JSON data\");\n  }\n};","import {\n\tBigNumber,\n\ttype LockingScript,\n\tOP,\n\tP2PKH,\n\ttype PrivateKey,\n\tScript,\n\ttype Transaction,\n\tTransactionSignature,\n\tUnlockingScript,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { toHex } from \"../utils/strings\";\nimport type { Inscription } from \"../types\";\n\nexport const oLockPrefix =\n\t\"2097dfd76851bf465e8f715593b217714858bbe9570ff3bd5e33840a34e20ff0262102ba79df5f8ae7604a9830f03c7933028186aede0675a16f025dc4f8be8eec0382201008ce7480da41702918d1ec8e6849ba32b4d65b1e40dc669c31a1e6306b266c0000\";\nexport const oLockSuffix =\n\t\"615179547a75537a537a537a0079537a75527a527a7575615579008763567901c161517957795779210ac407f0e4bd44bfc207355a778b046225a7068fc59ee7eda43ad905aadbffc800206c266b30e6a1319c66dc401e5bd6b432ba49688eecd118297041da8074ce081059795679615679aa0079610079517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01007e81517a75615779567956795679567961537956795479577995939521414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff00517951796151795179970079009f63007952799367007968517a75517a75517a7561527a75517a517951795296a0630079527994527a75517a6853798277527982775379012080517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01205279947f7754537993527993013051797e527e54797e58797e527e53797e52797e57797e0079517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a756100795779ac517a75517a75517a75517a75517a75517a75517a75517a75517a7561517a75517a756169587951797e58797eaa577961007982775179517958947f7551790128947f77517a75517a75618777777777777777777767557951876351795779a9876957795779ac777777777777777767006868\";\n\n/**\n * OrdLock class implementing ScriptTemplate.\n *\n * This class provides methods for interacting with OrdinalLock contract \n */\nexport default class OrdLock {\n\t/**\n\t * Creates a 1Sat Ordinal Lock script\n\t *\n\t * @param {string} ordAddress - An address which can cancel listing.\n\t * @param {string} payAddress - Address which is paid on purchase\n\t * @param {number} price - Listing price in satoshis\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\tlock(\n\t\tordAddress: string,\n\t\tpayAddress: string,\n\t\tprice: number,\n\t\tinscription?: Inscription,\n\t): Script {\n\t\tconst cancelPkh = Utils.fromBase58Check(ordAddress).data as number[];\n\t\tconst payPkh = Utils.fromBase58Check(payAddress).data as number[];\n\n\t\tlet script = new Script()\n\t\tif (inscription?.dataB64 !== undefined && inscription?.contentType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(inscription.dataB64, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(inscription.contentType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tscript = Script.fromASM(`OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`);\n\t\t}\n\n\t\treturn script.writeScript(Script.fromHex(oLockPrefix))\n\t\t\t.writeBin(cancelPkh)\n\t\t\t.writeBin(OrdLock.buildOutput(price, new P2PKH().lock(payPkh).toBinary()))\n\t\t\t.writeScript(Script.fromHex(oLockSuffix))\n\t}\n\n\tcancelListing(\n\t\tprivateKey: PrivateKey,\n\t\tsignOutputs: 'all' | 'none' | 'single' = 'all',\n\t\tanyoneCanPay = false,\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: () => Promise<number>\n\t} {\n\t\tconst p2pkh = new P2PKH().unlock(privateKey, signOutputs, anyoneCanPay, sourceSatoshis, lockingScript)\n\t\treturn {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await p2pkh.sign(tx, inputIndex)).writeOpCode(OP.OP_1)\n\t\t\t},\n\t\t\testimateLength: async () => {\n\t\t\t\treturn 107\n\t\t\t}\n\t\t}\n\t}\n\n\tpurchaseListing(\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>\n\t} {\n\t\tconst purchase = {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\tif (tx.outputs.length < 2) {\n\t\t\t\t\tthrow new Error(\"Malformed transaction\")\n\t\t\t\t}\n\t\t\t\tconst script = new UnlockingScript()\n\t\t\t\t\t.writeBin(OrdLock.buildOutput(\n\t\t\t\t\t\ttx.outputs[0].satoshis || 0,\n\t\t\t\t\t\ttx.outputs[0].lockingScript.toBinary()\n\t\t\t\t\t))\n\t\t\t\tif (tx.outputs.length > 2) {\n\t\t\t\t\tconst writer = new Utils.Writer()\n\t\t\t\t\tfor (const output of tx.outputs.slice(2)) {\n\t\t\t\t\t\twriter.write(OrdLock.buildOutput(output.satoshis || 0, output.lockingScript.toBinary()))\n\t\t\t\t\t}\n\t\t\t\t\tscript.writeBin(writer.toArray())\n\t\t\t\t} else {\n\t\t\t\t\tscript.writeOpCode(OP.OP_0)\n\t\t\t\t}\n\n\t\t\t\tconst input = tx.inputs[inputIndex]\n\t\t\t\tlet sourceSats = sourceSatoshis as number\n\t\t\t\tif (!sourceSats && input.sourceTransaction) {\n\t\t\t\t\tsourceSats = input.sourceTransaction.outputs[input.sourceOutputIndex].satoshis as number\n\t\t\t\t} else if (!sourceSatoshis) {\n\t\t\t\t\tthrow new Error(\"sourceTransaction or sourceSatoshis is required\")\n\t\t\t\t}\n\n\t\t\t\tconst sourceTXID = (input.sourceTXID || input.sourceTransaction?.id('hex')) as string\n\t\t\t\tlet subscript = lockingScript as LockingScript\n\t\t\t\tif (!subscript) {\n\t\t\t\t\tsubscript = input.sourceTransaction?.outputs[input.sourceOutputIndex].lockingScript as LockingScript\n\t\t\t\t}\n\t\t\t\tconst preimage = TransactionSignature.format({\n\t\t\t\t\tsourceTXID,\n\t\t\t\t\tsourceOutputIndex: input.sourceOutputIndex,\n\t\t\t\t\tsourceSatoshis: sourceSats,\n\t\t\t\t\ttransactionVersion: tx.version,\n\t\t\t\t\totherInputs: [],\n\t\t\t\t\tinputIndex,\n\t\t\t\t\toutputs: tx.outputs,\n\t\t\t\t\tinputSequence: input.sequence,\n\t\t\t\t\tsubscript,\n\t\t\t\t\tlockTime: tx.lockTime,\n\t\t\t\t\tscope: TransactionSignature.SIGHASH_ALL |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_ANYONECANPAY |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_FORKID\n\t\t\t\t});\n\n\t\t\t\treturn script.writeBin(preimage).writeOpCode(OP.OP_0)\n\t\t\t},\n\t\t\testimateLength: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await purchase.sign(tx, inputIndex)).toBinary().length\n\t\t\t}\n\t\t}\n\t\treturn purchase\n\t}\n\n\tstatic buildOutput(satoshis: number, script: number[]): number[] {\n\t\tconst writer = new Utils.Writer()\n\t\twriter.writeUInt64LEBn(new BigNumber(satoshis))\n\t\twriter.writeVarIntNum(script.length)\n\t\twriter.write(script)\n\t\treturn writer.toArray()\n\t}\n}\n","import {\n  P2PKH,\n  SatoshisPerKilobyte,\n  Script,\n  Transaction,\n  Utils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport {\n  TokenType,\n  type CreateOrdListingsConfig,\n  type CreateOrdTokenListingsConfig,\n  type TokenUtxo,\n  type TransferBSV20Inscription,\n  type TransferBSV21Inscription,\n  type TransferTokenInscription,\n  type Utxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nconst { toArray } = Utils;\n\n// TODO: Handle royalty\nexport const createOrdListings = async (config: CreateOrdListingsConfig) => {\n  const {\n    utxos,\n    listings,\n    paymentPk,\n    ordPk,\n    changeAddress,\n    satsPerKb = DEFAULT_SAT_PER_KB,\n    additionalPayments = [],\n  } = config;\n\n  const modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n  const tx = new Transaction();\n\n  // Warn if creating many inscriptions at once\n  if (listings.length > 100) {\n    console.warn(\n      \"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n    );\n  }\n\n  // Outputs\n  // Add listing outputs\n  for (const listing of listings) {\n    tx.addOutput({\n      satoshis: 1,\n      lockingScript: new OrdLock().lock(\n        listing.ordAddress,\n        listing.payAddress,\n        listing.price,\n      ),\n    });\n    const inputScriptBinary = toArray(listing.listingUtxo.script, \"base64\");\n    const inputScript = Script.fromBinary(inputScriptBinary);\n    tx.addInput(inputFromB64Utxo(\n      listing.listingUtxo,\n      new OrdP2PKH().unlock(\n        ordPk,\n        \"all\",\n        true,\n        listing.listingUtxo.satoshis,\n        inputScript,\n      ),\n    ));\n  }\n\n  // Add additional payments if any\n  for (const p of additionalPayments) {\n    tx.addOutput({\n      satoshis: p.amount,\n      lockingScript: new P2PKH().lock(p.to),\n    });\n  }\n\n  // Check if change is needed\n  let payChange: Utxo | undefined;\n  const changeScript = new P2PKH().lock(\n    changeAddress || paymentPk.toAddress().toString(),\n  );\n  const changeOutput = {\n    lockingScript: changeScript,\n    change: true,\n  };\n  tx.addOutput(changeOutput);\n\n  let totalSatsIn = 0n;\n  const totalSatsOut = tx.outputs.reduce(\n    (total, out) => total + BigInt(out.satoshis || 0),\n    0n,\n  );\n  let fee = 0;\n  for (const utxo of utxos) {\n    const input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n      paymentPk,\n      \"all\",\n      true,\n      utxo.satoshis,\n      Script.fromBinary(Utils.toArray(utxo.script, 'base64'))\n    ));\n\n    tx.addInput(input);\n    // stop adding inputs if the total amount is enough\n    totalSatsIn += BigInt(utxo.satoshis);\n    fee = await modelOrFee.computeFee(tx);\n\n    if (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n      break;\n    }\n  }\n\n  // make sure we have enough\n  if (totalSatsIn < totalSatsOut + BigInt(fee)) {\n    throw new Error(\n      `Not enough funds to create ordinal listings. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n    );\n  }\n\n  // Calculate fee\n  await tx.fee(modelOrFee);\n\n  // Sign the transaction\n  await tx.sign();\n\n  // check for change\n  const payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n  if (payChangeOutIdx !== -1) {\n    const changeOutput = tx.outputs[payChangeOutIdx];\n    payChange = {\n      satoshis: changeOutput.satoshis as number,\n      txid: tx.id(\"hex\") as string,\n      vout: payChangeOutIdx,\n      script: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n        \"base64\",\n      ),\n    };\n  }\n\n  if (payChange) {\n    const changeOutput = tx.outputs[tx.outputs.length - 1];\n    payChange.satoshis = changeOutput.satoshis as number;\n    payChange.txid = tx.id(\"hex\") as string;\n  }\n\n  return {\n    tx,\n    spentOutpoints: tx.inputs.map(\n      (i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n    ),\n    payChange,\n  };\n};\n\nexport const createOrdTokenListings = async (\n  config: CreateOrdTokenListingsConfig,\n) => {\n  const {\n    utxos,\n    protocol,\n    tokenID,\n    ordPk,\n    paymentPk,\n    additionalPayments = [],\n    changeAddress,\n    tokenChangeAddress,\n    inputTokens,\n    listings,\n    decimals,\n    satsPerKb = DEFAULT_SAT_PER_KB,\n  } = config;\n\n\n  // Warn if creating many inscriptions at once\n  if (listings.length > 100) {\n    console.warn(\n      \"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n    );\n  }\n\n  // Ensure these inputs are for the expected token\n  if (!inputTokens.every((token) => token.id === tokenID)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n  // calculate change amount\n  let changeAmt = 0n;\n  let totalAmtIn = 0n;\n  let totalAmtOut = 0n;\n\n  // Ensure these inputs are for the expected token\n  if (!inputTokens.every((token) => token.id === tokenID)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n  const modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n  const tx = new Transaction();\n  // Outputs\n  // Add listing outputs\n  for (const listing of listings) {\n    // NewTokenListing is not adjusted for decimals\n    const bigAmt = BigInt(listing.amt * 10 ** decimals);\n    const transferInscription: TransferTokenInscription = {\n      p: \"bsv-20\",\n      op: \"transfer\",\n      amt: bigAmt.toString(),\n    };\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n    if (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n    } else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n    tx.addOutput({\n      satoshis: 1,\n      lockingScript: new OrdLock().lock(\n        listing.ordAddress,\n        listing.payAddress,\n        listing.price,\n        {\n          dataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n          contentType: \"application/bsv-20\",\n        },\n      ),\n    });\n    totalAmtOut += bigAmt;\n  }\n\n  // Input tokens are already adjusted for decimals\n  for (const token of inputTokens) {\n    tx.addInput(inputFromB64Utxo(\n      token,\n      new OrdP2PKH().unlock(\n        ordPk,\n        \"all\",\n        true,\n        token.satoshis,\n        Script.fromBinary(toArray(token.script, \"base64\")),\n      ),\n    ));\n\n    totalAmtIn += BigInt(token.amt);\n  }\n  changeAmt = totalAmtIn - totalAmtOut;\n\n  let tokenChange: TokenUtxo | undefined;\n  // check that you have enough tokens to send and return change\n  if (changeAmt < 0n) {\n    throw new Error(\"Not enough tokens to send\");\n  }\n  if (changeAmt > 0n) {\n    const transferInscription: TransferTokenInscription = {\n      p: \"bsv-20\",\n      op: \"transfer\",\n      amt: changeAmt.toString(),\n    };\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n    if (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n    } else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n    const lockingScript = new OrdP2PKH().lock(tokenChangeAddress, {\n      dataB64: Buffer.from(JSON.stringify(inscription)).toString('base64'),\n      contentType: \"application/bsv-20\",\n    });\n    const vout = tx.outputs.length;\n    tx.addOutput({ lockingScript, satoshis: 1 });\n    tokenChange = {\n      id: tokenID,\n      satoshis: 1,\n      script: Buffer.from(lockingScript.toBinary()).toString(\"base64\"),\n      txid: \"\",\n      vout,\n      amt: changeAmt.toString(),\n    };\n  }\n\n  // Add additional payments if any\n  for (const p of additionalPayments) {\n    tx.addOutput({\n      satoshis: p.amount,\n      lockingScript: new P2PKH().lock(p.to),\n    });\n  }\n\n  // add change to the outputs\n  let payChange: Utxo | undefined;\n\n  const change = changeAddress || paymentPk.toAddress().toString();\n  const changeScript = new P2PKH().lock(change);\n  const changeOut = {\n    lockingScript: changeScript,\n    change: true,\n  };\n  tx.addOutput(changeOut);\n\n  let totalSatsIn = 0n;\n  const totalSatsOut = tx.outputs.reduce(\n    (total, out) => total + BigInt(out.satoshis || 0),\n    0n,\n  );\n  let fee = 0;\n  for (const utxo of utxos) {\n    const input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n      paymentPk,\n      \"all\",\n      true,\n      utxo.satoshis,\n      Script.fromBinary(Utils.toArray(utxo.script, 'base64'))\n    ));\n\n    tx.addInput(input);\n    // stop adding inputs if the total amount is enough\n    totalSatsIn += BigInt(utxo.satoshis);\n    fee = await modelOrFee.computeFee(tx);\n\n    if (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n      break;\n    }\n  }\n\n  // make sure we have enough\n  if (totalSatsIn < totalSatsOut + BigInt(fee)) {\n    throw new Error(\n      `Not enough funds to create token listings. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n    );\n  }\n\n  // estimate the cost of the transaction and assign change value\n  await tx.fee(modelOrFee);\n\n  // Sign the transaction\n  await tx.sign();\n\n  const txid = tx.id(\"hex\") as string;\n  if (tokenChange) {\n    tokenChange.txid = txid;\n  }\n  // check for change\n  const payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n  if (payChangeOutIdx !== -1) {\n    const changeOutput = tx.outputs[payChangeOutIdx];\n    payChange = {\n      satoshis: changeOutput.satoshis as number,\n      txid,\n      vout: payChangeOutIdx,\n      script: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n        \"base64\",\n      ),\n    };\n  }\n\n  if (payChange) {\n    const changeOutput = tx.outputs[tx.outputs.length - 1];\n    payChange.satoshis = changeOutput.satoshis as number;\n    payChange.txid = tx.id(\"hex\") as string;\n  }\n\n  return {\n    tx,\n    spentOutpoints: tx.inputs.map(\n      (i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n    ),\n    payChange,\n    tokenChange,\n  };\n};\n","import { P2PKH, SatoshisPerKilobyte, Script, Transaction, Utils } from \"@bsv/sdk\";\nimport {\n\tTokenType,\n\ttype TokenUtxo,\n\ttype CancelOrdListingsConfig,\n\ttype CancelOrdTokenListingsConfig,\n\ttype Destination,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n  type ChangeResult,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\n\n/**\n * Cancel Ordinal Listings\n * @param {CancelOrdListingsConfig} config - Configuration object for cancelling ordinals\n * @param {PrivateKey} config.paymentPk - Private key to sign payment inputs\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.listingUtxos - Listing utxos to cancel (with base64 encoded scripts)\n * @param {string} [config.changeAddress] - Optional. Address to send change to\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to make\n * @returns {Promise<ChangeResult>} Transaction, spent outpoints, change utxo\n */\nexport const cancelOrdListings = async (config: CancelOrdListingsConfig): Promise<ChangeResult> => {\n\tconst {\n\t\tutxos,\n\t\tlistingUtxos,\n\t\tordPk,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tadditionalPayments = [],\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\n\t// Warn if creating many inscriptions at once\n\tif (listingUtxos.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\t\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinals we're cancelling\n\tfor (const listingUtxo of listingUtxos) {\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().cancelListing(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlistingUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, 'base64'))\n\t\t\t)\n\t\t));\n\t\t// Add cancel outputs returning listed ordinals\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new P2PKH().lock(ordPk.toAddress().toString()),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo, \n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpaymentPk, \n\t\t\t\t\"all\",\n\t\t\t\ttrue, \n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t\t)\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to cancel ordinal listings. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\nexport const cancelOrdTokenListings = async (\n\tconfig: CancelOrdTokenListingsConfig,\n) => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tadditionalPayments,\n\t\tlistingUtxos,\n\t\tutxos,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\t// calculate change amount\n\tlet totalAmtIn = 0;\n\n\tif (listingUtxos.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Ensure these inputs are for the expected token\n\tif (!listingUtxos.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinals we're cancelling\n\tfor (const listingUtxo of listingUtxos) {\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().cancelListing(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlistingUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, 'base64'))\n\t\t\t)\n\t\t));\n\t\ttotalAmtIn += Number.parseInt(listingUtxo.amt);\n\t}\n\n\tconst transferInscription: TransferTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"transfer\",\n\t\tamt: totalAmtIn.toString(),\n\t};\n\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\tif (protocol === TokenType.BSV20) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\ttick: tokenID,\n\t\t} as TransferBSV20Inscription;\n\t} else if (protocol === TokenType.BSV21) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\tid: tokenID,\n\t\t} as TransferBSV21Inscription;\n\t} else {\n\t\tthrow new Error(\"Invalid protocol\");\n\t}\n\n\tconst destination: Destination = {\n\t\taddress: ordAddress || ordPk.toAddress().toString(),\n\t\tinscription: {\n\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t},\n\t};\n\n  const lockingScript = new OrdP2PKH().lock(\n    destination.address,\n    destination.inscription\n  );\n\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript,\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to cancel token listings. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n  const tokenChange: TokenUtxo = {\n    amt: totalAmtIn.toString(),\n    script: Buffer.from(lockingScript.toHex(), 'hex').toString('base64'),\n    txid: tx.id(\"hex\") as string,\n    vout: 0,\n    id: tokenID,\n    satoshis: 1\n  };\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n    tokenChange\n\t};\n};","// import { PaymailClient } from \"@bsv/paymail\";\nimport { LockingScript } from \"@bsv/sdk\";\n\n// const client = new PaymailClient();\n\nexport const resolvePaymail = async (paymailAddress: string, amtToReceive: number): Promise<LockingScript> => {\n  // const destinationTx = await client.getP2pPaymentDestination(paymailAddress, amtToReceive);\n  // // TODO: we are assuming only one output but in reality it can be many\n  // return destinationTx.outputs[0].script as LockingScript;\n  throw new Error(\"Not implemented\");\n}","import {\n\tLockingScript,\n\tP2PKH,\n\tSatoshisPerKilobyte,\n\tScript,\n\tTransaction,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport {\n\ttype ChangeResult,\n\tRoytaltyType,\n\tTokenType,\n\ttype PurchaseOrdListingConfig,\n\ttype PurchaseOrdTokenListingConfig,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n\tMAP,\n} from \"./types\";\nimport { resolvePaymail } from \"./utils/paymail\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Purchase a listing\n * @param {PurchaseOrdListingConfig} config - Configuration object for purchasing a listing\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign payment inputs\n * @param {ExistingListing} config.listing - Listing to purchase\n * @param {string} config.ordAddress - Address to send the ordinal to\n * @param {string} [config.changeAddress] - Optional. Address to send change to\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to make\n * @param {Royalty[]} [config.royalties] - Optional. Royalties to pay\n * @param {MAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include on purchased output\n * @returns {Promise<ChangeResult>} Transaction, spent outpoints, change utxo\n */\nexport const purchaseOrdListing = async (\n\tconfig: PurchaseOrdListingConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tlisting,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tadditionalPayments = [],\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\troyalties = [],\n\t\tmetaData,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinal we're purchasing\n\ttx.addInput(\n\t\tinputFromB64Utxo(\n\t\t\tlisting.listingUtxo,\n\t\t\tnew OrdLock().purchaseListing(\n\t\t\t\t1,\n\t\t\t\tScript.fromBinary(Utils.toArray(listing.listingUtxo.script, \"base64\")),\n\t\t\t),\n\t\t),\n\t);\n\n\t// Outputs\n\t// Add the purchased output\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(ordAddress, undefined, metaData),\n\t});\n\n\t// add the payment output\n\tconst reader = new Utils.Reader(Utils.toArray(listing.payout, \"base64\"));\n\tconst satoshis = reader.readUInt64LEBn().toNumber();\n\tconst scriptLength = reader.readVarIntNum();\n\tconst scriptBin = reader.read(scriptLength);\n\tconst lockingScript = LockingScript.fromBinary(scriptBin);\n\ttx.addOutput({\n\t\tsatoshis,\n\t\tlockingScript,\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Add any royalties\n\tfor (const r of royalties) {\n\t\tlet lockingScript: LockingScript | undefined;\n\t\tconst royaltySats = Math.floor(Number(r.percentage) * satoshis);\n\n\t\tswitch (r.type as RoytaltyType) {\n\t\t\tcase RoytaltyType.Paymail:\n\t\t\t\t// resolve paymail address\n\t\t\t\tlockingScript = await resolvePaymail(r.destination, royaltySats);\n\t\t\t\tbreak;\n\t\t\tcase RoytaltyType.Script:\n\t\t\t\tlockingScript = Script.fromBinary(\n\t\t\t\t\tUtils.toArray(r.destination, \"base64\"),\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase RoytaltyType.Address:\n\t\t\t\tlockingScript = new P2PKH().lock(r.destination);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"Invalid royalty type\");\n\t\t}\n\t\tif (!lockingScript) {\n\t\t\tthrow new Error(\"Invalid royalty destination\");\n\t\t}\n\t\ttx.addOutput({\n\t\t\tsatoshis: royaltySats,\n\t\t\tlockingScript,\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo,\n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpaymentPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, \"base64\")),\n\t\t\t),\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase ordinal listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\n/**\n *\n * @param {PurchaseOrdTokenListingConfig} config  - Configuration object for purchasing a token listing\n * @param {TokenType} config.protocol - Token protocol\n * @param {string} config.tokenID - Token ID\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign payment inputs\n * @param {Utxo} config.listingUtxo - Listing UTXO\n * @param {string} config.ordAddress - Address to send the ordinal to\n * @param {string} [config.changeAddress] - Optional. Address to send change to\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to make\n * @param {MAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include on the purchased transfer inscription output\n * @returns {Promise<ChangeResult>} Transaction, spent outpoints, change utxo\n */\nexport const purchaseOrdTokenListing = async (\n\tconfig: PurchaseOrdTokenListingConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tpaymentPk,\n\t\tlistingUtxo,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t\tmetaData,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinal we're purchasing\n\ttx.addInput(\n\t\tinputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().purchaseListing(\n\t\t\t\t1,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, \"base64\")),\n\t\t\t),\n\t\t),\n\t);\n\n\t// Outputs\n\tconst transferInscription: TransferTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"transfer\",\n\t\tamt: listingUtxo.amt,\n\t};\n\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\tif (protocol === TokenType.BSV20) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\ttick: tokenID,\n\t\t} as TransferBSV20Inscription;\n\t} else if (protocol === TokenType.BSV21) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\tid: tokenID,\n\t\t} as TransferBSV21Inscription;\n\t} else {\n\t\tthrow new Error(\"Invalid protocol\");\n\t}\n\tconst dataB64 = Buffer.from(JSON.stringify(inscription)).toString(\"base64\");\n\n\t// Add the purchased output\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\tordAddress,\n\t\t\t{\n\t\t\t\tdataB64,\n\t\t\t\tcontentType: \"application/bsv-20\",\n\t\t\t},\n\t\t\tmetaData,\n\t\t),\n\t});\n\n\tif (!listingUtxo.payout) {\n\t\tthrow new Error(\"Listing UTXO does not have a payout script\");\n\t}\n\n\t// Add the payment output\n\tconst reader = new Utils.Reader(Utils.toArray(listingUtxo.payout, \"base64\"));\n\tconst satoshis = reader.readUInt64LEBn().toNumber();\n\tconst scriptLength = reader.readVarIntNum();\n\tconst scriptBin = reader.read(scriptLength);\n\tconst lockingScript = LockingScript.fromBinary(scriptBin);\n\ttx.addOutput({\n\t\tsatoshis,\n\t\tlockingScript,\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo,\n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpaymentPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, \"base64\")),\n\t\t\t),\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase token listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n","import Jimp from \"jimp\";\n\nimport type { IconInscription, ImageContentType } from \"../types\";\n\nexport const ErrorOversizedIcon = new Error(\n\t\"Image must be a square image with dimensions <= 400x400\",\n);\nexport const ErrorIconProportions = new Error(\"Image must be a square image\");\nexport const ErrorInvalidIconData = new Error(\"Error processing image\");\nexport const ErrorImageDimensionsUndefined = new Error(\n\t\"Image dimensions are undefined\",\n);\n\nconst isImageContentType = (value: string): value is ImageContentType => {\n  console.log({value})\n\treturn (value as ImageContentType) === value;\n};\n\nexport const validIconData = async (\n\ticon: IconInscription,\n): Promise<Error | null> => {\n\tconst { dataB64, contentType } = icon;\n\n\tif (contentType === \"image/svg+xml\") {\n\t\treturn validateSvg(dataB64);\n\t}\n\n\t// make sure the contentType is one of ImageContentType\n\tif (!isImageContentType(contentType)) {\n\t\treturn ErrorInvalidIconData;\n\t}\n\n\ttry {\n\t\tconst buffer = Buffer.from(dataB64, \"base64\");\n\t\tconst image = await Jimp.read(buffer);\n\n\t\tconst width = image.getWidth();\n\t\tconst height = image.getHeight();\n\n\t\tif (width === undefined || height === undefined) {\n\t\t\treturn ErrorImageDimensionsUndefined;\n\t\t}\n\t\tif (width !== height) {\n\t\t\treturn ErrorIconProportions;\n\t\t}\n\t\tif (width > 400 || height > 400) {\n\t\t\treturn ErrorOversizedIcon;\n\t\t}\n\n\t\treturn null;\n\t} catch (error) {\n\t\treturn ErrorInvalidIconData;\n\t}\n};\n\nconst validateSvg = (svgBase64: string): Error | null => {\n  const svgString = Buffer.from(svgBase64, \"base64\").toString(\"utf-8\");\n  const widthMatch = svgString.match(/<svg[^>]*\\s+width=\"([^\"]+)\"/);\n  const heightMatch = svgString.match(/<svg[^>]*\\s+height=\"([^\"]+)\"/);\n  console.log({widthMatch, heightMatch})\n  if (!widthMatch || !heightMatch) {\n    return ErrorImageDimensionsUndefined;\n  }\n\n\tconst width = Number.parseInt(widthMatch[1], 10);\n\tconst height = Number.parseInt(heightMatch[1], 10);\n\n\tif (Number.isNaN(width) || Number.isNaN(height)) {\n\t\treturn ErrorImageDimensionsUndefined;\n\t}\n\n\tif (width !== height) {\n\t\treturn ErrorIconProportions;\n\t}\n\tif (width > 400 || height > 400) {\n\t\treturn ErrorOversizedIcon;\n\t}\n\n\treturn null;\n}\n\nexport const validIconFormat = (icon: string): boolean => {\n\tif (!icon.includes(\"_\") || icon.endsWith(\"_\")) {\n\t\treturn false;\n\t}\n\n\t// use parseint to validate the vout\n\tconst iconVout = Number.parseInt(icon.split(\"_\")[1]);\n\tif (Number.isNaN(iconVout)) {\n\t\treturn false;\n\t}\n\n\tif (!icon.startsWith(\"_\") && icon.split(\"_\")[0].length !== 64) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","import {\n\tTransaction,\n\tP2PKH,\n\tSatoshisPerKilobyte,\n\ttype TransactionOutput,\n\tUtils,\n\tScript,\n} from \"@bsv/sdk\";\nimport type {\n  ChangeResult,\n\tDeployBsv21TokenConfig,\n\tDeployMintTokenInscription,\n\tInscription,\n\tUtxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { validIconData, validIconFormat } from \"./utils/icon\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\n\n/**\n * Deploys & Mints a BSV21 token to the given destination address\n * @param {DeployBsv21TokenConfig} config - Configuration object for deploying BSV21 token\n * @param {string} config.symbol - Token ticker symbol\n * @param {number} config.decimals - Number of decimal places to display\n * @param {string | IconInscription} config.icon - outpoint (format: txid_vout) or Inscription. If Inscription, must be a valid image type\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {Distribution} config.initialDistribution - Initial distribution with addresses and total supply (not adjusted for decimals, library will add zeros)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {string} config.destinationAddress - Address to deploy token to.\n * @param {string} [config.changeAddress] - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to include in the transaction\n * @returns {Promise<ChangeResult>} Transaction to deploy BSV 2.1 token\n */\nexport const deployBsv21Token = async (\n\tconfig: DeployBsv21TokenConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tsymbol,\n\t\ticon,\n    decimals,\n\t\tutxos,\n\t\tinitialDistribution,\n\t\tpaymentPk,\n\t\tdestinationAddress,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\tlet iconValue: string;\n\tif (typeof icon === \"string\") {\n\t\ticonValue = icon;\n\t} else {\n\t\tconst iconError = await validIconData(icon);\n\t\tif (iconError) {\n\t\t\tthrow iconError;\n\t\t}\n\t\t// add icon inscription to the transaction\n\t\tconst iconScript = new OrdP2PKH().lock(destinationAddress, icon);\n\t\tconst iconOut = {\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: iconScript,\n\t\t};\n\t\ttx.addOutput(iconOut);\n\t\t// relative output index of the icon\n\t\ticonValue = \"_0\";\n\t}\n\n\t// Ensure the icon format\n\tif (!validIconFormat(iconValue)) {\n\t\tthrow new Error(\n\t\t\t\"Invalid icon format. Must be either outpoint (format: txid_vout) or relative output index of the icon (format _vout). examples: ecb483eda58f26da1b1f8f15b782b1186abdf9c6399a1c3e63e0d429d5092a41_0 or _1\",\n\t\t);\n\t}\n  \n\t// Outputs\n  const amt = decimals ? BigInt(initialDistribution.amt) * 10n ** BigInt(decimals) : BigInt(initialDistribution.amt);\n\tconst fileData: DeployMintTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"deploy+mint\",\n\t\tsym: symbol,\n\t\ticon: iconValue,\n\t\tamt: amt.toString(),\n\t};\n\n  if (decimals) {\n    fileData.dec = decimals.toString();\n  }\n\n\tconst b64File = Buffer.from(JSON.stringify(fileData)).toString(\"base64\");\n\tconst sendTxOut = {\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(destinationAddress, {\n\t\t\tdataB64: b64File,\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t} as Inscription),\n\t};\n\ttx.addOutput(sendTxOut);\n\n\t// Additional payments\n\tfor (const payment of additionalPayments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new P2PKH().lock(payment.to),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to deploy token. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tScript,\n\tUtils,\n  PrivateKey,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB, MAP_PREFIX } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n  BaseResult,\n\tBurnOrdinalsConfig,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { toHex } from \"./utils/strings\";\n\n/**\n * Burn ordinals by consuming them as fees\n * @param {BurnOrdinalsConfig} config - Configuration object for sending ordinals\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Utxo} config.ordinals - 1Sat Ordinal Utxos to spend (with base64 encoded scripts)\n * @param {BurnMAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include in an unspendable output OP_FALSE OP_RETURN\n * @returns {Promise<BaseResult>} Transaction, spent outpoints\n */\nexport const burnOrdinals = async (\n\tconfig: BurnOrdinalsConfig,\n): Promise<BaseResult> => {\n\tconst tx = new Transaction();\n\tconst spentOutpoints: string[] = [];\n\tconst { ordinals, metaData } = config;\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(\n\t\t\tordUtxo,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tconfig.ordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tordUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(ordUtxo.script, \"base64\")),\n\t\t\t),\n\t\t);\n\t\tspentOutpoints.push(`${ordUtxo.txid}_${ordUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// Add metadata output\n\n\t// MAP.app and MAP.type keys are required\n\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t}\n\n\tlet metaAsm = \"\";\n\n\tif (metaData?.app && metaData?.type) {\n\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\tconst mapCmdValue = toHex(\"SET\");\n\t\tmetaAsm = `OP_FALSE OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\tif (key !== \"cmd\") {\n\t\t\t\tmetaAsm = `${metaAsm} ${toHex(key)} ${toHex(value as string)}`;\n\t\t\t}\n\t\t}\n\t}\n\n\ttx.addOutput({\n\t\tsatoshis: 0,\n\t\tlockingScript: Script.fromASM(metaAsm || \"OP_FALSE OP_RETURN\"),\n\t});\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t};\n};\n"],"names":["toHex","utf8Str","Buffer","from","toString","MAP_PREFIX","DEFAULT_SAT_PER_KB","API_HOST","OrdP2PKH","P2PKH","lock","address","inscription","metaData","ordAsm","undefined","dataB64","contentType","ordHex","fileHex","trim","Error","fileMediaType","inscriptionAsm","toASM","app","type","key","value","Object","entries","LockingScript","fromASM","TokenType","RoytaltyType","MAX_TOKEN_SUPPLY","fromBase58Check","Utils","inputFromB64Utxo","utxo","unlockScriptTemplate","fromUtxo","_extends","script","fetchPayUtxos","async","scriptEncoding","payUrl","console","log","payRes","fetch","ok","payUtxos","json","filter","u","satoshis","isLock","pubKeyHash","p2pkhScript","data","map","txid","vout","toBinary","fetchNftUtxos","collectionId","limit","offset","url","JSON","stringify","subTypeData","res","nftUtxos","_u$data","list","outpoints","nftRes","method","headers","body","Script","fromHex","nftUtxo","origin","outpoint","fetchTokenUtxos","protocol","tokenId","BSV20","tokenUtxos","amt","id","signData","tx","signer","idKey","keyHost","sigma","Sigma","signedTx","sign","authToken","remoteSign","e","stringifyMetaData","result","Array","isArray","String","createOrdinals","utxos","destinations","paymentPk","changeAddress","satsPerKb","additionalPayments","config","length","warn","modelOrFee","SatoshisPerKilobyte","payChange","Transaction","destination","keys","addOutput","lockingScript","p","amount","to","change","toAddress","changeScript","totalSatsIn","totalSatsOut","outputs","reduce","total","out","BigInt","pop","addInput","unlock","fromBinary","toArray","fee","input","computeFee","payChangeOutIdx","findIndex","o","changeOutput","spentOutpoints","sendOrdinals","enforceUniformSend","ordUtxo","ordinals","ordPk","push","_destination$inscript","_destination$inscript2","s","paymentUtxos","sendUtxos","payments","payment","sendTxOut","changeOut","transferOrdTokens","tokenID","inputTokens","distributions","tokenChangeAddress","decimals","burn","changeAmt","totalAmtIn","totalAmtOut","every","token","tokenChange","inputScriptBinary","inputScript","dest","bigAmt","transferInscription","op","tick","BSV21","inputs","i","sourceTXID","sourceOutputIndex","validateSubTypeData","subType","collectionData","description","quantity","rarityLabels","label","values","traits","itemData","includes","split","Number","isNaN","parseInt","mintNumber","rank","rarityLabel","attachments","error","OrdLock","ordAddress","payAddress","price","cancelPkh","payPkh","writeScript","writeBin","buildOutput","cancelListing","privateKey","signOutputs","anyoneCanPay","sourceSatoshis","p2pkh","inputIndex","writeOpCode","OP","OP_1","estimateLength","purchaseListing","purchase","_input$sourceTransact","UnlockingScript","writer","Writer","output","slice","write","OP_0","sourceSats","sourceTransaction","subscript","_input$sourceTransact2","preimage","TransactionSignature","format","transactionVersion","version","otherInputs","inputSequence","sequence","lockTime","scope","SIGHASH_ALL","SIGHASH_ANYONECANPAY","SIGHASH_FORKID","writeUInt64LEBn","BigNumber","writeVarIntNum","createOrdListings","listings","listing","listingUtxo","createOrdTokenListings","cancelOrdListings","listingUtxos","cancelOrdTokenListings","resolvePaymail","paymailAddress","amtToReceive","purchaseOrdListing","royalties","reader","Reader","payout","readUInt64LEBn","toNumber","scriptLength","readVarIntNum","scriptBin","read","r","royaltySats","Math","floor","percentage","Paymail","Address","purchaseOrdTokenListing","ErrorOversizedIcon","ErrorIconProportions","ErrorInvalidIconData","ErrorImageDimensionsUndefined","deployBsv21Token","symbol","icon","initialDistribution","destinationAddress","iconValue","iconError","svgBase64","svgString","widthMatch","match","heightMatch","width","height","validateSvg","buffer","image","Jimp","getWidth","getHeight","validIconData","iconScript","endsWith","iconVout","startsWith","validIconFormat","fileData","sym","dec","b64File","burnOrdinals","metaAsm"],"mappings":"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"}