{"version":3,"file":"index.modern.js","sources":["../src/utils/strings.ts","../src/constants.ts","../src/templates/ordP2pkh.ts","../src/types.ts","../src/utils/utxo.ts","../src/signData.ts","../src/createOrdinals.ts","../src/sendOrdinals.ts","../src/sendUtxos.ts","../src/transferOrdinals.ts"],"sourcesContent":["/**\n * Converts a string to its hexadecimal representation\n *\n * @param {string} utf8Str - The string to convert\n * @returns {string} The hexadecimal representation of the input string\n */\nconst toHex = (utf8Str: string): string => {\n  return Buffer.from(utf8Str).toString(\"hex\");\n};\n\nexport { toHex };\n","export const MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\nexport const DEFAULT_SAT_PER_KB = 10;\nexport const API_HOST = \"https://ordinals.gorillapool.io/api\";","import {\n\tLockingScript,\n\tP2PKH,\n\ttype Script,\n} from \"@bsv/sdk\";\nimport type { MAP } from \"../types\";\nimport { toHex } from \"../utils/strings\";\nimport { MAP_PREFIX } from \"../constants\";\n\n/**\n * OrdP2PKH (1Sat Ordinal + Pay To Public Key Hash) class implementing ScriptTemplate.\n *\n * This class provides methods to create an Ordinal with Pay To Public Key Hash locking and unlocking scripts. \n * It extends the standard P2PKH script template and provides a custom lock method.\n */\nexport default class OrdP2PKH extends P2PKH {\n\t/**\n\t * Creates a 1Sat Ordinal + P2PKH locking script for a given address string\n\t *\n\t * @param {string} address - An destination address for the Ordinal.\n\t * @param {string} [b64File] - Base64 encoded file data.\n\t * @param {string} [mediaType] - Media type of the file.\n\t * @param {MAP} [metaData] - (optional) MAP Metadata to be included in OP_RETURN.\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\t// unlock method inherits from p2pkh\n\tlock(\n\t\taddress: string,\n\t\tb64File?: string | undefined,\n\t\tmediaType?: string | undefined,\n\t\tmetaData?: MAP | undefined,\n\t): Script {\n\t\tlet ordAsm = \"\";\n\t\t// This can be omitted for reinscriptions that just update metadata\n\t\tif (b64File !== undefined && mediaType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(b64File, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(mediaType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`;\n\t\t}\n\n\t\t// Create ordinal output and inscription in a single output\n\t\tconst lockingScript = new P2PKH().lock(address);\n\t\tlet inscriptionAsm = `${ordAsm ? `${ordAsm} ` : \"\"}${lockingScript.toASM()}`;\n\n\t\t// MAP.app and MAP.type keys are required\n\t\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t\t}\n\n\t\tif (metaData?.app && metaData?.type) {\n\t\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\t\tconst mapCmdValue = toHex(\"SET\");\n\t\t\tinscriptionAsm = `${inscriptionAsm} OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\t\tif (key !== \"cmd\") {\n\t\t\t\t\tinscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\n\t\t\t\t\t\tvalue as string,\n\t\t\t\t\t)}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn LockingScript.fromASM(inscriptionAsm);\n\t}\n}\n","import type { PrivateKey, Transaction } from \"@bsv/sdk\";\nimport type { AuthToken } from \"sigma-protocol\";\n\n// biome-ignore lint/complexity/noBannedTypes: Reserved for future use\ntype Signer = {};\n\nexport interface LocalSigner extends Signer {\n\tidKey: PrivateKey;\n}\n\nexport interface RemoteSigner extends Signer {\n\tkeyHost: string;\n\tauthToken?: AuthToken;\n}\n\nexport type Destination = {\n\taddress: string;\n\tinscription?: Inscription;\n};\n\n/**\n * @typedef {Object} Distribution\n * @property {string} address - Destination address. Must be a Ordinals address (BSV address for recieving 1Sat ordinals tokens).\n * @property {string} amt - Number of tokens as a string, considering decimals. Not display format. Ex. 100000000 for 1 token with 8 decimal places.\n */\nexport type Distribution = {\n\taddress: string;\n\tamt: string;\n};\n\n/**\n * @typedef {Object} Utxo\n * @property {number} satoshis - Amount in satoshis\n * @property {string} txid - Transaction id\n * @property {number} vout - Output index\n * @property {string} script - Base64 encoded locking script\n */\nexport type Utxo = {\n\tsatoshis: number;\n\ttxid: string;\n\tvout: number;\n\tscript: string;\n};\n\n/**\n * @typedef {Object} NftUtxo\n * @property {string} collectionId - Optional. Collection id of the NFT\n * @property {string} contentType - Media type of the NFT\n * @property {string} creatorBapId - Optional. Creator BAP id of the NFT\n * @property {string} origin - Origin address of the NFT\n * @property {number} satoshis - Always 1\n */\nexport interface NftUtxo extends Utxo {\n\tcollectionId?: string;\n\tcontentType: string;\n\tcreatorBapId?: string;\n\torigin: string;\n\tsatoshis: 1;\n}\n\n/**\n * @typedef {Object} TokenUtxo\n * @property {string} amt - Number of tokens as a string\n * @property {string} id - Token id -  either tick or id depending on protocol\n * @property {string} satoshis - Always 1\n */\nexport interface TokenUtxo extends Utxo {\n\tamt: string;\n\tid: string;\n\tsatoshis: 1;\n}\n\nexport type Inscription = {\n\tdataB64: string;\n\tcontentType: string;\n};\n\nexport type ImageContentType =\n\t| \"image/png\"\n\t| \"image/jpeg\"\n\t| \"image/gif\"\n\t| \"image/svg+xml\"\n\t| \"image/webp\";\n\n/**\n * @typedef {Object} IconInscription\n * @property {string} dataB64 - Base64 encoded image data. Must be a square image.\n * @property {ImageContentType} contentType - Media type of the image\n */\nexport type IconInscription = {\n\tdataB64: string;\n\tcontentType: ImageContentType;\n};\n\nexport type MAP = {\n\tapp: string;\n\ttype: string;\n\t[prop: string]: string;\n};\n\nexport type Payment = {\n\tto: string;\n\tamount: number;\n};\n\nexport type TokenInscription = {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\" | \"mint\" | \"deploy+mint\";\n};\n\nexport interface MintTokenInscription extends TokenInscription {\n\top: \"mint\";\n}\n\nexport interface DeployMintTokenInscription extends TokenInscription {\n\top: \"deploy+mint\";\n\tsym: string;\n\ticon: string;\n}\n\nexport interface TransferTokenInscription extends TokenInscription {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\";\n}\n\nexport interface TransferBSV20Inscription extends TransferTokenInscription {\n\ttick: string;\n}\n\nexport interface TransferBSV21Inscription extends TransferTokenInscription {\n\tid: string;\n}\n\nexport enum TokenType {\n\tBSV20 = \"bsv20\",\n\tBSV21 = \"bsv21\",\n}\n\n\nexport type CreateOrdinalsResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type CreateOrdinalsConfig = {\n\tutxos: Utxo[];\n\tdestinations: Destination[];\n\tpaymentPk: PrivateKey;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: MAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n};\n\nexport type SendOrdinalsResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type SendOrdinalsConfig = {\n\tpaymentUtxos: Utxo[];\n\tordinals: Utxo[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tdestinations: Destination[];\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: MAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n\tenforceUniformSend?: boolean;\n}\n\nexport type DeployBsv21TokenResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type DeployBsv21TokenConfig = {\n\tsymbol: string;\n\ticon: string | IconInscription;\n\tutxos: Utxo[];\n\tinitialDistribution: Distribution;\n\tpaymentPk: PrivateKey;\n\tdestinationAddress: string;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[];\n};\n\nexport type SendUtxosResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type SendUtxosConfig = {\n\tutxos: Utxo[];\n\tpaymentPk: PrivateKey;\n\tpayments: Payment[];\n\tsatsPerKb?: number;\n\tchangeAddress?: string;\n};\n\nexport interface TransferOrdTokensResult extends SendOrdinalsResult {\n\ttokenChange?: TokenUtxo;\n}\n\nexport type TransferOrdTokensConfig = {\n\tprotocol: TokenType;\n\ttokenID: string;\n\tutxos: Utxo[];\n\tinputTokens: TokenUtxo[];\n\tdistributions: Distribution[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tchangeAddress?: string;\n\ttokenChangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: MAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n}","import {\n\ttype Transaction,\n\ttype UnlockingScript,\n\tfromUtxo,\n\ttype TransactionInput,\n\tUtils,\n\tP2PKH,\n} from \"@bsv/sdk\";\nimport { type NftUtxo, TokenType, type TokenUtxo, type Utxo } from \"../types\";\nimport { API_HOST } from \"../constants\";\n\nconst { fromBase58Check } = Utils;\n\n/**\n * Converts a Utxo object with a base64 encoded script to a Utxo object with a hex encoded script\n * @param {Utxo} utxo - Utxo object with base64 encoded script\n * @param {Object} unlockScriptTemplate - Object with sign and estimateLength functions\n * @returns {TransactionInput} Utxo object with hex encoded script\n */\nexport const inputFromB64Utxo = (\n\tutxo: Utxo,\n\tunlockScriptTemplate: {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>;\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>;\n\t},\n): TransactionInput => {\n\tconst input = fromUtxo(\n\t\t{\n\t\t\t...utxo,\n\t\t\tscript: Buffer.from(utxo.script, \"base64\").toString(\"hex\"),\n\t\t},\n\t\tunlockScriptTemplate,\n\t);\n\tinput.sourceTXID = utxo.txid;\n\treturn input;\n};\n\n/**\n * Fetches pay utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<Utxo[]>} Array of pay utxos\n */\nexport const fetchPayUtxos = async (address: string): Promise<Utxo[]> => {\n\tconst payUrl = `${API_HOST}/txos/address/${address}/unspent?bsv20=false`;\n\tconsole.log({ payUrl });\n\tconst payRes = await fetch(payUrl);\n\tif (!payRes.ok) {\n\t\tthrow new Error(\"Error fetching pay utxos\");\n\t}\n\tlet payUtxos = await payRes.json();\n\t// exclude all 1 satoshi utxos\n\tpayUtxos = payUtxos.filter((u: { satoshis: number }) => u.satoshis !== 1);\n\n\t// Get pubkey hash from address\n\tconst pubKeyHash = fromBase58Check(address);\n\tconst p2pkhScript = new P2PKH().lock(pubKeyHash.data);\n\tpayUtxos = payUtxos.map((utxo: Partial<Utxo>) => ({\n\t\ttxid: utxo.txid,\n\t\tvout: utxo.vout,\n\t\tsatoshis: utxo.satoshis,\n\t\tscript: Buffer.from(p2pkhScript.toBinary()).toString(\"base64\"),\n\t}));\n\treturn payUtxos as Utxo[];\n};\n\n/**\n * Fetches NFT utxos from the API\n * @param {string} tokenId - Token id\n * @param {string} address - Address to fetch utxos for\n * @param {string} [collectionId] - Optional. Collection id (collection insciprtion origin)\n * @param {number} [limit=10] - Optional. Number of utxos to fetch. Default is 10\n * @param {number} [offset=0] - Optional. Offset for fetching utxos. Default is 0\n * @returns {Promise<Utxo[]>} Array of NFT utxos\n */\nexport const fetchNftUtxos = async (\n\ttokenId: string,\n\taddress: string,\n\tcollectionId?: string,\n\tlimit = 10,\n\toffset = 0,\n): Promise<Utxo[]> => {\n\tlet url = `${API_HOST}/txos/address/${address}/unspent?limit=${limit}&offset=${offset}&`;\n\n\tif (collectionId) {\n\t\tconst query = {\n\t\t\tmap: {\n\t\t\t\tsubTypeData: { collectionId },\n\t\t\t},\n\t\t};\n\t\tconst b64Query = Buffer.from(JSON.stringify(query)).toString(\"base64\");\n\t\turl += `query=${b64Query}`;\n\t}\n\n\tconsole.log({ url });\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching NFT utxos for ${address}`);\n\t}\n\n\t// Returns a BSV20Txo but we only need a few fields\n\tlet nftUtxos = await res.json();\n\n\t// Only include 1 satoshi outputs, non listings\n\tnftUtxos = nftUtxos.filter(\n\t\t(u: {\n\t\t\tsatoshis: number;\n\t\t\tdata: { list: { price: number; payout: string } | undefined };\n\t\t}) => u.satoshis === 1 && !u.data.list,\n\t);\n\n\tconst outpoints = nftUtxos.map(\n\t\t(utxo: { txid: string; vout: number }) => `${utxo.txid}_${utxo.vout}`,\n\t);\n\t// Fetch the scripts up to the limit\n\tconst nftRes = await fetch(`${API_HOST}/txos/outpoints`, {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t\tbody: JSON.stringify({ outpoints }),\n\t});\n\n\tif (!nftRes.ok) {\n\t\tthrow new Error(`Error fetching NFT scripts for ${address}`);\n\t}\n\n\tconst nfts = await nftRes.json();\n\n\tnftUtxos = nfts.map(\n\t\t(utxo: {\n\t\t\torigin: { outpoint: string };\n\t\t\tscript: string;\n\t\t\tvout: number;\n\t\t\ttxid: string;\n\t\t}) => ({\n\t\t\torigin: utxo.origin.outpoint,\n\t\t\tscript: utxo.script,\n\t\t\tvout: utxo.vout,\n\t\t\ttxid: utxo.txid,\n\t\t\tid: tokenId,\n\t\t\tsatoshis: 1,\n\t\t}),\n\t);\n\n\treturn nftUtxos as NftUtxo[];\n};\n\n/**\n * Fetches token utxos from the API\n * @param {TokenType} protocol - Token protocol. Either BSV20 or BSV21\n * @param {string} tokenId - Token id. Ticker for BSV20 and id (mint+deploy inscription origin) for BSV21\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<TokenUtxo[]>} Array of token utxos\n */\nexport const fetchTokenUtxos = async (\n\tprotocol: TokenType,\n\ttokenId: string,\n\taddress: string,\n): Promise<TokenUtxo[]> => {\n\tconst url = `${API_HOST}/bsv20/${address}/${protocol === TokenType.BSV20 ? \"tick\" : \"id\"}/${tokenId}?bsv20=true&listing=false`;\n\tconsole.log({ url });\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching ${protocol} utxos`);\n\t}\n\n\t// returns a BSV20Txo but we only need a few fields\n\tlet tokenUtxos = await res.json();\n\n\ttokenUtxos = tokenUtxos.map((utxo: Partial<TokenUtxo>) => ({\n\t\tamt: utxo.amt,\n\t\tscript: utxo.script,\n\t\tvout: utxo.vout,\n\t\ttxid: utxo.txid,\n\t\tid: tokenId,\n\t\tsatoshis: 1,\n\t}));\n\n\treturn tokenUtxos as TokenUtxo[];\n};\n","import type { Transaction } from \"@bsv/sdk\";\nimport { Sigma } from \"sigma-protocol\";\nimport type { LocalSigner, RemoteSigner } from \"./types\";\n\n/**\n * Signs data in the transaction with Sigma protocol\n * @param {Transaction} tx - Transaction to sign\n * @param {LocalSigner | RemoteSigner} signer - Local or remote signer (used for data signature)\n * @returns {Transaction} Transaction with signed data\n */\nexport const signData = async (\n\ttx: Transaction,\n\tsigner: LocalSigner | RemoteSigner,\n): Promise<Transaction> => {\n\t// Sign tx if idKey or remote signer like starfish/tokenpass\n\tconst idKey = (signer as LocalSigner)?.idKey;\n\tconst keyHost = (signer as RemoteSigner)?.keyHost;\n\n\tif (idKey) {\n\t\tconst sigma = new Sigma(tx);\n\t\tconst { signedTx } = sigma.sign(idKey);\n\t\treturn signedTx;\n\t}\n\tif (keyHost) {\n\t\tconst authToken = (signer as RemoteSigner)?.authToken;\n\t\tconst sigma = new Sigma(tx);\n\t\ttry {\n\t\t\tconst { signedTx } = await sigma.remoteSign(keyHost, authToken);\n\t\t\treturn signedTx;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthrow new Error(`Remote signing to ${keyHost} failed`);\n\t\t}\n\t}\n\tthrow new Error(\"Signer must be a LocalSigner or RemoteSigner\");\n};\n","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n} from \"@bsv/sdk\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n\tUtxo,\n\tDestination,\n\tMAP,\n\tLocalSigner,\n\tRemoteSigner,\n\tPayment,\n\tCreateOrdinalsConfig,\n\tCreateOrdinalsResult,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { signData } from \"./signData\";\n\n/**\n * Creates a transaction with inscription outputs\n * @param {CreateOrdinalsConfig} config - Configuration object for creating ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {string} config.changeAddress - Optional. Address to send change to. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {MAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Local or remote signer (used for data signature)\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<CreateOrdinalsResult>} Transaction with inscription outputs\n */\nexport const createOrdinals = async (\n\tconfig: CreateOrdinalsConfig,\n): Promise<CreateOrdinalsResult> => {\n\tconst {\n\t\tutxos,\n\t\tdestinations,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Inputs\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\t}\n\n\t// Warn if creating many inscriptions at once\n\tif (destinations.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Outputs\n\t// Add inscription outputs\n\tfor (const destination of destinations) {\n\t\tif (!destination.inscription) {\n\t\t\tthrow new Error(\"Inscription is required for all destinations\");\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription.dataB64,\n\t\t\t\tdestination.inscription.contentType,\n\t\t\t\tmetaData,\n\t\t\t),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\tlet payChangeVout: number | undefined;\n\n\t// Calculate total input and output amounts\n\tconst totalInput = utxos.reduce(\n\t\t(sum, utxo) => sum + BigInt(utxo.satoshis),\n\t\t0n,\n\t);\n\tconst totalOutput = tx.outputs.reduce(\n\t\t(sum, output) => sum + BigInt(output.satoshis || 0),\n\t\t0n,\n\t);\n\n\t// Estimate fee\n\tconst estimatedFee = await modelOrFee.computeFee(tx);\n\n\t// Check if change is needed\n\tlet payChange: Utxo | undefined;\n\tif (totalInput > totalOutput + BigInt(estimatedFee)) {\n\t\tconst changeScript = new P2PKH().lock(\n\t\t\tchangeAddress || paymentPk.toAddress().toString(),\n\t\t);\n\t\tconst changeOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\t// Add change output\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet,\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\n\t\ttx.addOutput(changeOutput);\n\t}\n\n\tif (signer) {\n\t\ttx = await signData(tx, signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype Script,\n\ttype TransactionOutput,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type { SendOrdinalsResult, SendOrdinalsConfig, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\n\n/**\n * Sends ordinals to the given destinations\n * @param {SendOrdinalsConfig} config - Configuration object for sending ordinals\n * @param {Utxo[]} config.paymentUtxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.ordinals - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {string} config.changeAddress - Optional. Address to send change to, if any. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {MAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @param {boolean} config.enforceUniformSend - Optional. Default: true. Enforce that the number of destinations matches the number of ordinals being sent. Sending ordinals requires a 1:1 mapping of destinations to ordinals. This is only used for sub-protocols like BSV21 that manage tokens without sending the inscriptions directly.\n * @returns {Promise<SendOrdinalsResult>} Transaction, spent outpoints, and change vout\n */\nexport const sendOrdinals = async (\n\tconfig: SendOrdinalsConfig,\n): Promise<SendOrdinalsResult> => {\n\tif (!config.satsPerKb) {\n\t\tconfig.satsPerKb = DEFAULT_SAT_PER_KB;\n\t}\n\tif (!config.additionalPayments) {\n\t\tconfig.additionalPayments = [];\n\t}\n\tif (config.enforceUniformSend === undefined) {\n\t\tconfig.enforceUniformSend = true;\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(config.satsPerKb);\n\tlet tx = new Transaction();\n\tconst spentOutpoints: string[] = [];\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of config.ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(\n\t\t\tordUtxo,\n\t\t\tnew OrdP2PKH().unlock(config.ordPk),\n\t\t);\n\t\tspentOutpoints.push(`${ordUtxo.txid}_${ordUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// check that ordinals coming in matches ordinals going out if supplied\n\tif (\n\t\tconfig.enforceUniformSend &&\n\t\tconfig.destinations.length !== config.ordinals.length\n\t) {\n\t\tthrow new Error(\n\t\t\t\"Number of destinations must match number of ordinals being sent\",\n\t\t);\n\t}\n\n\t// Add ordinal outputs\n\tfor (const destination of config.destinations) {\n\t\tlet s: Script;\n\t\tif (\n\t\t\tdestination.inscription?.dataB64 &&\n\t\t\tdestination.inscription?.contentType\n\t\t) {\n\t\t\ts = new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription.dataB64,\n\t\t\t\tdestination.inscription.contentType,\n\t\t\t\tconfig.metaData,\n\t\t\t);\n\t\t} else {\n\t\t\ts = new P2PKH().lock(destination.address);\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: s,\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of config.additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of config.paymentUtxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(config.paymentPk));\n\t\tspentOutpoints.push(`${utxo.txid}_${utxo.vout}`);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (totalSatsIn < totalSatsOut) {\n\t\tthrow new Error(\"Not enough ordinals to send\");\n\t}\n\n\tlet payChange: Utxo | undefined;\n\tif (totalSatsIn > totalSatsOut + BigInt(fee)) {\n\t\tconst changeScript = new P2PKH().lock(\n\t\t\tconfig.changeAddress || config.paymentPk.toAddress().toString(),\n\t\t);\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not available until the transaction is signed\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t}\n\n\tif (config.signer) {\n\t\ttx = await signData(tx, config.signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChange,\n\t};\n};\n","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype TransactionOutput,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type { SendUtxosConfig, SendUtxosResult, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Sends utxos to the given destination\n * @param {SendUtxosConfig} config - Configuration object for sending utxos\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {Payment[]} config.payments - Array of payments with addresses and amounts\n * @param {number} [config.satsPerKb] - Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {string} [config.changeAddress] - Address to send change to. If not provided, defaults to paymentPk address\n * @returns {Promise<SendUtxosResult>} Transaction with utxo outputs\n */\nexport const sendUtxos = async (\n\tconfig: SendUtxosConfig,\n): Promise<SendUtxosResult> => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tpayments,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tchangeAddress = paymentPk.toAddress().toString(),\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\t// Outputs\n\tfor (const payment of payments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new P2PKH().lock(payment.to),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + (out.satoshis || 0),\n\t\t0,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + fee) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + fee) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to send. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChange: Utxo | undefined;\n\tif (totalSatsIn > totalSatsOut + fee) {\n\t\t// Change\n\t\tconst changeScript = new P2PKH().lock(changeAddress);\n\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t} else if (totalSatsIn < totalSatsOut + fee) {\n\t\tconsole.log(\"No change needed\");\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\ttype Destination,\n\tTokenType,\n\ttype TransferBSV20Inscription,\n\ttype TransferTokenInscription,\n  type TransferBSV21Inscription,\n\ttype TransferOrdTokensConfig,\n\ttype TransferOrdTokensResult,\n\ttype SendOrdinalsConfig,\n\ttype TokenUtxo,\n} from \"./types\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { sendOrdinals } from \"./sendOrdinals\";\n\n/**\n * Transfer tokens to a destination\n * @param {TransferOrdTokensConfig} config - Configuration object for transferring tokens\n * @param {TokenType} config.protocol - Token protocol. Must be TokenType.BSV20 or TokenType.BSV21\n * @param {string} config.tokenID - Token ID. Either the tick or id value depending on the protocol\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {TokenUtxo[]} config.inputTokens - Token utxos to spend\n * @param {Distribution[]} config.distributions - Array of destinations with addresses and amounts\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {string} config.changeAddress - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {string} config.tokenChangeAddress - Optional. Address to send token change to, if any. If not provided, defaults to ordPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {MAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<TransferOrdTokensResult>} Transaction with token transfer outputs\n */\nexport const transferOrdTokens = async (config: TransferOrdTokensConfig): Promise<TransferOrdTokensResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tinputTokens,\n\t\tdistributions,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tchangeAddress,\n\t\ttokenChangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\t// calculate change amount\n\tlet changeAmt = 0n;\n\tlet totalAmtIn = 0n;\n\tlet totalAmtOut = 0n;\n\n  // Ensure these inputs are for the expected token\n\tif(!inputTokens.every(\n\t\t(token) => token.id === tokenID,\n\t)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n\tfor (const token of inputTokens) {\n\t\ttotalAmtIn += BigInt(token.amt);\n\t}\n\n\tfor (const dest of distributions) {\n\t\ttotalAmtOut += BigInt(dest.amt);\n\t}\n\n\t// check that you have enough tokens to send\n\tif (totalAmtIn < totalAmtOut) {\n\t\tthrow new Error(\"Not enough tokens to send\");\n\t}\n\n\tchangeAmt = totalAmtIn - totalAmtOut;\n\n\t// add change to distributions\n\tif (changeAmt > 0n) {\n\t\tconst changeDistribution = {\n\t\t\taddress: tokenChangeAddress || ordPk.toAddress().toString(),\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t\tdistributions.push(changeDistribution);\n\t}\n\n\t// build destination inscriptions\n\tconst destinations: Destination[] = distributions.map((dest) => {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: \"transfer\",\n\t\t\tamt: dest.amt,\n\t\t}\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n\t\treturn {\n\t\t\taddress: dest.address,\n\t\t\tinscription: {\n\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\t\tcontentType: \"application/bsv-20\",\n\t\t\t},\n\t\t};\n\t});\n\n\tconst sendOrdinalsConfig: SendOrdinalsConfig = {\n\t\tpaymentUtxos: utxos,\n\t\tordinals: inputTokens,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tdestinations,\n\t\tchangeAddress: changeAddress || paymentPk.toAddress().toString(),\n\t\tsatsPerKb,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments,\n\t\tenforceUniformSend: false\n\t};\n\n\tconst { tx, spentOutpoints, payChange } = await sendOrdinals(sendOrdinalsConfig);\n\t\n\t// find the tokenChangeVout by looking for the destination with the tokenChangeAddress\n\tconst tokenChangeVout = destinations.findIndex(\n\t\t(d) => d.address === (tokenChangeAddress || ordPk.toAddress().toString())\n\t);\n\t\n\tlet tokenChange: TokenUtxo | undefined;\n\tif (tokenChangeVout !== -1) {\n\t\ttokenChange = {\n\t\t\tid: tokenID,\n\t\t\tamt: changeAmt.toString(),\n\t\t\tsatoshis: 1,\n\t\t\ttxid: tx.id(\"hex\"),\n\t\t\tvout: tokenChangeVout,\n\t\t\tscript: Buffer.from(tx.outputs[tokenChangeVout].lockingScript.toHex(), \"hex\").toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChange,\n\t\ttokenChange,\n\t}\n};"],"names":["toHex","utf8Str","Buffer","from","toString","DEFAULT_SAT_PER_KB","API_HOST","OrdP2PKH","P2PKH","lock","address","b64File","mediaType","metaData","ordAsm","undefined","ordHex","fileHex","trim","Error","fileMediaType","inscriptionAsm","toASM","app","type","key","value","Object","entries","LockingScript","fromASM","TokenType","fromBase58Check","Utils","inputFromB64Utxo","utxo","unlockScriptTemplate","input","fromUtxo","_extends","script","sourceTXID","txid","fetchPayUtxos","async","payUrl","console","log","payRes","fetch","ok","payUtxos","json","filter","u","satoshis","pubKeyHash","p2pkhScript","data","map","vout","toBinary","fetchNftUtxos","tokenId","collectionId","limit","offset","url","JSON","stringify","subTypeData","res","nftUtxos","list","outpoints","nftRes","method","headers","body","origin","outpoint","id","fetchTokenUtxos","protocol","BSV20","tokenUtxos","amt","signData","tx","signer","idKey","keyHost","sigma","Sigma","signedTx","sign","authToken","remoteSign","e","createOrdinals","utxos","destinations","paymentPk","changeAddress","satsPerKb","additionalPayments","config","modelOrFee","SatoshisPerKilobyte","Transaction","unlock","addInput","length","warn","destination","inscription","addOutput","lockingScript","dataB64","contentType","p","amount","to","totalInput","reduce","sum","BigInt","totalOutput","outputs","output","estimatedFee","computeFee","payChange","changeScript","toAddress","changeOutput","change","fee","spentOutpoints","sendOrdinals","enforceUniformSend","ordUtxo","ordinals","ordPk","push","_destination$inscript","_destination$inscript2","s","totalSatsIn","totalSatsOut","total","out","paymentUtxos","changeOut","sendUtxos","payments","payment","sendTxOut","transferOrdTokens","tokenID","inputTokens","distributions","tokenChangeAddress","changeAmt","totalAmtIn","totalAmtOut","every","token","dest","changeDistribution","transferInscription","op","tick","BSV21","sendOrdinalsConfig","tokenChangeVout","findIndex","d","tokenChange"],"mappings":"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"}