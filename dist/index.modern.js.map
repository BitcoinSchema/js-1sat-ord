{"version":3,"file":"index.modern.js","sources":["../src/utils/strings.ts","../src/ordP2pkh.ts","../src/index.ts"],"sourcesContent":["const toHex = (asciiStr: string) => {\n  const arr1: string[] = [];\n  for (let n = 0, l = asciiStr.length; n < l; n++) {\n    const hex = Number(asciiStr.charCodeAt(n)).toString(16);\n    arr1.push(hex);\n  }\n  return arr1.join(\"\");\n};\n\nconst toAscii = (hexStr: string) => {\n  let hex: string;\n  let i: number;\n\n  let result = \"\";\n  for (i = 0; i < hexStr.length; i++) {\n    hex = hexStr.charCodeAt(i).toString(16);\n    result += (`000${hex}`).slice(-4);\n  }\n\n  return result;\n};\n\nexport { toHex, toAscii };\n","import {\n\tLockingScript,\n\tP2PKH,\n\ttype Script,\n} from \"@bsv/sdk\";\nimport type { MAP } from \".\";\nimport { toHex } from \"./utils/strings\";\n\nconst MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\n\n/**\n * OrdP2PKH (1Sat Ordinal + Pay To Public Key Hash) class implementing ScriptTemplate.\n *\n * This class provides methods to create an Ordinal with Pay To Public Key Hash locking and unlocking scripts, \n * including the unlocking of P2PKH UTXOs with the private key.\n */\nexport default class OrdP2PKH extends P2PKH {\n\t/**\n\t * Creates a 1Sat Ordinal + P2PKH locking script for a given address string\n\t *\n\t * @param {string} destinationAddress - An address representing the public key hash.\n\t * @param {string} [b64File] - Base64 encoded file data.\n\t * @param {string} [mediaType] - Media type of the file.\n\t * @param {MAP} [metaData] - (optional) MAP Metadata to be included in OP_RETURN.\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\t// unlock method inherits from p2pkh\n\tlock(\n\t\tdestinationAddress: string,\n\t\tb64File?: string | undefined,\n\t\tmediaType?: string | undefined,\n\t\tmetaData?: MAP | undefined,\n\t): Script {\n\t\tlet ordAsm = \"\";\n\t\t// This can be omitted for reinscriptions that just update metadata\n\t\tif (b64File !== undefined && mediaType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(b64File, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(mediaType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`;\n\t\t}\n\n\t\t// Create ordinal output and inscription in a single output\n\t\tconst lockingScript = new P2PKH().lock(destinationAddress);\n\t\tlet inscriptionAsm = `${ordAsm ? `${ordAsm} ` : \"\"}${lockingScript.toASM()}`;\n\n\t\t// MAP.app and MAP.type keys are required\n\t\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t\t}\n\n\t\tif (metaData?.app && metaData?.type) {\n\t\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\t\tconst mapCmdValue = toHex(\"SET\");\n\t\t\tinscriptionAsm = `${inscriptionAsm} OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\t\tif (key !== \"cmd\") {\n\t\t\t\t\tinscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\n\t\t\t\t\t\tvalue as string,\n\t\t\t\t\t)}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn LockingScript.fromASM(inscriptionAsm);\n\t}\n}\n","import {\n\ttype PrivateKey,\n\ttype Script,\n\tTransaction,\n\ttype UnlockingScript,\n\tP2PKH,\n\tSatoshisPerKilobyte,\n\tfromUtxo,\n\ttype TransactionOutput,\n} from \"@bsv/sdk\";\nimport { type AuthToken, Sigma } from \"sigma-protocol\";\nimport OrdP2PKH from \"./ordP2pkh\";\n\n// biome-ignore lint/complexity/noBannedTypes: Reserved for future use\ntype Signer = {};\n\nexport interface LocalSigner extends Signer {\n\tidKey: PrivateKey;\n}\n\nexport interface RemoteSigner extends Signer {\n\tkeyHost: string;\n\tauthToken?: AuthToken;\n}\n\nexport type Destination = {\n\taddress: string;\n\tinscription?: Inscription;\n};\n\n/**\n * @typedef {Object} Utxo\n * @property {number} satoshis - Amount in satoshis\n * @property {string} txid - Transaction id\n * @property {number} vout - Output index\n * @property {string} script - Base64 encoded locking script\n */\nexport type Utxo = {\n\tsatoshis: number;\n\ttxid: string;\n\tvout: number;\n\tscript: string;\n};\n\nexport type Inscription = {\n\tdataB64: string;\n\tcontentType: string;\n};\n\nexport type MAP = {\n\tapp: string;\n\ttype: string;\n\t[prop: string]: string | string[];\n};\n\nexport type Payment = {\n\tto: string;\n\tamount: number;\n};\n\nconst createOrdinals = async (\n\tutxos: Utxo[],\n\tdestinations: Destination[],\n\tpaymentPk: PrivateKey,\n\tchangeAddress: string,\n\tsatsPerKb?: number,\n\tmetaData?: MAP,\n\tsigner?: LocalSigner | RemoteSigner,\n\tadditionalPayments: Payment[] = [],\n): Promise<Transaction> => {\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb || 10);\n\tlet tx = new Transaction();\n\n\t// Inputs\n\tfor (const utxo of utxos) {\n\t\tconst input = fromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\t}\n\n\t// Warn if creating many inscriptions at once\n\tif (destinations.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Outputs\n\t// Add inscription outputs\n\tfor (const destination of destinations) {\n\t\tif (!destination.inscription) {\n\t\t\tthrow new Error(\"Inscription is required for all destinations\");\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription.dataB64,\n\t\t\t\tdestination.inscription.contentType,\n\t\t\t\tmetaData,\n\t\t\t),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Add change output\n\ttx.addOutput({\n\t\tlockingScript: new P2PKH().lock(changeAddress),\n\t\tchange: true,\n\t});\n\n\t// Sign tx if idKey or remote signer like starfish/tokenpass\n\tconst idKey = (signer as LocalSigner)?.idKey;\n\tconst keyHost = (signer as RemoteSigner)?.keyHost;\n\n\tif (idKey) {\n\t\tconst sigma = new Sigma(tx);\n\t\tconst { signedTx } = sigma.sign(idKey);\n\t\ttx = signedTx;\n\t} else if (keyHost) {\n\t\tconst authToken = (signer as RemoteSigner)?.authToken;\n\t\tconst sigma = new Sigma(tx);\n\t\ttry {\n\t\t\tconst { signedTx } = await sigma.remoteSign(keyHost, authToken);\n\t\t\ttx = signedTx;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthrow new Error(`Remote signing to ${keyHost} failed`);\n\t\t}\n\t}\n\n\tawait tx.fee(modelOrFee);\n\tawait tx.sign();\n\n\treturn tx;\n};\n\nconst sendOrdinals = async (\n\tpaymentUtxos: Utxo[],\n\tordinals: Utxo[],\n\tpaymentPk: PrivateKey,\n\tchangeAddress: string,\n\tordPk: PrivateKey,\n\tdestinations: Destination[],\n\tsatsPerKb?: number,\n\tmetaData?: MAP,\n\tadditionalPayments: Payment[] = [],\n): Promise<Transaction> => {\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb || DEFAULT_SAT_PER_KB);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of ordinals) {\n\t\tconst input = fromB64Utxo(ordUtxo, new OrdP2PKH().unlock(ordPk));\n\t\ttx.addInput(input);\n\t}\n\n\t// Add payment inputs\n\tfor (const paymentUtxo of paymentUtxos) {\n\t\tconst input = fromB64Utxo(paymentUtxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// check that ordinals coming in matches ordinals going out if supplied\n\tif (destinations.length !== ordinals.length) {\n\t\tthrow new Error(\n\t\t\t\"Number of destinations must match number of ordinals being sent\",\n\t\t);\n\t}\n\n\t// Add ordinal outputs\n\tfor (const destination of destinations) {\n\t\tlet s: Script;\n\t\tif (\n\t\t\tdestination.inscription?.dataB64 &&\n\t\t\tdestination.inscription?.contentType\n\t\t) {\n\t\t\ts = new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription.dataB64,\n\t\t\t\tdestination.inscription.contentType,\n\t\t\t\tmetaData,\n\t\t\t);\n\t\t} else {\n\t\t\ts = new P2PKH().lock(destination.address);\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: s,\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Add change output\n\tconst changeScript = new P2PKH().lock(changeAddress);\n\tconst changeOut: TransactionOutput = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tawait tx.fee(modelOrFee);\n\tawait tx.sign();\n\n\treturn tx;\n};\n\n// sendUtxos sends p2pkh utxos to the given destinationAddress\nconst sendUtxos = async (\n\tutxos: Utxo[],\n\tpaymentPk: PrivateKey,\n\tdestinationAddress: string,\n\tamount: number,\n\tsatsPerKb?: number,\n): Promise<Transaction> => {\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb || DEFAULT_SAT_PER_KB);\n\n\tconst tx = new Transaction();\n\n\t// Inputs\n\tfor (const utxo of utxos) {\n\t\tconst input = fromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\tconst sendTxOut: TransactionOutput = {\n\t\tsatoshis: amount,\n\t\tlockingScript: new P2PKH().lock(destinationAddress),\n\t};\n\n\ttx.addOutput(sendTxOut);\n\n\t// Change\n\tconst changeAddress = paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(changeAddress);\n\n\tconst changeOut: TransactionOutput = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\n\ttx.addOutput(changeOut);\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\treturn tx;\n};\n\nexport { createOrdinals, sendOrdinals, sendUtxos };\n\nconst DEFAULT_SAT_PER_KB = 10;\n\nconst fromB64Utxo = (\n\tutxo: Utxo,\n\tunlockScriptTemplate: {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>;\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>;\n\t},\n) => {\n\treturn fromUtxo(\n\t\t{\n\t\t\t...utxo,\n\t\t\tscript: Buffer.from(utxo.script, \"base64\").toString(\"hex\"),\n\t\t},\n\t\tunlockScriptTemplate,\n\t);\n};\n"],"names":["toHex","asciiStr","arr1","n","l","length","hex","Number","charCodeAt","toString","push","join","OrdP2PKH","P2PKH","lock","destinationAddress","b64File","mediaType","metaData","ordAsm","undefined","ordHex","fileHex","Buffer","from","trim","Error","fileMediaType","inscriptionAsm","toASM","app","type","key","value","Object","entries","LockingScript","fromASM","createOrdinals","async","utxos","destinations","paymentPk","changeAddress","satsPerKb","signer","additionalPayments","modelOrFee","SatoshisPerKilobyte","tx","Transaction","utxo","input","fromB64Utxo","unlock","addInput","console","warn","destination","inscription","addOutput","satoshis","lockingScript","address","dataB64","contentType","p","amount","to","change","idKey","keyHost","sigma","Sigma","signedTx","sign","authToken","remoteSign","e","log","fee","sendOrdinals","paymentUtxos","ordinals","ordPk","DEFAULT_SAT_PER_KB","ordUtxo","paymentUtxo","_destination$inscript","_destination$inscript2","s","changeScript","sendUtxos","sendTxOut","toAddress","unlockScriptTemplate","fromUtxo","_extends","script"],"mappings":"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"}