{"version":3,"file":"index.modern.js","sources":["../src/utils/strings.ts","../src/constants.ts","../src/templates/ordP2pkh.ts","../src/utils/utxo.ts","../src/signData.ts","../src/createOrdinals.ts","../src/sendOrdinals.ts","../src/sendUtxos.ts","../src/types.ts","../src/transferOrdinals.ts"],"sourcesContent":["/**\n * Converts a string to its hexadecimal representation\n *\n * @param {string} utf8Str - The string to convert\n * @returns {string} The hexadecimal representation of the input string\n */\nconst toHex = (utf8Str: string): string => {\n  return Buffer.from(utf8Str).toString(\"hex\");\n};\n\nexport { toHex };\n","export const MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\nexport const DEFAULT_SAT_PER_KB = 10;\nexport const API_HOST = \"https://ordinals.gorillapool.io/api\";","import {\n\tLockingScript,\n\tP2PKH,\n\ttype Script,\n} from \"@bsv/sdk\";\nimport type { MAP } from \"../types\";\nimport { toHex } from \"../utils/strings\";\nimport { MAP_PREFIX } from \"../constants\";\n\n/**\n * OrdP2PKH (1Sat Ordinal + Pay To Public Key Hash) class implementing ScriptTemplate.\n *\n * This class provides methods to create an Ordinal with Pay To Public Key Hash locking and unlocking scripts. \n * It extends the standard P2PKH script template and provides a custom lock method.\n */\nexport default class OrdP2PKH extends P2PKH {\n\t/**\n\t * Creates a 1Sat Ordinal + P2PKH locking script for a given address string\n\t *\n\t * @param {string} address - An destination address for the Ordinal.\n\t * @param {string} [b64File] - Base64 encoded file data.\n\t * @param {string} [mediaType] - Media type of the file.\n\t * @param {MAP} [metaData] - (optional) MAP Metadata to be included in OP_RETURN.\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\t// unlock method inherits from p2pkh\n\tlock(\n\t\taddress: string,\n\t\tb64File?: string | undefined,\n\t\tmediaType?: string | undefined,\n\t\tmetaData?: MAP | undefined,\n\t): Script {\n\t\tlet ordAsm = \"\";\n\t\t// This can be omitted for reinscriptions that just update metadata\n\t\tif (b64File !== undefined && mediaType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(b64File, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(mediaType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`;\n\t\t}\n\n\t\t// Create ordinal output and inscription in a single output\n\t\tconst lockingScript = new P2PKH().lock(address);\n\t\tlet inscriptionAsm = `${ordAsm ? `${ordAsm} ` : \"\"}${lockingScript.toASM()}`;\n\n\t\t// MAP.app and MAP.type keys are required\n\t\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t\t}\n\n\t\tif (metaData?.app && metaData?.type) {\n\t\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\t\tconst mapCmdValue = toHex(\"SET\");\n\t\t\tinscriptionAsm = `${inscriptionAsm} OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\t\tif (key !== \"cmd\") {\n\t\t\t\t\tinscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\n\t\t\t\t\t\tvalue as string,\n\t\t\t\t\t)}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn LockingScript.fromASM(inscriptionAsm);\n\t}\n}\n","import { type Transaction, type UnlockingScript, fromUtxo, type TransactionInput, Utils, P2PKH } from \"@bsv/sdk\";\nimport type { Utxo } from \"../types\";\nimport { API_HOST } from \"../constants\";\n\nconst { fromBase58Check } = Utils;\n\n/**\n * Converts a Utxo object with a base64 encoded script to a Utxo object with a hex encoded script\n * @param {Utxo} utxo - Utxo object with base64 encoded script\n * @param {Object} unlockScriptTemplate - Object with sign and estimateLength functions\n * @returns {TransactionInput} Utxo object with hex encoded script\n */\nexport const inputFromB64Utxo = (\n\tutxo: Utxo,\n\tunlockScriptTemplate: {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>;\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>;\n\t},\n): TransactionInput => {\n\tconst input = fromUtxo(\n\t\t{\n\t\t\t...utxo,\n\t\t\tscript: Buffer.from(utxo.script, \"base64\").toString(\"hex\"),\n\t\t},\n\t\tunlockScriptTemplate,\n\t);\n\tinput.sourceTXID = utxo.txid;\n\treturn input;\n};\n\nexport const fetchPayUtxos = async (address: string) => {\n  const payUrl = `${API_HOST}/txos/address/${address}/unspent?bsv20=false`;\n  console.log({ payUrl });\n  const payRes = await fetch(payUrl);\n  if (!payRes.ok) {\n    console.error(\"Error fetching pay utxos:\", payRes.statusText);\n    return;\n  }\n  let payUtxos = await payRes.json();\n  // exclude all 1 satoshi utxos\n  payUtxos = payUtxos.filter((u: { satoshis: number }) => u.satoshis !== 1)\n\n  // Get pubkey hash from address\n  const pubKeyHash = fromBase58Check(address)\n  const p2pkhScript = new P2PKH().lock(pubKeyHash.data)\n  payUtxos = payUtxos.map((utxo: {\n\t\ttxid: string;\n\t\tvout: number;\n\t\tsatoshis: number;\n\t}) => ({\n      txid: utxo.txid,\n      vout: utxo.vout,\n      satoshis: utxo.satoshis,\n      script: Buffer.from(p2pkhScript.toBinary()).toString(\"base64\"),\n  }))\n  return payUtxos\n}","import type { Transaction } from \"@bsv/sdk\";\nimport { Sigma } from \"sigma-protocol\";\nimport type { LocalSigner, RemoteSigner } from \"./types\";\n\n/**\n * Signs data in the transaction with Sigma protocol\n * @param {Transaction} tx - Transaction to sign\n * @param {LocalSigner | RemoteSigner} signer - Local or remote signer (used for data signature)\n * @returns {Transaction} Transaction with signed data\n */\nexport const signData = async (\n\ttx: Transaction,\n\tsigner: LocalSigner | RemoteSigner,\n): Promise<Transaction> => {\n\t// Sign tx if idKey or remote signer like starfish/tokenpass\n\tconst idKey = (signer as LocalSigner)?.idKey;\n\tconst keyHost = (signer as RemoteSigner)?.keyHost;\n\n\tif (idKey) {\n\t\tconst sigma = new Sigma(tx);\n\t\tconst { signedTx } = sigma.sign(idKey);\n\t\treturn signedTx;\n\t}\n\tif (keyHost) {\n\t\tconst authToken = (signer as RemoteSigner)?.authToken;\n\t\tconst sigma = new Sigma(tx);\n\t\ttry {\n\t\t\tconst { signedTx } = await sigma.remoteSign(keyHost, authToken);\n\t\t\treturn signedTx;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthrow new Error(`Remote signing to ${keyHost} failed`);\n\t\t}\n\t}\n\tthrow new Error(\"Signer must be a LocalSigner or RemoteSigner\");\n};\n","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n} from \"@bsv/sdk\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n\tUtxo,\n\tDestination,\n\tMAP,\n\tLocalSigner,\n\tRemoteSigner,\n\tPayment,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { signData } from \"./signData\";\n\ntype CreateOrdinalsResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChangeVout?: number;\n};\n\nexport type CreateOrdinalsConfig = {\n\tutxos: Utxo[];\n\tdestinations: Destination[];\n\tpaymentPk: PrivateKey;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: MAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n};\n\n/**\n * Creates a transaction with inscription outputs\n * @param {CreateOrdinalsConfig} config - Configuration object for creating ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {string} config.changeAddress - Optional. Address to send change to. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {MAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Local or remote signer (used for data signature)\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<CreateOrdinalsResult>} Transaction with inscription outputs\n */\nexport const createOrdinals = async (\n\tconfig: CreateOrdinalsConfig\n): Promise<CreateOrdinalsResult> => {\n\tconst {\n\t\tutxos,\n\t\tdestinations,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Inputs\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\t}\n\n\t// Warn if creating many inscriptions at once\n\tif (destinations.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Outputs\n\t// Add inscription outputs\n\tfor (const destination of destinations) {\n\t\tif (!destination.inscription) {\n\t\t\tthrow new Error(\"Inscription is required for all destinations\");\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription.dataB64,\n\t\t\t\tdestination.inscription.contentType,\n\t\t\t\tmetaData,\n\t\t\t),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\tlet payChangeVout: number | undefined;\n\t\n\t// Calculate total input and output amounts\n\tconst totalInput = utxos.reduce((sum, utxo) => sum + BigInt(utxo.satoshis), 0n);\n\tconst totalOutput = tx.outputs.reduce((sum, output) => sum + BigInt(output.satoshis || 0), 0n);\n\t\n\t// Estimate fee\n\tconst estimatedFee = await modelOrFee.computeFee(tx);\n\t\n\t// Check if change is needed\n\tif (totalInput > totalOutput + BigInt(estimatedFee)) {\n\t\t// Add change output\n\t\ttx.addOutput({\n\t\t\tlockingScript: new P2PKH().lock(\n\t\t\t\tchangeAddress || paymentPk.toAddress().toString(),\n\t\t\t),\n\t\t\tchange: true,\n\t\t});\n\t\tpayChangeVout = tx.outputs.length - 1;\n\t}\n\t\n\tif (signer) {\n\t\ttx = await signData(tx, signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChangeVout,\n\t};\n};","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype Script,\n\ttype TransactionOutput,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n\tUtxo,\n\tDestination,\n\tMAP,\n\tPayment,\n\tLocalSigner,\n\tRemoteSigner,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\n\nexport type SendOrdinalsResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChangeVout?: number;\n};\n\nexport type SendOrdinalsConfig = {\n\tpaymentUtxos: Utxo[];\n\tordinals: Utxo[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tdestinations: Destination[];\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: MAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n\tenforceUniformSend?: boolean;\n}\n\n/**\n * Sends ordinals to the given destinations\n * @param {SendOrdinalsConfig} config - Configuration object for sending ordinals\n * @param {Utxo[]} config.paymentUtxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.ordinals - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {string} config.changeAddress - Optional. Address to send change to, if any. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {MAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @param {boolean} config.enforceUniformSend - Optional. Default: true. Enforce that the number of destinations matches the number of ordinals being sent. Sending ordinals requires a 1:1 mapping of destinations to ordinals. This is only used for sub-protocols like BSV21 that manage tokens without sending the inscriptions directly.\n * @returns {Promise<SendOrdinalsResult>} Transaction, spent outpoints, and change vout\n */\nexport const sendOrdinals = async (config: SendOrdinalsConfig): Promise<SendOrdinalsResult> => {\n\tif (!config.satsPerKb) {\n\t\tconfig.satsPerKb = DEFAULT_SAT_PER_KB;\n\t}\n\tif (!config.additionalPayments) {\n\t\tconfig.additionalPayments = [];\n\t}\n\tif (config.enforceUniformSend === undefined) {\n\t\tconfig.enforceUniformSend = true;\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(config.satsPerKb);\n\tlet tx = new Transaction();\n\tconst spentOutpoints: string[] = [];\n\tlet payChangeVout: number | undefined;\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of config.ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(ordUtxo, new OrdP2PKH().unlock(config.ordPk));\n\t\tspentOutpoints.push(`${ordUtxo.txid}_${ordUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// check that ordinals coming in matches ordinals going out if supplied\n\tif (config.enforceUniformSend && config.destinations.length !== config.ordinals.length) {\n\t\tthrow new Error(\n\t\t\t\"Number of destinations must match number of ordinals being sent\",\n\t\t);\n\t}\n\n\t// Add ordinal outputs\n\tfor (const destination of config.destinations) {\n\t\tlet s: Script;\n\t\tif (\n\t\t\tdestination.inscription?.dataB64 &&\n\t\t\tdestination.inscription?.contentType\n\t\t) {\n\t\t\ts = new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription.dataB64,\n\t\t\t\tdestination.inscription.contentType,\n\t\t\t\tconfig.metaData,\n\t\t\t);\n\t\t} else {\n\t\t\ts = new P2PKH().lock(destination.address);\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: s,\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of config.additionalPayments) {\n\t\tconsole.log(\"Additional payment\", p);\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Add payment inputs\n\tfor (const paymentUtxo of config.paymentUtxos) {\n\t\tconst input = inputFromB64Utxo(paymentUtxo, new P2PKH().unlock(config.paymentPk));\n\t\tspentOutpoints.push(`${paymentUtxo.txid}_${paymentUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Add change output if needed\n\tconst fee = await modelOrFee.computeFee(tx);\n\tconst totalSatsIn = config.paymentUtxos.reduce(\n\t\t(total, utxo) => total + BigInt(utxo.satoshis),\n\t\t0n,\n\t);\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + (out.satoshis || 0),\n\t\t0,\n\t);\n\n\tif (totalSatsIn < totalSatsOut) {\n\t\tthrow new Error(\"Not enough ordinals to send\");\n\t}\n\t\n\tif (totalSatsIn > totalSatsOut + fee) {\n\t\tconst changeScript = new P2PKH().lock(\n\t\t\tconfig.changeAddress || config.paymentPk.toAddress().toString(),\n\t\t);\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChangeVout = tx.outputs.length;\n\t\ttx.addOutput(changeOut);\n\t}\n\n\tif (config.signer) {\n\t\ttx = await signData(tx, config.signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChangeVout,\n\t};\n};","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype TransactionOutput,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type { Distribution, Payment, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\nexport type SendUtxosResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChangeVout?: number;\n};\n\nexport type SendUtxosConfig = {\n\tutxos: Utxo[];\n\tpaymentPk: PrivateKey;\n\tpayments: Payment[];\n\tsatsPerKb?: number;\n\tchangeAddress?: string;\n};\n\n/**\n * Sends utxos to the given destination\n * @param {SendUtxosConfig} config - Configuration object for sending utxos\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {Payment[]} config.payments - Array of payments with addresses and amounts\n * @param {number} [config.satsPerKb] - Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {string} [config.changeAddress] - Address to send change to. If not provided, defaults to paymentPk address\n * @returns {Promise<SendUtxosResult>} Transaction with utxo outputs\n */\nexport const sendUtxos = async (\n\tconfig: SendUtxosConfig,\n): Promise<SendUtxosResult> => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tpayments,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tchangeAddress = paymentPk.toAddress().toString(),\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\t// Outputs\n\tfor (const payment of payments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new P2PKH().lock(payment.to),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + (out.satoshis || 0),\n\t\t0,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + fee) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + fee) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to send. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChangeVout: number | undefined;\n\tif (totalSatsIn > totalSatsOut + fee) {\n\t\t// Change\n\t\tconst changeScript = new P2PKH().lock(changeAddress);\n\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChangeVout = tx.outputs.length;\n\t\ttx.addOutput(changeOut);\n\t} else if (totalSatsIn < totalSatsOut + fee) {\n\t\tconsole.log(\"No change needed\");\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// we dont want -1 we want undefined in that case\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChangeVout,\n\t};\n};\n","import type { PrivateKey } from \"@bsv/sdk\";\nimport type { AuthToken } from \"sigma-protocol\";\n\n// biome-ignore lint/complexity/noBannedTypes: Reserved for future use\ntype Signer = {};\n\nexport interface LocalSigner extends Signer {\n\tidKey: PrivateKey;\n}\n\nexport interface RemoteSigner extends Signer {\n\tkeyHost: string;\n\tauthToken?: AuthToken;\n}\n\nexport type Destination = {\n\taddress: string;\n\tinscription?: Inscription;\n};\n\n/**\n * @typedef {Object} Distribution\n * @property {string} address - Destination address. Must be a Ordinals address (BSV address for recieving 1Sat ordinals tokens).\n * @property {string} amt - Number of tokens as a string, considering decimals. Not display format. Ex. 100000000 for 1 token with 8 decimal places.\n */\nexport type Distribution = {\n\taddress: string;\n\tamt: string;\n};\n\n/**\n * @typedef {Object} Utxo\n * @property {number} satoshis - Amount in satoshis\n * @property {string} txid - Transaction id\n * @property {number} vout - Output index\n * @property {string} script - Base64 encoded locking script\n */\nexport type Utxo = {\n\tsatoshis: number;\n\ttxid: string;\n\tvout: number;\n\tscript: string;\n};\n\n/**\n * @typedef {Object} TokenUtxo\n * @property {string} amt - Number of tokens as a string\n * @property {string} id - Token id -  either tick or id depending on protocol\n * @property {string} satoshis - Always 1\n */\nexport interface TokenUtxo extends Utxo {\n\tamt: string;\n\tid: string;\n\tsatoshis: 1;\n}\n\nexport type Inscription = {\n\tdataB64: string;\n\tcontentType: string;\n};\n\nexport type ImageContentType =\n\t| \"image/png\"\n\t| \"image/jpeg\"\n\t| \"image/gif\"\n\t| \"image/svg+xml\"\n\t| \"image/webp\";\n\n/**\n * @typedef {Object} IconInscription\n * @property {string} dataB64 - Base64 encoded image data. Must be a square image.\n * @property {ImageContentType} contentType - Media type of the image\n */\nexport type IconInscription = {\n\tdataB64: string;\n\tcontentType: ImageContentType;\n};\n\nexport type MAP = {\n\tapp: string;\n\ttype: string;\n\t[prop: string]: string;\n};\n\nexport type Payment = {\n\tto: string;\n\tamount: number;\n};\n\nexport type TokenInscription = {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\" | \"mint\" | \"deploy+mint\";\n};\n\nexport interface MintTokenInscription extends TokenInscription {\n\top: \"mint\";\n}\n\nexport interface DeployMintTokenInscription extends TokenInscription {\n\top: \"deploy+mint\";\n\tsym: string;\n\ticon: string;\n}\n\nexport interface TransferTokenInscription extends TokenInscription {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\";\n}\n\nexport interface TransferBSV20Inscription extends TransferTokenInscription {\n\ttick: string;\n}\n\nexport interface TransferBSV21Inscription extends TransferTokenInscription {\n\tid: string;\n}\n\nexport enum TokenType {\n\tBSV20 = \"bsv20\",\n\tBSV21 = \"bsv21\",\n}\n","import type {\n\tPrivateKey,\n\tTransaction,\n} from \"@bsv/sdk\";\nimport {\n\ttype Destination,\n\ttype Distribution,\n\ttype LocalSigner,\n\ttype MAP,\n\ttype Payment,\n\ttype RemoteSigner,\n\tTokenType,\n\ttype TokenUtxo,\n\ttype TransferBSV20Inscription,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n  type TransferBSV21Inscription,\n} from \"./types\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { type SendOrdinalsResult, sendOrdinals, type SendOrdinalsConfig } from \"./sendOrdinals\";\n\ninterface TransferOrdTokensResult extends SendOrdinalsResult {\n\ttokenChangeVout?: number;\n}\n\nexport type TransferOrdTokensConfig = {\n\tprotocol: TokenType;\n\ttokenID: string;\n\tutxos: Utxo[];\n\tinputTokens: TokenUtxo[];\n\tdistributions: Distribution[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tchangeAddress?: string;\n\ttokenChangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: MAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n}\n\n/**\n * Transfer tokens to a destination\n * @param {TransferOrdTokensConfig} config - Configuration object for transferring tokens\n * @param {TokenType} config.protocol - Token protocol. Must be TokenType.BSV20 or TokenType.BSV21\n * @param {string} config.tokenID - Token ID. Either the tick or id value depending on the protocol\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {TokenUtxo[]} config.inputTokens - Token utxos to spend\n * @param {Distribution[]} config.distributions - Array of destinations with addresses and amounts\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {string} config.changeAddress - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {string} config.tokenChangeAddress - Optional. Address to send token change to, if any. If not provided, defaults to ordPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {MAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<TransferOrdTokensResult>} Transaction with token transfer outputs\n */\nexport const transferOrdTokens = async (config: TransferOrdTokensConfig): Promise<TransferOrdTokensResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tinputTokens,\n\t\tdistributions,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tchangeAddress,\n\t\ttokenChangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\t// calculate change amount\n\tlet changeAmt = 0n;\n\tlet totalAmtIn = 0n;\n\tlet totalAmtOut = 0n;\n\n  // Ensure these inputs are for the expected token\n\tif(!inputTokens.every(\n\t\t(token) => token.id === tokenID,\n\t)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n\tfor (const token of inputTokens) {\n\t\ttotalAmtIn += BigInt(token.amt);\n\t}\n\n\tfor (const dest of distributions) {\n\t\ttotalAmtOut += BigInt(dest.amt);\n\t}\n\n\t// check that you have enough tokens to send\n\tif (totalAmtIn < totalAmtOut) {\n\t\tthrow new Error(\"Not enough tokens to send\");\n\t}\n\n\tchangeAmt = totalAmtIn - totalAmtOut;\n\n\t// add change to distributions\n\tif (changeAmt > 0n) {\n\t\tconst changeDistribution = {\n\t\t\taddress: tokenChangeAddress || ordPk.toAddress().toString(),\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t\tdistributions.push(changeDistribution);\n\t}\n\n\t// build destination inscriptions\n\tconst destinations: Destination[] = distributions.map((dest) => {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: \"transfer\",\n\t\t\tamt: dest.amt,\n\t\t}\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n\t\treturn {\n\t\t\taddress: dest.address,\n\t\t\tinscription: {\n\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\t\tcontentType: \"application/bsv-20\",\n\t\t\t},\n\t\t};\n\t});\n\n\tconst sendOrdinalsConfig: SendOrdinalsConfig = {\n\t\tpaymentUtxos: utxos,\n\t\tordinals: inputTokens,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tdestinations,\n\t\tchangeAddress: changeAddress || paymentPk.toAddress().toString(),\n\t\tsatsPerKb,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments,\n\t\tenforceUniformSend: false\n\t};\n\n\tconst { tx, spentOutpoints, payChangeVout } = await sendOrdinals(sendOrdinalsConfig);\n\t\n\t// find the tokenChangeVout by looking for the destination with the tokenChangeAddress\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChangeVout,\n\t\ttokenChangeVout: destinations.findIndex(\n\t\t\t(d) => d.address === (tokenChangeAddress || ordPk.toAddress().toString())\n\t\t),\n\t}\n};"],"names":["toHex","utf8Str","Buffer","from","toString","DEFAULT_SAT_PER_KB","OrdP2PKH","P2PKH","lock","address","b64File","mediaType","metaData","ordAsm","undefined","ordHex","fileHex","trim","Error","fileMediaType","inscriptionAsm","toASM","app","type","key","value","Object","entries","LockingScript","fromASM","fromBase58Check","Utils","inputFromB64Utxo","utxo","unlockScriptTemplate","input","fromUtxo","_extends","script","sourceTXID","txid","fetchPayUtxos","async","payUrl","console","log","payRes","fetch","ok","error","statusText","payUtxos","json","filter","u","satoshis","pubKeyHash","p2pkhScript","data","map","vout","toBinary","signData","tx","signer","idKey","keyHost","sigma","Sigma","signedTx","sign","authToken","remoteSign","e","createOrdinals","utxos","destinations","paymentPk","changeAddress","satsPerKb","additionalPayments","config","modelOrFee","SatoshisPerKilobyte","payChangeVout","Transaction","unlock","addInput","length","warn","destination","inscription","addOutput","lockingScript","dataB64","contentType","p","amount","to","totalInput","reduce","sum","BigInt","totalOutput","outputs","output","estimatedFee","computeFee","toAddress","change","fee","spentOutpoints","sendOrdinals","enforceUniformSend","ordUtxo","ordinals","ordPk","push","_destination$inscript","_destination$inscript2","s","paymentUtxo","paymentUtxos","totalSatsIn","total","totalSatsOut","out","changeScript","sendUtxos","payments","payment","sendTxOut","TokenType","transferOrdTokens","protocol","tokenID","inputTokens","distributions","tokenChangeAddress","changeAmt","totalAmtIn","totalAmtOut","every","token","id","amt","dest","changeDistribution","transferInscription","op","BSV20","tick","BSV21","JSON","stringify","sendOrdinalsConfig","tokenChangeVout","findIndex","d"],"mappings":"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"}