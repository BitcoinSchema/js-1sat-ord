{"version":3,"file":"index.modern.js","sources":["../src/utils/strings.ts","../src/constants.ts","../src/templates/ordP2pkh.ts","../src/types.ts","../src/utils/utxo.ts","../src/signData.ts","../src/utils/subtypeData.ts","../src/createOrdinals.ts","../src/sendOrdinals.ts","../src/sendUtxos.ts","../src/transferOrdinals.ts","../src/validate.ts","../src/templates/ordLock.ts","../src/createListings.ts","../src/cancelListings.ts","../src/purchaseOrdListing.ts","../src/utils/icon.ts","../src/deployBsv21.ts"],"sourcesContent":["/**\n * Converts a string to its hexadecimal representation\n *\n * @param {string} utf8Str - The string to convert\n * @returns {string} The hexadecimal representation of the input string\n */\nconst toHex = (utf8Str: string): string => {\n  return Buffer.from(utf8Str).toString(\"hex\");\n};\n\nexport { toHex };\n","export const MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\nexport const DEFAULT_SAT_PER_KB = 10;\nexport const API_HOST = \"https://ordinals.gorillapool.io/api\";","import {\n\tLockingScript,\n\tP2PKH,\n\ttype Script,\n} from \"@bsv/sdk\";\nimport type { Inscription, MAP } from \"../types\";\nimport { toHex } from \"../utils/strings\";\nimport { MAP_PREFIX } from \"../constants\";\n\n/**\n * OrdP2PKH (1Sat Ordinal + Pay To Public Key Hash) class implementing ScriptTemplate.\n *\n * This class provides methods to create an Ordinal with Pay To Public Key Hash locking and unlocking scripts. \n * It extends the standard P2PKH script template and provides a custom lock method.\n */\nexport default class OrdP2PKH extends P2PKH {\n\t/**\n\t * Creates a 1Sat Ordinal + P2PKH locking script for a given address string\n\t *\n\t * @param {string} address - An destination address for the Ordinal.\n\t * @param {Object} [inscription] - Base64 encoded file data and Content type of the file.\n\t * @param {MAP} [metaData] - (optional) MAP Metadata to be included in OP_RETURN.\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\t// unlock method inherits from p2pkh\n\tlock(\n\t\taddress: string,\n    inscription?: Inscription,\n\t\tmetaData?: MAP | undefined,\n\t): Script {\n\t\tlet ordAsm = \"\";\n\t\t// This can be omitted for reinscriptions that just update metadata\n\t\tif (inscription?.dataB64 !== undefined && inscription?.contentType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(inscription.dataB64, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(inscription.contentType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`;\n\t\t}\n\n\t\t// Create ordinal output and inscription in a single output\n\t\tconst lockingScript = new P2PKH().lock(address);\n\t\tlet inscriptionAsm = `${ordAsm ? `${ordAsm} ` : \"\"}${lockingScript.toASM()}`;\n\n\t\t// MAP.app and MAP.type keys are required\n\t\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t\t}\n\n\t\tif (metaData?.app && metaData?.type) {\n\t\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\t\tconst mapCmdValue = toHex(\"SET\");\n\t\t\tinscriptionAsm = `${inscriptionAsm} OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\t\tif (key !== \"cmd\") {\n\t\t\t\t\tinscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\n\t\t\t\t\t\tvalue as string,\n\t\t\t\t\t)}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn LockingScript.fromASM(inscriptionAsm);\n\t}\n}\n","import type { PrivateKey, Script, Transaction } from \"@bsv/sdk\";\nimport type { AuthToken } from \"sigma-protocol\";\n\n// biome-ignore lint/complexity/noBannedTypes: Reserved for future use\ntype Signer = {};\n\nexport interface LocalSigner extends Signer {\n\tidKey: PrivateKey;\n}\n\nexport interface RemoteSigner extends Signer {\n\tkeyHost: string;\n\tauthToken?: AuthToken;\n}\n\nexport type Destination = {\n\taddress: string;\n\tinscription?: Inscription;\n};\n\n/**\n * @typedef {Object} Listing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n * @property {Utxo} listingUtxo - Utxo of the listing\n */\nexport type Listing = {\n\tpayAddress: string;\n\tprice: number;\n\tordAddress: string;\n\tlistingUtxo: Utxo;\n}\n\n/**\n * @typedef {Object} TokenListing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n */\nexport type TokenListing = {\n\tpayAddress: string;\n\tprice: number;\n\tamt: bigint;\n\tordAddress: string;\n}\n\n/**\n * @typedef {Object} Distribution\n * @property {string} address - Destination address. Must be a Ordinals address (BSV address for recieving 1Sat ordinals tokens).\n * @property {string} amt - Number of tokens as a string, considering decimals. Not display format. Ex. 100000000 for 1 token with 8 decimal places.\n */\nexport type Distribution = {\n\taddress: string;\n\tamt: string;\n};\n\n/**\n * @typedef {Object} Utxo\n * @property {number} satoshis - Amount in satoshis\n * @property {string} txid - Transaction id\n * @property {number} vout - Output index\n * @property {string} script - Base64 encoded locking script\n */\nexport type Utxo = {\n\tsatoshis: number;\n\ttxid: string;\n\tvout: number;\n\tscript: string;\n};\n\n/**\n * @typedef {Object} NftUtxo\n * @property {string} collectionId - Optional. Collection id of the NFT\n * @property {string} contentType - Media type of the NFT\n * @property {string} creatorBapId - Optional. Creator BAP id of the NFT\n * @property {string} origin - Origin address of the NFT\n * @property {number} satoshis - Always 1\n */\nexport interface NftUtxo extends Utxo {\n\tcollectionId?: string;\n\tcontentType: string;\n\tcreatorBapId?: string;\n\torigin: string;\n\tsatoshis: 1;\n}\n\n/**\n * @typedef {Object} TokenUtxo\n * @property {string} amt - Number of tokens as a string\n * @property {string} id - Token id -  either tick or id depending on protocol\n * @property {string} satoshis - Always 1\n */\nexport interface TokenUtxo extends Utxo {\n\tamt: string;\n\tid: string;\n\tsatoshis: 1;\n}\n\nexport type Inscription = {\n\tdataB64: string;\n\tcontentType: string;\n};\n\nexport type ImageContentType =\n\t| \"image/png\"\n\t| \"image/jpeg\"\n\t| \"image/gif\"\n\t| \"image/svg+xml\"\n\t| \"image/webp\";\n\n/**\n * @typedef {Object} IconInscription\n * @property {string} dataB64 - Base64 encoded image data. Must be a square image.\n * @property {ImageContentType} contentType - Media type of the image\n */\nexport type IconInscription = {\n\tdataB64: string;\n\tcontentType: ImageContentType;\n};\n\nexport type Payment = {\n\tto: string;\n\tamount: number;\n};\n\nexport type TokenInscription = {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\" | \"mint\" | \"deploy+mint\" | \"burn\";\n  dec?: string;\n};\n\nexport interface MintTokenInscription extends TokenInscription {\n\top: \"mint\";\n}\n\nexport interface DeployMintTokenInscription extends TokenInscription {\n\top: \"deploy+mint\";\n\tsym: string;\n\ticon: string;\n}\n\nexport interface TransferTokenInscription extends TokenInscription {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\" | \"burn\";\n}\n\nexport interface TransferBSV20Inscription extends TransferTokenInscription {\n\ttick: string;\n}\n\nexport interface TransferBSV21Inscription extends TransferTokenInscription {\n\tid: string;\n}\n\nexport enum TokenType {\n\tBSV20 = \"bsv20\",\n\tBSV21 = \"bsv21\",\n}\n\nexport type CreateOrdinalsResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\n/**\n * MAP (Magic Attribute Protocol) metadata object with stringified values for writing to the blockchain\n * @typedef {Object} MAP\n * @property {string} app - Application identifier\n * @property {string} type - Metadata type\n * @property {string} [prop] - Optional. Additional metadata properties\n */\nexport type MAP = {\n\tapp: string;\n\ttype: string;\n\t[prop: string]: string;\n};\n\nexport type PreMAP = {\n\tapp: string;\n\ttype: string;\n\t[prop: string]: unknown;\n\troyalties?: Royalty[];\n\tsubTypeData?: CollectionSubTypeData | CollectionItemSubTypeData;\n};\n\nexport type CreateOrdinalsConfig = {\n\tutxos: Utxo[];\n\tdestinations: Destination[];\n\tpaymentPk: PrivateKey;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: PreMAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n};\n\nexport enum RoytaltyType {\n\tPaymail = \"paymail\",\n\tAddress = \"address\",\n\tScript = \"script\",\n}\n\n/**\n * Royalty object\n * @typedef {Object} Royalty\n * @property {RoytaltyType} type - Royalty type, string, one of \"paymail\", \"address\", \"script\"\n * @property {string} destination - Royalty destination\n * @property {string} percentage - Royalty percentage as a string float 0-1\n */\nexport type Royalty = {\n\ttype: RoytaltyType;\n\tdestination: string;\n\tpercentage: string; // string float 0-1\n};\n\nexport interface CreateOrdinalsMetadata extends PreMAP {\n\ttype: \"ord\",\n\tname: string,\n\tpreviewUrl?: string,\n}\n\nexport interface CreateOrdinalsCollectionMetadata extends CreateOrdinalsMetadata {\n\tsubType: \"collection\",\n\tsubTypeData: CollectionSubTypeData, // JSON stringified CollectionSubTypeData\n\troyalties?: Royalty[],\n};\n\nexport interface CreateOrdinalsCollectionItemMetadata extends CreateOrdinalsMetadata {\n\tsubType: \"collectionItem\",\n\tsubTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n};\n\n/**\n * Configuration object for creating an ordinals collection\n * @typedef {Object} CreateOrdinalsCollectionConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collection\"\n * @property metaData.name - Collection name\n * @property metaData.subTypeData - JSON stringified CollectionSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionConfig extends CreateOrdinalsConfig {\n\tmetaData: CreateOrdinalsCollectionMetadata\n}\n\nexport type CollectionTraits = {\n\t[trait: string]: CollectionTrait;\n};\n\nexport type CollectionTrait = {\n\tvalues: string[];\n\toccurancePercentages: string[];\n};\n\nexport type Rarity = {\n\t[key: string]: string;\n}\n\nexport type RarityLabels = Rarity[]\nexport interface CollectionSubTypeData {\n\tdescription: string;\n\tquantity: number;\n\trarityLabels: RarityLabels;\n\ttraits: CollectionTraits;\n}\n\nexport interface CreateOrdinalsCollectionItemMetadata extends PreMAP {\n\ttype: \"ord\",\n\tname: string,\n\tsubType: \"collectionItem\",\n\tsubTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n\troyalties?: Royalty[],\n\tpreviewUrl?: string,\n}\n\n/**\n * Configuration object for creating an ordinals collection item\n * @typedef {Object} CreateOrdinalsCollectionItemConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection item\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collectionItem\"\n * @property metaData.name - Collection item name\n * @property metaData.subTypeData - JSON stringified CollectionItemSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionItemConfig extends CreateOrdinalsConfig {\n\tmetaData: CreateOrdinalsCollectionItemMetadata\n}\n\n/**\n * Subtype data for an ordinals collection item\n * @typedef {Object} CollectionItemSubTypeData\n * @property {string} collectionId - Collection id\n * @property {number} mintNumner - Mint number\n * @property {number} rank - Rank\n * @property {string} rarityLabel - Rarity label\n * @property {string} traits - traits object\n * @property {string} attachments - array of attachment objects\n */\nexport interface CollectionItemSubTypeData {\n\tcollectionId: string;\n\tmintNumber?: number;\n\trank?: number;\n\trarityLabel?: RarityLabels;\n\ttraits?: CollectionItemTraits;\n\tattachments?: CollectionItemAttachment[];\n}\n\nexport type CollectionItemTraits = {\n\tname: string;\n\tvalue: string;\n\trarityLabel?: string;\n\toccurancePercentrage?: string;\n};\n\nexport type CollectionItemAttachment = {\n\tname: string;\n\tdescription?: string;\n\t\"content-type\": string;\n\turl: string;\n}\n\nexport type SendOrdinalsResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type SendOrdinalsConfig = {\n\tpaymentUtxos: Utxo[];\n\tordinals: Utxo[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tdestinations: Destination[];\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: PreMAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n\tenforceUniformSend?: boolean;\n}\n\nexport type DeployBsv21TokenResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type DeployBsv21TokenConfig = {\n\tsymbol: string;\n  decimals?: number;\n\ticon: string | IconInscription;\n\tutxos: Utxo[];\n\tinitialDistribution: Distribution;\n\tpaymentPk: PrivateKey;\n\tdestinationAddress: string;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[];\n};\n\nexport type SendUtxosResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type SendUtxosConfig = {\n\tutxos: Utxo[];\n\tpaymentPk: PrivateKey;\n\tpayments: Payment[];\n\tsatsPerKb?: number;\n\tchangeAddress?: string;\n};\n\nexport interface TransferOrdTokensResult extends SendOrdinalsResult {\n\ttokenChange?: TokenUtxo;\n}\n\nexport type TransferOrdTokensConfig = {\n\tprotocol: TokenType;\n\ttokenID: string;\n\tutxos: Utxo[];\n\tinputTokens: TokenUtxo[];\n\tdistributions: Distribution[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tchangeAddress?: string;\n\ttokenChangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: PreMAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n\tburn?: boolean;\n}\n\nexport type CreateOrdListingsConfig = {\n\tutxos: Utxo[];\n\tlistings: Listing[];\n\troyalty: number;\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey,\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[];\n}\n\nexport type PurchaseOrdListingConfig = {\n\tutxos: Utxo[];\n\tpaymentPk: PrivateKey;\n\tlistingUtxo: Utxo;\n\tordAddress: string;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[],\n}\n\nexport type PurchaseOrdTokenListingConfig = {\n\tprotocol: TokenType;\n\ttokenID: string;\n\tutxos: Utxo[];\n\tpaymentPk: PrivateKey;\n\tlistingUtxo: TokenUtxo;\n\tordAddress: string;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[],\n}\n\nexport type CancelOrdListingsConfig = {\n\tutxos: Utxo[],\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tlistingUtxos: Utxo[];\n\tadditionalPayments?: Payment[];\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n}\n\nexport interface CancelOrdTokenListingsConfig extends CancelOrdListingsConfig {\n\tutxos: Utxo[],\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tlistingUtxos: TokenUtxo[];\n\tadditionalPayments: Payment[];\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tprotocol: TokenType,\n\ttokenID: string;\n\tordAddress?: string;\n}\n\nexport interface CreateOrdTokenListingsConfig {\n\tutxos: Utxo[];\n\tlistings: TokenListing[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey,\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[];\n\tprotocol: TokenType;\n\ttokenID: string;\n\tinputTokens: TokenUtxo[];\n\ttokenChangeAddress: string;\n}\n\n","import {\n\ttype Transaction,\n\ttype UnlockingScript,\n\tfromUtxo,\n\ttype TransactionInput,\n\tUtils,\n\tP2PKH,\n  Script,\n} from \"@bsv/sdk\";\nimport { type NftUtxo, TokenType, type TokenUtxo, type Utxo } from \"../types\";\nimport { API_HOST } from \"../constants\";\n\nconst { fromBase58Check } = Utils;\n\n/**\n * Converts a Utxo object with a base64 encoded script to a Utxo object with a hex encoded script\n * @param {Utxo} utxo - Utxo object with base64 encoded script\n * @param {Object} unlockScriptTemplate - Object with sign and estimateLength functions\n * @returns {TransactionInput} Utxo object with hex encoded script\n */\nexport const inputFromB64Utxo = (\n\tutxo: Utxo,\n\tunlockScriptTemplate: {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>;\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>;\n\t},\n): TransactionInput => {\n\tconst input = fromUtxo(\n\t\t{\n\t\t\t...utxo,\n\t\t\tscript: Buffer.from(utxo.script, \"base64\").toString(\"hex\"),\n\t\t},\n\t\tunlockScriptTemplate,\n\t);\n\treturn input;\n};\n\n/**\n * Fetches pay utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<Utxo[]>} Array of pay utxos\n */\nexport const fetchPayUtxos = async (address: string, scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\"): Promise<Utxo[]> => {\n\tconst payUrl = `${API_HOST}/txos/address/${address}/unspent?bsv20=false`;\n\tconsole.log({ payUrl });\n\tconst payRes = await fetch(payUrl);\n\tif (!payRes.ok) {\n\t\tthrow new Error(\"Error fetching pay utxos\");\n\t}\n\tlet payUtxos = await payRes.json();\n\t// exclude all 1 satoshi utxos\n\tpayUtxos = payUtxos.filter((u: { satoshis: number }) => u.satoshis !== 1);\n\n\t// Get pubkey hash from address\n\tconst pubKeyHash = fromBase58Check(address);\n\tconst p2pkhScript = new P2PKH().lock(pubKeyHash.data);\n\tpayUtxos = payUtxos.map((utxo: Partial<Utxo>) => ({\n\t\ttxid: utxo.txid,\n\t\tvout: utxo.vout,\n\t\tsatoshis: utxo.satoshis,\n\t\tscript: scriptEncoding === \"hex\" || scriptEncoding === \"base64\" ? Buffer.from(p2pkhScript.toBinary()).toString(scriptEncoding) : p2pkhScript.toASM(),\n\t}));\n\treturn payUtxos as Utxo[];\n};\n\n/**\n * Fetches NFT utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @param {string} [collectionId] - Optional. Collection id (collection insciprtion origin)\n * @param {number} [limit=10] - Optional. Number of utxos to fetch. Default is 10\n * @param {number} [offset=0] - Optional. Offset for fetching utxos. Default is 0\n * @param {string} [scriptEncoding=\"base64\"] - Optional. Encoding for the script. Default is base64. Options are hex, base64, or asm.\n * @returns {Promise<Utxo[]>} Array of NFT utxos\n */\nexport const fetchNftUtxos = async (\n\taddress: string,\n\tcollectionId?: string,\n\tlimit = 10,\n\toffset = 0,\n  scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\",\n): Promise<NftUtxo[]> => {\n\tlet url = `${API_HOST}/txos/address/${address}/unspent?limit=${limit}&offset=${offset}&`;\n\n\tif (collectionId) {\n\t\tconst query = {\n\t\t\tmap: {\n\t\t\t\tsubTypeData: { collectionId },\n\t\t\t},\n\t\t};\n\t\tconst b64Query = Buffer.from(JSON.stringify(query)).toString(\"base64\");\n\t\turl += `q=${b64Query}`;\n\t}\n\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching NFT utxos for ${address}`);\n\t}\n\n\t// Returns a BSV20Txo but we only need a few fields\n\tlet nftUtxos = await res.json();\n\n\t// Only include 1 satoshi outputs, non listings\n\tnftUtxos = nftUtxos.filter(\n\t\t(u: {\n\t\t\tsatoshis: number;\n\t\t\tdata: { list: { price: number; payout: string } | undefined } | null;\n\t\t}) => u.satoshis === 1 && !u.data?.list,\n\t);\n\n\tconst outpoints = nftUtxos.map(\n\t\t(utxo: { txid: string; vout: number }) => `${utxo.txid}_${utxo.vout}`,\n\t);\n\t// Fetch the scripts up to the limit\n\tconst nftRes = await fetch(`${API_HOST}/txos/outpoints?script=true`, {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t\tbody: JSON.stringify([...outpoints]),\n\t});\n\n\tif (!nftRes.ok) {\n\t\tthrow new Error(`Error fetching NFT scripts for ${address}`);\n\t}\n\n\tconst nfts = (await nftRes.json() || [])\n\n\tnftUtxos = nfts.map(\n\t\t(utxo: {\n\t\t\torigin: { outpoint: string };\n\t\t\tscript: string;\n\t\t\tvout: number;\n\t\t\ttxid: string;\n\t\t}) => {\n      let script = utxo.script;\n      if (scriptEncoding === \"hex\") {\n        script = Buffer.from(script, \"base64\").toString(\"hex\");\n      } else if (scriptEncoding === \"asm\") {\n        script = Script.fromHex(Buffer.from(script, \"base64\").toString(\"hex\")).toASM();\n      }\n\t\t\tconst nftUtxo = {\n\t\t\t\torigin: utxo.origin.outpoint,\n\t\t\t\tscript,\n\t\t\t\tvout: utxo.vout,\n\t\t\t\ttxid: utxo.txid,\n\t\t\t\tsatoshis: 1,\n\t\t\t} as NftUtxo;\n\t\t\tif (collectionId) {\n\t\t\t\tnftUtxo.collectionId = collectionId;\n\t\t\t}\n\t\t\treturn nftUtxo;\n\t\t},\n\t);\n\n\treturn nftUtxos as NftUtxo[];\n};\n\n/**\n * Fetches token utxos from the API\n * @param {TokenType} protocol - Token protocol. Either BSV20 or BSV21\n * @param {string} tokenId - Token id. Ticker for BSV20 and id (mint+deploy inscription origin) for BSV21\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<TokenUtxo[]>} Array of token utxos\n */\nexport const fetchTokenUtxos = async (\n\tprotocol: TokenType,\n\ttokenId: string,\n\taddress: string,\n): Promise<TokenUtxo[]> => {\n\tconst url = `${API_HOST}/bsv20/${address}/${protocol === TokenType.BSV20 ? \"tick\" : \"id\"}/${tokenId}?bsv20=true&listing=false`;\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching ${protocol} utxos`);\n\t}\n\n\t// returns a BSV20Txo but we only need a few fields\n\tlet tokenUtxos = await res.json();\n\n\ttokenUtxos = tokenUtxos.map((utxo: Partial<TokenUtxo>) => ({\n\t\tamt: utxo.amt,\n\t\tscript: utxo.script,\n\t\tvout: utxo.vout,\n\t\ttxid: utxo.txid,\n\t\tid: tokenId,\n\t\tsatoshis: 1,\n\t}));\n\n\treturn tokenUtxos as TokenUtxo[];\n};\n","import type { Transaction } from \"@bsv/sdk\";\nimport { Sigma } from \"sigma-protocol\";\nimport type { LocalSigner, RemoteSigner } from \"./types\";\n\n/**\n * Signs data in the transaction with Sigma protocol\n * @param {Transaction} tx - Transaction to sign\n * @param {LocalSigner | RemoteSigner} signer - Local or remote signer (used for data signature)\n * @returns {Transaction} Transaction with signed data\n */\nexport const signData = async (\n\ttx: Transaction,\n\tsigner: LocalSigner | RemoteSigner,\n): Promise<Transaction> => {\n\t// Sign tx if idKey or remote signer like starfish/tokenpass\n\tconst idKey = (signer as LocalSigner)?.idKey;\n\tconst keyHost = (signer as RemoteSigner)?.keyHost;\n\n\tif (idKey) {\n\t\tconst sigma = new Sigma(tx);\n\t\tconst { signedTx } = sigma.sign(idKey);\n\t\treturn signedTx;\n\t}\n\tif (keyHost) {\n\t\tconst authToken = (signer as RemoteSigner)?.authToken;\n\t\tconst sigma = new Sigma(tx);\n\t\ttry {\n\t\t\tconst { signedTx } = await sigma.remoteSign(keyHost, authToken);\n\t\t\treturn signedTx;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthrow new Error(`Remote signing to ${keyHost} failed`);\n\t\t}\n\t}\n\tthrow new Error(\"Signer must be a LocalSigner or RemoteSigner\");\n};\n","import type { MAP, PreMAP } from \"../types\";\n\nconst stringifyMetaData = (metaData?: PreMAP): MAP | undefined => {\n  if (!metaData) return undefined;\n\tconst result: MAP = {\n\t\tapp: metaData.app,\n\t\ttype: metaData.type,\n\t};\n\n\tfor (const [key, value] of Object.entries(metaData)) {\n\t\tif (value !== undefined) {\n\t\t\tif (typeof value === \"string\") {\n\t\t\t\tresult[key] = value;\n\t\t\t} else if (Array.isArray(value) || typeof value === \"object\") {\n\t\t\t\tresult[key] = JSON.stringify(value);\n\t\t\t} else {\n\t\t\t\tresult[key] = String(value);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\nexport default stringifyMetaData;\n","import { Transaction, SatoshisPerKilobyte, P2PKH, Script, Utils } from \"@bsv/sdk\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n\tUtxo,\n\tCreateOrdinalsConfig,\n\tCreateOrdinalsResult,\n\tCreateOrdinalsCollectionConfig,\n\tCreateOrdinalsCollectionItemConfig,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Creates a transaction with inscription outputs\n * @param {CreateOrdinalsConfig | CreateOrdinalsCollectionConfig | CreateOrdinalsCollectionItemConfig} config - Configuration object for creating ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {string} config.changeAddress - Optional. Address to send change to. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Local or remote signer (used for data signature)\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<CreateOrdinalsResult>} Transaction with inscription outputs\n */\nexport const createOrdinals = async (\n\tconfig:\n\t\t| CreateOrdinalsConfig\n\t\t| CreateOrdinalsCollectionConfig\n\t\t| CreateOrdinalsCollectionItemConfig,\n): Promise<CreateOrdinalsResult> => {\n\tconst {\n\t\tutxos,\n\t\tdestinations,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t} = config;\n\t\n\t// Warn if creating many inscriptions at once\n\tif (destinations.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Outputs\n\t// Add inscription outputs\n\tfor (const destination of destinations) {\n\t\tif (!destination.inscription) {\n\t\t\tthrow new Error(\"Inscription is required for all destinations\");\n\t\t}\n\n\t\t// remove any undefined fields from metadata\n\t\tif (metaData) {\n\t\t\tfor(const key of Object.keys(metaData)) {\n\t\t\t\tif (metaData[key] === undefined) {\n\t\t\t\t\tdelete metaData[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription,\n\t\t\t\tstringifyMetaData(metaData),\n\t\t\t),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\tlet payChange: Utxo | undefined;\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\n\tif(signer) {\n\t\tconst utxo = utxos.pop() as Utxo\n\t\ttx.addInput(inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t)));\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\ttx = await signData(tx, signer);\n\t}\n\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\tScript,\n\ttype TransactionOutput,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type { SendOrdinalsResult, SendOrdinalsConfig, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Sends ordinals to the given destinations\n * @param {SendOrdinalsConfig} config - Configuration object for sending ordinals\n * @param {Utxo[]} config.paymentUtxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.ordinals - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {string} config.changeAddress - Optional. Address to send change to, if any. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @param {boolean} config.enforceUniformSend - Optional. Default: true. Enforce that the number of destinations matches the number of ordinals being sent. Sending ordinals requires a 1:1 mapping of destinations to ordinals. This is only used for sub-protocols like BSV21 that manage tokens without sending the inscriptions directly.\n * @returns {Promise<SendOrdinalsResult>} Transaction, spent outpoints, and change vout\n */\nexport const sendOrdinals = async (\n\tconfig: SendOrdinalsConfig,\n): Promise<SendOrdinalsResult> => {\n\tif (!config.satsPerKb) {\n\t\tconfig.satsPerKb = DEFAULT_SAT_PER_KB;\n\t}\n\tif (!config.additionalPayments) {\n\t\tconfig.additionalPayments = [];\n\t}\n\tif (config.enforceUniformSend === undefined) {\n\t\tconfig.enforceUniformSend = true;\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(config.satsPerKb);\n\tlet tx = new Transaction();\n\tconst spentOutpoints: string[] = [];\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of config.ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(\n\t\t\tordUtxo,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tconfig.ordPk, \n\t\t\t\t\"all\",\n\t\t\t\ttrue, \n\t\t\t\tordUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(ordUtxo.script, 'base64'))\n\t\t\t),\n\t\t);\n\t\tspentOutpoints.push(`${ordUtxo.txid}_${ordUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// check that ordinals coming in matches ordinals going out if supplied\n\tif (\n\t\tconfig.enforceUniformSend &&\n\t\tconfig.destinations.length !== config.ordinals.length\n\t) {\n\t\tthrow new Error(\n\t\t\t\"Number of destinations must match number of ordinals being sent\",\n\t\t);\n\t}\n\n\t// Add ordinal outputs\n\tfor (const destination of config.destinations) {\n\t\tlet s: Script;\n\t\tif (\n\t\t\tdestination.inscription?.dataB64 &&\n\t\t\tdestination.inscription?.contentType\n\t\t) {\n\t\t\ts = new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription,\n\t\t\t\tstringifyMetaData(config.metaData),\n\t\t\t);\n\t\t} else {\n\t\t\ts = new P2PKH().lock(destination.address);\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: s,\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of config.additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of config.paymentUtxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tconfig.paymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\tspentOutpoints.push(`${utxo.txid}_${utxo.vout}`);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (totalSatsIn < totalSatsOut) {\n\t\tthrow new Error(\"Not enough ordinals to send\");\n\t}\n\n\tlet payChange: Utxo | undefined;\n\tif (totalSatsIn > totalSatsOut + BigInt(fee)) {\n\t\tconst changeScript = new P2PKH().lock(\n\t\t\tconfig.changeAddress || config.paymentPk.toAddress().toString(),\n\t\t);\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not available until the transaction is signed\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t}\n\n\tif (config.signer) {\n\t\ttx = await signData(tx, config.signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChange,\n\t};\n};\n","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype TransactionOutput,\n\tUtils,\n\tScript,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type { SendUtxosConfig, SendUtxosResult, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Sends utxos to the given destination\n * @param {SendUtxosConfig} config - Configuration object for sending utxos\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {Payment[]} config.payments - Array of payments with addresses and amounts\n * @param {number} [config.satsPerKb] - Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {string} [config.changeAddress] - Address to send change to. If not provided, defaults to paymentPk address\n * @returns {Promise<SendUtxosResult>} Transaction with utxo outputs\n */\nexport const sendUtxos = async (\n\tconfig: SendUtxosConfig,\n): Promise<SendUtxosResult> => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tpayments,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tchangeAddress = paymentPk.toAddress().toString(),\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\t// Outputs\n\tfor (const payment of payments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new P2PKH().lock(payment.to),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + (out.satoshis || 0),\n\t\t0,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\ttx.addInput(input);\n\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + fee) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + fee) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to send. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChange: Utxo | undefined;\n\tif (totalSatsIn > totalSatsOut + fee) {\n\t\t// Change\n\t\tconst changeScript = new P2PKH().lock(changeAddress);\n\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t} else if (totalSatsIn < totalSatsOut + fee) {\n\t\tconsole.log(\"No change needed\");\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\t\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTokenType,\n\ttype TransferBSV20Inscription,\n\ttype TransferTokenInscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferOrdTokensConfig,\n\ttype TransferOrdTokensResult,\n\ttype TokenUtxo,\n\ttype Utxo,\n} from \"./types\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { P2PKH, SatoshisPerKilobyte, Script, Transaction, Utils } from \"@bsv/sdk\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Transfer tokens to a destination\n * @param {TransferOrdTokensConfig} config - Configuration object for transferring tokens\n * @param {TokenType} config.protocol - Token protocol. Must be TokenType.BSV20 or TokenType.BSV21\n * @param {string} config.tokenID - Token ID. Either the tick or id value depending on the protocol\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {TokenUtxo[]} config.inputTokens - Token utxos to spend\n * @param {Distribution[]} config.distributions - Array of destinations with addresses and amounts\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {string} config.changeAddress - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {string} config.tokenChangeAddress - Optional. Address to send token change to, if any. If not provided, defaults to ordPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @param {burn} config.burn - Optional. Set to true to burn the tokens.\n * @returns {Promise<TransferOrdTokensResult>} Transaction with token transfer outputs\n */\nexport const transferOrdTokens = async (config: TransferOrdTokensConfig): Promise<TransferOrdTokensResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tinputTokens,\n\t\tdistributions,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tchangeAddress,\n\t\ttokenChangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t\tburn = false\n\t} = config;\n\n\t// calculate change amount\n\tlet changeAmt = 0n;\n\tlet totalAmtIn = 0n;\n\tlet totalAmtOut = 0n;\n\n\t// Ensure these inputs are for the expected token\n\tif (!inputTokens.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\tfor (const token of inputTokens) {\n\t\tconst inputScriptBinary = Utils.toArray(token.script, \"base64\");\n\t\tconst inputScript = Script.fromBinary(inputScriptBinary);\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\ttoken,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\ttoken.satoshis,\n\t\t\t\tinputScript,\n\t\t\t),\n\t\t));\n\t\n\t\ttotalAmtIn += BigInt(token.amt);\n\t}\n\n\t// build destination inscriptions\n\tfor (const dest of distributions) {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: burn ? \"burn\" : \"transfer\",\n\t\t\tamt: dest.amt,\n\t\t}\n\t\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\ttick: tokenID,\n\t\t\t} as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\tid: tokenID,\n\t\t\t} as TransferBSV21Inscription;\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid protocol\");\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdest.address,\n\t\t\t\t{\n\t\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\t\t\tcontentType: \"application/bsv20\",\n\t\t\t\t},\n\t\t\t),\n\t\t});\n\t\ttotalAmtOut += BigInt(dest.amt);\n\t};\n\tchangeAmt = totalAmtIn - totalAmtOut;\n\n\tlet tokenChange: TokenUtxo | undefined;\n\t// check that you have enough tokens to send and return change\n\tif (changeAmt < 0n) {\n\t\tthrow new Error(\"Not enough tokens to send\");\n\t}\n\tif (changeAmt > 0n) {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: \"transfer\",\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\ttick: tokenID,\n\t\t\t} as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\tid: tokenID,\n\t\t\t} as TransferBSV21Inscription;\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid protocol\");\n\t\t}\n\n\t\tconst lockingScript = new OrdP2PKH().lock(\n\t\t\ttokenChangeAddress || ordPk.toAddress().toString(), \n\t\t\t{\n\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString('base64'),\n\t\t\t\tcontentType: \"application/bsv-20\",\n\t\t\t}\n\t\t);\n\t\tconst vout = tx.outputs.length;\n\t\ttx.addOutput({ lockingScript, satoshis: 1 });\n\t\ttokenChange = {\n\t\t\tid: tokenID,\n\t\t\tsatoshis: 1,\n\t\t\tscript: Buffer.from(lockingScript.toBinary()).toString(\"base64\"),\n\t\t\ttxid: \"\",\n\t\t\tvout,\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst txid = tx.id(\"hex\") as string;\n\tif (tokenChange) {\n\t\ttokenChange.txid = txid;\n\t}\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t\ttokenChange,\n\t};\n};","import type { CollectionItemSubTypeData, CollectionSubTypeData } from \"./types\";\n\n/**\n * Validates sub type data\n * @param {string} subType - Sub type of the ordinals token\n * @param {string} subTypeData - Sub type data of the ordinals token\n * @returns {Error | undefined} Error if validation fails, undefined if validation passes\n */\nexport const validateSubTypeData = (\n  subType: \"collection\" | \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData | CollectionSubTypeData,\n): Error | undefined => {\n  try {\n    if (subType === \"collection\") {\n      const collectionData = subTypeData as CollectionSubTypeData;\n      if (!collectionData.description) {\n        return new Error(\"Collection description is required\");\n      }\n      if (!collectionData.quantity) {\n        return new Error(\"Collection quantity is required\");\n      }\n      if (collectionData.rarityLabels) {\n        if (!Array.isArray(collectionData.rarityLabels)) {\n          return new Error(\"Rarity labels must be an array\");\n        }\n        // make sure keys and values are strings\n        if (!collectionData.rarityLabels.every((label) => {\n          return Object.values(label).every(value => typeof value === 'string');\n        })) {\n          return new Error(`Invalid rarity labels ${collectionData.rarityLabels}`);\n        }\n      }\n      if (collectionData.traits ) {\n        if (typeof collectionData.traits !== \"object\") {\n        return new Error(\"Collection traits must be an object\");\n        }\n        if (collectionData.traits && !Object.keys(collectionData.traits).every(key => typeof key === 'string' && typeof collectionData.traits[key] === 'object')) {\n          return new Error(\"Collection traits must be a valid CollectionTraits object\");\n        }\n      }\n    }\n    if (subType === \"collectionItem\") {\n      const itemData = subTypeData as CollectionItemSubTypeData;\n      if (!itemData.collectionId) {\n        return new Error(\"Collection id is required\");\n      }\n      if (!itemData.collectionId.includes(\"_\")) {\n        return new Error(\"Collection id must be a valid outpoint\");\n      }\n      if (itemData.collectionId.split(\"_\")[0].length !== 64) {\n        return new Error(\"Collection id must contain a valid txid\");\n      }\n      if (Number.isNaN(Number.parseInt(itemData.collectionId.split(\"_\")[1]))) {\n        return new Error(\"Collection id must contain a valid vout\");\n      }\n\n      if (itemData.mintNumber && typeof itemData.mintNumber !== \"number\") {\n        return new Error(\"Mint number must be a number\");\n      }\n      if (itemData.rank && typeof itemData.rank !== \"number\") {\n        return new Error(\"Rank must be a number\");\n      }\n      if (itemData.rarityLabel && typeof itemData.rarityLabel !== \"string\") {\n        return new Error(\"Rarity label must be a string\");\n      }\n      if (itemData.traits && typeof itemData.traits !== \"object\") {\n        return new Error(\"Traits must be an object\");\n      }\n      if (itemData.attachments && !Array.isArray(itemData.attachments)) {\n        return new Error(\"Attachments must be an array\");\n      }\n    }\n    return undefined;\n  } catch (error) {\n    return new Error(\"Invalid JSON data\");\n  }\n};","import {\n\tBigNumber,\n\ttype LockingScript,\n\tOP,\n\tP2PKH,\n\ttype PrivateKey,\n\tScript,\n\ttype Transaction,\n\tTransactionSignature,\n\tUnlockingScript,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { toHex } from \"../utils/strings\";\nimport type { Inscription } from \"../types\";\n\nexport const oLockPrefix =\n\t\"2097dfd76851bf465e8f715593b217714858bbe9570ff3bd5e33840a34e20ff0262102ba79df5f8ae7604a9830f03c7933028186aede0675a16f025dc4f8be8eec0382201008ce7480da41702918d1ec8e6849ba32b4d65b1e40dc669c31a1e6306b266c0000\";\nexport const oLockSuffix =\n\t\"615179547a75537a537a537a0079537a75527a527a7575615579008763567901c161517957795779210ac407f0e4bd44bfc207355a778b046225a7068fc59ee7eda43ad905aadbffc800206c266b30e6a1319c66dc401e5bd6b432ba49688eecd118297041da8074ce081059795679615679aa0079610079517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01007e81517a75615779567956795679567961537956795479577995939521414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff00517951796151795179970079009f63007952799367007968517a75517a75517a7561527a75517a517951795296a0630079527994527a75517a6853798277527982775379012080517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01205279947f7754537993527993013051797e527e54797e58797e527e53797e52797e57797e0079517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a756100795779ac517a75517a75517a75517a75517a75517a75517a75517a75517a7561517a75517a756169587951797e58797eaa577961007982775179517958947f7551790128947f77517a75517a75618777777777777777777767557951876351795779a9876957795779ac777777777777777767006868\";\n\n/**\n * OrdLock class implementing ScriptTemplate.\n *\n * This class provides methods for interacting with OrdinalLock contract \n */\nexport default class OrdLock {\n\t/**\n\t * Creates a 1Sat Ordinal Lock script\n\t *\n\t * @param {string} ordAddress - An address which can cancel listing.\n\t * @param {string} payAddress - Address which is paid on purchase\n\t * @param {number} price - Listing price in satoshis\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\tlock(\n\t\tordAddress: string,\n\t\tpayAddress: string,\n\t\tprice: number,\n    inscription?: Inscription,\n\t): Script {\n\t\tconst cancelPkh = Utils.fromBase58Check(ordAddress).data as number[];\n\t\tconst payPkh = Utils.fromBase58Check(payAddress).data as number[];\n\n\t\tlet script = new Script()\n\t\tif (inscription?.dataB64 !== undefined && inscription?.contentType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(inscription.dataB64, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(inscription.contentType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tscript = Script.fromASM(`OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`);\n\t\t}\n\t\t\n\t\treturn script.writeScript(Script.fromHex(oLockPrefix))\n\t\t\t.writeBin(cancelPkh)\n\t\t\t.writeBin(OrdLock.buildOutput(price, new P2PKH().lock(payPkh).toBinary()))\n\t\t\t.writeScript(Script.fromHex(oLockSuffix))\n\t}\n\n\tcancelListing(\n\t\tprivateKey: PrivateKey,\n\t\tsignOutputs: 'all' | 'none' | 'single' = 'all',\n\t\tanyoneCanPay = false,\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: () => Promise<number>\n\t} {\n\t\tconst p2pkh = new P2PKH().unlock(privateKey, signOutputs, anyoneCanPay, sourceSatoshis, lockingScript)\n\t\treturn {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await p2pkh.sign(tx, inputIndex)).writeOpCode(OP.OP_1)\n\t\t\t},\n\t\t\testimateLength: async () => {\n\t\t\t\treturn 107\n\t\t\t}\n\t\t}\n\t}\n\n\tpurchaseListing(\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>\n\t} {\n\t\tconst purchase = {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\tif (tx.outputs.length < 2) {\n\t\t\t\t\tthrow new Error(\"Malformed transaction\")\n\t\t\t\t}\n\t\t\t\tconst script = new UnlockingScript()\n\t\t\t\t\t.writeBin(OrdLock.buildOutput(\n\t\t\t\t\t\ttx.outputs[0].satoshis || 0,\n\t\t\t\t\t\ttx.outputs[0].lockingScript.toBinary()\n\t\t\t\t\t))\n\t\t\t\tif(tx.outputs.length > 2) {\n\t\t\t\t\tconst writer = new Utils.Writer()\n\t\t\t\t\tfor(const output of tx.outputs.slice(2)) {\n\t\t\t\t\t\twriter.write(OrdLock.buildOutput(output.satoshis || 0, output.lockingScript.toBinary()))\n\t\t\t\t\t}\n\t\t\t\t\tscript.writeBin(writer.toArray())\n\t\t\t\t} else {\n\t\t\t\t\tscript.writeOpCode(OP.OP_0)\n\t\t\t\t}\n\n        const input = tx.inputs[inputIndex]\n        let sourceSats: number\n        if (!sourceSatoshis && input.sourceTransaction) {\n          sourceSats = input.sourceTransaction.outputs[input.sourceOutputIndex].satoshis as number\n        } else if (!sourceSatoshis) {\n          throw new Error(\"sourceTransaction or sourceSatoshis is required\")\n        }\n        sourceSats = sourceSatoshis as number\n        \n        const sourceTXID = (input.sourceTXID || input.sourceTransaction?.id('hex')) as string\n        let subscript = lockingScript as LockingScript\n        if (!lockingScript) {\n          subscript = input.sourceTransaction?.outputs[input.sourceOutputIndex].lockingScript as LockingScript\n        }\n\t\t\t\tconst preimage = TransactionSignature.format({\n\t\t\t\t\tsourceTXID,\n\t\t\t\t\tsourceOutputIndex: input.sourceOutputIndex,\n\t\t\t\t\tsourceSatoshis: sourceSats,\n\t\t\t\t\ttransactionVersion: tx.version,\n\t\t\t\t\totherInputs: [],\n\t\t\t\t\tinputIndex,\n\t\t\t\t\toutputs: tx.outputs,\n\t\t\t\t\tinputSequence: input.sequence,\n\t\t\t\t\tsubscript,\n\t\t\t\t\tlockTime: tx.lockTime,\n\t\t\t\t\tscope: TransactionSignature.SIGHASH_ALL |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_ANYONECANPAY |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_FORKID\n\t\t\t\t  });\n\n\t\t\t\treturn script.writeBin(preimage).writeOpCode(OP.OP_0)\n\t\t\t},\n\t\t\testimateLength: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await purchase.sign(tx, inputIndex)).toBinary().length\n\t\t\t}\n\t\t}\n\t\treturn purchase\n\t}\n\n\tstatic buildOutput(satoshis: number, script: number[]): number[] {\n\t\tconst writer = new Utils.Writer()\n\t\twriter.writeUInt64LEBn(new BigNumber(satoshis))\n\t\twriter.writeVarIntNum(script.length)\n\t\twriter.write(script)\n\t\treturn writer.toArray()\n\t}\n}\n","import {\n\tP2PKH,\n\tSatoshisPerKilobyte,\n\tScript,\n\tTransaction,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport {\n\ttype CreateOrdTokenListingsConfig,\n\ttype CreateOrdListingsConfig,\n\ttype Utxo,\n\ttype TransferTokenInscription,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\tTokenType,\n\ttype TokenUtxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nconst { toArray } = Utils;\n\n// TODO: Handle royalty\nexport const createOrdListings = async (config: CreateOrdListingsConfig) => {\n\tconst {\n\t\tutxos,\n\t\tlistings,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t\troyalty,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Warn if creating many inscriptions at once\n\tif (listings.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Outputs\n\t// Add listing outputs\n\tfor (const listing of listings) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdLock().lock(\n\t\t\t\tlisting.payAddress,\n\t\t\t\tlisting.ordAddress,\n\t\t\t\tlisting.price,\n\t\t\t),\n\t\t});\n\t\tconst inputScriptBinary = toArray(listing.listingUtxo.script, \"base64\");\n\t\tconst inputScript = Script.fromBinary(inputScriptBinary);\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\tlisting.listingUtxo,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlisting.listingUtxo.satoshis,\n\t\t\t\tinputScript,\n\t\t\t),\n\t\t));\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Check if change is needed\n\tlet payChange: Utxo | undefined;\n\tconst changeScript = new P2PKH().lock(\n\t\tchangeAddress || paymentPk.toAddress().toString(),\n\t);\n\tconst changeOutput = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOutput);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\nexport const createOrdTokenListings = async (\n\tconfig: CreateOrdTokenListingsConfig,\n) => {\n\tconst {\n\t\tutxos,\n\t\tprotocol,\n\t\ttokenID,\n\t\tordPk,\n\t\tpaymentPk,\n\t\tadditionalPayments = [],\n\t\tchangeAddress,\n\t\ttokenChangeAddress,\n\t\tinputTokens,\n\t\tlistings,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\n\t// Warn if creating many inscriptions at once\n\tif (listings.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Ensure these inputs are for the expected token\n\tif (!inputTokens.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\t// calculate change amount\n\tlet changeAmt = 0n;\n\tlet totalAmtIn = 0n;\n\tlet totalAmtOut = 0n;\n\n\t// Ensure these inputs are for the expected token\n\tif (!inputTokens.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\t// Outputs\n\t// Add listing outputs\n\tfor (const listing of listings) {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: \"transfer\",\n\t\t\tamt: listing.amt.toString(),\n\t\t};\n\t\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\ttick: tokenID,\n\t\t\t} as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\tid: tokenID,\n\t\t\t} as TransferBSV21Inscription;\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid protocol\");\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdLock().lock(\n\t\t\t\tlisting.payAddress,\n\t\t\t\tlisting.ordAddress,\n\t\t\t\tlisting.price,\n\t\t\t\t{\n\t\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\t\t\tcontentType: \"application/bsv20\",\n\t\t\t\t},\n\t\t\t),\n\t\t});\n\t\ttotalAmtOut += listing.amt;\n\t}\n\n\tfor (const token of inputTokens) {\n\t\tconst inputScriptBinary = toArray(token.script, \"base64\");\n\t\tconst inputScript = Script.fromBinary(inputScriptBinary);\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\ttoken,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\ttoken.satoshis,\n\t\t\t\tinputScript,\n\t\t\t),\n\t\t));\n\n\t\ttotalAmtIn += BigInt(token.amt);\n\t}\n\tchangeAmt = totalAmtIn - totalAmtOut;\n\n\tlet tokenChange: TokenUtxo | undefined;\n\t// check that you have enough tokens to send and return change\n\tif (changeAmt < 0n) {\n\t\tthrow new Error(\"Not enough tokens to send\");\n\t}\n\tif (changeAmt > 0n) {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: \"transfer\",\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\ttick: tokenID,\n\t\t\t} as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\tid: tokenID,\n\t\t\t} as TransferBSV21Inscription;\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid protocol\");\n\t\t}\n\n\t\tconst lockingScript = new OrdP2PKH().lock(tokenChangeAddress, {\n\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString('base64'),\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t});\n\t\tconst vout = tx.outputs.length;\n\t\ttx.addOutput({ lockingScript, satoshis: 1 });\n\t\ttokenChange = {\n\t\t\tid: tokenID,\n\t\t\tsatoshis: 1,\n\t\t\tscript: Buffer.from(lockingScript.toBinary()).toString(\"base64\"),\n\t\t\ttxid: \"\",\n\t\t\tvout,\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst txid = tx.id(\"hex\") as string;\n\tif (tokenChange) {\n\t\ttokenChange.txid = txid;\n\t}\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t\ttokenChange,\n\t};\n};\n","import { P2PKH, SatoshisPerKilobyte, Script, Transaction, Utils } from \"@bsv/sdk\";\nimport {\n\tTokenType,\n\ttype CancelOrdListingsConfig,\n\ttype CancelOrdTokenListingsConfig,\n\ttype Destination,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\n\nexport const cancelOrdListings = async (config: CancelOrdListingsConfig) => {\n\tconst {\n\t\tutxos,\n\t\tlistingUtxos,\n\t\tordPk,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tadditionalPayments = [],\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\n\t// Warn if creating many inscriptions at once\n\tif (listingUtxos.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\t\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinals we're cancelling\n\tfor (const listingUtxo of listingUtxos) {\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().cancelListing(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlistingUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, 'base64'))\n\t\t\t)\n\t\t));\n\t\t// Add cancel outputs returning listed ordinals\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new P2PKH().lock(ordPk.toAddress().toString()),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo, \n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpaymentPk, \n\t\t\t\t\"all\",\n\t\t\t\ttrue, \n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t\t)\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\nexport const cancelOrdTokenListings = async (\n\tconfig: CancelOrdTokenListingsConfig,\n) => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tadditionalPayments,\n\t\tlistingUtxos,\n\t\tutxos,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\t// calculate change amount\n\tlet totalAmtIn = 0;\n\n\tif (listingUtxos.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Ensure these inputs are for the expected token\n\tif (!listingUtxos.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinals we're cancelling\n\tfor (const listingUtxo of listingUtxos) {\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().cancelListing(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlistingUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, 'base64'))\n\t\t\t)\n\t\t));\n\t\ttotalAmtIn += Number.parseInt(listingUtxo.amt);\n\t}\n\n\tconst transferInscription: TransferTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"transfer\",\n\t\tamt: totalAmtIn.toString(),\n\t};\n\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\tif (protocol === TokenType.BSV20) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\ttick: tokenID,\n\t\t} as TransferBSV20Inscription;\n\t} else if (protocol === TokenType.BSV21) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\tid: tokenID,\n\t\t} as TransferBSV21Inscription;\n\t} else {\n\t\tthrow new Error(\"Invalid protocol\");\n\t}\n\n\tconst destination: Destination = {\n\t\taddress: ordAddress || ordPk.toAddress().toString(),\n\t\tinscription: {\n\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t},\n\t};\n\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\tdestination.address,\n\t\t\tdestination.inscription\n\t\t),\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};","import { P2PKH, SatoshisPerKilobyte, Script, Transaction, Utils } from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport {\n\tTokenType,\n\ttype Inscription,\n\ttype PurchaseOrdListingConfig,\n\ttype PurchaseOrdTokenListingConfig,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\n\nexport const purchaseOrdListing = async (config: PurchaseOrdListingConfig) => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tlistingUtxo,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tadditionalPayments = [],\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinal we're purchasing\n  tx.addInput({\n\t\tunlockingScriptTemplate: new OrdLock().purchaseListing(\n\t\t\t1,\n\t\t\tScript.fromHex(Buffer.from(listingUtxo.script, \"base64\").toString(\"hex\")),\n\t\t),\n\t\tsourceTXID: listingUtxo.txid,\n\t\tsourceOutputIndex: listingUtxo.vout,\n\t\tsequence: 0xffffffff,\n\t});\n\n\t// Outputs\n\t// Add the purchased output\n  tx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript: new P2PKH().lock(ordAddress),\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\nexport const purchaseOrdTokenListing = async (\n\tconfig: PurchaseOrdTokenListingConfig,\n) => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tpaymentPk,\n\t\tlistingUtxo,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinal we're purchasing\n\ttx.addInput(inputFromB64Utxo(\n\t\tlistingUtxo,\n\t\tnew OrdLock().purchaseListing(\n\t\t\t1,\n\t\t\tScript.fromHex(Buffer.from(listingUtxo.script, \"base64\").toString(\"hex\")),\n\t\t),\n\t));\n\n\t// Outputs\n\tconst transferInscription: TransferTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"transfer\",\n\t\tamt: listingUtxo.amt,\n\t};\n\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\tif (protocol === TokenType.BSV20) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\ttick: tokenID,\n\t\t} as TransferBSV20Inscription;\n\t} else if (protocol === TokenType.BSV21) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\tid: tokenID,\n\t\t} as TransferBSV21Inscription;\n\t} else {\n\t\tthrow new Error(\"Invalid protocol\");\n\t}\n\tconst dataB64 = Buffer.from(JSON.stringify(inscription)).toString(\"base64\");\n\n\t// Add the purchased output\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(ordAddress, {\n\t\t\tdataB64,\n\t\t\tcontentType: \"bsv-20\",\n\t\t}),\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase token listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n  return {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map((i) => `${i.sourceTXID}_${i.sourceOutputIndex}`),\n\t\tpayChange,\n\t};\n};\n","import sharp from \"sharp\";\nimport type { IconInscription, ImageContentType } from \"../types\";\n\n// export the errors for use in tests\nexport const ErrorOversizedIcon = new Error(\n\t\"Image must be a square image with dimensions <= 400x400\",\n);\nexport const ErrorIconProportions = new Error(\"Image must be a square image\");\nexport const ErrorInvalidIconData = new Error(\"Error processing image\");\nexport const ErrorImageDimensionsUndefined = new Error(\n\t\"Image dimensions are undefined\",\n);\n\nexport const validIconData = async (\n\ticon: IconInscription,\n): Promise<Error | null> => {\n\tconst { dataB64, contentType } = icon;\n\ttry {\n\t\tconst buffer = Buffer.from(dataB64, \"base64\");\n\t\tlet image = sharp(buffer);\n\n\t\t// Special handling for SVG\n\t\tif (contentType === \"image/svg+xml\") {\n\t\t\t// Convert SVG to PNG for consistent dimension checking\n\t\t\timage = image.png();\n\t\t}\n\n\t\tconst metadata = await image.metadata();\n\n\t\tif (metadata.width === undefined || metadata.height === undefined) {\n\t\t\treturn ErrorImageDimensionsUndefined;\n\t\t}\n\t\t// Check if the image is a square\n\t\tif (metadata.width !== metadata.height) {\n\t\t\treturn ErrorIconProportions;\n\t\t}\n\t\t// ensure the image is <= 400x400\n\t\tif (metadata.width > 400 || metadata.height > 400) {\n\t\t\treturn ErrorOversizedIcon;\n\t\t}\n\n\t\treturn null;\n\t} catch (error) {\n\t\treturn ErrorInvalidIconData;\n\t}\n};\n\nexport const validIconFormat = (icon: string): boolean => {\n\tif (!icon.includes(\"_\") || icon.endsWith(\"_\")) {\n\t\treturn false;\n\t}\n\n\t// use parseint to validate the vout\n\tconst iconVout = Number.parseInt(icon.split(\"_\")[1]);\n\tif (Number.isNaN(iconVout)) {\n\t\treturn false;\n\t}\n\n\tif (!icon.startsWith(\"_\") && icon.split(\"_\")[0].length !== 64) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","import {\n\tTransaction,\n\tP2PKH,\n\tSatoshisPerKilobyte,\n\ttype TransactionOutput,\n\tUtils,\n\tScript,\n} from \"@bsv/sdk\";\nimport type {\n\tDeployBsv21TokenConfig,\n\tDeployBsv21TokenResult,\n\tDeployMintTokenInscription,\n\tInscription,\n\tUtxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { validIconData, validIconFormat } from \"./utils/icon\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\n\n/**\n * Deploys & Mints a BSV21 token to the given destination address\n * @param {DeployBsv21TokenConfig} config - Configuration object for deploying BSV21 token\n * @param {string} config.symbol - Token ticker symbol\n * @param {number} config.decimals - Number of decimal places to display\n * @param {string | IconInscription} config.icon - outpoint (format: txid_vout) or Inscription. If Inscription, must be a valid image type\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {Distribution} config.initialDistribution - Initial distribution with addresses and total supply\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {string} config.destinationAddress - Address to deploy token to.\n * @param {string} config.changeAddress - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<DeployBsv21TokenResult>} Transaction to deploy BSV 2.1 token\n */\nexport const deployBsv21Token = async (\n\tconfig: DeployBsv21TokenConfig,\n): Promise<DeployBsv21TokenResult> => {\n\tconst {\n\t\tsymbol,\n\t\ticon,\n    decimals,\n\t\tutxos,\n\t\tinitialDistribution,\n\t\tpaymentPk,\n\t\tdestinationAddress,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\tlet iconValue: string;\n\tif (typeof icon === \"string\") {\n\t\ticonValue = icon;\n\t} else {\n\t\tconst iconError = await validIconData(icon);\n\t\tif (iconError) {\n\t\t\tthrow iconError;\n\t\t}\n\t\t// add icon inscription to the transaction\n\t\tconst iconScript = new OrdP2PKH().lock(destinationAddress, icon);\n\t\tconst iconOut = {\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: iconScript,\n\t\t};\n\t\ttx.addOutput(iconOut);\n\t\t// relative output index of the icon\n\t\ticonValue = \"_0\";\n\t}\n\n\t// Ensure the icon format\n\tif (!validIconFormat(iconValue)) {\n\t\tthrow new Error(\n\t\t\t\"Invalid icon format. Must be either outpoint (format: txid_vout) or relative output index of the icon (format _vout). examples: ecb483eda58f26da1b1f8f15b782b1186abdf9c6399a1c3e63e0d429d5092a41_0 or _1\",\n\t\t);\n\t}\n\n  if (decimals) {\n    // add decimals to the amount\n    initialDistribution.amt += \"0\".repeat(decimals);\n  }\n  \n\t// Outputs\n\tconst fileData: DeployMintTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"deploy+mint\",\n\t\tsym: symbol,\n\t\ticon: iconValue,\n\t\tamt: initialDistribution.amt,\n\t};\n\n  if (decimals) {\n    fileData.dec = decimals.toString();\n  }\n\n\tconst b64File = Buffer.from(JSON.stringify(fileData)).toString(\"base64\");\n\tconst sendTxOut = {\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(destinationAddress, {\n\t\t\tdataB64: b64File,\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t} as Inscription),\n\t};\n\ttx.addOutput(sendTxOut);\n\n\t// Additional payments\n\tfor (const payment of additionalPayments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new P2PKH().lock(payment.to),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to deploy token. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n"],"names":["toHex","utf8Str","Buffer","from","toString","DEFAULT_SAT_PER_KB","API_HOST","OrdP2PKH","P2PKH","lock","address","inscription","metaData","ordAsm","undefined","dataB64","contentType","ordHex","fileHex","trim","Error","fileMediaType","inscriptionAsm","toASM","app","type","key","value","Object","entries","LockingScript","fromASM","TokenType","RoytaltyType","fromBase58Check","Utils","inputFromB64Utxo","utxo","unlockScriptTemplate","fromUtxo","_extends","script","fetchPayUtxos","async","scriptEncoding","payUrl","console","log","payRes","fetch","ok","payUtxos","json","filter","u","satoshis","pubKeyHash","p2pkhScript","data","map","txid","vout","toBinary","fetchNftUtxos","collectionId","limit","offset","url","JSON","stringify","subTypeData","res","nftUtxos","_u$data","list","outpoints","nftRes","method","headers","body","Script","fromHex","nftUtxo","origin","outpoint","fetchTokenUtxos","protocol","tokenId","BSV20","tokenUtxos","amt","id","signData","tx","signer","idKey","keyHost","sigma","Sigma","signedTx","sign","authToken","remoteSign","e","stringifyMetaData","result","Array","isArray","String","createOrdinals","utxos","destinations","paymentPk","changeAddress","satsPerKb","additionalPayments","config","length","warn","modelOrFee","SatoshisPerKilobyte","payChange","Transaction","destination","keys","addOutput","lockingScript","p","amount","to","change","toAddress","changeScript","totalSatsIn","totalSatsOut","outputs","reduce","total","out","BigInt","pop","addInput","unlock","fromBinary","toArray","fee","input","computeFee","payChangeOutIdx","findIndex","o","changeOutput","spentOutpoints","sendOrdinals","enforceUniformSend","ordUtxo","ordinals","ordPk","push","_destination$inscript","_destination$inscript2","s","paymentUtxos","changeOut","sendUtxos","payments","payment","sendTxOut","transferOrdTokens","tokenID","inputTokens","distributions","tokenChangeAddress","burn","changeAmt","totalAmtIn","totalAmtOut","every","token","inputScriptBinary","inputScript","dest","transferInscription","op","tick","BSV21","tokenChange","inputs","i","sourceTXID","sourceOutputIndex","validateSubTypeData","subType","collectionData","description","quantity","rarityLabels","label","values","traits","itemData","includes","split","Number","isNaN","parseInt","mintNumber","rank","rarityLabel","attachments","error","OrdLock","ordAddress","payAddress","price","cancelPkh","payPkh","writeScript","writeBin","buildOutput","cancelListing","privateKey","signOutputs","anyoneCanPay","sourceSatoshis","p2pkh","inputIndex","writeOpCode","OP","OP_1","estimateLength","purchaseListing","purchase","_input$sourceTransact","UnlockingScript","writer","Writer","output","slice","write","OP_0","sourceSats","sourceTransaction","subscript","_input$sourceTransact2","preimage","TransactionSignature","format","transactionVersion","version","otherInputs","inputSequence","sequence","lockTime","scope","SIGHASH_ALL","SIGHASH_ANYONECANPAY","SIGHASH_FORKID","writeUInt64LEBn","BigNumber","writeVarIntNum","createOrdListings","listings","listing","listingUtxo","createOrdTokenListings","cancelOrdListings","listingUtxos","cancelOrdTokenListings","purchaseOrdListing","unlockingScriptTemplate","purchaseOrdTokenListing","ErrorOversizedIcon","ErrorIconProportions","ErrorInvalidIconData","ErrorImageDimensionsUndefined","deployBsv21Token","symbol","icon","decimals","initialDistribution","destinationAddress","iconValue","iconError","buffer","image","sharp","png","metadata","width","height","validIconData","iconScript","endsWith","iconVout","startsWith","validIconFormat","repeat","fileData","sym","dec","b64File"],"mappings":"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"}