{"version":3,"file":"index.modern.js","sources":["../src/utils/strings.ts","../src/constants.ts","../src/templates/ordP2pkh.ts","../src/types.ts","../src/utils/utxo.ts","../src/signData.ts","../src/utils/subtypeData.ts","../src/createOrdinals.ts","../src/sendOrdinals.ts","../src/sendUtxos.ts","../src/transferOrdinals.ts","../src/validate.ts","../src/templates/ordLock.ts","../src/createListings.ts","../src/cancelListings.ts","../src/utils/paymail.ts","../src/purchaseOrdListing.ts","../src/utils/icon.ts","../src/deployBsv21.ts","../src/burnOrdinals.ts"],"sourcesContent":["/**\n * Converts a string to its hexadecimal representation\n *\n * @param {string} utf8Str - The string to convert\n * @returns {string} The hexadecimal representation of the input string\n */\nconst toHex = (utf8Str: string): string => {\n  return Buffer.from(utf8Str).toString(\"hex\");\n};\n\nexport { toHex };\n","export const MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\nexport const DEFAULT_SAT_PER_KB = 10;\nexport const API_HOST = \"https://ordinals.gorillapool.io/api\";","import {\n\tLockingScript,\n\tP2PKH,\n\ttype Script,\n} from \"@bsv/sdk\";\nimport type { Inscription, MAP } from \"../types\";\nimport { toHex } from \"../utils/strings\";\nimport { MAP_PREFIX } from \"../constants\";\n\n/**\n * OrdP2PKH (1Sat Ordinal + Pay To Public Key Hash) class implementing ScriptTemplate.\n *\n * This class provides methods to create an Ordinal with Pay To Public Key Hash locking and unlocking scripts. \n * It extends the standard P2PKH script template and provides a custom lock method.\n */\nexport default class OrdP2PKH extends P2PKH {\n\t/**\n\t * Creates a 1Sat Ordinal + P2PKH locking script for a given address string\n\t *\n\t * @param {string} address - An destination address for the Ordinal.\n\t * @param {Object} [inscription] - Base64 encoded file data and Content type of the file.\n\t * @param {MAP} [metaData] - (optional) MAP Metadata to be included in OP_RETURN.\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\t// unlock method inherits from p2pkh\n\tlock(\n\t\taddress: string,\n    inscription?: Inscription,\n\t\tmetaData?: MAP | undefined,\n\t): Script {\n\t\tlet ordAsm = \"\";\n\t\t// This can be omitted for reinscriptions that just update metadata\n\t\tif (inscription?.dataB64 !== undefined && inscription?.contentType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(inscription.dataB64, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(inscription.contentType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`;\n\t\t}\n\n\t\t// Create ordinal output and inscription in a single output\n\t\tconst lockingScript = new P2PKH().lock(address);\n\t\tlet inscriptionAsm = `${ordAsm ? `${ordAsm} ` : \"\"}${lockingScript.toASM()}`;\n\n\t\t// MAP.app and MAP.type keys are required\n\t\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t\t}\n\n\t\tif (metaData?.app && metaData?.type) {\n\t\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\t\tconst mapCmdValue = toHex(\"SET\");\n\t\t\tinscriptionAsm = `${inscriptionAsm ? `${inscriptionAsm} `: \"\"}OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\t\tif (key !== \"cmd\") {\n\t\t\t\t\tinscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\n\t\t\t\t\t\tvalue as string,\n\t\t\t\t\t)}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn LockingScript.fromASM(inscriptionAsm);\n\t}\n}\n","import type { PrivateKey, Transaction } from \"@bsv/sdk\";\nimport type { AuthToken } from \"sigma-protocol\";\n\n// biome-ignore lint/complexity/noBannedTypes: Reserved for future use\ntype Signer = {};\n\nexport interface LocalSigner extends Signer {\n  idKey: PrivateKey;\n}\n\nexport interface RemoteSigner extends Signer {\n  keyHost: string;\n  authToken?: AuthToken;\n}\n\nexport type Destination = {\n  address: string;\n  inscription?: Inscription;\n};\n\n/**\n * @typedef {Object} Listing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n * @property {Utxo} listingUtxo - Utxo of the listing\n */\nexport type NewListing = {\n  payAddress: string;\n  price: number;\n  ordAddress: string;\n  listingUtxo: Utxo;\n}\n\n/**\n * @typedef {Object} ExistingListing\n * @property {string} payout - Payment output script base64 encoded\n * @property {Utxo} listingUtxo - Utxo of the listing\n */\nexport type ExistingListing = {\n  payout: string;\n  listingUtxo: Utxo;\n}\n\n/**\n * @typedef {Object} NewTokenListing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n * @property {number} amt - Number of tokens as a number. Not adjusted for decimals (library will add zeros according to dec value).\n */\nexport type NewTokenListing = {\n  payAddress: string;\n  price: number;\n  amt: number;\n  ordAddress: string;\n}\n\n/**\n * @typedef {Object} Distribution\n * @property {string} address - Destination address. Must be a Ordinals address (BSV address for recieving 1Sat ordinals tokens).\n * @property {number} amt - Number of tokens as a string, considering decimals. Not display format. Ex. 100000000 for 1 token with 8 decimal places.\n * @property {boolean} [omitMetaData] - Optional. Set to true to omit metadata from this distribution's output.\n */\nexport type Distribution = {\n  address: string;\n  amt: number;\n  omitMetaData?: boolean;\n};\n\n/**\n * @typedef {Object} Utxo\n * @property {number} satoshis - Amount in satoshis\n * @property {string} txid - Transaction id\n * @property {number} vout - Output index\n * @property {string} script - Base64 encoded locking script\n */\nexport type Utxo = {\n  satoshis: number;\n  txid: string;\n  vout: number;\n  script: string;\n};\n\n/**\n * @typedef {Object} NftUtxo\n * @property {string} collectionId - Optional. Collection id of the NFT\n * @property {string} contentType - Media type of the NFT\n * @property {string} creatorBapId - Optional. Creator BAP id of the NFT\n * @property {string} origin - Origin address of the NFT\n * @property {number} satoshis - Always 1\n */\nexport interface NftUtxo extends Utxo {\n  collectionId?: string;\n  contentType: string;\n  creatorBapId?: string;\n  origin: string;\n  satoshis: 1;\n}\n\n/**\n * @typedef {Object} TokenUtxo\n * @property {string} amt - Number of tokens as a string, adjusted for decimals. Ex. 100000000 for 1 token with 8 decimal places.\n * @property {string} id - Token id -  either tick or id depending on protocol\n * @property {string} satoshis - Always 1\n * @property {string} [payout] - Optional. Payment output script base64 encoded\n * @property {number} [price] - Optional. Listing price in satoshis\n * @property {boolean} [isListing] - Optional. True if the token is a listing\n */\nexport interface TokenUtxo extends Utxo {\n  amt: string;\n  id: string;\n  satoshis: 1;\n  payout?: string;\n  price?: number;\n  isListing?: boolean;\n}\n\nexport enum TokenSelectionStrategy {\n  SmallestFirst = \"smallest\",\n  LargestFirst = \"largest\",\n  RetainOrder = \"retain\",\n  Random = \"random\",\n}\n\nexport interface TokenSelectionOptions {\n  inputStrategy?: TokenSelectionStrategy;\n  outputStrategy?: TokenSelectionStrategy;\n}\n\nexport interface TokenSelectionResult {\n  selectedUtxos: TokenUtxo[];\n  totalSelected: bigint;\n  isEnough: boolean;\n}\n\nexport type Inscription = {\n  dataB64: string;\n  contentType: string;\n};\n\nexport type ImageContentType =\n  | \"image/png\"\n  | \"image/jpeg\"\n  | \"image/gif\"\n  | \"image/svg+xml\"\n  | \"image/webp\";\n\n/**\n * @typedef {Object} IconInscription\n * @property {string} dataB64 - Base64 encoded image data. Must be a square image.\n * @property {ImageContentType} contentType - Media type of the image\n */\nexport type IconInscription = {\n  dataB64: string;\n  contentType: ImageContentType;\n};\n\nexport type Payment = {\n  to: string;\n  amount: number;\n};\n\nexport type TokenInscription = {\n  p: \"bsv-20\";\n  amt: string;\n  op: \"transfer\" | \"mint\" | \"deploy+mint\" | \"burn\";\n  dec?: string;\n};\n\nexport interface MintTokenInscription extends TokenInscription {\n  op: \"mint\";\n}\n\nexport interface DeployMintTokenInscription extends TokenInscription {\n  op: \"deploy+mint\";\n  sym: string;\n  icon: string;\n}\n\nexport interface TransferTokenInscription extends TokenInscription {\n  p: \"bsv-20\";\n  amt: string;\n  op: \"transfer\" | \"burn\";\n}\n\nexport interface TransferBSV20Inscription extends TransferTokenInscription {\n  tick: string;\n}\n\nexport interface TransferBSV21Inscription extends TransferTokenInscription {\n  id: string;\n}\n\nexport enum TokenType {\n  BSV20 = \"bsv20\",\n  BSV21 = \"bsv21\",\n}\n\nexport type BaseResult = {\n  tx: Transaction;\n  spentOutpoints: string[];\n};\n\nexport interface ChangeResult extends BaseResult {\n  payChange?: Utxo;\n};\n\n/**\n * MAP (Magic Attribute Protocol) metadata object with stringified values for writing to the blockchain\n * @typedef {Object} MAP\n * @property {string} app - Application identifier\n * @property {string} type - Metadata type\n * @property {string} [prop] - Optional. Additional metadata properties\n */\nexport type MAP = {\n  app: string;\n  type: string;\n  [prop: string]: string;\n};\n\nexport type PreMAP = {\n  app: string;\n  type: string;\n  [prop: string]: unknown;\n  royalties?: Royalty[];\n  subTypeData?: CollectionSubTypeData | CollectionItemSubTypeData;\n};\n\nexport type CreateOrdinalsConfig = {\n  utxos: Utxo[];\n  destinations: Destination[];\n  paymentPk: PrivateKey;\n  changeAddress?: string;\n  satsPerKb?: number;\n  metaData?: PreMAP;\n  signer?: LocalSigner | RemoteSigner;\n  additionalPayments?: Payment[];\n};\n\nexport enum RoytaltyType {\n  Paymail = \"paymail\",\n  Address = \"address\",\n  Script = \"script\",\n}\n\n/**\n * Royalty object\n * @typedef {Object} Royalty\n * @property {RoytaltyType} type - Royalty type, string, one of \"paymail\", \"address\", \"script\"\n * @property {string} destination - Royalty destination\n * @property {string} percentage - Royalty percentage as a string float 0-1 (0.01 = 1%)\n */\nexport type Royalty = {\n  type: RoytaltyType;\n  destination: string;\n  percentage: string; // string float 0-1\n};\n\nexport interface CreateOrdinalsMetadata extends PreMAP {\n  type: \"ord\",\n  name: string,\n  previewUrl?: string,\n}\n\nexport interface CreateOrdinalsCollectionMetadata extends CreateOrdinalsMetadata {\n  subType: \"collection\",\n  subTypeData: CollectionSubTypeData, // JSON stringified CollectionSubTypeData\n  royalties?: Royalty[],\n};\n\nexport interface CreateOrdinalsCollectionItemMetadata extends CreateOrdinalsMetadata {\n  subType: \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n};\n\n/**\n * Configuration object for creating an ordinals collection\n * @typedef {Object} CreateOrdinalsCollectionConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collection\"\n * @property metaData.name - Collection name\n * @property metaData.subTypeData - JSON stringified CollectionSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionConfig extends CreateOrdinalsConfig {\n  metaData: CreateOrdinalsCollectionMetadata\n}\n\nexport type CollectionTraits = {\n  [trait: string]: CollectionTrait;\n};\n\nexport type CollectionTrait = {\n  values: string[];\n  occurancePercentages: string[];\n};\n\nexport type Rarity = {\n  [key: string]: string;\n}\n\nexport type RarityLabels = Rarity[]\nexport interface CollectionSubTypeData {\n  description: string;\n  quantity: number;\n  rarityLabels: RarityLabels;\n  traits: CollectionTraits;\n}\n\nexport interface CreateOrdinalsCollectionItemMetadata extends PreMAP {\n  type: \"ord\",\n  name: string,\n  subType: \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n  previewUrl?: string,\n}\n\n/**\n * Configuration object for creating an ordinals collection item\n * @typedef {Object} CreateOrdinalsCollectionItemConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection item\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collectionItem\"\n * @property metaData.name - Collection item name\n * @property metaData.subTypeData - JSON stringified CollectionItemSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionItemConfig extends CreateOrdinalsConfig {\n  metaData: CreateOrdinalsCollectionItemMetadata\n}\n\n/**\n * Subtype data for an ordinals collection item\n * @typedef {Object} CollectionItemSubTypeData\n * @property {string} collectionId - Collection id\n * @property {number} mintNumner - Mint number\n * @property {number} rank - Rank\n * @property {string} rarityLabel - Rarity label\n * @property {string} traits - traits object\n * @property {string} attachments - array of attachment objects\n */\nexport interface CollectionItemSubTypeData {\n  collectionId: string;\n  mintNumber?: number;\n  rank?: number;\n  rarityLabel?: RarityLabels;\n  traits?: CollectionItemTrait[];\n  attachments?: CollectionItemAttachment[];\n}\n\nexport type CollectionItemTrait = {\n  name: string;\n  value: string;\n  rarityLabel?: string;\n  occurancePercentrage?: string;\n};\n\nexport type CollectionItemAttachment = {\n  name: string;\n  description?: string;\n  \"content-type\": string;\n  url: string;\n}\n\nexport interface BurnMAP extends MAP {\n  type: \"ord\";\n  op: \"burn\";\n}\n\nexport type BurnOrdinalsConfig = {\n  ordPk: PrivateKey;\n  ordinals: Utxo[];\n  metaData?: BurnMAP;\n}\n\nexport type SendOrdinalsConfig = {\n  paymentUtxos: Utxo[];\n  ordinals: Utxo[];\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  destinations: Destination[];\n  changeAddress?: string;\n  satsPerKb?: number;\n  metaData?: PreMAP;\n  signer?: LocalSigner | RemoteSigner;\n  additionalPayments?: Payment[];\n  enforceUniformSend?: boolean;\n}\n\nexport type DeployBsv21TokenConfig = {\n  symbol: string;\n  decimals?: number;\n  icon: string | IconInscription;\n  utxos: Utxo[];\n  initialDistribution: Distribution;\n  paymentPk: PrivateKey;\n  destinationAddress: string;\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[];\n};\n\nexport type SendUtxosConfig = {\n  utxos: Utxo[];\n  paymentPk: PrivateKey;\n  payments: Payment[];\n  satsPerKb?: number;\n  changeAddress?: string;\n  metaData?: MAP;\n};\n\nexport interface TokenChangeResult extends ChangeResult {\n  tokenChange?: TokenUtxo[];\n}\n\n/**\n * Configuration object for token outputs\n * @typedef {Object} TokenSplitConfig\n * @property {number} outputs - Number of outputs to split the token into. Default is 1.\n * @property {number} threshold - Optional. Minimum amount of tokens per output.\n * @property {boolean} omitMetaData - Set to true to omit metadata from the token change outputs\n **/\nexport type TokenSplitConfig = {\n  outputs: number;\n  threshold?: number;\n  omitMetaData?: boolean;\n}\n\nexport enum TokenInputMode {\n  All = \"all\",\n  Needed = \"needed\",\n}\n\n/**\n * Configuration object for transferring token ordinals\n * @typedef {Object} TransferOrdTokensConfig\n * @property {TokenType} protocol - Token protocol\n * @property {string} tokenID - Token id\n * @property {number} decimals - Number of decimal places for this token.\n * @property {Utxo[]} utxos - Array of payment Utxos\n * @property {TokenUtxo[]} inputTokens - Array of TokenUtxos to be transferred\n * @property {Distribution[]} distributions - Array of Distribution objects\n * @property {PrivateKey} paymentPk - Private key of the payment address\n * @property {PrivateKey} ordPk - Private key of the ord address\n * @property {string} [changeAddress] - Optional. Address to send the change\n * @property {string} [tokenChangeAddress] - Optional. Address to send the token change\n * @property {number} [satsPerKb] - Optional. Satoshis per kilobyte\n * @property {PreMAP} [metaData] - Optional. MAP metadata object\n * @property {LocalSigner | RemoteSigner} [signer] - Optional. Signer object\n * @property {Payment[]} [additionalPayments] - Optional. Array of additional payments\n * @property {boolean} [burn] - Optional. Set to true to burn the input tokens\n * @property {TokenSplitConfig} [splitConfig] - Optional. Configuration object for splitting token change\n * @property {TokenInputMode} [tokenInputMode] - Optional. Token input mode. Default is \"needed\"\n */\nexport type TransferOrdTokensConfig = {\n  protocol: TokenType;\n  tokenID: string;\n  decimals: number;\n  utxos: Utxo[];\n  inputTokens: TokenUtxo[];\n  distributions: Distribution[];\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  inputMode?: TokenInputMode;\n  changeAddress?: string;\n  tokenChangeAddress?: string;\n  satsPerKb?: number;\n  metaData?: PreMAP;\n  signer?: LocalSigner | RemoteSigner;\n  additionalPayments?: Payment[];\n  burn?: boolean;\n  splitConfig?: TokenSplitConfig;\n  tokenInputMode?: TokenInputMode;\n}\n\nexport type CreateOrdListingsConfig = {\n  utxos: Utxo[];\n  listings: NewListing[];\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey,\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[];\n}\n\nexport type PurchaseOrdListingConfig = {\n  utxos: Utxo[];\n  paymentPk: PrivateKey;\n  listing: ExistingListing;\n  ordAddress: string;\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[],\n  royalties?: Royalty[],\n  metaData?: MAP,\n}\n\nexport type PurchaseOrdTokenListingConfig = {\n  protocol: TokenType;\n  tokenID: string;\n  utxos: Utxo[];\n  paymentPk: PrivateKey;\n  listingUtxo: TokenUtxo;\n  ordAddress: string;\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[],\n  metaData?: MAP,\n}\n\nexport type CancelOrdListingsConfig = {\n  utxos: Utxo[],\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  listingUtxos: Utxo[];\n  additionalPayments?: Payment[];\n  changeAddress?: string;\n  satsPerKb?: number;\n}\n\nexport interface CancelOrdTokenListingsConfig extends CancelOrdListingsConfig {\n  utxos: Utxo[],\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  listingUtxos: TokenUtxo[];\n  additionalPayments: Payment[];\n  changeAddress?: string;\n  satsPerKb?: number;\n  protocol: TokenType,\n  tokenID: string;\n  ordAddress?: string;\n}\n\n/**\n * Configuration object for creating a token listing\n * @typedef {Object} CreateOrdTokenListingsConfig\n * @property {Utxo[]} utxos - Array of payment Utxos\n * @property {TokenUtxo[]} inputTokens - Array of TokenUtxos to be listed\n * @property {NewTokenListing[]} listings - Array of NewTokenListings\n * @property {PrivateKey} paymentPk - Private key of the payment address\n * @property {PrivateKey} ordPk - Private key of the ord address\n * @property {string} tokenChangeAddress - Address to send the token change\n * @property {number} [satsPerKb] - Optional. Satoshis per kilobyte\n * @property {Payment[]} [additionalPayments] - Optional. Array of additional payments\n * @property {TokenType} protocol - Token protocol\n * @property {string} tokenID - Token id\n * @property {number} decimals - Number of decimal places for this token.\n */\nexport interface CreateOrdTokenListingsConfig {\n  utxos: Utxo[];\n  listings: NewTokenListing[];\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey,\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[];\n  protocol: TokenType;\n  tokenID: string;\n  decimals: number;\n  inputTokens: TokenUtxo[];\n  tokenChangeAddress: string;\n}\n\nexport const MAX_TOKEN_SUPPLY = 2n ** 64n - 1n;","import {\n\ttype Transaction,\n\ttype UnlockingScript,\n\tfromUtxo,\n\ttype TransactionInput,\n\tUtils,\n\tP2PKH,\n  Script,\n} from \"@bsv/sdk\";\nimport { type NftUtxo, type TokenSelectionOptions, type TokenSelectionResult, TokenSelectionStrategy, TokenType, type TokenUtxo, type Utxo } from \"../types\";\nimport { API_HOST } from \"../constants\";\n\nconst { fromBase58Check } = Utils;\n\n/**\n * Converts a Utxo object with a base64 encoded script to a Utxo object with a hex encoded script\n * @param {Utxo} utxo - Utxo object with base64 encoded script\n * @param {Object} unlockScriptTemplate - Object with sign and estimateLength functions\n * @returns {TransactionInput} Utxo object with hex encoded script\n */\nexport const inputFromB64Utxo = (\n\tutxo: Utxo,\n\tunlockScriptTemplate: {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>;\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>;\n\t},\n): TransactionInput => {\n\tconst input = fromUtxo(\n\t\t{\n\t\t\t...utxo,\n\t\t\tscript: Buffer.from(utxo.script, \"base64\").toString(\"hex\"),\n\t\t},\n\t\tunlockScriptTemplate,\n\t);\n\treturn input;\n};\n\n/**\n * Fetches pay utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<Utxo[]>} Array of pay utxos\n */\nexport const fetchPayUtxos = async (address: string, scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\"): Promise<Utxo[]> => {\n\tconst payUrl = `${API_HOST}/txos/address/${address}/unspent?bsv20=false`;\n\tconsole.log({ payUrl });\n\tconst payRes = await fetch(payUrl);\n\tif (!payRes.ok) {\n\t\tthrow new Error(\"Error fetching pay utxos\");\n\t}\n\tlet payUtxos = await payRes.json();\n\t// exclude all 1 satoshi utxos\n\tpayUtxos = payUtxos.filter((u: Utxo) => u.satoshis !== 1 && !isLock(u));\n\n\t// Get pubkey hash from address\n\tconst pubKeyHash = fromBase58Check(address);\n\tconst p2pkhScript = new P2PKH().lock(pubKeyHash.data);\n\tpayUtxos = payUtxos.map((utxo: Partial<Utxo>) => ({\n\t\ttxid: utxo.txid,\n\t\tvout: utxo.vout,\n\t\tsatoshis: utxo.satoshis,\n\t\tscript: scriptEncoding === \"hex\" || scriptEncoding === \"base64\" ? Buffer.from(p2pkhScript.toBinary()).toString(scriptEncoding) : p2pkhScript.toASM(),\n\t}));\n\treturn payUtxos as Utxo[];\n};\n\n/**\n * Fetches NFT utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @param {string} [collectionId] - Optional. Collection id (collection insciprtion origin)\n * @param {number} [limit=10] - Optional. Number of utxos to fetch. Default is 10\n * @param {number} [offset=0] - Optional. Offset for fetching utxos. Default is 0\n * @param {string} [scriptEncoding=\"base64\"] - Optional. Encoding for the script. Default is base64. Options are hex, base64, or asm.\n * @returns {Promise<Utxo[]>} Array of NFT utxos\n */\nexport const fetchNftUtxos = async (\n\taddress: string,\n\tcollectionId?: string,\n\tlimit = 10,\n\toffset = 0,\n  scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\",\n): Promise<NftUtxo[]> => {\n\tlet url = `${API_HOST}/txos/address/${address}/unspent?limit=${limit}&offset=${offset}&`;\n\n\tif (collectionId) {\n\t\tconst query = {\n\t\t\tmap: {\n\t\t\t\tsubTypeData: { collectionId },\n\t\t\t},\n\t\t};\n\t\tconst b64Query = Buffer.from(JSON.stringify(query)).toString(\"base64\");\n\t\turl += `q=${b64Query}`;\n\t}\n\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching NFT utxos for ${address}`);\n\t}\n\n\t// Returns a BSV20Txo but we only need a few fields\n\tlet nftUtxos = await res.json();\n\n\t// Only include 1 satoshi outputs, non listings\n\tnftUtxos = nftUtxos.filter(\n\t\t(u: {\n\t\t\tsatoshis: number;\n\t\t\tdata: { list: { price: number; payout: string } | undefined } | null;\n\t\t}) => u.satoshis === 1 && !u.data?.list,\n\t);\n\n\tconst outpoints = nftUtxos.map(\n\t\t(utxo: { txid: string; vout: number }) => `${utxo.txid}_${utxo.vout}`,\n\t);\n\t// Fetch the scripts up to the limit\n\tconst nftRes = await fetch(`${API_HOST}/txos/outpoints?script=true`, {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t\tbody: JSON.stringify([...outpoints]),\n\t});\n\n\tif (!nftRes.ok) {\n\t\tthrow new Error(`Error fetching NFT scripts for ${address}`);\n\t}\n\n\tconst nfts = (await nftRes.json() || [])\n\n\tnftUtxos = nfts.map(\n\t\t(utxo: {\n\t\t\torigin: { outpoint: string };\n\t\t\tscript: string;\n\t\t\tvout: number;\n\t\t\ttxid: string;\n\t\t}) => {\n      let script = utxo.script;\n      if (scriptEncoding === \"hex\") {\n        script = Buffer.from(script, \"base64\").toString(\"hex\");\n      } else if (scriptEncoding === \"asm\") {\n        script = Script.fromHex(Buffer.from(script, \"base64\").toString(\"hex\")).toASM();\n      }\n\t\t\tconst nftUtxo = {\n\t\t\t\torigin: utxo.origin.outpoint,\n\t\t\t\tscript,\n\t\t\t\tvout: utxo.vout,\n\t\t\t\ttxid: utxo.txid,\n\t\t\t\tsatoshis: 1,\n\t\t\t} as NftUtxo;\n\t\t\tif (collectionId) {\n\t\t\t\tnftUtxo.collectionId = collectionId;\n\t\t\t}\n\t\t\treturn nftUtxo;\n\t\t},\n\t);\n\n\treturn nftUtxos as NftUtxo[];\n};\n\n/**\n * Fetches token utxos from the API\n * @param {TokenType} protocol - Token protocol. Either BSV20 or BSV21\n * @param {string} tokenId - Token id. Ticker for BSV20 and id (mint+deploy inscription origin) for BSV21\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<TokenUtxo[]>} Array of token utxos\n */\nexport const fetchTokenUtxos = async (\n\tprotocol: TokenType,\n\ttokenId: string,\n\taddress: string,\n): Promise<TokenUtxo[]> => {\n\tconst url = `${API_HOST}/bsv20/${address}/${protocol === TokenType.BSV20 ? \"tick\" : \"id\"}/${tokenId}?bsv20=true&listing=false`;\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching ${protocol} utxos`);\n\t}\n\n\t// returns a BSV20Txo but we only need a few fields\n\tlet tokenUtxos = await res.json();\n\n\ttokenUtxos = tokenUtxos.map((utxo: Partial<TokenUtxo>) => ({\n\t\tamt: utxo.amt,\n\t\tscript: utxo.script,\n\t\tvout: utxo.vout,\n\t\ttxid: utxo.txid,\n\t\tid: tokenId,\n\t\tsatoshis: 1,\n\t}));\n\n\treturn tokenUtxos as TokenUtxo[];\n};\n\nconst isLock = (utxo: Utxo) => {\n  return !!(utxo as unknown as { lock: { address: string, until: number } }).lock;\n}\n\n/**\n * Selects token UTXOs based on the required amount and specified strategies.\n * @param {TokenUtxo[]} tokenUtxos - Array of token UTXOs.\n * @param {number} requiredAmount - Required amount in tokens (displayed amount).\n * @param {number} decimals - Number of decimal places for the token.\n * @param {TokenSelectionOptions} [options={}] - Options for token selection.\n * @returns {TokenSelectionResult} Selected token UTXOs and total selected amount.\n */\nexport const selectTokenUtxos = (\n  tokenUtxos: TokenUtxo[],\n  requiredAmount: number,\n  decimals: number,\n  options: TokenSelectionOptions = {}\n): TokenSelectionResult => {\n  const {\n    inputStrategy = TokenSelectionStrategy.RetainOrder,\n    outputStrategy = TokenSelectionStrategy.RetainOrder,\n  } = options;\n\n  const requiredAmountBigInt = BigInt(Math.floor(requiredAmount * 10 ** decimals));\n\n  // Sort the UTXOs based on the input strategy\n  const sortedUtxos = [...tokenUtxos].sort((a, b) => {\n    if (inputStrategy === TokenSelectionStrategy.RetainOrder) return 0;\n    const amtA = BigInt(a.amt);\n    const amtB = BigInt(b.amt);\n\n    switch (inputStrategy) {\n      case TokenSelectionStrategy.SmallestFirst:\n        return Number(amtA - amtB);\n      case TokenSelectionStrategy.LargestFirst:\n        return Number(amtB - amtA);\n      case TokenSelectionStrategy.Random:\n        return Math.random() - 0.5;\n      default:\n        return 0;\n    }\n  });\n\n  let totalSelected = 0n;\n  const selectedUtxos: TokenUtxo[] = [];\n\n  for (const utxo of sortedUtxos) {\n    selectedUtxos.push(utxo);\n    totalSelected += BigInt(utxo.amt);\n\n    if (totalSelected >= requiredAmountBigInt && requiredAmountBigInt > 0n) {\n      break;\n    }\n  }\n\n  // Sort the selected UTXOs based on the output strategy\n  if (outputStrategy !== TokenSelectionStrategy.RetainOrder) {\n    selectedUtxos.sort((a, b) => {\n      const amtA = BigInt(a.amt);\n      const amtB = BigInt(b.amt);\n\n      switch (outputStrategy) {\n        case TokenSelectionStrategy.SmallestFirst:\n          return Number(amtA - amtB);\n        case TokenSelectionStrategy.LargestFirst:\n          return Number(amtB - amtA);\n        case TokenSelectionStrategy.Random:\n          return Math.random() - 0.5;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  return {\n    selectedUtxos,\n    totalSelected,\n    isEnough: totalSelected >= requiredAmountBigInt\n  };\n};","import type { Transaction } from \"@bsv/sdk\";\nimport { Sigma } from \"sigma-protocol\";\nimport type { LocalSigner, RemoteSigner } from \"./types\";\n\n/**\n * Signs data in the transaction with Sigma protocol\n * @param {Transaction} tx - Transaction to sign\n * @param {LocalSigner | RemoteSigner} signer - Local or remote signer (used for data signature)\n * @returns {Transaction} Transaction with signed data\n */\nexport const signData = async (\n\ttx: Transaction,\n\tsigner: LocalSigner | RemoteSigner,\n): Promise<Transaction> => {\n\t// Sign tx if idKey or remote signer like starfish/tokenpass\n\tconst idKey = (signer as LocalSigner)?.idKey;\n\tconst keyHost = (signer as RemoteSigner)?.keyHost;\n\n\tif (idKey) {\n\t\tconst sigma = new Sigma(tx);\n\t\tconst { signedTx } = sigma.sign(idKey);\n\t\treturn signedTx;\n\t}\n\tif (keyHost) {\n\t\tconst authToken = (signer as RemoteSigner)?.authToken;\n\t\tconst sigma = new Sigma(tx);\n\t\ttry {\n\t\t\tconst { signedTx } = await sigma.remoteSign(keyHost, authToken);\n\t\t\treturn signedTx;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthrow new Error(`Remote signing to ${keyHost} failed`);\n\t\t}\n\t}\n\tthrow new Error(\"Signer must be a LocalSigner or RemoteSigner\");\n};\n","import type { MAP, PreMAP } from \"../types\";\n\nconst stringifyMetaData = (metaData?: PreMAP): MAP | undefined => {\n  if (!metaData) return undefined;\n\tconst result: MAP = {\n\t\tapp: metaData.app,\n\t\ttype: metaData.type,\n\t};\n\n\tfor (const [key, value] of Object.entries(metaData)) {\n\t\tif (value !== undefined) {\n\t\t\tif (typeof value === \"string\") {\n\t\t\t\tresult[key] = value;\n\t\t\t} else if (Array.isArray(value) || typeof value === \"object\") {\n\t\t\t\tresult[key] = JSON.stringify(value);\n\t\t\t} else {\n\t\t\t\tresult[key] = String(value);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\nexport default stringifyMetaData;\n","import { Transaction, SatoshisPerKilobyte, P2PKH, Script, Utils } from \"@bsv/sdk\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n\tUtxo,\n\tCreateOrdinalsConfig,\n\tCreateOrdinalsCollectionConfig,\n\tCreateOrdinalsCollectionItemConfig,\n  ChangeResult,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Creates a transaction with inscription outputs\n * @param {CreateOrdinalsConfig | CreateOrdinalsCollectionConfig | CreateOrdinalsCollectionItemConfig} config - Configuration object for creating ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {string} config.changeAddress - Optional. Address to send change to. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Local or remote signer (used for data signature)\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<ChangeResult>} Transaction with inscription outputs\n */\nexport const createOrdinals = async (\n\tconfig:\n\t\t| CreateOrdinalsConfig\n\t\t| CreateOrdinalsCollectionConfig\n\t\t| CreateOrdinalsCollectionItemConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tutxos,\n\t\tdestinations,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t} = config;\n\t\n\t// Warn if creating many inscriptions at once\n\tif (destinations.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Outputs\n\t// Add inscription outputs\n\tfor (const destination of destinations) {\n\t\tif (!destination.inscription) {\n\t\t\tthrow new Error(\"Inscription is required for all destinations\");\n\t\t}\n\n\t\t// remove any undefined fields from metadata\n\t\tif (metaData) {\n\t\t\tfor(const key of Object.keys(metaData)) {\n\t\t\t\tif (metaData[key] === undefined) {\n\t\t\t\t\tdelete metaData[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription,\n\t\t\t\tstringifyMetaData(metaData),\n\t\t\t),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\tlet payChange: Utxo | undefined;\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\n\tif(signer) {\n\t\tconst utxo = utxos.pop() as Utxo\n\t\ttx.addInput(inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t)));\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\ttx = await signData(tx, signer);\n\t}\n\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to create ordinals. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\tScript,\n\ttype TransactionOutput,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type { SendOrdinalsConfig, Utxo, ChangeResult } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Sends ordinals to the given destinations\n * @param {SendOrdinalsConfig} config - Configuration object for sending ordinals\n * @param {Utxo[]} config.paymentUtxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.ordinals - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {string} [config.changeAddress] - Optional. Address to send change to, if any. If not provided, defaults to paymentPk address\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} [config.signer] - Optional. Signer object to sign the transaction\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to include in the transaction\n * @param {boolean} [config.enforceUniformSend] - Optional. Default: true. Enforce that the number of destinations matches the number of ordinals being sent. Sending ordinals requires a 1:1 mapping of destinations to ordinals. This is only used for sub-protocols like BSV21 that manage tokens without sending the inscriptions directly.\n * @returns {Promise<ChangeResult>} Transaction, spent outpoints, and change utxo\n */\nexport const sendOrdinals = async (\n\tconfig: SendOrdinalsConfig,\n): Promise<ChangeResult> => {\n\tif (!config.satsPerKb) {\n\t\tconfig.satsPerKb = DEFAULT_SAT_PER_KB;\n\t}\n\tif (!config.additionalPayments) {\n\t\tconfig.additionalPayments = [];\n\t}\n\tif (config.enforceUniformSend === undefined) {\n\t\tconfig.enforceUniformSend = true;\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(config.satsPerKb);\n\tlet tx = new Transaction();\n\tconst spentOutpoints: string[] = [];\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of config.ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(\n\t\t\tordUtxo,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tconfig.ordPk, \n\t\t\t\t\"all\",\n\t\t\t\ttrue, \n\t\t\t\tordUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(ordUtxo.script, 'base64'))\n\t\t\t),\n\t\t);\n\t\tspentOutpoints.push(`${ordUtxo.txid}_${ordUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// check that ordinals coming in matches ordinals going out if supplied\n\tif (\n\t\tconfig.enforceUniformSend &&\n\t\tconfig.destinations.length !== config.ordinals.length\n\t) {\n\t\tthrow new Error(\n\t\t\t\"Number of destinations must match number of ordinals being sent\",\n\t\t);\n\t}\n\n\t// Add ordinal outputs\n\tfor (const destination of config.destinations) {\n\t\tlet s: Script;\n\t\tif (\n\t\t\tdestination.inscription?.dataB64 &&\n\t\t\tdestination.inscription?.contentType\n\t\t) {\n\t\t\ts = new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription,\n\t\t\t\tstringifyMetaData(config.metaData),\n\t\t\t);\n\t\t} else {\n\t\t\ts = new P2PKH().lock(destination.address);\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: s,\n\t\t});\n\t}\n\n  \n\t// Add additional payments if any\n\tfor (const p of config.additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n  // add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = config.changeAddress || config.paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of config.paymentUtxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tconfig.paymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\tspentOutpoints.push(`${utxo.txid}_${utxo.vout}`);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (totalSatsIn < totalSatsOut) {\n\t\tthrow new Error(\"Not enough ordinals to send\");\n\t}\n\n\tif (config.signer) {\n\t\ttx = await signData(tx, config.signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChange,\n\t};\n};\n","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype TransactionOutput,\n\tUtils,\n\tScript,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type { ChangeResult, SendUtxosConfig, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\n\n/**\n * Sends utxos to the given destination\n * @param {SendUtxosConfig} config - Configuration object for sending utxos\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {Payment[]} config.payments - Array of payments with addresses and amounts\n * @param {number} [config.satsPerKb] - (Optional) Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {string} [config.changeAddress] - (Optional) Address to send change to. If not provided, defaults to paymentPk address\n * @param {string} [config.metaData] - (Optional) Metadata to include in OP_RETURN of the payment output\n * @returns {Promise<ChangeResult>} Transaction with utxo outputs\n */\nexport const sendUtxos = async (\n\tconfig: SendUtxosConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tpayments,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tchangeAddress = paymentPk.toAddress().toString(),\n    metaData,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\t// Outputs\n\tfor (const payment of payments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new OrdP2PKH().lock(payment.to, undefined, metaData),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + (out.satoshis || 0),\n\t\t0,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\ttx.addInput(input);\n\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + fee) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + fee) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to send. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChange: Utxo | undefined;\n\tif (totalSatsIn > totalSatsOut + fee) {\n\t\t// Change\n\t\tconst changeScript = new P2PKH().lock(changeAddress);\n\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t} else if (totalSatsIn < totalSatsOut + fee) {\n\t\tconsole.log(\"No change needed\");\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\t\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\tP2PKH,\n\ttype PrivateKey,\n\tSatoshisPerKilobyte,\n\tScript,\n\tTransaction,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport {\n\tTokenType,\n\ttype TokenUtxo,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferOrdTokensConfig,\n\ttype TokenChangeResult,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n\tTokenInputMode,\n\ttype TokenSplitConfig,\n\ttype PreMAP,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Transfer tokens to a destination\n * @param {TransferOrdTokensConfig} config - Configuration object for transferring tokens\n * @param {TokenType} config.protocol - Token protocol. Must be TokenType.BSV20 or TokenType.BSV21\n * @param {string} config.tokenID - Token ID. Either the tick or id value depending on the protocol\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {TokenUtxo[]} config.inputTokens - Token utxos to spend\n * @param {Distribution[]} config.distributions - Array of destinations with addresses and amounts\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {decimals} config.decimals - Number of decimal places for the token\n * @param {string} [config.changeAddress] - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {string} [config.tokenChangeAddress] - Optional. Address to send token change to, if any. If not provided, defaults to ordPk address\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} [config.signer] - Optional. Signer object to sign the transaction\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to include in the transaction\n * @param {TokenInputMode} [config.tokenInputMode] - Optional. \"all\" or \"needed\". Default is \"needed\"\n * @param {TokenSplitConfig} [config.tokenSplitConfig] - Optional. Configuration object for splitting token change\n * @param {burn} [config.burn] - Optional. Set to true to burn the tokens.\n * @returns {Promise<TokenChangeResult>} Transaction with token transfer outputs\n */\nexport const transferOrdTokens = async (\n\tconfig: TransferOrdTokensConfig,\n): Promise<TokenChangeResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tinputTokens,\n\t\tdistributions,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tchangeAddress,\n\t\ttokenChangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tdecimals,\n\t\tadditionalPayments = [],\n\t\tburn = false,\n\t\ttokenInputMode = TokenInputMode.Needed,\n\t\tsplitConfig = {\n\t\t\toutputs: 1,\n\t\t\tomitMetaData: false,\n\t\t},\n\t} = config;\n\n\t// Ensure these inputs are for the expected token\n\tif (!inputTokens.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\t// calculate change amount\n\tlet changeAmt = 0n;\n\tlet totalAmtIn = 0n;\n\tlet totalAmtOut = 0n;\n\tconst totalAmtNeeded = distributions.reduce(\n\t\t(acc, dist) => acc + BigInt(dist.amt * 10 ** decimals),\n\t\t0n,\n\t);\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Handle token inputs based on tokenInputMode\n\tlet tokensToUse: TokenUtxo[];\n\tif (tokenInputMode === TokenInputMode.All) {\n\t\ttokensToUse = inputTokens;\n\t\ttotalAmtIn = inputTokens.reduce(\n\t\t\t(acc, token) => acc + BigInt(token.amt),\n\t\t\t0n,\n\t\t);\n\t} else {\n\t\ttokensToUse = [];\n\t\tfor (const token of inputTokens) {\n\t\t\ttokensToUse.push(token);\n\t\t\ttotalAmtIn += BigInt(token.amt);\n\t\t\tif (totalAmtIn >= totalAmtNeeded) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (totalAmtIn < totalAmtNeeded) {\n\t\t\tthrow new Error(\"Not enough tokens to satisfy the transfer amount\");\n\t\t}\n\t}\n\n\tfor (const token of tokensToUse) {\n\t\tconst inputScriptBinary = Utils.toArray(token.script, \"base64\");\n\t\tconst inputScript = Script.fromBinary(inputScriptBinary);\n\t\ttx.addInput(\n\t\t\tinputFromB64Utxo(\n\t\t\t\ttoken,\n\t\t\t\tnew OrdP2PKH().unlock(ordPk, \"all\", true, token.satoshis, inputScript),\n\t\t\t),\n\t\t);\n\t}\n\n\t// remove any undefined fields from metadata\n\tif (metaData) {\n\t\tfor (const key of Object.keys(metaData)) {\n\t\t\tif (metaData[key] === undefined) {\n\t\t\t\tdelete metaData[key];\n\t\t\t}\n\t\t}\n\t}\n\n\t// build destination inscriptions\n\tfor (const dest of distributions) {\n\t\tconst bigAmt = BigInt(dest.amt * 10 ** decimals);\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: burn ? \"burn\" : \"transfer\",\n\t\t\tamt: bigAmt.toString(),\n\t\t};\n\t\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\ttick: tokenID,\n\t\t\t} as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\tid: tokenID,\n\t\t\t} as TransferBSV21Inscription;\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid protocol\");\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdest.address,\n\t\t\t\t{\n\t\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\t\t\tcontentType: \"application/bsv-20\",\n\t\t\t\t},\n\t\t\t\t// when present, include metadata on each distribution if omit is not specified\n\t\t\t\tdest.omitMetaData ? undefined : stringifyMetaData(metaData),\n\t\t\t),\n\t\t});\n\t\ttotalAmtOut += bigAmt;\n\t}\n\n\tchangeAmt = totalAmtIn - totalAmtOut;\n\tconsole.log({ changeAmt, totalAmtIn, totalAmtOut });\n\t// check that you have enough tokens to send and return change\n\tif (changeAmt < 0n) {\n\t\tthrow new Error(\"Not enough tokens to send\");\n\t}\n\n\tlet tokenChange: TokenUtxo[] = [];\n\tif (changeAmt > 0n) {\n\t\ttokenChange = splitChangeOutputs(\n\t\t\ttx,\n\t\t\tchangeAmt,\n\t\t\tprotocol,\n\t\t\ttokenID,\n\t\t\ttokenChangeAddress || ordPk.toAddress().toString(),\n\t\t\tordPk,\n\t\t\tmetaData,\n\t\t\tsplitConfig,\n\t\t);\n\t}\n\t// if (changeAmt > 0n) {\n\t//   tokenChange = splitChangeOutputs(\n\t//     tx,\n\t//     inputTokens.length,\n\t//     changeAmt,\n\t//     protocol,\n\t//     tokenID,\n\t//     tokenChangeAddress || ordPk.toAddress().toString(),\n\t//     ordPk,\n\t//     metaData,\n\t//     splitConfig,\n\t//   );\n\t// }\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo,\n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpaymentPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, \"base64\")),\n\t\t\t),\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to transfer tokens. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\tif (signer) {\n\t\ttx = await signData(tx, signer);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// assign txid to tokenChange outputs\n\tconst txid = tx.id(\"hex\") as string;\n\tfor (const change of tokenChange) {\n\t\tchange.txid = txid;\n\t}\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t\ttokenChange,\n\t};\n};\n\n// const splitChangeOutputs = (\n//   tx: Transaction,\n//   numTokenInputs: number,\n//   changeAmt: bigint,\n//   protocol: TokenType,\n//   tokenID: string,\n//   tokenChangeAddress: string,\n//   ordPk: PrivateKey,\n//   metaData: PreMAP | undefined,\n//   splitConfig: TokenSplitConfig\n// ): TokenUtxo[] => {\n//   const tokenChanges: TokenUtxo[] = [];\n//   const shouldSplit = splitConfig.threshold === undefined || numTokenInputs <= BigInt(splitConfig.threshold);\n//   const splitOutputs = shouldSplit ? splitConfig.outputs : 1;\n//   const baseChangeAmount = changeAmt / BigInt(splitOutputs);\n//   let remainder = changeAmt % BigInt(splitOutputs);\n\n//   for (let i = 0; i < splitOutputs; i++) {\n//     let splitAmount = baseChangeAmount;\n//     if (remainder > 0n) {\n//       splitAmount += 1n;\n//       remainder -= 1n;\n//     }\n\n//     const transferInscription: TransferTokenInscription = {\n//       p: \"bsv-20\",\n//       op: \"transfer\",\n//       amt: splitAmount.toString(),\n//     };\n//     let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n//     if (protocol === TokenType.BSV20) {\n//       inscription = {\n//         ...transferInscription,\n//         tick: tokenID,\n//       } as TransferBSV20Inscription;\n//     } else if (protocol === TokenType.BSV21) {\n//       inscription = {\n//         ...transferInscription,\n//         id: tokenID,\n//       } as TransferBSV21Inscription;\n//     } else {\n//       throw new Error(\"Invalid protocol\");\n//     }\n\n//     const lockingScript = new OrdP2PKH().lock(\n//       tokenChangeAddress || ordPk.toAddress().toString(),\n//       {\n//         dataB64: Buffer.from(JSON.stringify(inscription)).toString('base64'),\n//         contentType: \"application/bsv-20\",\n//       },\n//       splitConfig.omitMetaData ? undefined : stringifyMetaData(metaData)\n//     );\n\n//     const vout = tx.outputs.length;\n//     tx.addOutput({ lockingScript, satoshis: 1 });\n//     tokenChanges.push({\n//       id: tokenID,\n//       satoshis: 1,\n//       script: Buffer.from(lockingScript.toBinary()).toString(\"base64\"),\n//       txid: \"\",\n//       vout,\n//       amt: splitAmount.toString(),\n//     });\n//   }\n\n//   return tokenChanges;\n// }\n\nconst splitChangeOutputs = (\n\ttx: Transaction,\n\tchangeAmt: bigint,\n\tprotocol: TokenType,\n\ttokenID: string,\n\ttokenChangeAddress: string,\n\tordPk: PrivateKey,\n\tmetaData: PreMAP | undefined,\n\tsplitConfig: TokenSplitConfig,\n): TokenUtxo[] => {\n\tconst tokenChanges: TokenUtxo[] = [];\n\tconst threshold = BigInt(splitConfig.threshold || 0);\n\tconst maxOutputs = splitConfig.outputs;\n\n\tlet splitOutputs = 1;\n\tif (threshold > 0n) {\n\t\tsplitOutputs = Number(changeAmt / threshold);\n\t\tsplitOutputs = Math.min(splitOutputs, maxOutputs);\n\t\tsplitOutputs = Math.max(splitOutputs, 1);\n\t}\n\n\tconst baseChangeAmount = changeAmt / BigInt(splitOutputs);\n\tlet remainder = changeAmt % BigInt(splitOutputs);\n\n\tfor (let i = 0; i < splitOutputs; i++) {\n\t\tlet splitAmount = baseChangeAmount;\n\t\tif (remainder > 0n) {\n\t\t\tsplitAmount += 1n;\n\t\t\tremainder -= 1n;\n\t\t}\n\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: \"transfer\",\n\t\t\tamt: splitAmount.toString(),\n\t\t};\n\t\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\ttick: tokenID,\n\t\t\t} as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\tid: tokenID,\n\t\t\t} as TransferBSV21Inscription;\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid protocol\");\n\t\t}\n\n\t\tconst lockingScript = new OrdP2PKH().lock(\n\t\t\ttokenChangeAddress || ordPk.toAddress().toString(),\n\t\t\t{\n\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\t\tcontentType: \"application/bsv-20\",\n\t\t\t},\n\t\t\tsplitConfig.omitMetaData ? undefined : stringifyMetaData(metaData),\n\t\t);\n\n\t\tconst vout = tx.outputs.length;\n\t\ttx.addOutput({ lockingScript, satoshis: 1 });\n\t\ttokenChanges.push({\n\t\t\tid: tokenID,\n\t\t\tsatoshis: 1,\n\t\t\tscript: Buffer.from(lockingScript.toBinary()).toString(\"base64\"),\n\t\t\ttxid: \"\",\n\t\t\tvout,\n\t\t\tamt: splitAmount.toString(),\n\t\t});\n\t}\n\n\treturn tokenChanges;\n};\n","import type { CollectionItemSubTypeData, CollectionSubTypeData } from \"./types\";\n\n/**\n * Validates sub type data\n * @param {string} subType - Sub type of the ordinals token\n * @param {string} subTypeData - Sub type data of the ordinals token\n * @returns {Error | undefined} Error if validation fails, undefined if validation passes\n */\nexport const validateSubTypeData = (\n  subType: \"collection\" | \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData | CollectionSubTypeData,\n): Error | undefined => {\n  try {\n    if (subType === \"collection\") {\n      const collectionData = subTypeData as CollectionSubTypeData;\n      if (!collectionData.description) {\n        return new Error(\"Collection description is required\");\n      }\n      if (!collectionData.quantity) {\n        return new Error(\"Collection quantity is required\");\n      }\n      if (collectionData.rarityLabels) {\n        if (!Array.isArray(collectionData.rarityLabels)) {\n          return new Error(\"Rarity labels must be an array\");\n        }\n        // make sure keys and values are strings\n        if (!collectionData.rarityLabels.every((label) => {\n          return Object.values(label).every(value => typeof value === 'string');\n        })) {\n          return new Error(`Invalid rarity labels ${collectionData.rarityLabels}`);\n        }\n      }\n      if (collectionData.traits ) {\n        if (typeof collectionData.traits !== \"object\") {\n        return new Error(\"Collection traits must be an object\");\n        }\n        if (collectionData.traits && !Object.keys(collectionData.traits).every(key => typeof key === 'string' && typeof collectionData.traits[key] === 'object')) {\n          return new Error(\"Collection traits must be a valid CollectionTraits object\");\n        }\n      }\n    }\n    if (subType === \"collectionItem\") {\n      const itemData = subTypeData as CollectionItemSubTypeData;\n      if (!itemData.collectionId) {\n        return new Error(\"Collection id is required\");\n      }\n      if (!itemData.collectionId.includes(\"_\")) {\n        return new Error(\"Collection id must be a valid outpoint\");\n      }\n      if (itemData.collectionId.split(\"_\")[0].length !== 64) {\n        return new Error(\"Collection id must contain a valid txid\");\n      }\n      if (Number.isNaN(Number.parseInt(itemData.collectionId.split(\"_\")[1]))) {\n        return new Error(\"Collection id must contain a valid vout\");\n      }\n\n      if (itemData.mintNumber && typeof itemData.mintNumber !== \"number\") {\n        return new Error(\"Mint number must be a number\");\n      }\n      if (itemData.rank && typeof itemData.rank !== \"number\") {\n        return new Error(\"Rank must be a number\");\n      }\n      if (itemData.rarityLabel && typeof itemData.rarityLabel !== \"string\") {\n        return new Error(\"Rarity label must be a string\");\n      }\n      if (itemData.traits && typeof itemData.traits !== \"object\") {\n        return new Error(\"Traits must be an object\");\n      }\n      if (itemData.attachments && !Array.isArray(itemData.attachments)) {\n        return new Error(\"Attachments must be an array\");\n      }\n    }\n    return undefined;\n  } catch (error) {\n    return new Error(\"Invalid JSON data\");\n  }\n};","import {\n\tBigNumber,\n\ttype LockingScript,\n\tOP,\n\tP2PKH,\n\ttype PrivateKey,\n\tScript,\n\ttype Transaction,\n\tTransactionSignature,\n\tUnlockingScript,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { toHex } from \"../utils/strings\";\nimport type { Inscription } from \"../types\";\n\nexport const oLockPrefix =\n\t\"2097dfd76851bf465e8f715593b217714858bbe9570ff3bd5e33840a34e20ff0262102ba79df5f8ae7604a9830f03c7933028186aede0675a16f025dc4f8be8eec0382201008ce7480da41702918d1ec8e6849ba32b4d65b1e40dc669c31a1e6306b266c0000\";\nexport const oLockSuffix =\n\t\"615179547a75537a537a537a0079537a75527a527a7575615579008763567901c161517957795779210ac407f0e4bd44bfc207355a778b046225a7068fc59ee7eda43ad905aadbffc800206c266b30e6a1319c66dc401e5bd6b432ba49688eecd118297041da8074ce081059795679615679aa0079610079517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01007e81517a75615779567956795679567961537956795479577995939521414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff00517951796151795179970079009f63007952799367007968517a75517a75517a7561527a75517a517951795296a0630079527994527a75517a6853798277527982775379012080517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01205279947f7754537993527993013051797e527e54797e58797e527e53797e52797e57797e0079517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a756100795779ac517a75517a75517a75517a75517a75517a75517a75517a75517a7561517a75517a756169587951797e58797eaa577961007982775179517958947f7551790128947f77517a75517a75618777777777777777777767557951876351795779a9876957795779ac777777777777777767006868\";\n\n/**\n * OrdLock class implementing ScriptTemplate.\n *\n * This class provides methods for interacting with OrdinalLock contract \n */\nexport default class OrdLock {\n\t/**\n\t * Creates a 1Sat Ordinal Lock script\n\t *\n\t * @param {string} ordAddress - An address which can cancel listing.\n\t * @param {string} payAddress - Address which is paid on purchase\n\t * @param {number} price - Listing price in satoshis\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\tlock(\n\t\tordAddress: string,\n\t\tpayAddress: string,\n\t\tprice: number,\n\t\tinscription?: Inscription,\n\t): Script {\n\t\tconst cancelPkh = Utils.fromBase58Check(ordAddress).data as number[];\n\t\tconst payPkh = Utils.fromBase58Check(payAddress).data as number[];\n\n\t\tlet script = new Script()\n\t\tif (inscription?.dataB64 !== undefined && inscription?.contentType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(inscription.dataB64, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(inscription.contentType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tscript = Script.fromASM(`OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`);\n\t\t}\n\n\t\treturn script.writeScript(Script.fromHex(oLockPrefix))\n\t\t\t.writeBin(cancelPkh)\n\t\t\t.writeBin(OrdLock.buildOutput(price, new P2PKH().lock(payPkh).toBinary()))\n\t\t\t.writeScript(Script.fromHex(oLockSuffix))\n\t}\n\n\tcancelListing(\n\t\tprivateKey: PrivateKey,\n\t\tsignOutputs: 'all' | 'none' | 'single' = 'all',\n\t\tanyoneCanPay = false,\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: () => Promise<number>\n\t} {\n\t\tconst p2pkh = new P2PKH().unlock(privateKey, signOutputs, anyoneCanPay, sourceSatoshis, lockingScript)\n\t\treturn {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await p2pkh.sign(tx, inputIndex)).writeOpCode(OP.OP_1)\n\t\t\t},\n\t\t\testimateLength: async () => {\n\t\t\t\treturn 107\n\t\t\t}\n\t\t}\n\t}\n\n\tpurchaseListing(\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>\n\t} {\n\t\tconst purchase = {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\tif (tx.outputs.length < 2) {\n\t\t\t\t\tthrow new Error(\"Malformed transaction\")\n\t\t\t\t}\n\t\t\t\tconst script = new UnlockingScript()\n\t\t\t\t\t.writeBin(OrdLock.buildOutput(\n\t\t\t\t\t\ttx.outputs[0].satoshis || 0,\n\t\t\t\t\t\ttx.outputs[0].lockingScript.toBinary()\n\t\t\t\t\t))\n\t\t\t\tif (tx.outputs.length > 2) {\n\t\t\t\t\tconst writer = new Utils.Writer()\n\t\t\t\t\tfor (const output of tx.outputs.slice(2)) {\n\t\t\t\t\t\twriter.write(OrdLock.buildOutput(output.satoshis || 0, output.lockingScript.toBinary()))\n\t\t\t\t\t}\n\t\t\t\t\tscript.writeBin(writer.toArray())\n\t\t\t\t} else {\n\t\t\t\t\tscript.writeOpCode(OP.OP_0)\n\t\t\t\t}\n\n\t\t\t\tconst input = tx.inputs[inputIndex]\n\t\t\t\tlet sourceSats = sourceSatoshis as number\n\t\t\t\tif (!sourceSats && input.sourceTransaction) {\n\t\t\t\t\tsourceSats = input.sourceTransaction.outputs[input.sourceOutputIndex].satoshis as number\n\t\t\t\t} else if (!sourceSatoshis) {\n\t\t\t\t\tthrow new Error(\"sourceTransaction or sourceSatoshis is required\")\n\t\t\t\t}\n\n\t\t\t\tconst sourceTXID = (input.sourceTXID || input.sourceTransaction?.id('hex')) as string\n\t\t\t\tlet subscript = lockingScript as LockingScript\n\t\t\t\tif (!subscript) {\n\t\t\t\t\tsubscript = input.sourceTransaction?.outputs[input.sourceOutputIndex].lockingScript as LockingScript\n\t\t\t\t}\n\t\t\t\tconst preimage = TransactionSignature.format({\n\t\t\t\t\tsourceTXID,\n\t\t\t\t\tsourceOutputIndex: input.sourceOutputIndex,\n\t\t\t\t\tsourceSatoshis: sourceSats,\n\t\t\t\t\ttransactionVersion: tx.version,\n\t\t\t\t\totherInputs: [],\n\t\t\t\t\tinputIndex,\n\t\t\t\t\toutputs: tx.outputs,\n\t\t\t\t\tinputSequence: input.sequence,\n\t\t\t\t\tsubscript,\n\t\t\t\t\tlockTime: tx.lockTime,\n\t\t\t\t\tscope: TransactionSignature.SIGHASH_ALL |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_ANYONECANPAY |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_FORKID\n\t\t\t\t});\n\n\t\t\t\treturn script.writeBin(preimage).writeOpCode(OP.OP_0)\n\t\t\t},\n\t\t\testimateLength: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await purchase.sign(tx, inputIndex)).toBinary().length\n\t\t\t}\n\t\t}\n\t\treturn purchase\n\t}\n\n\tstatic buildOutput(satoshis: number, script: number[]): number[] {\n\t\tconst writer = new Utils.Writer()\n\t\twriter.writeUInt64LEBn(new BigNumber(satoshis))\n\t\twriter.writeVarIntNum(script.length)\n\t\twriter.write(script)\n\t\treturn writer.toArray()\n\t}\n}\n","import {\n  P2PKH,\n  SatoshisPerKilobyte,\n  Script,\n  Transaction,\n  Utils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport {\n  type TokenChangeResult,\n  TokenType,\n  type CreateOrdListingsConfig,\n  type CreateOrdTokenListingsConfig,\n  type TokenUtxo,\n  type TransferBSV20Inscription,\n  type TransferBSV21Inscription,\n  type TransferTokenInscription,\n  type Utxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nconst { toArray } = Utils;\n\n// TODO: Handle royalty\nexport const createOrdListings = async (config: CreateOrdListingsConfig) => {\n  const {\n    utxos,\n    listings,\n    paymentPk,\n    ordPk,\n    changeAddress,\n    satsPerKb = DEFAULT_SAT_PER_KB,\n    additionalPayments = [],\n  } = config;\n\n  const modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n  const tx = new Transaction();\n\n  // Warn if creating many inscriptions at once\n  if (listings.length > 100) {\n    console.warn(\n      \"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n    );\n  }\n\n  // Outputs\n  // Add listing outputs\n  for (const listing of listings) {\n    tx.addOutput({\n      satoshis: 1,\n      lockingScript: new OrdLock().lock(\n        listing.ordAddress,\n        listing.payAddress,\n        listing.price,\n      ),\n    });\n    const inputScriptBinary = toArray(listing.listingUtxo.script, \"base64\");\n    const inputScript = Script.fromBinary(inputScriptBinary);\n    tx.addInput(inputFromB64Utxo(\n      listing.listingUtxo,\n      new OrdP2PKH().unlock(\n        ordPk,\n        \"all\",\n        true,\n        listing.listingUtxo.satoshis,\n        inputScript,\n      ),\n    ));\n  }\n\n  // Add additional payments if any\n  for (const p of additionalPayments) {\n    tx.addOutput({\n      satoshis: p.amount,\n      lockingScript: new P2PKH().lock(p.to),\n    });\n  }\n\n  // Check if change is needed\n  let payChange: Utxo | undefined;\n  const changeScript = new P2PKH().lock(\n    changeAddress || paymentPk.toAddress().toString(),\n  );\n  const changeOutput = {\n    lockingScript: changeScript,\n    change: true,\n  };\n  tx.addOutput(changeOutput);\n\n  let totalSatsIn = 0n;\n  const totalSatsOut = tx.outputs.reduce(\n    (total, out) => total + BigInt(out.satoshis || 0),\n    0n,\n  );\n  let fee = 0;\n  for (const utxo of utxos) {\n    const input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n      paymentPk,\n      \"all\",\n      true,\n      utxo.satoshis,\n      Script.fromBinary(Utils.toArray(utxo.script, 'base64'))\n    ));\n\n    tx.addInput(input);\n    // stop adding inputs if the total amount is enough\n    totalSatsIn += BigInt(utxo.satoshis);\n    fee = await modelOrFee.computeFee(tx);\n\n    if (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n      break;\n    }\n  }\n\n  // make sure we have enough\n  if (totalSatsIn < totalSatsOut + BigInt(fee)) {\n    throw new Error(\n      `Not enough funds to create ordinal listings. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n    );\n  }\n\n  // Calculate fee\n  await tx.fee(modelOrFee);\n\n  // Sign the transaction\n  await tx.sign();\n\n  // check for change\n  const payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n  if (payChangeOutIdx !== -1) {\n    const changeOutput = tx.outputs[payChangeOutIdx];\n    payChange = {\n      satoshis: changeOutput.satoshis as number,\n      txid: tx.id(\"hex\") as string,\n      vout: payChangeOutIdx,\n      script: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n        \"base64\",\n      ),\n    };\n  }\n\n  if (payChange) {\n    const changeOutput = tx.outputs[tx.outputs.length - 1];\n    payChange.satoshis = changeOutput.satoshis as number;\n    payChange.txid = tx.id(\"hex\") as string;\n  }\n\n  return {\n    tx,\n    spentOutpoints: tx.inputs.map(\n      (i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n    ),\n    payChange,\n  };\n};\n\nexport const createOrdTokenListings = async (\n  config: CreateOrdTokenListingsConfig,\n): Promise<TokenChangeResult> => {\n  const {\n    utxos,\n    protocol,\n    tokenID,\n    ordPk,\n    paymentPk,\n    additionalPayments = [],\n    changeAddress,\n    tokenChangeAddress,\n    inputTokens,\n    listings,\n    decimals,\n    satsPerKb = DEFAULT_SAT_PER_KB,\n  } = config;\n\n\n  // Warn if creating many inscriptions at once\n  if (listings.length > 100) {\n    console.warn(\n      \"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n    );\n  }\n\n  // Ensure these inputs are for the expected token\n  if (!inputTokens.every((token) => token.id === tokenID)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n  // calculate change amount\n  let changeAmt = 0n;\n  let totalAmtIn = 0n;\n  let totalAmtOut = 0n;\n\n  // Ensure these inputs are for the expected token\n  if (!inputTokens.every((token) => token.id === tokenID)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n  const modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n  const tx = new Transaction();\n  // Outputs\n  // Add listing outputs\n  for (const listing of listings) {\n    // NewTokenListing is not adjusted for decimals\n    const bigAmt = BigInt(listing.amt * 10 ** decimals);\n    const transferInscription: TransferTokenInscription = {\n      p: \"bsv-20\",\n      op: \"transfer\",\n      amt: bigAmt.toString(),\n    };\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n    if (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n    } else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n    tx.addOutput({\n      satoshis: 1,\n      lockingScript: new OrdLock().lock(\n        listing.ordAddress,\n        listing.payAddress,\n        listing.price,\n        {\n          dataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n          contentType: \"application/bsv-20\",\n        },\n      ),\n    });\n    totalAmtOut += bigAmt;\n  }\n\n  // Input tokens are already adjusted for decimals\n  for (const token of inputTokens) {\n    tx.addInput(inputFromB64Utxo(\n      token,\n      new OrdP2PKH().unlock(\n        ordPk,\n        \"all\",\n        true,\n        token.satoshis,\n        Script.fromBinary(toArray(token.script, \"base64\")),\n      ),\n    ));\n\n    totalAmtIn += BigInt(token.amt);\n  }\n  changeAmt = totalAmtIn - totalAmtOut;\n\n  let tokenChange: TokenUtxo[] | undefined;\n  // check that you have enough tokens to send and return change\n  if (changeAmt < 0n) {\n    throw new Error(\"Not enough tokens to send\");\n  }\n  if (changeAmt > 0n) {\n    const transferInscription: TransferTokenInscription = {\n      p: \"bsv-20\",\n      op: \"transfer\",\n      amt: changeAmt.toString(),\n    };\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n    if (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n    } else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n    const lockingScript = new OrdP2PKH().lock(tokenChangeAddress, {\n      dataB64: Buffer.from(JSON.stringify(inscription)).toString('base64'),\n      contentType: \"application/bsv-20\",\n    });\n    const vout = tx.outputs.length;\n    tx.addOutput({ lockingScript, satoshis: 1 });\n    tokenChange = [{\n      id: tokenID,\n      satoshis: 1,\n      script: Buffer.from(lockingScript.toBinary()).toString(\"base64\"),\n      txid: \"\",\n      vout,\n      amt: changeAmt.toString(),\n    }];\n  }\n\n  // Add additional payments if any\n  for (const p of additionalPayments) {\n    tx.addOutput({\n      satoshis: p.amount,\n      lockingScript: new P2PKH().lock(p.to),\n    });\n  }\n\n  // add change to the outputs\n  let payChange: Utxo | undefined;\n\n  const change = changeAddress || paymentPk.toAddress().toString();\n  const changeScript = new P2PKH().lock(change);\n  const changeOut = {\n    lockingScript: changeScript,\n    change: true,\n  };\n  tx.addOutput(changeOut);\n\n  let totalSatsIn = 0n;\n  const totalSatsOut = tx.outputs.reduce(\n    (total, out) => total + BigInt(out.satoshis || 0),\n    0n,\n  );\n  let fee = 0;\n  for (const utxo of utxos) {\n    const input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n      paymentPk,\n      \"all\",\n      true,\n      utxo.satoshis,\n      Script.fromBinary(Utils.toArray(utxo.script, 'base64'))\n    ));\n\n    tx.addInput(input);\n    // stop adding inputs if the total amount is enough\n    totalSatsIn += BigInt(utxo.satoshis);\n    fee = await modelOrFee.computeFee(tx);\n\n    if (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n      break;\n    }\n  }\n\n  // make sure we have enough\n  if (totalSatsIn < totalSatsOut + BigInt(fee)) {\n    throw new Error(\n      `Not enough funds to create token listings. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n    );\n  }\n\n  // estimate the cost of the transaction and assign change value\n  await tx.fee(modelOrFee);\n\n  // Sign the transaction\n  await tx.sign();\n\n  const txid = tx.id(\"hex\") as string;\n  if (tokenChange) {\n    tokenChange = tokenChange.map((tc) => ({ ...tc, txid }));\n  }\n  // check for change\n  const payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n  if (payChangeOutIdx !== -1) {\n    const changeOutput = tx.outputs[payChangeOutIdx];\n    payChange = {\n      satoshis: changeOutput.satoshis as number,\n      txid,\n      vout: payChangeOutIdx,\n      script: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n        \"base64\",\n      ),\n    };\n  }\n\n  if (payChange) {\n    const changeOutput = tx.outputs[tx.outputs.length - 1];\n    payChange.satoshis = changeOutput.satoshis as number;\n    payChange.txid = tx.id(\"hex\") as string;\n  }\n\n  return {\n    tx,\n    spentOutpoints: tx.inputs.map(\n      (i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n    ),\n    payChange,\n    tokenChange,\n  };\n};\n","import { P2PKH, SatoshisPerKilobyte, Script, Transaction, Utils } from \"@bsv/sdk\";\nimport {\n\tTokenType,\n\ttype TokenUtxo,\n\ttype CancelOrdListingsConfig,\n\ttype CancelOrdTokenListingsConfig,\n\ttype Destination,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n  type ChangeResult,\n  type TokenChangeResult,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\n\n/**\n * Cancel Ordinal Listings\n * @param {CancelOrdListingsConfig} config - Configuration object for cancelling ordinals\n * @param {PrivateKey} config.paymentPk - Private key to sign payment inputs\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.listingUtxos - Listing utxos to cancel (with base64 encoded scripts)\n * @param {string} [config.changeAddress] - Optional. Address to send change to\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to make\n * @returns {Promise<ChangeResult>} Transaction, spent outpoints, change utxo\n */\nexport const cancelOrdListings = async (config: CancelOrdListingsConfig): Promise<ChangeResult> => {\n\tconst {\n\t\tutxos,\n\t\tlistingUtxos,\n\t\tordPk,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tadditionalPayments = [],\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\n\t// Warn if creating many inscriptions at once\n\tif (listingUtxos.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\t\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinals we're cancelling\n\tfor (const listingUtxo of listingUtxos) {\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().cancelListing(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlistingUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, 'base64'))\n\t\t\t)\n\t\t));\n\t\t// Add cancel outputs returning listed ordinals\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new P2PKH().lock(ordPk.toAddress().toString()),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo, \n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpaymentPk, \n\t\t\t\t\"all\",\n\t\t\t\ttrue, \n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t\t)\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to cancel ordinal listings. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\n/**\n * Cancel Ordinal Token Listings\n * @param {CancelOrdTokenListingsConfig} config - Configuration object for cancelling token ordinals\n * @param {PrivateKey} config.paymentPk - Private key to sign payment inputs\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.listingUtxos - Listing utxos to cancel (with base64 encoded scripts)\n * @param {string} config.tokenID - Token ID of the token to cancel listings for\n * @param {string} config.ordAddress - Address to send the cancelled token to\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to make\n * @returns {Promise<TokenChangeResult>} Transaction, spent outpoints, change utxo, token change utxos\n */\nexport const cancelOrdTokenListings = async (\n\tconfig: CancelOrdTokenListingsConfig,\n): Promise<TokenChangeResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tadditionalPayments,\n\t\tlistingUtxos,\n\t\tutxos,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\t// calculate change amount\n\tlet totalAmtIn = 0;\n\n\tif (listingUtxos.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Ensure these inputs are for the expected token\n\tif (!listingUtxos.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinals we're cancelling\n\tfor (const listingUtxo of listingUtxos) {\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().cancelListing(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlistingUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, 'base64'))\n\t\t\t)\n\t\t));\n\t\ttotalAmtIn += Number.parseInt(listingUtxo.amt);\n\t}\n\n\tconst transferInscription: TransferTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"transfer\",\n\t\tamt: totalAmtIn.toString(),\n\t};\n\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\tif (protocol === TokenType.BSV20) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\ttick: tokenID,\n\t\t} as TransferBSV20Inscription;\n\t} else if (protocol === TokenType.BSV21) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\tid: tokenID,\n\t\t} as TransferBSV21Inscription;\n\t} else {\n\t\tthrow new Error(\"Invalid protocol\");\n\t}\n\n\tconst destination: Destination = {\n\t\taddress: ordAddress || ordPk.toAddress().toString(),\n\t\tinscription: {\n\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t},\n\t};\n\n  const lockingScript = new OrdP2PKH().lock(\n    destination.address,\n    destination.inscription\n  );\n\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript,\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to cancel token listings. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n  const tokenChange: TokenUtxo[] = [{\n    amt: totalAmtIn.toString(),\n    script: Buffer.from(lockingScript.toHex(), 'hex').toString('base64'),\n    txid: tx.id(\"hex\") as string,\n    vout: 0,\n    id: tokenID,\n    satoshis: 1\n  }];\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n    tokenChange,\n\t};\n};","// import { PaymailClient } from \"@bsv/paymail\";\nimport { LockingScript } from \"@bsv/sdk\";\n\n// const client = new PaymailClient();\n\nexport const resolvePaymail = async (paymailAddress: string, amtToReceive: number): Promise<LockingScript> => {\n  // const destinationTx = await client.getP2pPaymentDestination(paymailAddress, amtToReceive);\n  // // TODO: we are assuming only one output but in reality it can be many\n  // return destinationTx.outputs[0].script as LockingScript;\n  throw new Error(\"Not implemented\");\n}","import {\n\tLockingScript,\n\tP2PKH,\n\tSatoshisPerKilobyte,\n\tScript,\n\tTransaction,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport {\n\ttype ChangeResult,\n\tRoytaltyType,\n\tTokenType,\n\ttype PurchaseOrdListingConfig,\n\ttype PurchaseOrdTokenListingConfig,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n\tMAP,\n} from \"./types\";\nimport { resolvePaymail } from \"./utils/paymail\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Purchase a listing\n * @param {PurchaseOrdListingConfig} config - Configuration object for purchasing a listing\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign payment inputs\n * @param {ExistingListing} config.listing - Listing to purchase\n * @param {string} config.ordAddress - Address to send the ordinal to\n * @param {string} [config.changeAddress] - Optional. Address to send change to\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to make\n * @param {Royalty[]} [config.royalties] - Optional. Royalties to pay\n * @param {MAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include on purchased output\n * @returns {Promise<ChangeResult>} Transaction, spent outpoints, change utxo\n */\nexport const purchaseOrdListing = async (\n\tconfig: PurchaseOrdListingConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tlisting,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tadditionalPayments = [],\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\troyalties = [],\n\t\tmetaData,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinal we're purchasing\n\ttx.addInput(\n\t\tinputFromB64Utxo(\n\t\t\tlisting.listingUtxo,\n\t\t\tnew OrdLock().purchaseListing(\n\t\t\t\t1,\n\t\t\t\tScript.fromBinary(Utils.toArray(listing.listingUtxo.script, \"base64\")),\n\t\t\t),\n\t\t),\n\t);\n\n\t// Outputs\n\t// Add the purchased output\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(ordAddress, undefined, metaData),\n\t});\n\n\t// add the payment output\n\tconst reader = new Utils.Reader(Utils.toArray(listing.payout, \"base64\"));\n\tconst satoshis = reader.readUInt64LEBn().toNumber();\n\tconst scriptLength = reader.readVarIntNum();\n\tconst scriptBin = reader.read(scriptLength);\n\tconst lockingScript = LockingScript.fromBinary(scriptBin);\n\ttx.addOutput({\n\t\tsatoshis,\n\t\tlockingScript,\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Add any royalties\n\tfor (const r of royalties) {\n\t\tlet lockingScript: LockingScript | undefined;\n\t\tconst royaltySats = Math.floor(Number(r.percentage) * satoshis);\n\n\t\tswitch (r.type as RoytaltyType) {\n\t\t\tcase RoytaltyType.Paymail:\n\t\t\t\t// resolve paymail address\n\t\t\t\tlockingScript = await resolvePaymail(r.destination, royaltySats);\n\t\t\t\tbreak;\n\t\t\tcase RoytaltyType.Script:\n\t\t\t\tlockingScript = Script.fromBinary(\n\t\t\t\t\tUtils.toArray(r.destination, \"base64\"),\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase RoytaltyType.Address:\n\t\t\t\tlockingScript = new P2PKH().lock(r.destination);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"Invalid royalty type\");\n\t\t}\n\t\tif (!lockingScript) {\n\t\t\tthrow new Error(\"Invalid royalty destination\");\n\t\t}\n\t\ttx.addOutput({\n\t\t\tsatoshis: royaltySats,\n\t\t\tlockingScript,\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo,\n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpaymentPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, \"base64\")),\n\t\t\t),\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase ordinal listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\n/**\n *\n * @param {PurchaseOrdTokenListingConfig} config  - Configuration object for purchasing a token listing\n * @param {TokenType} config.protocol - Token protocol\n * @param {string} config.tokenID - Token ID\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign payment inputs\n * @param {Utxo} config.listingUtxo - Listing UTXO\n * @param {string} config.ordAddress - Address to send the ordinal to\n * @param {string} [config.changeAddress] - Optional. Address to send change to\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to make\n * @param {MAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include on the purchased transfer inscription output\n * @returns {Promise<ChangeResult>} Transaction, spent outpoints, change utxo\n */\nexport const purchaseOrdTokenListing = async (\n\tconfig: PurchaseOrdTokenListingConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tpaymentPk,\n\t\tlistingUtxo,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t\tmetaData,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinal we're purchasing\n\ttx.addInput(\n\t\tinputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().purchaseListing(\n\t\t\t\t1,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, \"base64\")),\n\t\t\t),\n\t\t),\n\t);\n\n\t// Outputs\n\tconst transferInscription: TransferTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"transfer\",\n\t\tamt: listingUtxo.amt,\n\t};\n\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\tif (protocol === TokenType.BSV20) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\ttick: tokenID,\n\t\t} as TransferBSV20Inscription;\n\t} else if (protocol === TokenType.BSV21) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\tid: tokenID,\n\t\t} as TransferBSV21Inscription;\n\t} else {\n\t\tthrow new Error(\"Invalid protocol\");\n\t}\n\tconst dataB64 = Buffer.from(JSON.stringify(inscription)).toString(\"base64\");\n\n\t// Add the purchased output\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\tordAddress,\n\t\t\t{\n\t\t\t\tdataB64,\n\t\t\t\tcontentType: \"application/bsv-20\",\n\t\t\t},\n\t\t\tmetaData,\n\t\t),\n\t});\n\n\tif (!listingUtxo.payout) {\n\t\tthrow new Error(\"Listing UTXO does not have a payout script\");\n\t}\n\n\t// Add the payment output\n\tconst reader = new Utils.Reader(Utils.toArray(listingUtxo.payout, \"base64\"));\n\tconst satoshis = reader.readUInt64LEBn().toNumber();\n\tconst scriptLength = reader.readVarIntNum();\n\tconst scriptBin = reader.read(scriptLength);\n\tconst lockingScript = LockingScript.fromBinary(scriptBin);\n\ttx.addOutput({\n\t\tsatoshis,\n\t\tlockingScript,\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo,\n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpaymentPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, \"base64\")),\n\t\t\t),\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase token listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n","import sizeOf from 'image-size';\nimport type { IconInscription, ImageContentType } from \"../types\";\n\nexport const ErrorOversizedIcon = new Error(\n    \"Image must be a square image with dimensions <= 400x400\",\n);\nexport const ErrorIconProportions = new Error(\"Image must be a square image\");\nexport const ErrorInvalidIconData = new Error(\"Error processing image\");\nexport const ErrorImageDimensionsUndefined = new Error(\n    \"Image dimensions are undefined\",\n);\n\nconst isImageContentType = (value: string): value is ImageContentType => {\n    return (value as ImageContentType) === value;\n};\n\nexport const validIconData = async (\n    icon: IconInscription,\n): Promise<Error | null> => {\n    const { dataB64, contentType } = icon;\n\n    if (contentType === \"image/svg+xml\") {\n        return validateSvg(dataB64);\n    }\n\n    if (!isImageContentType(contentType)) {\n        return ErrorInvalidIconData;\n    }\n\n    try {\n        const buffer = Buffer.from(dataB64, \"base64\");\n        const dimensions = sizeOf(buffer);\n\n        if (dimensions.width === undefined || dimensions.height === undefined) {\n            return ErrorImageDimensionsUndefined;\n        }\n        if (dimensions.width !== dimensions.height) {\n            return ErrorIconProportions;\n        }\n        if (dimensions.width > 400 || dimensions.height > 400) {\n            return ErrorOversizedIcon;\n        }\n\n        return null;\n    } catch (error) {\n        return ErrorInvalidIconData;\n    }\n};\n\nconst validateSvg = (svgBase64: string): Error | null => {\n    const svgString = Buffer.from(svgBase64, \"base64\").toString(\"utf-8\");\n    const widthMatch = svgString.match(/<svg[^>]*\\s+width=\"([^\"]+)\"/);\n    const heightMatch = svgString.match(/<svg[^>]*\\s+height=\"([^\"]+)\"/);\n    \n    if (!widthMatch || !heightMatch) {\n        return ErrorImageDimensionsUndefined;\n    }\n\n    const width = Number.parseInt(widthMatch[1], 10);\n    const height = Number.parseInt(heightMatch[1], 10);\n\n    if (Number.isNaN(width) || Number.isNaN(height)) {\n        return ErrorImageDimensionsUndefined;\n    }\n\n    if (width !== height) {\n        return ErrorIconProportions;\n    }\n    if (width > 400 || height > 400) {\n        return ErrorOversizedIcon;\n    }\n\n    return null;\n}\n\nexport const validIconFormat = (icon: string): boolean => {\n    if (!icon.includes(\"_\") || icon.endsWith(\"_\")) {\n        return false;\n    }\n\n    const iconVout = Number.parseInt(icon.split(\"_\")[1]);\n    if (Number.isNaN(iconVout)) {\n        return false;\n    }\n\n    if (!icon.startsWith(\"_\") && icon.split(\"_\")[0].length !== 64) {\n        return false;\n    }\n\n    return true;\n};","import {\n\tTransaction,\n\tP2PKH,\n\tSatoshisPerKilobyte,\n\ttype TransactionOutput,\n\tUtils,\n\tScript,\n} from \"@bsv/sdk\";\nimport type {\n  ChangeResult,\n\tDeployBsv21TokenConfig,\n\tDeployMintTokenInscription,\n\tInscription,\n\tUtxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { validIconData, validIconFormat } from \"./utils/icon\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\n\n/**\n * Deploys & Mints a BSV21 token to the given destination address\n * @param {DeployBsv21TokenConfig} config - Configuration object for deploying BSV21 token\n * @param {string} config.symbol - Token ticker symbol\n * @param {number} config.decimals - Number of decimal places to display\n * @param {string | IconInscription} config.icon - outpoint (format: txid_vout) or Inscription. If Inscription, must be a valid image type\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {Distribution} config.initialDistribution - Initial distribution with addresses and total supply (not adjusted for decimals, library will add zeros)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {string} config.destinationAddress - Address to deploy token to.\n * @param {string} [config.changeAddress] - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to include in the transaction\n * @returns {Promise<ChangeResult>} Transaction to deploy BSV 2.1 token\n */\nexport const deployBsv21Token = async (\n\tconfig: DeployBsv21TokenConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tsymbol,\n\t\ticon,\n    decimals,\n\t\tutxos,\n\t\tinitialDistribution,\n\t\tpaymentPk,\n\t\tdestinationAddress,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\tlet iconValue: string;\n\tif (typeof icon === \"string\") {\n\t\ticonValue = icon;\n\t} else {\n\t\tconst iconError = await validIconData(icon);\n\t\tif (iconError) {\n\t\t\tthrow iconError;\n\t\t}\n\t\t// add icon inscription to the transaction\n\t\tconst iconScript = new OrdP2PKH().lock(destinationAddress, icon);\n\t\tconst iconOut = {\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: iconScript,\n\t\t};\n\t\ttx.addOutput(iconOut);\n\t\t// relative output index of the icon\n\t\ticonValue = \"_0\";\n\t}\n\n\t// Ensure the icon format\n\tif (!validIconFormat(iconValue)) {\n\t\tthrow new Error(\n\t\t\t\"Invalid icon format. Must be either outpoint (format: txid_vout) or relative output index of the icon (format _vout). examples: ecb483eda58f26da1b1f8f15b782b1186abdf9c6399a1c3e63e0d429d5092a41_0 or _1\",\n\t\t);\n\t}\n  \n\t// Outputs\n  const amt = decimals ? BigInt(initialDistribution.amt) * 10n ** BigInt(decimals) : BigInt(initialDistribution.amt);\n\tconst fileData: DeployMintTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"deploy+mint\",\n\t\tsym: symbol,\n\t\ticon: iconValue,\n\t\tamt: amt.toString(),\n\t};\n\n  if (decimals) {\n    fileData.dec = decimals.toString();\n  }\n\n\tconst b64File = Buffer.from(JSON.stringify(fileData)).toString(\"base64\");\n\tconst sendTxOut = {\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(destinationAddress, {\n\t\t\tdataB64: b64File,\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t} as Inscription),\n\t};\n\ttx.addOutput(sendTxOut);\n\n\t// Additional payments\n\tfor (const payment of additionalPayments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new P2PKH().lock(payment.to),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to deploy token. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tScript,\n\tUtils,\n  PrivateKey,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB, MAP_PREFIX } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n  BaseResult,\n\tBurnOrdinalsConfig,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { toHex } from \"./utils/strings\";\n\n/**\n * Burn ordinals by consuming them as fees\n * @param {BurnOrdinalsConfig} config - Configuration object for sending ordinals\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Utxo} config.ordinals - 1Sat Ordinal Utxos to spend (with base64 encoded scripts)\n * @param {BurnMAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include in an unspendable output OP_FALSE OP_RETURN\n * @returns {Promise<BaseResult>} Transaction, spent outpoints\n */\nexport const burnOrdinals = async (\n\tconfig: BurnOrdinalsConfig,\n): Promise<BaseResult> => {\n\tconst tx = new Transaction();\n\tconst spentOutpoints: string[] = [];\n\tconst { ordinals, metaData } = config;\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(\n\t\t\tordUtxo,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tconfig.ordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tordUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(ordUtxo.script, \"base64\")),\n\t\t\t),\n\t\t);\n\t\tspentOutpoints.push(`${ordUtxo.txid}_${ordUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// Add metadata output\n\n\t// MAP.app and MAP.type keys are required\n\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t}\n\n\tlet metaAsm = \"\";\n\n\tif (metaData?.app && metaData?.type) {\n\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\tconst mapCmdValue = toHex(\"SET\");\n\t\tmetaAsm = `OP_FALSE OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\tif (key !== \"cmd\") {\n\t\t\t\tmetaAsm = `${metaAsm} ${toHex(key)} ${toHex(value as string)}`;\n\t\t\t}\n\t\t}\n\t}\n\n\ttx.addOutput({\n\t\tsatoshis: 0,\n\t\tlockingScript: Script.fromASM(metaAsm || \"OP_FALSE OP_RETURN\"),\n\t});\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t};\n};\n"],"names":["toHex","utf8Str","Buffer","from","toString","MAP_PREFIX","DEFAULT_SAT_PER_KB","API_HOST","OrdP2PKH","P2PKH","lock","address","inscription","metaData","ordAsm","undefined","dataB64","contentType","ordHex","fileHex","trim","Error","fileMediaType","inscriptionAsm","toASM","app","type","key","value","Object","entries","LockingScript","fromASM","TokenSelectionStrategy","TokenType","RoytaltyType","TokenInputMode","MAX_TOKEN_SUPPLY","fromBase58Check","Utils","inputFromB64Utxo","utxo","unlockScriptTemplate","fromUtxo","_extends","script","fetchPayUtxos","async","scriptEncoding","payUrl","console","log","payRes","fetch","ok","payUtxos","json","filter","u","satoshis","isLock","pubKeyHash","p2pkhScript","data","map","txid","vout","toBinary","fetchNftUtxos","collectionId","limit","offset","url","JSON","stringify","subTypeData","res","nftUtxos","_u$data","list","outpoints","nftRes","method","headers","body","Script","fromHex","nftUtxo","origin","outpoint","fetchTokenUtxos","protocol","tokenId","BSV20","tokenUtxos","amt","id","selectTokenUtxos","requiredAmount","decimals","options","inputStrategy","RetainOrder","outputStrategy","requiredAmountBigInt","BigInt","Math","floor","sortedUtxos","sort","a","b","amtA","amtB","SmallestFirst","Number","LargestFirst","Random","random","totalSelected","selectedUtxos","push","isEnough","signData","tx","signer","idKey","keyHost","sigma","Sigma","signedTx","sign","authToken","remoteSign","e","stringifyMetaData","result","Array","isArray","String","createOrdinals","utxos","destinations","paymentPk","changeAddress","satsPerKb","additionalPayments","config","length","warn","modelOrFee","SatoshisPerKilobyte","payChange","Transaction","destination","keys","addOutput","lockingScript","p","amount","to","change","toAddress","changeScript","totalSatsIn","totalSatsOut","outputs","reduce","total","out","pop","addInput","unlock","fromBinary","toArray","fee","input","computeFee","payChangeOutIdx","findIndex","o","changeOutput","spentOutpoints","sendOrdinals","enforceUniformSend","ordUtxo","ordinals","ordPk","_destination$inscript","_destination$inscript2","s","paymentUtxos","sendUtxos","payments","payment","sendTxOut","changeOut","transferOrdTokens","tokenID","inputTokens","distributions","tokenChangeAddress","burn","tokenInputMode","Needed","splitConfig","omitMetaData","every","token","changeAmt","totalAmtIn","totalAmtOut","totalAmtNeeded","acc","dist","tokensToUse","All","inputScriptBinary","inputScript","dest","bigAmt","transferInscription","op","tick","BSV21","tokenChange","splitChangeOutputs","inputs","i","sourceTXID","sourceOutputIndex","tokenChanges","threshold","maxOutputs","splitOutputs","min","max","baseChangeAmount","remainder","splitAmount","validateSubTypeData","subType","collectionData","description","quantity","rarityLabels","label","values","traits","itemData","includes","split","isNaN","parseInt","mintNumber","rank","rarityLabel","attachments","error","OrdLock","ordAddress","payAddress","price","cancelPkh","payPkh","writeScript","writeBin","buildOutput","cancelListing","privateKey","signOutputs","anyoneCanPay","sourceSatoshis","p2pkh","inputIndex","writeOpCode","OP","OP_1","estimateLength","purchaseListing","purchase","_input$sourceTransact","UnlockingScript","writer","Writer","output","slice","write","OP_0","sourceSats","sourceTransaction","subscript","_input$sourceTransact2","preimage","TransactionSignature","format","transactionVersion","version","otherInputs","inputSequence","sequence","lockTime","scope","SIGHASH_ALL","SIGHASH_ANYONECANPAY","SIGHASH_FORKID","writeUInt64LEBn","BigNumber","writeVarIntNum","createOrdListings","listings","listing","listingUtxo","createOrdTokenListings","tc","cancelOrdListings","listingUtxos","cancelOrdTokenListings","resolvePaymail","paymailAddress","amtToReceive","purchaseOrdListing","royalties","reader","Reader","payout","readUInt64LEBn","toNumber","scriptLength","readVarIntNum","scriptBin","read","r","royaltySats","percentage","Paymail","Address","purchaseOrdTokenListing","ErrorOversizedIcon","ErrorIconProportions","ErrorInvalidIconData","ErrorImageDimensionsUndefined","deployBsv21Token","symbol","icon","initialDistribution","destinationAddress","iconValue","iconError","svgBase64","svgString","widthMatch","match","heightMatch","width","height","validateSvg","buffer","dimensions","sizeOf","validIconData","iconScript","endsWith","iconVout","startsWith","validIconFormat","fileData","sym","dec","b64File","burnOrdinals","metaAsm"],"mappings":"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"}