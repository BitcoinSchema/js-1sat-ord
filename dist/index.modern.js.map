{"version":3,"file":"index.modern.js","sources":["../src/utils/strings.ts","../src/ordP2pkh.ts","../src/constants.ts","../src/utils/utxo.ts","../src/signData.ts","../src/createOrdinals.ts","../src/sendOrdinals.ts","../src/sendUtxos.ts"],"sourcesContent":["/**\n * Converts a string to its hexadecimal representation\n *\n * @param {string} utf8Str - The string to convert\n * @returns {string} The hexadecimal representation of the input string\n */\nconst toHex = (utf8Str: string): string => {\n  return Buffer.from(utf8Str).toString(\"hex\");\n};\n\nexport { toHex };\n","import {\n\tLockingScript,\n\tP2PKH,\n\ttype Script,\n} from \"@bsv/sdk\";\nimport type { MAP } from \"./types\";\nimport { toHex } from \"./utils/strings\";\nimport { MAP_PREFIX } from \"./constants\";\n\n/**\n * OrdP2PKH (1Sat Ordinal + Pay To Public Key Hash) class implementing ScriptTemplate.\n *\n * This class provides methods to create an Ordinal with Pay To Public Key Hash locking and unlocking scripts. \n * It extends the standard P2PKH script template and provides a custom lock method.\n */\nexport default class OrdP2PKH extends P2PKH {\n\t/**\n\t * Creates a 1Sat Ordinal + P2PKH locking script for a given address string\n\t *\n\t * @param {string} address - An destination address for the Ordinal.\n\t * @param {string} [b64File] - Base64 encoded file data.\n\t * @param {string} [mediaType] - Media type of the file.\n\t * @param {MAP} [metaData] - (optional) MAP Metadata to be included in OP_RETURN.\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\t// unlock method inherits from p2pkh\n\tlock(\n\t\taddress: string,\n\t\tb64File?: string | undefined,\n\t\tmediaType?: string | undefined,\n\t\tmetaData?: MAP | undefined,\n\t): Script {\n\t\tlet ordAsm = \"\";\n\t\t// This can be omitted for reinscriptions that just update metadata\n\t\tif (b64File !== undefined && mediaType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(b64File, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(mediaType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`;\n\t\t}\n\n\t\t// Create ordinal output and inscription in a single output\n\t\tconst lockingScript = new P2PKH().lock(address);\n\t\tlet inscriptionAsm = `${ordAsm ? `${ordAsm} ` : \"\"}${lockingScript.toASM()}`;\n\n\t\t// MAP.app and MAP.type keys are required\n\t\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t\t}\n\n\t\tif (metaData?.app && metaData?.type) {\n\t\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\t\tconst mapCmdValue = toHex(\"SET\");\n\t\t\tinscriptionAsm = `${inscriptionAsm} OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\t\tif (key !== \"cmd\") {\n\t\t\t\t\tinscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\n\t\t\t\t\t\tvalue as string,\n\t\t\t\t\t)}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn LockingScript.fromASM(inscriptionAsm);\n\t}\n}\n","export const MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\nexport const DEFAULT_SAT_PER_KB = 10;","import { type Transaction, type UnlockingScript, fromUtxo, type TransactionInput } from \"@bsv/sdk\";\nimport type { Utxo } from \"../types\";\n\n/**\n * Converts a Utxo object with a base64 encoded script to a Utxo object with a hex encoded script\n * @param {Utxo} utxo - Utxo object with base64 encoded script\n * @param {Object} unlockScriptTemplate - Object with sign and estimateLength functions\n * @returns {TransactionInput} Utxo object with hex encoded script\n */\nexport const inputFromB64Utxo = (\n\tutxo: Utxo,\n\tunlockScriptTemplate: {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>;\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>;\n\t},\n): TransactionInput => {\n\tconst input = fromUtxo(\n\t\t{\n\t\t\t...utxo,\n\t\t\tscript: Buffer.from(utxo.script, \"base64\").toString(\"hex\"),\n\t\t},\n\t\tunlockScriptTemplate,\n\t);\n\tinput.sourceTXID = utxo.txid;\n\treturn input;\n};\n","import type { Transaction } from \"@bsv/sdk\";\nimport { Sigma } from \"sigma-protocol\";\nimport type { LocalSigner, RemoteSigner } from \"./types\";\n\n/**\n * Signs data in the transaction with Sigma protocol\n * @param {Transaction} tx - Transaction to sign\n * @param {LocalSigner | RemoteSigner} signer - Local or remote signer (used for data signature)\n * @returns {Transaction} Transaction with signed data\n */\nexport const signData = async (\n\ttx: Transaction,\n\tsigner: LocalSigner | RemoteSigner,\n): Promise<Transaction> => {\n\t// Sign tx if idKey or remote signer like starfish/tokenpass\n\tconst idKey = (signer as LocalSigner)?.idKey;\n\tconst keyHost = (signer as RemoteSigner)?.keyHost;\n\n\tif (idKey) {\n\t\tconst sigma = new Sigma(tx);\n\t\tconst { signedTx } = sigma.sign(idKey);\n\t\treturn signedTx;\n\t}\n\tif (keyHost) {\n\t\tconst authToken = (signer as RemoteSigner)?.authToken;\n\t\tconst sigma = new Sigma(tx);\n\t\ttry {\n\t\t\tconst { signedTx } = await sigma.remoteSign(keyHost, authToken);\n\t\t\treturn signedTx;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthrow new Error(`Remote signing to ${keyHost} failed`);\n\t\t}\n\t}\n\tthrow new Error(\"Signer must be a LocalSigner or RemoteSigner\");\n};\n","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n} from \"@bsv/sdk\";\nimport OrdP2PKH from \"./ordP2pkh\";\nimport type {\n\tUtxo,\n\tDestination,\n\tMAP,\n\tLocalSigner,\n\tRemoteSigner,\n\tPayment,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { signData } from \"./signData\";\n\n/**\n * Creates a transaction with inscription outputs\n * @param {Utxo[]} utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Destination[]} destinations - Array of destinations with addresses and inscriptions\n * @param {PrivateKey} paymentPk - Private key to sign utxos\n * @param {string} changeAddress - (optional) Address to send change to. If not provided, defaults to paymentPk address\n * @param {number} satsPerKb - Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {MAP} metaData - MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} signer - Local or remote signer (used for data signature)\n * @param {Payment[]} additionalPayments - Additional payments to include in the transaction\n * @returns {Promise<Transaction>} Transaction with inscription outputs\n */\nexport const createOrdinals = async (\n\tutxos: Utxo[],\n\tdestinations: Destination[],\n\tpaymentPk: PrivateKey,\n\tchangeAddress?: string,\n\tsatsPerKb: number = DEFAULT_SAT_PER_KB,\n\tmetaData?: MAP,\n\tsigner?: LocalSigner | RemoteSigner,\n\tadditionalPayments: Payment[] = [],\n): Promise<Transaction> => {\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Inputs\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\t}\n\n\t// Warn if creating many inscriptions at once\n\tif (destinations.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Outputs\n\t// Add inscription outputs\n\tfor (const destination of destinations) {\n\t\tif (!destination.inscription) {\n\t\t\tthrow new Error(\"Inscription is required for all destinations\");\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription.dataB64,\n\t\t\t\tdestination.inscription.contentType,\n\t\t\t\tmetaData,\n\t\t\t),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Add change output\n\ttx.addOutput({\n\t\tlockingScript: new P2PKH().lock(changeAddress || paymentPk.toAddress().toString()),\n\t\tchange: true,\n\t});\n\n\tif (signer) {\n\t\ttx = await signData(tx, signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\treturn tx;\n};\n","import { type PrivateKey, Transaction, SatoshisPerKilobyte, P2PKH, type Script, type TransactionOutput } from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./ordP2pkh\";\nimport type { Utxo, Destination, MAP, Payment, LocalSigner, RemoteSigner } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\n\n/**\n * Sends ordinals to the given destinations\n * @param {Utxo[]} paymentUtxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} ordinals - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} ordPk - Private key to sign ordinals\n * @param {Destination[]} destinations - Array of destinations with addresses and inscriptions\n * @param {string} changeAddress - (optional) Address to send change to, if any. If not provided, defaults to paymentPk address\n * @param {number} satsPerKb - (optional) Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {MAP} metaData - (optional) MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {Payment[]} additionalPayments -(optional)  Additional payments to include in the transaction\n * @param {boolean} enforceUniformSend - (optional) Enforce that the number of destinations matches the number of ordinals being sent. Sending ordinals requires a 1:1 mapping of destinations to ordinals. Default is true. This is only used for sub-protocols like BSV21 that manage tokens without sending the inscriptions directly.\n * @returns {Promise<Transaction>} Transaction with inscription outputs\n */\nexport const sendOrdinals = async (\n\tpaymentUtxos: Utxo[],\n\tordinals: Utxo[],\n\tpaymentPk: PrivateKey,\n\tordPk: PrivateKey,\n\tdestinations: Destination[],\n\tchangeAddress?: string,\n\tsatsPerKb: number = DEFAULT_SAT_PER_KB,\n\tmetaData?: MAP,\n\tsigner?: LocalSigner | RemoteSigner,\n\tadditionalPayments: Payment[] = [],\n\tenforceUniformSend = true,\n): Promise<Transaction> => {\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(ordUtxo, new OrdP2PKH().unlock(ordPk));\n\t\ttx.addInput(input);\n\t}\n\n\t// Add payment inputs\n\tfor (const paymentUtxo of paymentUtxos) {\n\t\tconst input = inputFromB64Utxo(paymentUtxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// check that ordinals coming in matches ordinals going out if supplied\n\tif (enforceUniformSend && destinations.length !== ordinals.length) {\n\t\tthrow new Error(\n\t\t\t\"Number of destinations must match number of ordinals being sent\",\n\t\t);\n\t}\n\n\t// Add ordinal outputs\n\tfor (const destination of destinations) {\n\t\tlet s: Script;\n\t\tif (\n\t\t\tdestination.inscription?.dataB64 &&\n\t\t\tdestination.inscription?.contentType\n\t\t) {\n\t\t\ts = new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription.dataB64,\n\t\t\t\tdestination.inscription.contentType,\n\t\t\t\tmetaData,\n\t\t\t);\n\t\t} else {\n\t\t\ts = new P2PKH().lock(destination.address);\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: s,\n\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\tconsole.log(\"Additional payment\", p);\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Add change output\n\tconst changeScript = new P2PKH().lock(changeAddress || paymentPk.toAddress().toString());\n\tconst changeOut: TransactionOutput = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\n\ttx.addOutput(changeOut);\n\tif (signer) {\n\t\ttx = await signData(tx, signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\treturn tx;\n};\n","import { type PrivateKey, Transaction, SatoshisPerKilobyte, P2PKH, type TransactionOutput } from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type { Distribution, Payment, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Sends utxos to the given destination\n * @param {Utxo[]} utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} paymentPk - Private key to sign utxos\n * @param {Payment[]} payments - Array of payments with addresses and amounts\n * @param {number} satsPerKb - Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @returns {Promise<Transaction>} Transaction with utxo outputs\n */\nexport const sendUtxos = async (\n\tutxos: Utxo[],\n\tpaymentPk: PrivateKey,\n\tpayments: Payment[],\n\tsatsPerKb: number = DEFAULT_SAT_PER_KB,\n): Promise<Transaction> => {\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\t// Inputs\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\tfor (const payment of payments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new P2PKH().lock(payment.to),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Change\n\tconst changeAddress = paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(changeAddress);\n\n\tconst changeOut: TransactionOutput = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\n\ttx.addOutput(changeOut);\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\treturn tx;\n};"],"names":["toHex","utf8Str","Buffer","from","toString","OrdP2PKH","P2PKH","lock","address","b64File","mediaType","metaData","ordAsm","undefined","ordHex","fileHex","trim","Error","fileMediaType","inscriptionAsm","toASM","app","type","key","value","Object","entries","LockingScript","fromASM","inputFromB64Utxo","utxo","unlockScriptTemplate","input","fromUtxo","_extends","script","sourceTXID","txid","signData","async","tx","signer","idKey","keyHost","sigma","Sigma","signedTx","sign","authToken","remoteSign","e","console","log","createOrdinals","utxos","destinations","paymentPk","changeAddress","satsPerKb","additionalPayments","modelOrFee","SatoshisPerKilobyte","Transaction","unlock","addInput","length","warn","destination","inscription","addOutput","satoshis","lockingScript","dataB64","contentType","p","amount","to","toAddress","change","fee","sendOrdinals","paymentUtxos","ordinals","ordPk","enforceUniformSend","ordUtxo","paymentUtxo","_destination$inscript","_destination$inscript2","s","changeScript","sendUtxos","payments","payment","sendTxOut"],"mappings":"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"}