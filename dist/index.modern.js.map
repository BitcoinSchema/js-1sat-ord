{"version":3,"file":"index.modern.js","sources":["../src/utils/strings.ts","../src/constants.ts","../src/templates/ordP2pkh.ts","../src/types.ts","../src/utils/utxo.ts","../src/signData.ts","../src/utils/subtypeData.ts","../src/createOrdinals.ts","../src/sendOrdinals.ts","../src/sendUtxos.ts","../src/transferOrdinals.ts","../src/validate.ts"],"sourcesContent":["/**\n * Converts a string to its hexadecimal representation\n *\n * @param {string} utf8Str - The string to convert\n * @returns {string} The hexadecimal representation of the input string\n */\nconst toHex = (utf8Str: string): string => {\n  return Buffer.from(utf8Str).toString(\"hex\");\n};\n\nexport { toHex };\n","export const MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\nexport const DEFAULT_SAT_PER_KB = 10;\nexport const API_HOST = \"https://ordinals.gorillapool.io/api\";","import {\n\tLockingScript,\n\tP2PKH,\n\ttype Script,\n} from \"@bsv/sdk\";\nimport type { MAP } from \"../types\";\nimport { toHex } from \"../utils/strings\";\nimport { MAP_PREFIX } from \"../constants\";\n\n/**\n * OrdP2PKH (1Sat Ordinal + Pay To Public Key Hash) class implementing ScriptTemplate.\n *\n * This class provides methods to create an Ordinal with Pay To Public Key Hash locking and unlocking scripts. \n * It extends the standard P2PKH script template and provides a custom lock method.\n */\nexport default class OrdP2PKH extends P2PKH {\n\t/**\n\t * Creates a 1Sat Ordinal + P2PKH locking script for a given address string\n\t *\n\t * @param {string} address - An destination address for the Ordinal.\n\t * @param {string} [b64File] - Base64 encoded file data.\n\t * @param {string} [mediaType] - Media type of the file.\n\t * @param {MAP} [metaData] - (optional) MAP Metadata to be included in OP_RETURN.\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\t// unlock method inherits from p2pkh\n\tlock(\n\t\taddress: string,\n\t\tb64File?: string | undefined,\n\t\tmediaType?: string | undefined,\n\t\tmetaData?: MAP | undefined,\n\t): Script {\n\t\tlet ordAsm = \"\";\n\t\t// This can be omitted for reinscriptions that just update metadata\n\t\tif (b64File !== undefined && mediaType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(b64File, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(mediaType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`;\n\t\t}\n\n\t\t// Create ordinal output and inscription in a single output\n\t\tconst lockingScript = new P2PKH().lock(address);\n\t\tlet inscriptionAsm = `${ordAsm ? `${ordAsm} ` : \"\"}${lockingScript.toASM()}`;\n\n\t\t// MAP.app and MAP.type keys are required\n\t\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t\t}\n\n\t\tif (metaData?.app && metaData?.type) {\n\t\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\t\tconst mapCmdValue = toHex(\"SET\");\n\t\t\tinscriptionAsm = `${inscriptionAsm} OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\t\tif (key !== \"cmd\") {\n\t\t\t\t\tinscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\n\t\t\t\t\t\tvalue as string,\n\t\t\t\t\t)}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn LockingScript.fromASM(inscriptionAsm);\n\t}\n}\n","import type { PrivateKey, Transaction } from \"@bsv/sdk\";\nimport type { AuthToken } from \"sigma-protocol\";\n\n// biome-ignore lint/complexity/noBannedTypes: Reserved for future use\ntype Signer = {};\n\nexport interface LocalSigner extends Signer {\n\tidKey: PrivateKey;\n}\n\nexport interface RemoteSigner extends Signer {\n\tkeyHost: string;\n\tauthToken?: AuthToken;\n}\n\nexport type Destination = {\n\taddress: string;\n\tinscription?: Inscription;\n};\n\n/**\n * @typedef {Object} Distribution\n * @property {string} address - Destination address. Must be a Ordinals address (BSV address for recieving 1Sat ordinals tokens).\n * @property {string} amt - Number of tokens as a string, considering decimals. Not display format. Ex. 100000000 for 1 token with 8 decimal places.\n */\nexport type Distribution = {\n\taddress: string;\n\tamt: string;\n};\n\n/**\n * @typedef {Object} Utxo\n * @property {number} satoshis - Amount in satoshis\n * @property {string} txid - Transaction id\n * @property {number} vout - Output index\n * @property {string} script - Base64 encoded locking script\n */\nexport type Utxo = {\n\tsatoshis: number;\n\ttxid: string;\n\tvout: number;\n\tscript: string;\n};\n\n/**\n * @typedef {Object} NftUtxo\n * @property {string} collectionId - Optional. Collection id of the NFT\n * @property {string} contentType - Media type of the NFT\n * @property {string} creatorBapId - Optional. Creator BAP id of the NFT\n * @property {string} origin - Origin address of the NFT\n * @property {number} satoshis - Always 1\n */\nexport interface NftUtxo extends Utxo {\n\tcollectionId?: string;\n\tcontentType: string;\n\tcreatorBapId?: string;\n\torigin: string;\n\tsatoshis: 1;\n}\n\n/**\n * @typedef {Object} TokenUtxo\n * @property {string} amt - Number of tokens as a string\n * @property {string} id - Token id -  either tick or id depending on protocol\n * @property {string} satoshis - Always 1\n */\nexport interface TokenUtxo extends Utxo {\n\tamt: string;\n\tid: string;\n\tsatoshis: 1;\n}\n\nexport type Inscription = {\n\tdataB64: string;\n\tcontentType: string;\n};\n\nexport type ImageContentType =\n\t| \"image/png\"\n\t| \"image/jpeg\"\n\t| \"image/gif\"\n\t| \"image/svg+xml\"\n\t| \"image/webp\";\n\n/**\n * @typedef {Object} IconInscription\n * @property {string} dataB64 - Base64 encoded image data. Must be a square image.\n * @property {ImageContentType} contentType - Media type of the image\n */\nexport type IconInscription = {\n\tdataB64: string;\n\tcontentType: ImageContentType;\n};\n\nexport type Payment = {\n\tto: string;\n\tamount: number;\n};\n\nexport type TokenInscription = {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\" | \"mint\" | \"deploy+mint\" | \"burn\";\n};\n\nexport interface MintTokenInscription extends TokenInscription {\n\top: \"mint\";\n}\n\nexport interface DeployMintTokenInscription extends TokenInscription {\n\top: \"deploy+mint\";\n\tsym: string;\n\ticon: string;\n}\n\nexport interface TransferTokenInscription extends TokenInscription {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\" | \"burn\";\n}\n\nexport interface TransferBSV20Inscription extends TransferTokenInscription {\n\ttick: string;\n}\n\nexport interface TransferBSV21Inscription extends TransferTokenInscription {\n\tid: string;\n}\n\nexport enum TokenType {\n\tBSV20 = \"bsv20\",\n\tBSV21 = \"bsv21\",\n}\n\nexport type CreateOrdinalsResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\n/**\n * MAP (Magic Attribute Protocol) metadata object with stringified values for writing to the blockchain\n * @typedef {Object} MAP\n * @property {string} app - Application identifier\n * @property {string} type - Metadata type\n * @property {string} [prop] - Optional. Additional metadata properties\n */\nexport type MAP = {\n\tapp: string;\n\ttype: string;\n\t[prop: string]: string;\n};\n\nexport type PreMAP = {\n\tapp: string;\n\ttype: string;\n\t[prop: string]: unknown;\n\troyalties?: Royalty[];\n\tsubTypeData?: CollectionSubTypeData | CollectionItemSubTypeData;\n};\n\nexport type CreateOrdinalsConfig = {\n\tutxos: Utxo[];\n\tdestinations: Destination[];\n\tpaymentPk: PrivateKey;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: PreMAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n};\n\nexport enum RoytaltyType {\n\tPaymail = \"paymail\",\n\tAddress = \"address\",\n\tScript = \"script\",\n}\n\n/**\n * Royalty object\n * @typedef {Object} Royalty\n * @property {RoytaltyType} type - Royalty type, string, one of \"paymail\", \"address\", \"script\"\n * @property {string} destination - Royalty destination\n * @property {string} percentage - Royalty percentage as a string float 0-1\n */\nexport type Royalty = {\n\ttype: RoytaltyType;\n\tdestination: string;\n\tpercentage: string; // string float 0-1\n};\n\nexport interface CreateOrdinalsMetadata extends PreMAP {\n\ttype: \"ord\",\n\tname: string,\n\tpreviewUrl?: string,\n}\n\nexport interface CreateOrdinalsCollectionMetadata extends CreateOrdinalsMetadata {\n\tsubType: \"collection\",\n\tsubTypeData: CollectionSubTypeData, // JSON stringified CollectionSubTypeData\n\troyalties?: Royalty[],\n};\n\nexport interface CreateOrdinalsCollectionItemMetadata extends CreateOrdinalsMetadata {\n\tsubType: \"collectionItem\",\n\tsubTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n};\n\n/**\n * Configuration object for creating an ordinals collection\n * @typedef {Object} CreateOrdinalsCollectionConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collection\"\n * @property metaData.name - Collection name\n * @property metaData.subTypeData - JSON stringified CollectionSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface  CreateOrdinalsCollectionConfig extends CreateOrdinalsConfig {\n\tmetaData: CreateOrdinalsCollectionMetadata\n}\n\nexport type CollectionTraits = {\n\t[trait: string]: CollectionTrait;\n};\n\nexport type CollectionTrait = {\n\tvalues: string[];\n\toccurancePercentages: string[];\n};\n\nexport type Rarity = {\n  [key:string]: string;\n}\n\nexport type RarityLabels = Rarity[]\nexport interface CollectionSubTypeData {\n\tdescription: string;\n\tquantity: number;\n\trarityLabels: RarityLabels;\n\ttraits: CollectionTraits;\n}\n\nexport interface CreateOrdinalsCollectionItemMetadata extends PreMAP {\n\t\ttype: \"ord\",\n\t\tname: string,\n\t\tsubType: \"collectionItem\",\n\t\tsubTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n\t\troyalties?: Royalty[],\n\t\tpreviewUrl?: string,\t\n}\n\n/**\n * Configuration object for creating an ordinals collection item\n * @typedef {Object} CreateOrdinalsCollectionItemConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection item\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collectionItem\"\n * @property metaData.name - Collection item name\n * @property metaData.subTypeData - JSON stringified CollectionItemSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionItemConfig extends CreateOrdinalsConfig {\n\tmetaData: CreateOrdinalsCollectionItemMetadata\n}\n\n/**\n * Subtype data for an ordinals collection item\n * @typedef {Object} CollectionItemSubTypeData\n * @property {string} collectionId - Collection id\n * @property {number} mintNumner - Mint number\n * @property {number} rank - Rank\n * @property {string} rarityLabel - Rarity label\n * @property {string} traits - traits object\n * @property {string} attachments - array of attachment objects\n */\nexport interface CollectionItemSubTypeData {\n\tcollectionId: string;\n\tmintNumber?: number;\n\trank?: number;\n\trarityLabel?: RarityLabels;\n\ttraits?: CollectionItemTraits;\n\tattachments?: CollectionItemAttachment[];\n}\n\nexport type CollectionItemTraits = {\n\tname: string;\n\tvalue: string;\n\trarityLabel?: string;\n\toccurancePercentrage?: string;\n};\n\nexport type CollectionItemAttachment \t= {\n\tname: string;\n\tdescription?: string;\n\t\"content-type\": string;\n\turl: string;\n}\n\nexport type SendOrdinalsResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type SendOrdinalsConfig = {\n\tpaymentUtxos: Utxo[];\n\tordinals: Utxo[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tdestinations: Destination[];\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: PreMAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n\tenforceUniformSend?: boolean;\n}\n\nexport type DeployBsv21TokenResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type DeployBsv21TokenConfig = {\n\tsymbol: string;\n\ticon: string | IconInscription;\n\tutxos: Utxo[];\n\tinitialDistribution: Distribution;\n\tpaymentPk: PrivateKey;\n\tdestinationAddress: string;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[];\n};\n\nexport type SendUtxosResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type SendUtxosConfig = {\n\tutxos: Utxo[];\n\tpaymentPk: PrivateKey;\n\tpayments: Payment[];\n\tsatsPerKb?: number;\n\tchangeAddress?: string;\n};\n\nexport interface TransferOrdTokensResult extends SendOrdinalsResult {\n\ttokenChange?: TokenUtxo;\n}\n\nexport type TransferOrdTokensConfig = {\n\tprotocol: TokenType;\n\ttokenID: string;\n\tutxos: Utxo[];\n\tinputTokens: TokenUtxo[];\n\tdistributions: Distribution[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tchangeAddress?: string;\n\ttokenChangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: PreMAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n  burn?: boolean;\n}","import {\n\ttype Transaction,\n\ttype UnlockingScript,\n\tfromUtxo,\n\ttype TransactionInput,\n\tUtils,\n\tP2PKH,\n  Script,\n} from \"@bsv/sdk\";\nimport { type NftUtxo, TokenType, type TokenUtxo, type Utxo } from \"../types\";\nimport { API_HOST } from \"../constants\";\n\nconst { fromBase58Check } = Utils;\n\n/**\n * Converts a Utxo object with a base64 encoded script to a Utxo object with a hex encoded script\n * @param {Utxo} utxo - Utxo object with base64 encoded script\n * @param {Object} unlockScriptTemplate - Object with sign and estimateLength functions\n * @returns {TransactionInput} Utxo object with hex encoded script\n */\nexport const inputFromB64Utxo = (\n\tutxo: Utxo,\n\tunlockScriptTemplate: {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>;\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>;\n\t},\n): TransactionInput => {\n\tconst input = fromUtxo(\n\t\t{\n\t\t\t...utxo,\n\t\t\tscript: Buffer.from(utxo.script, \"base64\").toString(\"hex\"),\n\t\t},\n\t\tunlockScriptTemplate,\n\t);\n\tinput.sourceTXID = utxo.txid;\n\treturn input;\n};\n\n/**\n * Fetches pay utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<Utxo[]>} Array of pay utxos\n */\nexport const fetchPayUtxos = async (address: string, scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\"): Promise<Utxo[]> => {\n\tconst payUrl = `${API_HOST}/txos/address/${address}/unspent?bsv20=false`;\n\tconsole.log({ payUrl });\n\tconst payRes = await fetch(payUrl);\n\tif (!payRes.ok) {\n\t\tthrow new Error(\"Error fetching pay utxos\");\n\t}\n\tlet payUtxos = await payRes.json();\n\t// exclude all 1 satoshi utxos\n\tpayUtxos = payUtxos.filter((u: { satoshis: number }) => u.satoshis !== 1);\n\n\t// Get pubkey hash from address\n\tconst pubKeyHash = fromBase58Check(address);\n\tconst p2pkhScript = new P2PKH().lock(pubKeyHash.data);\n\tpayUtxos = payUtxos.map((utxo: Partial<Utxo>) => ({\n\t\ttxid: utxo.txid,\n\t\tvout: utxo.vout,\n\t\tsatoshis: utxo.satoshis,\n\t\tscript: scriptEncoding === \"hex\" || scriptEncoding === \"base64\" ? Buffer.from(p2pkhScript.toBinary()).toString(scriptEncoding) : p2pkhScript.toASM(),\n\t}));\n\treturn payUtxos as Utxo[];\n};\n\n/**\n * Fetches NFT utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @param {string} [collectionId] - Optional. Collection id (collection insciprtion origin)\n * @param {number} [limit=10] - Optional. Number of utxos to fetch. Default is 10\n * @param {number} [offset=0] - Optional. Offset for fetching utxos. Default is 0\n * @param {string} [scriptEncoding=\"base64\"] - Optional. Encoding for the script. Default is base64. Options are hex, base64, or asm.\n * @returns {Promise<Utxo[]>} Array of NFT utxos\n */\nexport const fetchNftUtxos = async (\n\taddress: string,\n\tcollectionId?: string,\n\tlimit = 10,\n\toffset = 0,\n  scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\",\n): Promise<NftUtxo[]> => {\n\tlet url = `${API_HOST}/txos/address/${address}/unspent?limit=${limit}&offset=${offset}&`;\n\n\tif (collectionId) {\n\t\tconst query = {\n\t\t\tmap: {\n\t\t\t\tsubTypeData: { collectionId },\n\t\t\t},\n\t\t};\n\t\tconst b64Query = Buffer.from(JSON.stringify(query)).toString(\"base64\");\n\t\turl += `q=${b64Query}`;\n\t}\n\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching NFT utxos for ${address}`);\n\t}\n\n\t// Returns a BSV20Txo but we only need a few fields\n\tlet nftUtxos = await res.json();\n\n\t// Only include 1 satoshi outputs, non listings\n\tnftUtxos = nftUtxos.filter(\n\t\t(u: {\n\t\t\tsatoshis: number;\n\t\t\tdata: { list: { price: number; payout: string } | undefined } | null;\n\t\t}) => u.satoshis === 1 && !u.data?.list,\n\t);\n\n\tconst outpoints = nftUtxos.map(\n\t\t(utxo: { txid: string; vout: number }) => `${utxo.txid}_${utxo.vout}`,\n\t);\n\t// Fetch the scripts up to the limit\n\tconst nftRes = await fetch(`${API_HOST}/txos/outpoints?script=true`, {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t\tbody: JSON.stringify([...outpoints]),\n\t});\n\n\tif (!nftRes.ok) {\n\t\tthrow new Error(`Error fetching NFT scripts for ${address}`);\n\t}\n\n\tconst nfts = (await nftRes.json() || [])\n\n\tnftUtxos = nfts.map(\n\t\t(utxo: {\n\t\t\torigin: { outpoint: string };\n\t\t\tscript: string;\n\t\t\tvout: number;\n\t\t\ttxid: string;\n\t\t}) => {\n      let script = utxo.script;\n      if (scriptEncoding === \"hex\") {\n        script = Buffer.from(script, \"base64\").toString(\"hex\");\n      } else if (scriptEncoding === \"asm\") {\n        script = Script.fromHex(Buffer.from(script, \"base64\").toString(\"hex\")).toASM();\n      }\n\t\t\tconst nftUtxo = {\n\t\t\t\torigin: utxo.origin.outpoint,\n\t\t\t\tscript,\n\t\t\t\tvout: utxo.vout,\n\t\t\t\ttxid: utxo.txid,\n\t\t\t\tsatoshis: 1,\n\t\t\t} as NftUtxo;\n\t\t\tif (collectionId) {\n\t\t\t\tnftUtxo.collectionId = collectionId;\n\t\t\t}\n\t\t\treturn nftUtxo;\n\t\t},\n\t);\n\n\treturn nftUtxos as NftUtxo[];\n};\n\n/**\n * Fetches token utxos from the API\n * @param {TokenType} protocol - Token protocol. Either BSV20 or BSV21\n * @param {string} tokenId - Token id. Ticker for BSV20 and id (mint+deploy inscription origin) for BSV21\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<TokenUtxo[]>} Array of token utxos\n */\nexport const fetchTokenUtxos = async (\n\tprotocol: TokenType,\n\ttokenId: string,\n\taddress: string,\n): Promise<TokenUtxo[]> => {\n\tconst url = `${API_HOST}/bsv20/${address}/${protocol === TokenType.BSV20 ? \"tick\" : \"id\"}/${tokenId}?bsv20=true&listing=false`;\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching ${protocol} utxos`);\n\t}\n\n\t// returns a BSV20Txo but we only need a few fields\n\tlet tokenUtxos = await res.json();\n\n\ttokenUtxos = tokenUtxos.map((utxo: Partial<TokenUtxo>) => ({\n\t\tamt: utxo.amt,\n\t\tscript: utxo.script,\n\t\tvout: utxo.vout,\n\t\ttxid: utxo.txid,\n\t\tid: tokenId,\n\t\tsatoshis: 1,\n\t}));\n\n\treturn tokenUtxos as TokenUtxo[];\n};\n","import type { Transaction } from \"@bsv/sdk\";\nimport { Sigma } from \"sigma-protocol\";\nimport type { LocalSigner, RemoteSigner } from \"./types\";\n\n/**\n * Signs data in the transaction with Sigma protocol\n * @param {Transaction} tx - Transaction to sign\n * @param {LocalSigner | RemoteSigner} signer - Local or remote signer (used for data signature)\n * @returns {Transaction} Transaction with signed data\n */\nexport const signData = async (\n\ttx: Transaction,\n\tsigner: LocalSigner | RemoteSigner,\n): Promise<Transaction> => {\n\t// Sign tx if idKey or remote signer like starfish/tokenpass\n\tconst idKey = (signer as LocalSigner)?.idKey;\n\tconst keyHost = (signer as RemoteSigner)?.keyHost;\n\n\tif (idKey) {\n\t\tconst sigma = new Sigma(tx);\n\t\tconst { signedTx } = sigma.sign(idKey);\n\t\treturn signedTx;\n\t}\n\tif (keyHost) {\n\t\tconst authToken = (signer as RemoteSigner)?.authToken;\n\t\tconst sigma = new Sigma(tx);\n\t\ttry {\n\t\t\tconst { signedTx } = await sigma.remoteSign(keyHost, authToken);\n\t\t\treturn signedTx;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthrow new Error(`Remote signing to ${keyHost} failed`);\n\t\t}\n\t}\n\tthrow new Error(\"Signer must be a LocalSigner or RemoteSigner\");\n};\n","import type { MAP, PreMAP } from \"../types\";\n\nconst stringifyMetaData = (metaData?: PreMAP): MAP | undefined => {\n  if (!metaData) return undefined;\n\tconst result: MAP = {\n\t\tapp: metaData.app,\n\t\ttype: metaData.type,\n\t};\n\n\tfor (const [key, value] of Object.entries(metaData)) {\n\t\tif (value !== undefined) {\n\t\t\tif (typeof value === \"string\") {\n\t\t\t\tresult[key] = value;\n\t\t\t} else if (Array.isArray(value) || typeof value === \"object\") {\n\t\t\t\tresult[key] = JSON.stringify(value);\n\t\t\t} else {\n\t\t\t\tresult[key] = String(value);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\nexport default stringifyMetaData;\n","import { Transaction, SatoshisPerKilobyte, P2PKH } from \"@bsv/sdk\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n\tUtxo,\n\tCreateOrdinalsConfig,\n\tCreateOrdinalsResult,\n\tCreateOrdinalsCollectionConfig,\n\tCreateOrdinalsCollectionItemConfig,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Creates a transaction with inscription outputs\n * @param {CreateOrdinalsConfig | CreateOrdinalsCollectionConfig | CreateOrdinalsCollectionItemConfig} config - Configuration object for creating ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {string} config.changeAddress - Optional. Address to send change to. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Local or remote signer (used for data signature)\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<CreateOrdinalsResult>} Transaction with inscription outputs\n */\nexport const createOrdinals = async (\n\tconfig:\n\t\t| CreateOrdinalsConfig\n\t\t| CreateOrdinalsCollectionConfig\n\t\t| CreateOrdinalsCollectionItemConfig,\n): Promise<CreateOrdinalsResult> => {\n\tconst {\n\t\tutxos,\n\t\tdestinations,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Inputs\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\t}\n\n\t// Warn if creating many inscriptions at once\n\tif (destinations.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Outputs\n\t// Add inscription outputs\n\tfor (const destination of destinations) {\n\t\tif (!destination.inscription) {\n\t\t\tthrow new Error(\"Inscription is required for all destinations\");\n\t\t}\n\n\t\t// remove any undefined fields from metadata\n\t\tif (metaData) {\n\t\t\tfor(const key of Object.keys(metaData)) {\n\t\t\t\tif (metaData[key] === undefined) {\n\t\t\t\t\tdelete metaData[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription.dataB64,\n\t\t\t\tdestination.inscription.contentType,\n\t\t\t\tstringifyMetaData(metaData),\n\t\t\t),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Calculate total input and output amounts\n\tconst totalInput = utxos.reduce(\n\t\t(sum, utxo) => sum + BigInt(utxo.satoshis),\n\t\t0n,\n\t);\n\tconst totalOutput = tx.outputs.reduce(\n\t\t(sum, output) => sum + BigInt(output.satoshis || 0),\n\t\t0n,\n\t);\n\n\t// Estimate fee\n\tconst estimatedFee = await modelOrFee.computeFee(tx);\n\n\t// Check if change is needed\n\tlet payChange: Utxo | undefined;\n\tif (totalInput > totalOutput + BigInt(estimatedFee)) {\n\t\tconst changeScript = new P2PKH().lock(\n\t\t\tchangeAddress || paymentPk.toAddress().toString(),\n\t\t);\n\t\tconst changeOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\t// Add change output\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet,\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\n\t\ttx.addOutput(changeOutput);\n\t}\n\n\tif (signer) {\n\t\ttx = await signData(tx, signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype Script,\n\ttype TransactionOutput,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type { SendOrdinalsResult, SendOrdinalsConfig, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Sends ordinals to the given destinations\n * @param {SendOrdinalsConfig} config - Configuration object for sending ordinals\n * @param {Utxo[]} config.paymentUtxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.ordinals - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {string} config.changeAddress - Optional. Address to send change to, if any. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @param {boolean} config.enforceUniformSend - Optional. Default: true. Enforce that the number of destinations matches the number of ordinals being sent. Sending ordinals requires a 1:1 mapping of destinations to ordinals. This is only used for sub-protocols like BSV21 that manage tokens without sending the inscriptions directly.\n * @returns {Promise<SendOrdinalsResult>} Transaction, spent outpoints, and change vout\n */\nexport const sendOrdinals = async (\n\tconfig: SendOrdinalsConfig,\n): Promise<SendOrdinalsResult> => {\n\tif (!config.satsPerKb) {\n\t\tconfig.satsPerKb = DEFAULT_SAT_PER_KB;\n\t}\n\tif (!config.additionalPayments) {\n\t\tconfig.additionalPayments = [];\n\t}\n\tif (config.enforceUniformSend === undefined) {\n\t\tconfig.enforceUniformSend = true;\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(config.satsPerKb);\n\tlet tx = new Transaction();\n\tconst spentOutpoints: string[] = [];\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of config.ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(\n\t\t\tordUtxo,\n\t\t\tnew OrdP2PKH().unlock(config.ordPk),\n\t\t);\n\t\tspentOutpoints.push(`${ordUtxo.txid}_${ordUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// check that ordinals coming in matches ordinals going out if supplied\n\tif (\n\t\tconfig.enforceUniformSend &&\n\t\tconfig.destinations.length !== config.ordinals.length\n\t) {\n\t\tthrow new Error(\n\t\t\t\"Number of destinations must match number of ordinals being sent\",\n\t\t);\n\t}\n\n\t// Add ordinal outputs\n\tfor (const destination of config.destinations) {\n\t\tlet s: Script;\n\t\tif (\n\t\t\tdestination.inscription?.dataB64 &&\n\t\t\tdestination.inscription?.contentType\n\t\t) {\n\t\t\ts = new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription.dataB64,\n\t\t\t\tdestination.inscription.contentType,\n\t\t\t\tstringifyMetaData(config.metaData),\n\t\t\t);\n\t\t} else {\n\t\t\ts = new P2PKH().lock(destination.address);\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: s,\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of config.additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of config.paymentUtxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(config.paymentPk));\n\t\tspentOutpoints.push(`${utxo.txid}_${utxo.vout}`);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (totalSatsIn < totalSatsOut) {\n\t\tthrow new Error(\"Not enough ordinals to send\");\n\t}\n\n\tlet payChange: Utxo | undefined;\n\tif (totalSatsIn > totalSatsOut + BigInt(fee)) {\n\t\tconst changeScript = new P2PKH().lock(\n\t\t\tconfig.changeAddress || config.paymentPk.toAddress().toString(),\n\t\t);\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not available until the transaction is signed\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t}\n\n\tif (config.signer) {\n\t\ttx = await signData(tx, config.signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChange,\n\t};\n};\n","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype TransactionOutput,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type { SendUtxosConfig, SendUtxosResult, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Sends utxos to the given destination\n * @param {SendUtxosConfig} config - Configuration object for sending utxos\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {Payment[]} config.payments - Array of payments with addresses and amounts\n * @param {number} [config.satsPerKb] - Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {string} [config.changeAddress] - Address to send change to. If not provided, defaults to paymentPk address\n * @returns {Promise<SendUtxosResult>} Transaction with utxo outputs\n */\nexport const sendUtxos = async (\n\tconfig: SendUtxosConfig,\n): Promise<SendUtxosResult> => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tpayments,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tchangeAddress = paymentPk.toAddress().toString(),\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\t// Outputs\n\tfor (const payment of payments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new P2PKH().lock(payment.to),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + (out.satoshis || 0),\n\t\t0,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + fee) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + fee) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to send. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChange: Utxo | undefined;\n\tif (totalSatsIn > totalSatsOut + fee) {\n\t\t// Change\n\t\tconst changeScript = new P2PKH().lock(changeAddress);\n\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t} else if (totalSatsIn < totalSatsOut + fee) {\n\t\tconsole.log(\"No change needed\");\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\ttype Destination,\n\tTokenType,\n\ttype TransferBSV20Inscription,\n\ttype TransferTokenInscription,\n  type TransferBSV21Inscription,\n\ttype TransferOrdTokensConfig,\n\ttype TransferOrdTokensResult,\n\ttype SendOrdinalsConfig,\n\ttype TokenUtxo,\n} from \"./types\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { sendOrdinals } from \"./sendOrdinals\";\n\n/**\n * Transfer tokens to a destination\n * @param {TransferOrdTokensConfig} config - Configuration object for transferring tokens\n * @param {TokenType} config.protocol - Token protocol. Must be TokenType.BSV20 or TokenType.BSV21\n * @param {string} config.tokenID - Token ID. Either the tick or id value depending on the protocol\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {TokenUtxo[]} config.inputTokens - Token utxos to spend\n * @param {Distribution[]} config.distributions - Array of destinations with addresses and amounts\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {string} config.changeAddress - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {string} config.tokenChangeAddress - Optional. Address to send token change to, if any. If not provided, defaults to ordPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @param {burn} config.burn - Optional. Set to true to burn the tokens.\n * @returns {Promise<TransferOrdTokensResult>} Transaction with token transfer outputs\n */\nexport const transferOrdTokens = async (config: TransferOrdTokensConfig): Promise<TransferOrdTokensResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tinputTokens,\n\t\tdistributions,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tchangeAddress,\n\t\ttokenChangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n    burn = false\n\t} = config;\n\n\t// calculate change amount\n\tlet changeAmt = 0n;\n\tlet totalAmtIn = 0n;\n\tlet totalAmtOut = 0n;\n\n  // Ensure these inputs are for the expected token\n\tif(!inputTokens.every(\n\t\t(token) => token.id === tokenID,\n\t)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n\tfor (const token of inputTokens) {\n\t\ttotalAmtIn += BigInt(token.amt);\n\t}\n\n\tfor (const dest of distributions) {\n\t\ttotalAmtOut += BigInt(dest.amt);\n\t}\n\n\t// check that you have enough tokens to send\n\tif (totalAmtIn < totalAmtOut) {\n\t\tthrow new Error(\"Not enough tokens to send\");\n\t}\n\n\tchangeAmt = totalAmtIn - totalAmtOut;\n\n\t// add change to distributions\n\tif (changeAmt > 0n) {\n\t\tconst changeDistribution = {\n\t\t\taddress: tokenChangeAddress || ordPk.toAddress().toString(),\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t\tdistributions.push(changeDistribution);\n\t}\n\n\t// build destination inscriptions\n\tconst destinations: Destination[] = distributions.map((dest) => {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: burn ? \"burn\" : \"transfer\",\n\t\t\tamt: dest.amt,\n\t\t}\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n\t\treturn {\n\t\t\taddress: dest.address,\n\t\t\tinscription: {\n\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\t\tcontentType: \"application/bsv-20\",\n\t\t\t},\n\t\t};\n\t});\n\n\tconst sendOrdinalsConfig: SendOrdinalsConfig = {\n\t\tpaymentUtxos: utxos,\n\t\tordinals: inputTokens,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tdestinations,\n\t\tchangeAddress: changeAddress || paymentPk.toAddress().toString(),\n\t\tsatsPerKb,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments,\n\t\tenforceUniformSend: false\n\t};\n\n\tconst { tx, spentOutpoints, payChange } = await sendOrdinals(sendOrdinalsConfig);\n\t\n\t// find the tokenChangeVout by looking for the destination with the tokenChangeAddress\n\tconst tokenChangeVout = destinations.findIndex(\n\t\t(d) => d.address === (tokenChangeAddress || ordPk.toAddress().toString())\n\t);\n\t\n\tlet tokenChange: TokenUtxo | undefined;\n\tif (tokenChangeVout !== -1) {\n\t\ttokenChange = {\n\t\t\tid: tokenID,\n\t\t\tamt: changeAmt.toString(),\n\t\t\tsatoshis: 1,\n\t\t\ttxid: tx.id(\"hex\"),\n\t\t\tvout: tokenChangeVout,\n\t\t\tscript: Buffer.from(tx.outputs[tokenChangeVout].lockingScript.toHex(), \"hex\").toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChange,\n\t\ttokenChange,\n\t}\n};","import type { CollectionItemSubTypeData, CollectionSubTypeData } from \"./types\";\n\n/**\n * Validates sub type data\n * @param {string} subType - Sub type of the ordinals token\n * @param {string} subTypeData - Sub type data of the ordinals token\n * @returns {Error | undefined} Error if validation fails, undefined if validation passes\n */\nexport const validateSubTypeData = (\n  subType: \"collection\" | \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData | CollectionSubTypeData,\n): Error | undefined => {\n  try {\n    if (subType === \"collection\") {\n      const collectionData = subTypeData as CollectionSubTypeData;\n      if (!collectionData.description) {\n        return new Error(\"Collection description is required\");\n      }\n      if (!collectionData.quantity) {\n        return new Error(\"Collection quantity is required\");\n      }\n      if (collectionData.rarityLabels) {\n        if (!Array.isArray(collectionData.rarityLabels)) {\n          return new Error(\"Rarity labels must be an array\");\n        }\n        // make sure keys and values are strings\n        if (!collectionData.rarityLabels.every((label) => {\n          return Object.values(label).every(value => typeof value === 'string');\n        })) {\n          return new Error(`Invalid rarity labels ${collectionData.rarityLabels}`);\n        }\n      }\n      if (collectionData.traits ) {\n        if (typeof collectionData.traits !== \"object\") {\n        return new Error(\"Collection traits must be an object\");\n        }\n        if (collectionData.traits && !Object.keys(collectionData.traits).every(key => typeof key === 'string' && typeof collectionData.traits[key] === 'object')) {\n          return new Error(\"Collection traits must be a valid CollectionTraits object\");\n        }\n      }\n    }\n    if (subType === \"collectionItem\") {\n      const itemData = subTypeData as CollectionItemSubTypeData;\n      if (!itemData.collectionId) {\n        return new Error(\"Collection id is required\");\n      }\n      if (!itemData.collectionId.includes(\"_\")) {\n        return new Error(\"Collection id must be a valid outpoint\");\n      }\n      if (itemData.collectionId.split(\"_\")[0].length !== 64) {\n        return new Error(\"Collection id must contain a valid txid\");\n      }\n      if (Number.isNaN(Number.parseInt(itemData.collectionId.split(\"_\")[1]))) {\n        return new Error(\"Collection id must contain a valid vout\");\n      }\n\n      if (itemData.mintNumber && typeof itemData.mintNumber !== \"number\") {\n        return new Error(\"Mint number must be a number\");\n      }\n      if (itemData.rank && typeof itemData.rank !== \"number\") {\n        return new Error(\"Rank must be a number\");\n      }\n      if (itemData.rarityLabel && typeof itemData.rarityLabel !== \"string\") {\n        return new Error(\"Rarity label must be a string\");\n      }\n      if (itemData.traits && typeof itemData.traits !== \"object\") {\n        return new Error(\"Traits must be an object\");\n      }\n      if (itemData.attachments && !Array.isArray(itemData.attachments)) {\n        return new Error(\"Attachments must be an array\");\n      }\n    }\n    return undefined;\n  } catch (error) {\n    return new Error(\"Invalid JSON data\");\n  }\n};"],"names":["toHex","utf8Str","Buffer","from","toString","DEFAULT_SAT_PER_KB","API_HOST","OrdP2PKH","P2PKH","lock","address","b64File","mediaType","metaData","ordAsm","undefined","ordHex","fileHex","trim","Error","fileMediaType","inscriptionAsm","toASM","app","type","key","value","Object","entries","LockingScript","fromASM","TokenType","RoytaltyType","fromBase58Check","Utils","inputFromB64Utxo","utxo","unlockScriptTemplate","input","fromUtxo","_extends","script","sourceTXID","txid","fetchPayUtxos","async","scriptEncoding","payUrl","console","log","payRes","fetch","ok","payUtxos","json","filter","u","satoshis","pubKeyHash","p2pkhScript","data","map","vout","toBinary","fetchNftUtxos","collectionId","limit","offset","url","JSON","stringify","subTypeData","res","nftUtxos","_u$data","list","outpoints","nftRes","method","headers","body","Script","fromHex","nftUtxo","origin","outpoint","fetchTokenUtxos","protocol","tokenId","BSV20","tokenUtxos","amt","id","signData","tx","signer","idKey","keyHost","sigma","Sigma","signedTx","sign","authToken","remoteSign","e","stringifyMetaData","result","Array","isArray","String","createOrdinals","utxos","destinations","paymentPk","changeAddress","satsPerKb","additionalPayments","config","modelOrFee","SatoshisPerKilobyte","Transaction","unlock","addInput","length","warn","destination","inscription","keys","addOutput","lockingScript","dataB64","contentType","p","amount","to","totalInput","reduce","sum","BigInt","totalOutput","outputs","output","estimatedFee","computeFee","payChange","changeScript","toAddress","changeOutput","change","fee","spentOutpoints","sendOrdinals","enforceUniformSend","ordUtxo","ordinals","ordPk","push","_destination$inscript","_destination$inscript2","s","totalSatsIn","totalSatsOut","total","out","paymentUtxos","changeOut","sendUtxos","payments","payment","sendTxOut","transferOrdTokens","tokenID","inputTokens","distributions","tokenChangeAddress","burn","changeAmt","totalAmtIn","totalAmtOut","every","token","dest","changeDistribution","transferInscription","op","tick","BSV21","sendOrdinalsConfig","tokenChangeVout","findIndex","d","tokenChange","validateSubTypeData","subType","collectionData","description","quantity","rarityLabels","label","values","traits","itemData","includes","split","Number","isNaN","parseInt","mintNumber","rank","rarityLabel","attachments","error"],"mappings":"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"}