{"version":3,"file":"index.modern.js","sources":["../src/utils/strings.ts","../src/ordP2pkh.ts","../src/constants.ts","../src/utils/utxo.ts","../src/createOrdinals.ts","../src/sendOrdinals.ts","../src/sendUtxos.ts"],"sourcesContent":["const toHex = (asciiStr: string) => {\n  return Buffer.from(asciiStr).toString(\"hex\");\n};\n\nexport { toHex };\n","import {\n\tLockingScript,\n\tP2PKH,\n\ttype Script,\n} from \"@bsv/sdk\";\nimport type { MAP } from \"./types\";\nimport { toHex } from \"./utils/strings\";\nimport { MAP_PREFIX } from \"./constants\";\n\n/**\n * OrdP2PKH (1Sat Ordinal + Pay To Public Key Hash) class implementing ScriptTemplate.\n *\n * This class provides methods to create an Ordinal with Pay To Public Key Hash locking and unlocking scripts. \n * It extends the standard P2PKH script template and provides a custom lock method.\n */\nexport default class OrdP2PKH extends P2PKH {\n\t/**\n\t * Creates a 1Sat Ordinal + P2PKH locking script for a given address string\n\t *\n\t * @param {string} address - An destination address for the Ordinal.\n\t * @param {string} [b64File] - Base64 encoded file data.\n\t * @param {string} [mediaType] - Media type of the file.\n\t * @param {MAP} [metaData] - (optional) MAP Metadata to be included in OP_RETURN.\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\t// unlock method inherits from p2pkh\n\tlock(\n\t\taddress: string,\n\t\tb64File?: string | undefined,\n\t\tmediaType?: string | undefined,\n\t\tmetaData?: MAP | undefined,\n\t): Script {\n\t\tlet ordAsm = \"\";\n\t\t// This can be omitted for reinscriptions that just update metadata\n\t\tif (b64File !== undefined && mediaType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(b64File, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(mediaType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`;\n\t\t}\n\n\t\t// Create ordinal output and inscription in a single output\n\t\tconst lockingScript = new P2PKH().lock(address);\n\t\tlet inscriptionAsm = `${ordAsm ? `${ordAsm} ` : \"\"}${lockingScript.toASM()}`;\n\n\t\t// MAP.app and MAP.type keys are required\n\t\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t\t}\n\n\t\tif (metaData?.app && metaData?.type) {\n\t\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\t\tconst mapCmdValue = toHex(\"SET\");\n\t\t\tinscriptionAsm = `${inscriptionAsm} OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\t\tif (key !== \"cmd\") {\n\t\t\t\t\tinscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\n\t\t\t\t\t\tvalue as string,\n\t\t\t\t\t)}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn LockingScript.fromASM(inscriptionAsm);\n\t}\n}\n","export const MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\nexport const DEFAULT_SAT_PER_KB = 10;","import { type Transaction, type UnlockingScript, fromUtxo } from \"@bsv/sdk\";\nimport type { Utxo } from \"../types\";\n\nexport const fromB64Utxo = (\n\tutxo: Utxo,\n\tunlockScriptTemplate: {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>;\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>;\n\t},\n) => {\n\tconst input = fromUtxo(\n\t\t{\n\t\t\t...utxo,\n\t\t\tscript: Buffer.from(utxo.script, \"base64\").toString(\"hex\"),\n\t\t},\n\t\tunlockScriptTemplate,\n\t);\n\tinput.sourceTXID = utxo.txid;\n\treturn input;\n};\n","import { type PrivateKey, Transaction, SatoshisPerKilobyte, P2PKH } from \"@bsv/sdk\";\nimport { Sigma } from \"sigma-protocol\";\nimport OrdP2PKH from \"./ordP2pkh\";\nimport type { Utxo, Destination, MAP, LocalSigner, RemoteSigner, Payment } from \"./types\";\nimport { fromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\n\nexport const createOrdinals = async (\n\tutxos: Utxo[],\n\tdestinations: Destination[],\n\tpaymentPk: PrivateKey,\n\tchangeAddress: string,\n\tsatsPerKb: number = DEFAULT_SAT_PER_KB,\n\tmetaData?: MAP,\n\tsigner?: LocalSigner | RemoteSigner,\n\tadditionalPayments: Payment[] = [],\n): Promise<Transaction> => {\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Inputs\n\tfor (const utxo of utxos) {\n\t\tconst input = fromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\t}\n\n\t// Warn if creating many inscriptions at once\n\tif (destinations.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Outputs\n\t// Add inscription outputs\n\tfor (const destination of destinations) {\n\t\tif (!destination.inscription) {\n\t\t\tthrow new Error(\"Inscription is required for all destinations\");\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription.dataB64,\n\t\t\t\tdestination.inscription.contentType,\n\t\t\t\tmetaData,\n\t\t\t),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Add change output\n\ttx.addOutput({\n\t\tlockingScript: new P2PKH().lock(changeAddress),\n\t\tchange: true,\n\t});\n\n\t// Sign tx if idKey or remote signer like starfish/tokenpass\n\tconst idKey = (signer as LocalSigner)?.idKey;\n\tconst keyHost = (signer as RemoteSigner)?.keyHost;\n\n\tif (idKey) {\n\t\tconst sigma = new Sigma(tx);\n\t\tconst { signedTx } = sigma.sign(idKey);\n\t\ttx = signedTx;\n\t} else if (keyHost) {\n\t\tconst authToken = (signer as RemoteSigner)?.authToken;\n\t\tconst sigma = new Sigma(tx);\n\t\ttry {\n\t\t\tconst { signedTx } = await sigma.remoteSign(keyHost, authToken);\n\t\t\ttx = signedTx;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthrow new Error(`Remote signing to ${keyHost} failed`);\n\t\t}\n\t}\n\n\tawait tx.fee(modelOrFee);\n\tawait tx.sign();\n\n\treturn tx;\n};","import { type PrivateKey, Transaction, SatoshisPerKilobyte, P2PKH, type Script, type TransactionOutput } from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./ordP2pkh\";\nimport type { Utxo, Destination, MAP, Payment } from \"./types\";\nimport { fromB64Utxo } from \"./utils/utxo\";\n\nexport const sendOrdinals = async (\n\tpaymentUtxos: Utxo[],\n\tordinals: Utxo[],\n\tpaymentPk: PrivateKey,\n\tchangeAddress: string,\n\tordPk: PrivateKey,\n\tdestinations: Destination[],\n\tsatsPerKb: number = DEFAULT_SAT_PER_KB,\n\tmetaData?: MAP,\n\tadditionalPayments: Payment[] = [],\n): Promise<Transaction> => {\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of ordinals) {\n\t\tconst input = fromB64Utxo(ordUtxo, new OrdP2PKH().unlock(ordPk));\n\t\ttx.addInput(input);\n\t}\n\n\t// Add payment inputs\n\tfor (const paymentUtxo of paymentUtxos) {\n\t\tconst input = fromB64Utxo(paymentUtxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// check that ordinals coming in matches ordinals going out if supplied\n\tif (destinations.length !== ordinals.length) {\n\t\tthrow new Error(\n\t\t\t\"Number of destinations must match number of ordinals being sent\",\n\t\t);\n\t}\n\n\t// Add ordinal outputs\n\tfor (const destination of destinations) {\n\t\tlet s: Script;\n\t\tif (\n\t\t\tdestination.inscription?.dataB64 &&\n\t\t\tdestination.inscription?.contentType\n\t\t) {\n\t\t\ts = new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription.dataB64,\n\t\t\t\tdestination.inscription.contentType,\n\t\t\t\tmetaData,\n\t\t\t);\n\t\t} else {\n\t\t\ts = new P2PKH().lock(destination.address);\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: s,\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Add change output\n\tconst changeScript = new P2PKH().lock(changeAddress);\n\tconst changeOut: TransactionOutput = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tawait tx.fee(modelOrFee);\n\tawait tx.sign();\n\n\treturn tx;\n};\n","import { type PrivateKey, Transaction, SatoshisPerKilobyte, P2PKH, type TransactionOutput } from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type { Utxo } from \"./types\";\nimport { fromB64Utxo } from \"./utils/utxo\";\n\n// sendUtxos sends p2pkh utxos to the given destinationAddress\nexport const sendUtxos = async (\n\tutxos: Utxo[],\n\tpaymentPk: PrivateKey,\n\tdestinationAddress: string,\n\tamount: number,\n\tsatsPerKb: number = DEFAULT_SAT_PER_KB,\n): Promise<Transaction> => {\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\t// Inputs\n\tfor (const utxo of utxos) {\n\t\tconst input = fromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\tconst sendTxOut: TransactionOutput = {\n\t\tsatoshis: amount,\n\t\tlockingScript: new P2PKH().lock(destinationAddress),\n\t};\n\n\ttx.addOutput(sendTxOut);\n\n\t// Change\n\tconst changeAddress = paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(changeAddress);\n\n\tconst changeOut: TransactionOutput = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\n\ttx.addOutput(changeOut);\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\treturn tx;\n};"],"names":["toHex","asciiStr","Buffer","from","toString","OrdP2PKH","P2PKH","lock","address","b64File","mediaType","metaData","ordAsm","undefined","ordHex","fileHex","trim","Error","fileMediaType","inscriptionAsm","toASM","app","type","key","value","Object","entries","LockingScript","fromASM","fromB64Utxo","utxo","unlockScriptTemplate","input","fromUtxo","_extends","script","sourceTXID","txid","createOrdinals","async","utxos","destinations","paymentPk","changeAddress","satsPerKb","signer","additionalPayments","modelOrFee","SatoshisPerKilobyte","tx","Transaction","unlock","addInput","length","console","warn","destination","inscription","addOutput","satoshis","lockingScript","dataB64","contentType","p","amount","to","change","idKey","keyHost","sigma","Sigma","signedTx","sign","authToken","remoteSign","e","log","fee","sendOrdinals","paymentUtxos","ordinals","ordPk","ordUtxo","paymentUtxo","_destination$inscript","_destination$inscript2","s","changeScript","sendUtxos","destinationAddress","sendTxOut","toAddress"],"mappings":"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"}