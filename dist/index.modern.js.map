{"version":3,"file":"index.modern.js","sources":["../node_modules/base64-js/index.js","../node_modules/ieee754/index.js","../node_modules/buffer/index.js","../src/utils/strings.ts","../src/index.ts"],"sourcesContent":["'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","const toHex = (asciiStr: string) => {\r\n  var arr1: string[] = [];\r\n  for (var n = 0, l = asciiStr.length; n < l; n++) {\r\n    var hex = Number(asciiStr.charCodeAt(n)).toString(16);\r\n    arr1.push(hex);\r\n  }\r\n  return arr1.join(\"\");\r\n};\r\n\r\nconst toAscii = (hexStr: string) => {\r\n  var hex, i;\r\n\r\n  var result = \"\";\r\n  for (i = 0; i < hexStr.length; i++) {\r\n    hex = hexStr.charCodeAt(i).toString(16);\r\n    result += (\"000\" + hex).slice(-4);\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nexport { toHex, toAscii };\r\n","import { MAP } from \"bmapjs/types/protocols/map\";\r\nimport {\r\n  P2PKHAddress,\r\n  PrivateKey,\r\n  Script,\r\n  SigHash,\r\n  Transaction,\r\n  TxIn,\r\n  TxOut,\r\n} from \"bsv-wasm\";\r\nimport { Buffer } from \"buffer\";\r\nimport * as dotenv from \"dotenv\";\r\nimport { Sigma } from \"sigma-protocol\";\r\nimport { toHex } from \"./utils/strings\";\r\n\r\ndotenv.config();\r\n\r\nexport type Utxo = {\r\n  satoshis: number;\r\n  txid: string;\r\n  vout: number;\r\n  script: string;\r\n};\r\n\r\nexport type Inscription = {\r\n  dataB64: string;\r\n  contentType: string;\r\n};\r\n\r\nconst MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\r\n\r\nconst buildInscription = (\r\n  destinationAddress: P2PKHAddress,\r\n  b64File: string,\r\n  mediaType: string,\r\n  metaData?: MAP\r\n): Script => {\r\n  const ordHex = toHex(\"ord\");\r\n  const fsBuffer = Buffer.from(b64File, \"base64\");\r\n  const fireShardHex = fsBuffer.toString(\"hex\");\r\n  const fireShardMediaType = toHex(mediaType);\r\n\r\n  // Create ordinal output and inscription in a single output\r\n  let inscriptionAsm = `${destinationAddress\r\n    .get_locking_script()\r\n    .to_asm_string()} OP_0 OP_IF ${ordHex} OP_1 ${fireShardMediaType} OP_0 ${fireShardHex} OP_ENDIF`;\r\n\r\n  // MAP.app and MAP.type keys are required\r\n  if (metaData && metaData?.app && metaData?.type) {\r\n    const mapPrefixHex = toHex(MAP_PREFIX);\r\n    const mapCmdValue = toHex(\"SET\");\r\n    inscriptionAsm = `${inscriptionAsm} OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\r\n\r\n    for (const [key, value] of Object.entries(metaData)) {\r\n      if (key !== \"cmd\") {\r\n        inscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\r\n          value as string\r\n        )}`;\r\n      }\r\n    }\r\n  }\r\n\r\n  return Script.from_asm_string(inscriptionAsm);\r\n};\r\n\r\nconst createOrdinal = async (\r\n  utxo: Utxo,\r\n  destinationAddress: string,\r\n  paymentPk: PrivateKey,\r\n  changeAddress: string,\r\n  satPerByteFee: number,\r\n  inscription: Inscription,\r\n  metaData?: MAP,\r\n  idKey?: PrivateKey\r\n): Promise<Transaction> => {\r\n  let tx = new Transaction(1, 0);\r\n\r\n  // Inputs\r\n  let utxoIn = new TxIn(\r\n    Buffer.from(utxo.txid, \"hex\"),\r\n    utxo.vout,\r\n    Script.from_asm_string(\"\")\r\n  );\r\n\r\n  tx.add_input(utxoIn);\r\n\r\n  // Outputs\r\n  const inscriptionScript = buildInscription(\r\n    P2PKHAddress.from_string(destinationAddress),\r\n    inscription.dataB64,\r\n    inscription.contentType,\r\n    metaData\r\n  );\r\n\r\n  let satOut = new TxOut(BigInt(1), inscriptionScript);\r\n  tx.add_output(satOut);\r\n\r\n  // add change\r\n  const changeaddr = P2PKHAddress.from_string(changeAddress);\r\n  const changeScript = changeaddr.get_locking_script();\r\n  let emptyOut = new TxOut(BigInt(1), changeScript);\r\n  const fee = Math.ceil(\r\n    satPerByteFee * (tx.get_size() + emptyOut.to_bytes().byteLength)\r\n  );\r\n  const change = utxo.satoshis - 1 - fee;\r\n  if (change < 0) throw new Error(\"Inadequate satoshis for fee\");\r\n  if (change > 0) {\r\n    let changeOut = new TxOut(BigInt(change), changeScript);\r\n    tx.add_output(changeOut);\r\n  }\r\n\r\n  // sign tx if idKey is provided\r\n  if (idKey) {\r\n    // input txids are available so sigma signature\r\n    // can be final before signing the tx\r\n    const sigma = new Sigma(tx);\r\n    const { signedTx } = sigma.sign(idKey);\r\n    tx = signedTx;\r\n  }\r\n\r\n  const sig = tx.sign(\r\n    paymentPk,\r\n    SigHash.ALL | SigHash.FORKID,\r\n    0,\r\n    Script.from_asm_string(utxo.script),\r\n    BigInt(utxo.satoshis)\r\n  );\r\n\r\n  utxoIn.set_unlocking_script(\r\n    Script.from_asm_string(\r\n      `${sig.to_hex()} ${paymentPk.to_public_key().to_hex()}`\r\n    )\r\n  );\r\n\r\n  tx.set_input(0, utxoIn);\r\n\r\n  return tx;\r\n};\r\n\r\nconst sendOrdinal = async (\r\n  paymentUtxo: Utxo,\r\n  ordinal: Utxo,\r\n  paymentPk: PrivateKey,\r\n  changeAddress: string,\r\n  satPerByteFee: number,\r\n  ordPk: PrivateKey,\r\n  ordDestinationAddress: string,\r\n  reinscription?: Inscription,\r\n  metaData?: MAP\r\n): Promise<Transaction> => {\r\n  let tx = new Transaction(1, 0);\r\n\r\n  let ordIn = new TxIn(\r\n    Buffer.from(ordinal.txid, \"hex\"),\r\n    ordinal.vout,\r\n    Script.from_asm_string(\"\")\r\n  );\r\n  tx.add_input(ordIn);\r\n\r\n  // Inputs\r\n  let utxoIn = new TxIn(\r\n    Buffer.from(paymentUtxo.txid, \"hex\"),\r\n    paymentUtxo.vout,\r\n    Script.from_asm_string(\"\")\r\n  );\r\n\r\n  tx.add_input(utxoIn);\r\n\r\n  let s: Script;\r\n  const destinationAddress = P2PKHAddress.from_string(ordDestinationAddress);\r\n  if (reinscription?.dataB64 && reinscription?.contentType) {\r\n    s = buildInscription(\r\n      destinationAddress,\r\n      reinscription.dataB64,\r\n      reinscription.contentType,\r\n      metaData\r\n    );\r\n  } else {\r\n    s = destinationAddress.get_locking_script();\r\n  }\r\n  let satOut = new TxOut(BigInt(1), s);\r\n  tx.add_output(satOut);\r\n\r\n  // add change\r\n  const changeaddr = P2PKHAddress.from_string(changeAddress);\r\n  const changeScript = changeaddr.get_locking_script();\r\n  let emptyOut = new TxOut(BigInt(1), changeScript);\r\n  const fee = Math.ceil(\r\n    satPerByteFee * (tx.get_size() + emptyOut.to_bytes().byteLength)\r\n  );\r\n  const change = paymentUtxo.satoshis - fee;\r\n  let changeOut = new TxOut(BigInt(change), changeScript);\r\n\r\n  tx.add_output(changeOut);\r\n\r\n  // sign ordinal\r\n  const sig = tx.sign(\r\n    ordPk,\r\n    SigHash.InputOutput,\r\n    0,\r\n    Script.from_asm_string(ordinal.script),\r\n    BigInt(ordinal.satoshis)\r\n  );\r\n\r\n  ordIn.set_unlocking_script(\r\n    Script.from_asm_string(`${sig.to_hex()} ${ordPk.to_public_key().to_hex()}`)\r\n  );\r\n\r\n  tx.set_input(0, ordIn);\r\n\r\n  // sign fee payment\r\n  const sig2 = tx.sign(\r\n    paymentPk,\r\n    SigHash.InputOutput,\r\n    1,\r\n    Script.from_asm_string(paymentUtxo.script),\r\n    BigInt(paymentUtxo.satoshis)\r\n  );\r\n\r\n  utxoIn.set_unlocking_script(\r\n    Script.from_asm_string(\r\n      `${sig2.to_hex()} ${paymentPk.to_public_key().to_hex()}`\r\n    )\r\n  );\r\n\r\n  tx.set_input(1, utxoIn);\r\n\r\n  return tx;\r\n};\r\n\r\n// sendUtxos sends p2pkh utxos to the given destinationAddress\r\nconst sendUtxos = async (\r\n  utxos: Utxo[],\r\n  paymentPk: PrivateKey,\r\n  address: P2PKHAddress,\r\n  feeSats: number\r\n): Promise<Transaction> => {\r\n  const tx = new Transaction(1, 0);\r\n\r\n  // Outputs\r\n  let inputValue = 0;\r\n  for (let u of utxos || []) {\r\n    inputValue += u.satoshis;\r\n  }\r\n  const satsIn = inputValue;\r\n  const satsOut = satsIn - feeSats;\r\n  console.log({ feeSats, satsIn, satsOut });\r\n  tx.add_output(new TxOut(BigInt(satsOut), address.get_locking_script()));\r\n\r\n  // build txins from our UTXOs\r\n  let idx = 0;\r\n  for (let u of utxos || []) {\r\n    console.log({ u });\r\n    const inx = new TxIn(\r\n      Buffer.from(u.txid, \"hex\"),\r\n      u.vout,\r\n      Script.from_asm_string(\"\")\r\n    );\r\n    console.log({ inx });\r\n    inx.set_satoshis(BigInt(u.satoshis));\r\n    tx.add_input(inx);\r\n\r\n    const sig = tx.sign(\r\n      paymentPk,\r\n      SigHash.InputOutputs,\r\n      idx,\r\n      Script.from_asm_string(u.script),\r\n      BigInt(u.satoshis)\r\n    );\r\n\r\n    inx.set_unlocking_script(\r\n      Script.from_asm_string(\r\n        `${sig.to_hex()} ${paymentPk.to_public_key().to_hex()}`\r\n      )\r\n    );\r\n\r\n    tx.set_input(idx, inx);\r\n    idx++;\r\n  }\r\n  return tx;\r\n};\r\n\r\nexport { buildInscription, createOrdinal, sendOrdinal, sendUtxos };\r\n"],"names":["lookup","revLookup","Arr","Uint8Array","Array","code","i","len","length","charCodeAt","encodeChunk","uint8","start","end","num","output","push","join","buffer","offset","isLE","mLen","nBytes","e","m","eLen","eMax","eBias","nBits","d","s","NaN","Infinity","Math","pow","value","c","rt","abs","isNaN","floor","log","LN2","customInspectSymbol","Symbol","exports","Buffer","SlowBuffer","alloc","INSPECT_MAX_BYTES","K_MAX_LENGTH","createBuffer","RangeError","buf","Object","setPrototypeOf","prototype","arg","encodingOrOffset","TypeError","allocUnsafe","from","string","encoding","isEncoding","byteLength","actual","write","slice","fromString","ArrayBuffer","isView","arrayView","isInstance","copy","fromArrayBuffer","byteOffset","fromArrayLike","fromArrayView","SharedArrayBuffer","valueOf","b","obj","isBuffer","checked","undefined","numberIsNaN","type","isArray","data","fromObject","toPrimitive","assertSize","size","array","toString","mustMatch","arguments","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","this","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","n","bidirectionalIndexOf","val","dir","arrayIndexOf","indexOf","call","lastIndexOf","arr","indexSize","arrLength","valLength","String","read","readUInt16BE","foundIndex","found","j","hexWrite","Number","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","str","byteArray","asciiToBytes","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","tmp","extraBytes","parts","maxChunkLength","len2","base64","min","res","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","decodeCodePointsArray","kMaxLength","TYPED_ARRAY_SUPPORT","proto","foo","typedArraySupport","console","error","defineProperty","enumerable","get","poolSize","fill","allocUnsafeSlow","_isBuffer","compare","a","x","y","concat","list","pos","set","swap16","swap32","swap64","toLocaleString","equals","inspect","max","replace","trim","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","Error","toJSON","_arr","ret","out","hexSliceLookupTable","bytes","checkOffset","ext","checkInt","wrtBigUInt64LE","checkIntBI","BigInt","wrtBigUInt64BE","checkIEEE754","writeFloat","littleEndian","noAssert","ieee754","writeDouble","newBuf","subarray","readUintLE","readUIntLE","mul","readUintBE","readUIntBE","readUint8","readUInt8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUInt32LE","readUint32BE","readUInt32BE","readBigUInt64LE","defineBigIntMethod","validateNumber","first","last","boundsError","readBigUInt64BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readBigInt64LE","readBigInt64BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUintLE","writeUIntLE","writeUintBE","writeUIntBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUInt32LE","writeUint32BE","writeUInt32BE","writeBigUInt64LE","writeBigUInt64BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeBigInt64LE","writeBigInt64BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","errors","E","sym","getMessage","Base","constructor","super","writable","configurable","name","message","addNumericalSeparator","range","ERR_OUT_OF_RANGE","checkBounds","ERR_INVALID_ARG_TYPE","ERR_BUFFER_OUT_OF_BOUNDS","input","msg","received","isInteger","INVALID_BASE64_RE","leadSurrogate","b64","lens","validLen","getLens","placeHoldersLen","_byteLength","curByte","split","base64clean","src","dst","alphabet","table","i16","fn","BufferBigIntNotDefined","toHex","asciiStr","arr1","l","hex","dotenv","config","buildInscription","destinationAddress","b64File","mediaType","metaData","ordHex","fireShardHex","fireShardMediaType","inscriptionAsm","get_locking_script","to_asm_string","app","key","entries","Script","from_asm_string","createOrdinal","async","utxo","paymentPk","changeAddress","satPerByteFee","inscription","idKey","tx","Transaction","utxoIn","TxIn","txid","vout","add_input","inscriptionScript","P2PKHAddress","from_string","dataB64","contentType","satOut","TxOut","add_output","changeScript","emptyOut","fee","ceil","get_size","to_bytes","change","satoshis","changeOut","sigma","Sigma","signedTx","sign","sig","SigHash","ALL","FORKID","script","set_unlocking_script","to_hex","to_public_key","set_input","sendOrdinal","paymentUtxo","ordinal","ordPk","ordDestinationAddress","reinscription","ordIn","InputOutput","sig2","sendUtxos","utxos","address","feeSats","inputValue","u","satsOut","satsIn","idx","inx","set_satoshis","InputOutputs"],"mappings":"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"}