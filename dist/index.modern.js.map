{"version":3,"file":"index.modern.js","sources":["../src/utils/strings.ts","../src/ordP2pkh.ts","../src/constants.ts","../src/utils/utxo.ts","../src/signData.ts","../src/createOrdinals.ts","../src/sendOrdinals.ts","../src/sendUtxos.ts","../src/types.ts","../src/transferOrdinals.ts"],"sourcesContent":["/**\n * Converts a string to its hexadecimal representation\n *\n * @param {string} utf8Str - The string to convert\n * @returns {string} The hexadecimal representation of the input string\n */\nconst toHex = (utf8Str: string): string => {\n  return Buffer.from(utf8Str).toString(\"hex\");\n};\n\nexport { toHex };\n","import {\n\tLockingScript,\n\tP2PKH,\n\ttype Script,\n} from \"@bsv/sdk\";\nimport type { MAP } from \"./types\";\nimport { toHex } from \"./utils/strings\";\nimport { MAP_PREFIX } from \"./constants\";\n\n/**\n * OrdP2PKH (1Sat Ordinal + Pay To Public Key Hash) class implementing ScriptTemplate.\n *\n * This class provides methods to create an Ordinal with Pay To Public Key Hash locking and unlocking scripts. \n * It extends the standard P2PKH script template and provides a custom lock method.\n */\nexport default class OrdP2PKH extends P2PKH {\n\t/**\n\t * Creates a 1Sat Ordinal + P2PKH locking script for a given address string\n\t *\n\t * @param {string} address - An destination address for the Ordinal.\n\t * @param {string} [b64File] - Base64 encoded file data.\n\t * @param {string} [mediaType] - Media type of the file.\n\t * @param {MAP} [metaData] - (optional) MAP Metadata to be included in OP_RETURN.\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\t// unlock method inherits from p2pkh\n\tlock(\n\t\taddress: string,\n\t\tb64File?: string | undefined,\n\t\tmediaType?: string | undefined,\n\t\tmetaData?: MAP | undefined,\n\t): Script {\n\t\tlet ordAsm = \"\";\n\t\t// This can be omitted for reinscriptions that just update metadata\n\t\tif (b64File !== undefined && mediaType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(b64File, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(mediaType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`;\n\t\t}\n\n\t\t// Create ordinal output and inscription in a single output\n\t\tconst lockingScript = new P2PKH().lock(address);\n\t\tlet inscriptionAsm = `${ordAsm ? `${ordAsm} ` : \"\"}${lockingScript.toASM()}`;\n\n\t\t// MAP.app and MAP.type keys are required\n\t\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t\t}\n\n\t\tif (metaData?.app && metaData?.type) {\n\t\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\t\tconst mapCmdValue = toHex(\"SET\");\n\t\t\tinscriptionAsm = `${inscriptionAsm} OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\t\tif (key !== \"cmd\") {\n\t\t\t\t\tinscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\n\t\t\t\t\t\tvalue as string,\n\t\t\t\t\t)}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn LockingScript.fromASM(inscriptionAsm);\n\t}\n}\n","export const MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\nexport const DEFAULT_SAT_PER_KB = 10;","import { type Transaction, type UnlockingScript, fromUtxo, type TransactionInput } from \"@bsv/sdk\";\nimport type { Utxo } from \"../types\";\n\n/**\n * Converts a Utxo object with a base64 encoded script to a Utxo object with a hex encoded script\n * @param {Utxo} utxo - Utxo object with base64 encoded script\n * @param {Object} unlockScriptTemplate - Object with sign and estimateLength functions\n * @returns {TransactionInput} Utxo object with hex encoded script\n */\nexport const inputFromB64Utxo = (\n\tutxo: Utxo,\n\tunlockScriptTemplate: {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>;\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>;\n\t},\n): TransactionInput => {\n\tconst input = fromUtxo(\n\t\t{\n\t\t\t...utxo,\n\t\t\tscript: Buffer.from(utxo.script, \"base64\").toString(\"hex\"),\n\t\t},\n\t\tunlockScriptTemplate,\n\t);\n\tinput.sourceTXID = utxo.txid;\n\treturn input;\n};\n","import type { Transaction } from \"@bsv/sdk\";\nimport { Sigma } from \"sigma-protocol\";\nimport type { LocalSigner, RemoteSigner } from \"./types\";\n\n/**\n * Signs data in the transaction with Sigma protocol\n * @param {Transaction} tx - Transaction to sign\n * @param {LocalSigner | RemoteSigner} signer - Local or remote signer (used for data signature)\n * @returns {Transaction} Transaction with signed data\n */\nexport const signData = async (\n\ttx: Transaction,\n\tsigner: LocalSigner | RemoteSigner,\n): Promise<Transaction> => {\n\t// Sign tx if idKey or remote signer like starfish/tokenpass\n\tconst idKey = (signer as LocalSigner)?.idKey;\n\tconst keyHost = (signer as RemoteSigner)?.keyHost;\n\n\tif (idKey) {\n\t\tconst sigma = new Sigma(tx);\n\t\tconst { signedTx } = sigma.sign(idKey);\n\t\treturn signedTx;\n\t}\n\tif (keyHost) {\n\t\tconst authToken = (signer as RemoteSigner)?.authToken;\n\t\tconst sigma = new Sigma(tx);\n\t\ttry {\n\t\t\tconst { signedTx } = await sigma.remoteSign(keyHost, authToken);\n\t\t\treturn signedTx;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthrow new Error(`Remote signing to ${keyHost} failed`);\n\t\t}\n\t}\n\tthrow new Error(\"Signer must be a LocalSigner or RemoteSigner\");\n};\n","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n} from \"@bsv/sdk\";\nimport OrdP2PKH from \"./ordP2pkh\";\nimport type {\n\tUtxo,\n\tDestination,\n\tMAP,\n\tLocalSigner,\n\tRemoteSigner,\n\tPayment,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { signData } from \"./signData\";\n\n/**\n * Creates a transaction with inscription outputs\n * @param {Utxo[]} utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Destination[]} destinations - Array of destinations with addresses and inscriptions\n * @param {PrivateKey} paymentPk - Private key to sign utxos\n * @param {string} changeAddress - (optional) Address to send change to. If not provided, defaults to paymentPk address\n * @param {number} satsPerKb - Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {MAP} metaData - MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} signer - Local or remote signer (used for data signature)\n * @param {Payment[]} additionalPayments - Additional payments to include in the transaction\n * @returns {Promise<Transaction>} Transaction with inscription outputs\n */\nexport const createOrdinals = async (\n\tutxos: Utxo[],\n\tdestinations: Destination[],\n\tpaymentPk: PrivateKey,\n\tchangeAddress?: string,\n\tsatsPerKb: number = DEFAULT_SAT_PER_KB,\n\tmetaData?: MAP,\n\tsigner?: LocalSigner | RemoteSigner,\n\tadditionalPayments: Payment[] = [],\n): Promise<Transaction> => {\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Inputs\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\t}\n\n\t// Warn if creating many inscriptions at once\n\tif (destinations.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Outputs\n\t// Add inscription outputs\n\tfor (const destination of destinations) {\n\t\tif (!destination.inscription) {\n\t\t\tthrow new Error(\"Inscription is required for all destinations\");\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription.dataB64,\n\t\t\t\tdestination.inscription.contentType,\n\t\t\t\tmetaData,\n\t\t\t),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Add change output\n\ttx.addOutput({\n\t\tlockingScript: new P2PKH().lock(changeAddress || paymentPk.toAddress().toString()),\n\t\tchange: true,\n\t});\n\n\tif (signer) {\n\t\ttx = await signData(tx, signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\treturn tx;\n};\n","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype Script,\n\ttype TransactionOutput,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./ordP2pkh\";\nimport type {\n\tUtxo,\n\tDestination,\n\tMAP,\n\tPayment,\n\tLocalSigner,\n\tRemoteSigner,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\n\n/**\n * Sends ordinals to the given destinations\n * @param {Utxo[]} paymentUtxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} ordinals - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} ordPk - Private key to sign ordinals\n * @param {Destination[]} destinations - Array of destinations with addresses and inscriptions\n * @param {string} changeAddress - (optional) Address to send change to, if any. If not provided, defaults to paymentPk address\n * @param {number} satsPerKb - (optional) Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {MAP} metaData - (optional) MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {Payment[]} additionalPayments -(optional)  Additional payments to include in the transaction\n * @param {boolean} enforceUniformSend - (optional) Enforce that the number of destinations matches the number of ordinals being sent. Sending ordinals requires a 1:1 mapping of destinations to ordinals. Default is true. This is only used for sub-protocols like BSV21 that manage tokens without sending the inscriptions directly.\n * @returns {Promise<Transaction>} Transaction with inscription outputs\n */\nexport const sendOrdinals = async (\n\tpaymentUtxos: Utxo[],\n\tordinals: Utxo[],\n\tpaymentPk: PrivateKey,\n\tordPk: PrivateKey,\n\tdestinations: Destination[],\n\tchangeAddress?: string,\n\tsatsPerKb: number = DEFAULT_SAT_PER_KB,\n\tmetaData?: MAP,\n\tsigner?: LocalSigner | RemoteSigner,\n\tadditionalPayments: Payment[] = [],\n\tenforceUniformSend = true,\n): Promise<Transaction> => {\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(ordUtxo, new OrdP2PKH().unlock(ordPk));\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// check that ordinals coming in matches ordinals going out if supplied\n\tif (enforceUniformSend && destinations.length !== ordinals.length) {\n\t\tthrow new Error(\n\t\t\t\"Number of destinations must match number of ordinals being sent\",\n\t\t);\n\t}\n\n\t// Add ordinal outputs\n\tfor (const destination of destinations) {\n\t\tlet s: Script;\n\t\tif (\n\t\t\tdestination.inscription?.dataB64 &&\n\t\t\tdestination.inscription?.contentType\n\t\t) {\n\t\t\ts = new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription.dataB64,\n\t\t\t\tdestination.inscription.contentType,\n\t\t\t\tmetaData,\n\t\t\t);\n\t\t} else {\n\t\t\ts = new P2PKH().lock(destination.address);\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: s,\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\tconsole.log(\"Additional payment\", p);\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Add payment inputs\n\tfor (const paymentUtxo of paymentUtxos) {\n\t\tconst input = inputFromB64Utxo(paymentUtxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\t}\n\n\t// Add change output\n\tconst changeScript = new P2PKH().lock(\n\t\tchangeAddress || paymentPk.toAddress().toString(),\n\t);\n\tconst changeOut: TransactionOutput = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\n\ttx.addOutput(changeOut);\n\tif (signer) {\n\t\ttx = await signData(tx, signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\treturn tx;\n};\n","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype TransactionOutput,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type { Distribution, Payment, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Sends utxos to the given destination\n * @param {Utxo[]} utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} paymentPk - Private key to sign utxos\n * @param {Payment[]} payments - Array of payments with addresses and amounts\n * @param {number} satsPerKb - Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @returns {Promise<Transaction>} Transaction with utxo outputs\n */\nexport const sendUtxos = async (\n\tutxos: Utxo[],\n\tpaymentPk: PrivateKey,\n\tpayments: Payment[],\n\tsatsPerKb: number = DEFAULT_SAT_PER_KB,\n): Promise<Transaction> => {\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\t// Outputs\n\tfor (const payment of payments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new P2PKH().lock(payment.to),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + (out.satoshis || 0),\n\t\t0,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + fee) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + fee) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to deploy token. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tif (totalSatsIn > totalSatsOut + fee) {\n\t\t// Change\n\t\tconst changeAddress = paymentPk.toAddress().toString();\n\t\tconst changeScript = new P2PKH().lock(changeAddress);\n\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\n\t\ttx.addOutput(changeOut);\n\t} else if (totalSatsIn < totalSatsOut + fee) {\n\t\tconsole.log(\"No change needed\");\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\treturn tx;\n};\n","import type { PrivateKey } from \"@bsv/sdk\";\nimport type { AuthToken } from \"sigma-protocol\";\n\n// biome-ignore lint/complexity/noBannedTypes: Reserved for future use\ntype Signer = {};\n\nexport interface LocalSigner extends Signer {\n\tidKey: PrivateKey;\n}\n\nexport interface RemoteSigner extends Signer {\n\tkeyHost: string;\n\tauthToken?: AuthToken;\n}\n\nexport type Destination = {\n\taddress: string;\n\tinscription?: Inscription;\n};\n\n/**\n * @typedef {Object} Distribution\n * @property {string} address - Destination address. Must be a Ordinals address (BSV address for recieving 1Sat ordinals tokens).\n * @property {string} amt - Number of tokens as a string, considering decimals. Not display format. Ex. 100000000 for 1 token with 8 decimal places.\n */\nexport type Distribution = {\n\taddress: string;\n\tamt: string;\n};\n\n/**\n * @typedef {Object} Utxo\n * @property {number} satoshis - Amount in satoshis\n * @property {string} txid - Transaction id\n * @property {number} vout - Output index\n * @property {string} script - Base64 encoded locking script\n */\nexport type Utxo = {\n\tsatoshis: number;\n\ttxid: string;\n\tvout: number;\n\tscript: string;\n};\n\n/**\n * @typedef {Object} TokenUtxo\n * @property {string} amt - Number of tokens as a string\n * @property {string} id - Token id -  either tick or id depending on protocol\n * @property {string} satoshis - Always 1\n */\nexport interface TokenUtxo extends Utxo {\n\tamt: string;\n\tid: string;\n\tsatoshis: 1;\n}\n\nexport type Inscription = {\n\tdataB64: string;\n\tcontentType: string;\n};\n\nexport type ImageContentType =\n\t| \"image/png\"\n\t| \"image/jpeg\"\n\t| \"image/gif\"\n\t| \"image/svg+xml\"\n\t| \"image/webp\";\n\n/**\n * @typedef {Object} IconInscription\n * @property {string} dataB64 - Base64 encoded image data. Must be a square image.\n * @property {ImageContentType} contentType - Media type of the image\n */\nexport type IconInscription = {\n\tdataB64: string;\n\tcontentType: ImageContentType;\n};\n\nexport type MAP = {\n\tapp: string;\n\ttype: string;\n\t[prop: string]: string;\n};\n\nexport type Payment = {\n\tto: string;\n\tamount: number;\n};\n\nexport type TokenInscription = {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\" | \"mint\" | \"deploy+mint\";\n};\n\nexport interface MintTokenInscription extends TokenInscription {\n\top: \"mint\";\n}\n\nexport interface DeployMintTokenInscription extends TokenInscription {\n\top: \"deploy+mint\";\n\tsym: string;\n\ticon: string;\n}\n\nexport interface TransferTokenInscription extends TokenInscription {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\";\n}\n\nexport interface TransferBSV20Inscription extends TransferTokenInscription {\n\ttick: string;\n}\n\nexport interface TransferBSV21Inscription extends TransferTokenInscription {\n\tid: string;\n}\n\nexport enum TokenType {\n\tBSV20 = \"bsv20\",\n\tBSV21 = \"bsv21\",\n}\n","import type {\n\tPrivateKey,\n\tTransaction,\n} from \"@bsv/sdk\";\nimport {\n\ttype Destination,\n\ttype Distribution,\n\ttype LocalSigner,\n\ttype MAP,\n\ttype Payment,\n\ttype RemoteSigner,\n\tTokenType,\n\ttype TokenUtxo,\n\ttype TransferBSV20Inscription,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n  type TransferBSV21Inscription,\n} from \"./types\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { sendOrdinals } from \"./sendOrdinals\";\n\n/**\n * Transfer tokens to a destination\n * @param {TokenType} protocol - Token protocol. Must be TokenType.BSV20 or TokenType.BSV21\n * @param {string} tokenID - Token ID. Either the tick or id value depending on the protocol\n * @param {Utxo[]} utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {TokenUtxo[]} inputTokens - Token utxos to spend\n * @param {Distribution[]} distributions - Array of destinations with addresses and amounts\n * @param {PrivateKey} paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} ordPk - Private key to sign ordinals\n * @param {string} changeAddress - Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {string} tokenChangeAddress - Address to send token change to, if any. If not provided, defaults to ordPk address\n * @param {number} satsPerKb - (optional) Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {MAP} metaData - (optional) MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} signer - (optional) Signer object to sign the transaction\n * @param {Payment[]} additionalPayments - (optional) Additional payments to include in the transaction\n * @returns {Promise<Transaction>} Transaction with token transfer outputs\n */\nexport const transferOrdTokens = async (\n\tprotocol: TokenType,\n\ttokenID: string, // either tick or id depending on protocol\n\tutxos: Utxo[],\n\tinputTokens: TokenUtxo[],\n\tdistributions: Distribution[],\n\tpaymentPk: PrivateKey,\n  ordPk: PrivateKey,\n\tchangeAddress?: string,\n  tokenChangeAddress?: string,\n\tsatsPerKb: number = DEFAULT_SAT_PER_KB,\n\tmetaData?: MAP,\n\tsigner?: LocalSigner | RemoteSigner,\n\tadditionalPayments: Payment[] = [],\n): Promise<Transaction> => {\n\t// calculate change amount\n\tlet changeAmt = 0n;\n\tlet totalAmtIn = 0n;\n\tlet totalAmtOut = 0n;\n\n  // Ensure these inputs are for the expected token\n\tif(!inputTokens.every(\n\t\t(token) => token.id === tokenID,\n\t)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n\tfor (const token of inputTokens) {\n\t\ttotalAmtIn += BigInt(token.amt);\n\t}\n\n\tfor (const dest of distributions) {\n\t\ttotalAmtOut += BigInt(dest.amt);\n\t}\n\n\t// check that you have enough tokens to send\n\tif (totalAmtIn < totalAmtOut) {\n\t\tthrow new Error(\"Not enough tokens to send\");\n\t}\n\n\tchangeAmt = totalAmtIn - totalAmtOut;\n\n\t// add change to destinations\n\tif (changeAmt > 0n) {\n\t\tconst changeDistribution = {\n\t\t\taddress: tokenChangeAddress || ordPk.toAddress().toString(),\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t\tdistributions.push(changeDistribution);\n\t}\n\n\t// build destination inscriptions\n\tconst destinations: Destination[] = distributions.map((dest) => {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: \"transfer\",\n\t\t\tamt: dest.amt,\n\t\t}\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n\t\treturn {\n\t\t\taddress: dest.address,\n\t\t\tinscription: {\n\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\t\tcontentType: \"application/bsv-20\",\n\t\t\t},\n\t\t};\n\t});\n\n\t// chaeck that\n\tconst tx = await sendOrdinals(\n\t\tutxos,\n\t\tinputTokens,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tdestinations,\n\t\tchangeAddress || paymentPk.toAddress().toString(),\n\t\tsatsPerKb,\n\t\tmetaData,\n    signer,\n\t\tadditionalPayments,\n\t\tfalse\n\t);\n\t\n\treturn tx;\n};\n"],"names":["toHex","utf8Str","Buffer","from","toString","OrdP2PKH","P2PKH","lock","address","b64File","mediaType","metaData","ordAsm","undefined","ordHex","fileHex","trim","Error","fileMediaType","inscriptionAsm","toASM","app","type","key","value","Object","entries","LockingScript","fromASM","inputFromB64Utxo","utxo","unlockScriptTemplate","input","fromUtxo","_extends","script","sourceTXID","txid","signData","async","tx","signer","idKey","keyHost","sigma","Sigma","signedTx","sign","authToken","remoteSign","e","console","log","createOrdinals","utxos","destinations","paymentPk","changeAddress","satsPerKb","additionalPayments","modelOrFee","SatoshisPerKilobyte","Transaction","unlock","addInput","length","warn","destination","inscription","addOutput","satoshis","lockingScript","dataB64","contentType","p","amount","to","toAddress","change","fee","sendOrdinals","paymentUtxos","ordinals","ordPk","enforceUniformSend","ordUtxo","_destination$inscript","_destination$inscript2","s","paymentUtxo","changeScript","sendUtxos","payments","payment","sendTxOut","totalSatsIn","totalSatsOut","outputs","reduce","total","out","BigInt","computeFee","TokenType","transferOrdTokens","protocol","tokenID","inputTokens","distributions","tokenChangeAddress","changeAmt","totalAmtIn","totalAmtOut","every","token","id","amt","dest","changeDistribution","push","map","transferInscription","op","BSV20","tick","BSV21","JSON","stringify"],"mappings":"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"}