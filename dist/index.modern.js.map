{"version":3,"file":"index.modern.js","sources":["../src/utils/strings.ts","../src/ordP2pkh.ts","../src/index.ts"],"sourcesContent":["const toHex = (asciiStr: string) => {\n  const arr1: string[] = [];\n  for (let n = 0, l = asciiStr.length; n < l; n++) {\n    const hex = Number(asciiStr.charCodeAt(n)).toString(16);\n    arr1.push(hex);\n  }\n  return arr1.join(\"\");\n};\n\nconst toAscii = (hexStr: string) => {\n  let hex: string;\n  let i: number;\n\n  let result = \"\";\n  for (i = 0; i < hexStr.length; i++) {\n    hex = hexStr.charCodeAt(i).toString(16);\n    result += (`000${hex}`).slice(-4);\n  }\n\n  return result;\n};\n\nexport { toHex, toAscii };\n","import {\n\tLockingScript,\n\tOP,\n\tP2PKH,\n\tPrivateKey,\n\ttype Script,\n\tTransaction,\n\tTransactionSignature,\n\tUnlockingScript,\n\ttype ScriptTemplate,\n} from \"@bsv/sdk\";\nimport { fromBase58Check } from \"@bsv/sdk/dist/types/src/primitives/utils\";\nimport type { MAP } from \".\";\nimport { toHex } from \"./utils/strings\";\n\nconst MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\n\n/**\n * OrdP2PKH (1Sat Ordinal + Pay To Public Key Hash) class implementing ScriptTemplate.\n *\n * This class provides methods to create an Ordinal with Pay To Public Key Hash locking and unlocking scripts, including the unlocking of P2PKH UTXOs with the private key.\n */\nexport default class OrdP2PKH extends P2PKH {\n\t/**\n\t * Creates a P2PKH locking script for a given public key hash or address string\n\t *\n\t * @param {number[] | string} pubkeyhash or address - An array or address representing the public key hash.\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\t// unlock method inherits from p2pkh\n\tlock(\n\t\tdestinationAddress: string,\n\t\tb64File?: string | undefined,\n\t\tmediaType?: string | undefined,\n\t\tmetaData?: MAP | undefined,\n\t): Script {\n\t\tlet ordAsm = \"\";\n\t\t// This can be omitted for reinscriptions that just update metadata\n\t\tif (b64File !== undefined && mediaType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(b64File, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tconst fileMediaType = toHex(mediaType);\n\t\t\tordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex ? `${fileHex} ` : \"\"}OP_ENDIF`;\n\t\t}\n\n\t\t// Create ordinal output and inscription in a single output\n\t\tconst lockingScript = new P2PKH().lock(destinationAddress);\n\t\tlet inscriptionAsm = `${ordAsm ? `${ordAsm} ` : \"\"}${lockingScript.toASM()}`;\n\n\t\t// MAP.app and MAP.type keys are required\n\t\tif (metaData?.app && metaData?.type) {\n\t\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\t\tconst mapCmdValue = toHex(\"SET\");\n\t\t\tinscriptionAsm = `${inscriptionAsm} OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\t\tif (key !== \"cmd\") {\n\t\t\t\t\tinscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\n\t\t\t\t\t\tvalue as string,\n\t\t\t\t\t)}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn LockingScript.fromASM(inscriptionAsm);\n\t}\n}\n","import {\n\ttype PrivateKey,\n\ttype Script,\n\tTransaction,\n\tUnlockingScript,\n\tP2PKH,\n\tLockingScript,\n\tSatoshisPerKilobyte,\n} from \"@bsv/sdk\";\nimport type { TransactionInput, TransactionOutput } from \"@bsv/sdk\";\nimport { type AuthToken, Sigma } from \"sigma-protocol\";\nimport type FeeModel from \"@bsv/sdk/dist/types/src/transaction/FeeModel\";\nimport OrdP2PKH from \"./ordP2pkh\";\n\n// biome-ignore lint/complexity/noBannedTypes: Reserved for future use\ntype Signer = {};\n\nexport interface LocalSigner extends Signer {\n\tidKey: PrivateKey;\n}\n\nexport interface RemoteSigner extends Signer {\n\tkeyHost: string;\n\tauthToken?: AuthToken;\n}\n\nexport type Utxo = {\n  rawTxHex: string;\n  vout: number;\n};\n\nexport type Inscription = {\n\tdataB64: string;\n\tcontentType: string;\n};\n\nexport type MAP = {\n\tapp: string;\n\ttype: string;\n\t[prop: string]: string | string[];\n};\n\nexport const buildReinscriptionTemplate = async (\n\tordinal: Utxo,\n\tdestinationAddress: string,\n\treinscription?: Inscription,\n\tmetaData?: MAP,\n): Promise<Transaction> => {\n\t// Inputs\n\tconst txIn: TransactionInput = {\n\t\tsourceTransaction: Transaction.fromHex(ordinal.rawTxHex),\n\t\tsourceOutputIndex: ordinal.vout,\n\t\tsequence: 0,\n\t};\n\n\t// Outputs\n\tconst inscriptionScript = new OrdP2PKH().lock(\n\t\tdestinationAddress,\n\t\treinscription?.dataB64,\n\t\treinscription?.contentType,\n\t\tmetaData,\n\t);\n\n\tconst txOut: TransactionOutput = {\n\t\tsatoshis: 1,\n\t\tlockingScript: inscriptionScript,\n\t};\n\n\treturn new Transaction(1, [txIn], [txOut], 0);\n};\n\nexport type Payment = {\n\tto: string;\n\tamount: number;\n};\n\nconst createOrdinal = async (\n\tutxos: Utxo[],\n\tdestinationAddress: string,\n\tpaymentPk: PrivateKey,\n\tchangeAddress: string,\n\tinscriptions: Inscription[],\n\tsatsPerKb?: number,\n\tmetaData?: MAP,\n\tsigner?: LocalSigner | RemoteSigner,\n\tadditionalPayments: Payment[] = [],\n): Promise<Transaction> => {\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb || 10);\n\t// Inputs\n\tconst txIns: TransactionInput[] = utxos.map(utxo => {\n\t\t\tconst sourceTx = Transaction.fromHex(utxo.rawTxHex);\n\t\t\treturn {\n\t\t\t\t\tsourceTransaction: sourceTx,\n\t\t\t\t\tsourceOutputIndex: utxo.vout,\n\t\t\t\t\tunlockingScriptTemplate: new P2PKH().unlock(paymentPk),\n\t\t\t\t\tsequence: 0xffffffff,\n\t\t\t};\n\t});\n\n\t// Warn if creating many inscriptions at once\n\tif (inscriptions.length > 100) {\n\t\t\tconsole.warn(\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\");\n\t}\n\n\t// Outputs\n\tconst txOuts: TransactionOutput[] = [];\n\n\t// Add inscription outputs\n\tfor (const inscription of inscriptions) {\n\t\t\tconst inscriptionScript = new OrdP2PKH().lock(\n\t\t\t\t\tdestinationAddress,\n\t\t\t\t\tinscription.dataB64,\n\t\t\t\t\tinscription.contentType,\n\t\t\t\t\tmetaData,\n\t\t\t);\n\n\t\t\ttxOuts.push({\n\t\t\t\t\tsatoshis: 1,\n\t\t\t\t\tlockingScript: inscriptionScript,\n\t\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\t\ttxOuts.push({\n\t\t\t\t\tsatoshis: p.amount,\n\t\t\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t\t} as TransactionOutput);\n\t}\n\n\t// Add change output\n\tconst changeScript = new P2PKH().lock(changeAddress);\n\ttxOuts.push({\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t} as TransactionOutput);\n\n\tlet tx = new Transaction(1, txIns, txOuts, 0);\n\n\t// Sign tx if idKey or remote signer like starfish/tokenpass\n\tconst idKey = (signer as LocalSigner)?.idKey;\n\tconst keyHost = (signer as RemoteSigner)?.keyHost;\n\n\tif (idKey) {\n\t\t\tconst sigma = new Sigma(tx);\n\t\t\tconst { signedTx } = sigma.sign(idKey);\n\t\t\ttx = signedTx;\n\t} else if (keyHost) {\n\t\t\tconst authToken = (signer as RemoteSigner)?.authToken;\n\t\t\tconst sigma = new Sigma(tx);\n\t\t\ttry {\n\t\t\t\t\tconst { signedTx } = await sigma.remoteSign(keyHost, authToken);\n\t\t\t\t\ttx = signedTx;\n\t\t\t} catch (e) {\n\t\t\t\t\tconsole.log(e);\n\t\t\t\t\tthrow new Error(`Remote signing to ${keyHost} failed`);\n\t\t\t}\n\t}\n\n\tawait tx.fee(modelOrFee);\n\tawait tx.sign();\n\n\treturn tx;\n};\n\nconst transferOrdinal = async (\n\tpaymentUtxos: Utxo[],\n\tordinals: Utxo[],\n\tpaymentPk: PrivateKey,\n\tchangeAddress: string,\n\tordPk: PrivateKey,\n\tordDestinationAddress: string,\n\tsatsPerKb: number,\n\treinscription?: Inscription,\n\tmetaData?: MAP,\n\tadditionalPayments: Payment[] = [],\n): Promise<Transaction> => {\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb || 10);\n\n\t// Inputs\n\tconst txIns: TransactionInput[] = [];\n\n\t// Add ordinal inputs\n\tfor (const ordinal of ordinals) {\n\t\t\tconst ordinalTx = Transaction.fromHex(ordinal.rawTxHex);\n\t\t\tconst ordIn: TransactionInput = {\n\t\t\t\t\tsourceTransaction: ordinalTx,\n\t\t\t\t\tsourceOutputIndex: ordinal.vout,\n\t\t\t\t\tunlockingScriptTemplate: new OrdP2PKH().unlock(\n\t\t\t\t\t\t\tordPk,\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\tLockingScript.fromASM(ordinalTx.outputs[ordinal.vout].lockingScript.toASM())\n\t\t\t\t\t),\n\t\t\t\t\tsequence: 0xffffffff,\n\t\t\t};\n\t\t\ttxIns.push(ordIn);\n\t}\n\n\t// Add payment inputs\n\tfor (const paymentUtxo of paymentUtxos) {\n\t\t\tconst paymentTx = Transaction.fromHex(paymentUtxo.rawTxHex);\n\t\t\tconst utxoIn: TransactionInput = {\n\t\t\t\t\tsourceTransaction: paymentTx,\n\t\t\t\t\tsourceOutputIndex: paymentUtxo.vout,\n\t\t\t\t\tunlockingScriptTemplate: new P2PKH().unlock(paymentPk),\n\t\t\t\t\tsequence: 0xffffffff,\n\t\t\t};\n\t\t\ttxIns.push(utxoIn);\n\t}\n\n\t// Outputs\n\tconst txOuts: TransactionOutput[] = [];\n\n\t// Add ordinal outputs\n\tfor (const ordinal of ordinals) {\n\t\t\tlet s: Script;\n\t\t\tif (reinscription?.dataB64 && reinscription?.contentType) {\n\t\t\t\t\ts = new OrdP2PKH().lock(\n\t\t\t\t\t\t\tordDestinationAddress,\n\t\t\t\t\t\t\treinscription.dataB64,\n\t\t\t\t\t\t\treinscription.contentType,\n\t\t\t\t\t\t\tmetaData,\n\t\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t\ts = new P2PKH().lock(ordDestinationAddress);\n\t\t\t}\n\n\t\t\ttxOuts.push({\n\t\t\t\t\tsatoshis: 1,\n\t\t\t\t\tlockingScript: s,\n\t\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\t\ttxOuts.push({\n\t\t\t\t\tsatoshis: p.amount,\n\t\t\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t\t});\n\t}\n\n\t// Add change output\n\tconst changeScript = new P2PKH().lock(changeAddress);\n\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t};\n\ttxOuts.push(changeOut);\n\n\tconst tx = new Transaction(1, txIns, txOuts, 0);\n\n\tawait tx.fee(modelOrFee);\n\tawait tx.sign();\n\n\treturn tx;\n};\n\n// sendUtxos sends p2pkh utxos to the given destinationAddress\nconst sendUtxos = async (\n  utxos: Utxo[],\n  paymentPk: PrivateKey,\n  destinationAddress: string,\n  satsPerKb: number,\n\tamount: number,\n): Promise<Transaction> => {\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb || 10);\n\n  // Inputs\n  const txIns: TransactionInput[] = utxos.map(utxo => {\n      const sourceTx = Transaction.fromHex(utxo.rawTxHex);\n      \n      return {\n          sourceTransaction: sourceTx,\n          sourceOutputIndex: utxo.vout,\n          unlockingScriptTemplate: new P2PKH().unlock(paymentPk),\n          sequence: 0xffffffff,\n      };\n  });\n\n  // Outputs\n\tconst txOuts: TransactionOutput[] = [];\n\n  const sendTxOut: TransactionOutput = {\n      satoshis: amount,\n      lockingScript: new P2PKH().lock(destinationAddress),\n  };\n\n\ttxOuts.push(sendTxOut);\n\n\t// Change\n\tconst changeAddress = paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(changeAddress);\n\n\tconst changeOut: TransactionOutput = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\n\ttxOuts.push(changeOut);\n\n  // Create transaction\n  const tx = new Transaction(1, txIns, txOuts, 0);\n\n  // Calculate fee\n  await tx.fee(modelOrFee);\n\n  // Sign the transaction\n  await tx.sign();\n\n  return tx;\n};\n\nexport { createOrdinal, transferOrdinal, sendUtxos };\n"],"names":["toHex","asciiStr","arr1","n","l","length","hex","Number","charCodeAt","toString","push","join","OrdP2PKH","P2PKH","lock","destinationAddress","b64File","mediaType","metaData","ordAsm","undefined","ordHex","fileHex","Buffer","from","trim","inscriptionAsm","toASM","app","type","key","value","Object","entries","LockingScript","fromASM","buildReinscriptionTemplate","async","ordinal","reinscription","txIn","sourceTransaction","Transaction","fromHex","rawTxHex","sourceOutputIndex","vout","sequence","inscriptionScript","dataB64","contentType","satoshis","lockingScript","createOrdinal","utxos","paymentPk","changeAddress","inscriptions","satsPerKb","signer","additionalPayments","modelOrFee","SatoshisPerKilobyte","txIns","map","utxo","unlockingScriptTemplate","unlock","console","warn","txOuts","inscription","p","amount","to","changeScript","change","tx","idKey","keyHost","sigma","Sigma","signedTx","sign","authToken","remoteSign","e","log","Error","fee","transferOrdinal","paymentUtxos","ordinals","ordPk","ordDestinationAddress","ordinalTx","ordIn","outputs","paymentUtxo","utxoIn","s","sendUtxos","sendTxOut","toAddress"],"mappings":"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"}