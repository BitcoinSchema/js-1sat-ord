{"version":3,"file":"index.modern.js","sources":["../src/utils/strings.ts","../src/ordP2pkh.ts","../src/index.ts"],"sourcesContent":["const toHex = (asciiStr: string) => {\n  const arr1: string[] = [];\n  for (let n = 0, l = asciiStr.length; n < l; n++) {\n    const hex = Number(asciiStr.charCodeAt(n)).toString(16);\n    arr1.push(hex);\n  }\n  return arr1.join(\"\");\n};\n\nconst toAscii = (hexStr: string) => {\n  let hex: string;\n  let i: number;\n\n  let result = \"\";\n  for (i = 0; i < hexStr.length; i++) {\n    hex = hexStr.charCodeAt(i).toString(16);\n    result += (`000${hex}`).slice(-4);\n  }\n\n  return result;\n};\n\nexport { toHex, toAscii };\n","import {\n\tLockingScript,\n\tOP,\n\tP2PKH,\n\tPrivateKey,\n\ttype Script,\n\tTransaction,\n\tTransactionSignature,\n\tUnlockingScript,\n\ttype ScriptTemplate,\n} from \"@bsv/sdk\";\nimport { fromBase58Check } from \"@bsv/sdk/dist/types/src/primitives/utils\";\nimport type { MAP } from \".\";\nimport { toHex } from \"./utils/strings\";\n\nconst MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\n\n/**\n * OrdP2PKH (1Sat Ordinal + Pay To Public Key Hash) class implementing ScriptTemplate.\n *\n * This class provides methods to create an Ordinal with Pay To Public Key Hash locking and unlocking scripts, including the unlocking of P2PKH UTXOs with the private key.\n */\nexport default class OrdP2PKH extends P2PKH {\n\t/**\n\t * Creates a P2PKH locking script for a given public key hash or address string\n\t *\n\t * @param {number[] | string} pubkeyhash or address - An array or address representing the public key hash.\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\t// unlock method inherits from p2pkh\n\tlock(\n\t\tdestinationAddress: string,\n\t\tb64File?: string | undefined,\n\t\tmediaType?: string | undefined,\n\t\tmetaData?: MAP | undefined,\n\t): Script {\n\t\tlet ordAsm = \"\";\n\t\t// This can be omitted for reinscriptions that just update metadata\n\t\tif (b64File !== undefined && mediaType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(b64File, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tconst fileMediaType = toHex(mediaType);\n\t\t\tordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex ? `${fileHex} ` : \"\"}OP_ENDIF`;\n\t\t}\n\n\t\t// Create ordinal output and inscription in a single output\n\t\tconst lockingScript = new P2PKH().lock(destinationAddress);\n\t\tlet inscriptionAsm = `${ordAsm ? `${ordAsm} ` : \"\"}${lockingScript.toASM()}`;\n\n\t\t// MAP.app and MAP.type keys are required\n\t\tif (metaData?.app && metaData?.type) {\n\t\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\t\tconst mapCmdValue = toHex(\"SET\");\n\t\t\tinscriptionAsm = `${inscriptionAsm} OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\t\tif (key !== \"cmd\") {\n\t\t\t\t\tinscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\n\t\t\t\t\t\tvalue as string,\n\t\t\t\t\t)}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn LockingScript.fromASM(inscriptionAsm);\n\t}\n}\n","import {\n\ttype PrivateKey,\n\ttype Script,\n\tTransaction,\n\ttype UnlockingScript,\n\tP2PKH,\n\tSatoshisPerKilobyte,\n\tfromUtxo,\n\ttype TransactionOutput,\n} from \"@bsv/sdk\";\nimport { type AuthToken, Sigma } from \"sigma-protocol\";\nimport OrdP2PKH from \"./ordP2pkh\";\n\n// biome-ignore lint/complexity/noBannedTypes: Reserved for future use\ntype Signer = {};\n\nexport interface LocalSigner extends Signer {\n\tidKey: PrivateKey;\n}\n\nexport interface RemoteSigner extends Signer {\n\tkeyHost: string;\n\tauthToken?: AuthToken;\n}\n\nexport type Destination = {\n\taddress: string;\n\tinscription?: Inscription;\n};\n\n/**\n * @typedef {Object} Utxo\n * @property {number} satoshis - Amount in satoshis\n * @property {string} txid - Transaction id\n * @property {number} vout - Output index\n * @property {string} script - Base64 encoded locking script\n */\nexport type Utxo = {\n\tsatoshis: number;\n\ttxid: string;\n\tvout: number;\n\tscript: string;\n};\n\nexport type Inscription = {\n\tdataB64: string;\n\tcontentType: string;\n};\n\nexport type MAP = {\n\tapp: string;\n\ttype: string;\n\t[prop: string]: string | string[];\n};\n\nexport type Payment = {\n\tto: string;\n\tamount: number;\n};\n\nconst createOrdinals = async (\n\tutxos: Utxo[],\n\tdestinations: Destination[],\n\tpaymentPk: PrivateKey,\n\tchangeAddress: string,\n\tsatsPerKb?: number,\n\tmetaData?: MAP,\n\tsigner?: LocalSigner | RemoteSigner,\n\tadditionalPayments: Payment[] = [],\n): Promise<Transaction> => {\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb || 10);\n\tlet tx = new Transaction();\n\n\t// Inputs\n\tfor (const utxo of utxos) {\n\t\tconst input = fromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\t}\n\n\t// Warn if creating many inscriptions at once\n\tif (destinations.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Outputs\n\t// Add inscription outputs\n\tfor (const destination of destinations) {\n\t\tif (!destination.inscription) {\n\t\t\tthrow new Error(\"Inscription is required for all destinations\");\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription.dataB64,\n\t\t\t\tdestination.inscription.contentType,\n\t\t\t\tmetaData,\n\t\t\t),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Add change output\n\ttx.addOutput({\n\t\tlockingScript: new P2PKH().lock(changeAddress),\n\t\tchange: true,\n\t});\n\n\t// Sign tx if idKey or remote signer like starfish/tokenpass\n\tconst idKey = (signer as LocalSigner)?.idKey;\n\tconst keyHost = (signer as RemoteSigner)?.keyHost;\n\n\tif (idKey) {\n\t\tconst sigma = new Sigma(tx);\n\t\tconst { signedTx } = sigma.sign(idKey);\n\t\ttx = signedTx;\n\t} else if (keyHost) {\n\t\tconst authToken = (signer as RemoteSigner)?.authToken;\n\t\tconst sigma = new Sigma(tx);\n\t\ttry {\n\t\t\tconst { signedTx } = await sigma.remoteSign(keyHost, authToken);\n\t\t\ttx = signedTx;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthrow new Error(`Remote signing to ${keyHost} failed`);\n\t\t}\n\t}\n\n\tawait tx.fee(modelOrFee);\n\tawait tx.sign();\n\n\treturn tx;\n};\n\nconst sendOrdinals = async (\n\tpaymentUtxos: Utxo[],\n\tordinals: Utxo[],\n\tpaymentPk: PrivateKey,\n\tchangeAddress: string,\n\tordPk: PrivateKey,\n\tdestinations: Destination[],\n\tsatsPerKb?: number,\n\tmetaData?: MAP,\n\tadditionalPayments: Payment[] = [],\n): Promise<Transaction> => {\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb || DEFAULT_SAT_PER_KB);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of ordinals) {\n\t\tconst input = fromB64Utxo(ordUtxo, new OrdP2PKH().unlock(ordPk));\n\t\ttx.addInput(input);\n\t}\n\n\t// Add payment inputs\n\tfor (const paymentUtxo of paymentUtxos) {\n\t\tconst input = fromB64Utxo(paymentUtxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// check that ordinals coming in matches ordinals going out if supplied\n\tif (destinations.length !== ordinals.length) {\n\t\tthrow new Error(\n\t\t\t\"Number of destinations must match number of ordinals being sent\",\n\t\t);\n\t}\n\n\t// Add ordinal outputs\n\tfor (const destination of destinations) {\n\t\tlet s: Script;\n\t\tif (\n\t\t\tdestination.inscription?.dataB64 &&\n\t\t\tdestination.inscription?.contentType\n\t\t) {\n\t\t\ts = new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription.dataB64,\n\t\t\t\tdestination.inscription.contentType,\n\t\t\t\tmetaData,\n\t\t\t);\n\t\t} else {\n\t\t\ts = new P2PKH().lock(destination.address);\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: s,\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Add change output\n\tconst changeScript = new P2PKH().lock(changeAddress);\n\tconst changeOut: TransactionOutput = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tawait tx.fee(modelOrFee);\n\tawait tx.sign();\n\n\treturn tx;\n};\n\n// sendUtxos sends p2pkh utxos to the given destinationAddress\nconst sendUtxos = async (\n\tutxos: Utxo[],\n\tpaymentPk: PrivateKey,\n\tdestinationAddress: string,\n\tamount: number,\n\tsatsPerKb?: number,\n): Promise<Transaction> => {\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb || DEFAULT_SAT_PER_KB);\n\n\tconst tx = new Transaction();\n\n\t// Inputs\n\tfor (const utxo of utxos) {\n\t\tconst input = fromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\tconst sendTxOut: TransactionOutput = {\n\t\tsatoshis: amount,\n\t\tlockingScript: new P2PKH().lock(destinationAddress),\n\t};\n\n\ttx.addOutput(sendTxOut);\n\n\t// Change\n\tconst changeAddress = paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(changeAddress);\n\n\tconst changeOut: TransactionOutput = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\n\ttx.addOutput(changeOut);\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\treturn tx;\n};\n\nexport { createOrdinals, sendOrdinals, sendUtxos };\n\nconst DEFAULT_SAT_PER_KB = 10;\n\nconst fromB64Utxo = (\n\tutxo: Utxo,\n\tunlockScriptTemplate: {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>;\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>;\n\t},\n) => {\n\treturn fromUtxo(\n\t\t{\n\t\t\t...utxo,\n\t\t\tscript: Buffer.from(utxo.script, \"base64\").toString(\"hex\"),\n\t\t},\n\t\tunlockScriptTemplate,\n\t);\n};\n"],"names":["toHex","asciiStr","arr1","n","l","length","hex","Number","charCodeAt","toString","push","join","OrdP2PKH","P2PKH","lock","destinationAddress","b64File","mediaType","metaData","ordAsm","undefined","ordHex","fileHex","Buffer","from","trim","inscriptionAsm","toASM","app","type","key","value","Object","entries","LockingScript","fromASM","createOrdinals","async","utxos","destinations","paymentPk","changeAddress","satsPerKb","signer","additionalPayments","modelOrFee","SatoshisPerKilobyte","tx","Transaction","utxo","input","fromB64Utxo","unlock","addInput","console","warn","destination","inscription","Error","addOutput","satoshis","lockingScript","address","dataB64","contentType","p","amount","to","change","idKey","keyHost","sigma","Sigma","signedTx","sign","authToken","remoteSign","e","log","fee","sendOrdinals","paymentUtxos","ordinals","ordPk","DEFAULT_SAT_PER_KB","ordUtxo","paymentUtxo","_destination$inscript","_destination$inscript2","s","changeScript","sendUtxos","sendTxOut","toAddress","unlockScriptTemplate","fromUtxo","_extends","script"],"mappings":"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"}