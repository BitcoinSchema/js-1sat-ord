import{P2PKH as t,LockingScript as o,Script as n,Utils as e,fromUtxo as s,SatoshisPerKilobyte as i,Transaction as r,OP as a,BigNumber as c,UnlockingScript as u,TransactionSignature as d}from"@bsv/sdk";import{toToken as f,toTokenSat as l,ReturnTypes as p}from"satoshi-token";import{Sigma as h}from"sigma-protocol";import*as g from"image-size";const m=t=>Buffer.from(t).toString("hex"),w="1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5",y=10,b="https://ordinals.gorillapool.io/api";class k extends t{lock(n,e,s){let i="";if(void 0!==(null==e?void 0:e.dataB64)&&void 0!==(null==e?void 0:e.contentType)){const t=m("ord"),o=Buffer.from(e.dataB64,"base64").toString("hex").trim();if(!o)throw new Error("Invalid file data");const n=m(e.contentType);if(!n)throw new Error("Invalid media type");i=`OP_0 OP_IF ${t} OP_1 ${n} OP_0 ${o} OP_ENDIF`}let r=`${i?`${i} `:""}${(new t).lock(n).toASM()}`;if(s&&(!s.app||!s.type))throw new Error("MAP.app and MAP.type are required fields");if(null!=s&&s.app&&null!=s&&s.type){r=`${r?`${r} `:""}OP_RETURN ${m(w)} ${m("SET")}`;for(const[t,o]of Object.entries(s))"cmd"!==t&&(r=`${r} ${m(t)} ${m(o)}`)}return o.fromASM(r)}}function S(){return S=Object.assign?Object.assign.bind():function(t){for(var o=1;o<arguments.length;o++){var n=arguments[o];for(var e in n)({}).hasOwnProperty.call(n,e)&&(t[e]=n[e])}return t},S.apply(null,arguments)}var I,B,x,v;!function(t){t.SmallestFirst="smallest",t.LargestFirst="largest",t.RetainOrder="retain",t.Random="random"}(I||(I={})),function(t){t.BSV20="bsv20",t.BSV21="bsv21"}(B||(B={})),function(t){t.Paymail="paymail",t.Address="address",t.Script="script"}(x||(x={})),function(t){t.All="all",t.Needed="needed"}(v||(v={}));const O=2n**64n-1n,{fromBase58Check:$}=e,A=(t,o)=>s(S({},t,{script:Buffer.from(t.script,"base64").toString("hex")}),o),E=async(o,n="base64")=>{const e=`${b}/txos/address/${o}/unspent?bsv20=false`;console.log({payUrl:e});const s=await fetch(e);if(!s.ok)throw new Error("Error fetching pay utxos");let i=await s.json();i=i.filter(t=>1!==t.satoshis&&!T(t));const r=$(o),a=(new t).lock(r.data);return i=i.map(t=>({txid:t.txid,vout:t.vout,satoshis:t.satoshis,script:"hex"===n||"base64"===n?Buffer.from(a.toBinary()).toString(n):a.toASM()})),i},P=async(t,o,e=10,s=0,i="base64")=>{let r=`${b}/txos/address/${t}/unspent?limit=${e}&offset=${s}&`;o&&(r+=`q=${Buffer.from(JSON.stringify({map:{subTypeData:{collectionId:o}}})).toString("base64")}`);const a=await fetch(r);if(!a.ok)throw new Error(`Error fetching NFT utxos for ${t}`);let c=await a.json();c=c.filter(t=>{var o;return 1===t.satoshis&&!(null!=(o=t.data)&&o.list)});const u=c.map(t=>`${t.txid}_${t.vout}`),d=await fetch(`${b}/txos/outpoints?script=true`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify([...u])});if(!d.ok)throw new Error(`Error fetching NFT scripts for ${t}`);return c=(await d.json()||[]).map(t=>{let e=t.script;"hex"===i?e=Buffer.from(e,"base64").toString("hex"):"asm"===i&&(e=n.fromHex(Buffer.from(e,"base64").toString("hex")).toASM());const s={origin:t.origin.outpoint,script:e,vout:t.vout,txid:t.txid,satoshis:1};return o&&(s.collectionId=o),s}),c},N=async(t,o,n,e=10,s=0)=>{const i=`${b}/bsv20/${n}/${t===B.BSV20?"tick":"id"}/${o}?bsv20=true&listing=false&limit=${e}&offset=${s}`,r=await fetch(i);if(!r.ok)throw new Error(`Error fetching ${t} utxos`);let a=await r.json();return a=a.map(t=>({amt:t.amt,script:t.script,vout:t.vout,txid:t.txid,id:o,satoshis:1})),a},T=t=>!!t.lock,_=(t,o,n,e={})=>{const{inputStrategy:s=I.RetainOrder,outputStrategy:i=I.RetainOrder}=e,r=[...t].sort((t,o)=>{if(s===I.RetainOrder)return 0;const n=BigInt(t.amt),e=BigInt(o.amt);switch(s){case I.SmallestFirst:return Number(n-e);case I.LargestFirst:return Number(e-n);case I.Random:return Math.random()-.5;default:return 0}});let a=0;const c=[];for(const t of r)if(c.push(t),a+=f(t.amt,n),a>=o&&o>0)break;return i!==I.RetainOrder&&c.sort((t,o)=>{const n=BigInt(t.amt),e=BigInt(o.amt);switch(i){case I.SmallestFirst:return Number(n-e);case I.LargestFirst:return Number(e-n);case I.Random:return Math.random()-.5;default:return 0}}),{selectedUtxos:c,totalSelected:a,isEnough:a>=o}},C=async(t,o)=>{const n=null==o?void 0:o.idKey,e=null==o?void 0:o.keyHost;if(n){const o=new h(t),{signedTx:e}=o.sign(n);return e}if(e){const n=null==o?void 0:o.authToken,s=new h(t);try{const{signedTx:t}=await s.remoteSign(e,n);return t}catch(t){throw console.log(t),new Error(`Remote signing to ${e} failed`)}}throw new Error("Signer must be a LocalSigner or RemoteSigner")},F=t=>{if(!t)return;const o={app:t.app,type:t.type};for(const[n,e]of Object.entries(t))void 0!==e&&(o[n]="string"==typeof e?e:Array.isArray(e)||"object"==typeof e?JSON.stringify(e):String(e));return o},D=async o=>{const{utxos:s,destinations:a,paymentPk:c,changeAddress:u,satsPerKb:d=y,metaData:f,signer:l,additionalPayments:p=[]}=o;a.length>100&&console.warn("Creating many inscriptions at once can be slow. Consider using multiple transactions instead.");const h=new i(d);let g,m=new r;for(const t of a){if(!t.inscription)throw new Error("Inscription is required for all destinations");if(f)for(const t of Object.keys(f))void 0===f[t]&&delete f[t];m.addOutput({satoshis:1,lockingScript:(new k).lock(t.address,t.inscription,F(f))})}for(const o of p)m.addOutput({satoshis:o.amount,lockingScript:(new t).lock(o.to)});const w=u||c.toAddress().toString(),b=(new t).lock(w);m.addOutput({lockingScript:b,change:!0});let S=0n;const I=m.outputs.reduce((t,o)=>t+BigInt(o.satoshis||0),0n);if(l){const o=s.pop();m.addInput(A(o,(new t).unlock(c,"all",!0,o.satoshis,n.fromBinary(e.toArray(o.script,"base64"))))),S+=BigInt(o.satoshis),m=await C(m,l)}let B=0;for(const o of s){if(S>=I+BigInt(B))break;const s=A(o,(new t).unlock(c,"all",!0,o.satoshis,n.fromBinary(e.toArray(o.script,"base64"))));m.addInput(s),S+=BigInt(o.satoshis),B=await h.computeFee(m)}if(S<I+BigInt(B))throw new Error(`Not enough funds to create ordinals. Total sats in: ${S}, Total sats out: ${I}, Fee: ${B}`);await m.fee(h),await m.sign();const x=m.outputs.findIndex(t=>t.change);if(-1!==x){const t=m.outputs[x];g={satoshis:t.satoshis,txid:m.id("hex"),vout:x,script:Buffer.from(t.lockingScript.toBinary()).toString("base64")}}return g&&(g.satoshis=m.outputs[m.outputs.length-1].satoshis,g.txid=m.id("hex")),{tx:m,spentOutpoints:s.map(t=>`${t.txid}_${t.vout}`),payChange:g}},L=async o=>{o.satsPerKb||(o.satsPerKb=y),o.additionalPayments||(o.additionalPayments=[]),void 0===o.enforceUniformSend&&(o.enforceUniformSend=!0);const s=new i(o.satsPerKb);let a=new r;const c=[];for(const t of o.ordinals){if(1!==t.satoshis)throw new Error("1Sat Ordinal utxos must have exactly 1 satoshi");const s=A(t,(new k).unlock(o.ordPk,"all",!0,t.satoshis,n.fromBinary(e.toArray(t.script,"base64"))));c.push(`${t.txid}_${t.vout}`),a.addInput(s)}if(o.enforceUniformSend&&o.destinations.length!==o.ordinals.length)throw new Error("Number of destinations must match number of ordinals being sent");for(const n of o.destinations){var u,d;let e;e=null!=(u=n.inscription)&&u.dataB64&&null!=(d=n.inscription)&&d.contentType?(new k).lock(n.address,n.inscription,F(o.metaData)):(new t).lock(n.address),a.addOutput({satoshis:1,lockingScript:e})}for(const n of o.additionalPayments)a.addOutput({satoshis:n.amount,lockingScript:(new t).lock(n.to)});let f;const l=o.changeAddress||o.paymentPk.toAddress().toString(),p=(new t).lock(l);a.addOutput({lockingScript:p,change:!0});let h=0n;const g=a.outputs.reduce((t,o)=>t+BigInt(o.satoshis||0),0n);let m=0;for(const i of o.paymentUtxos){const r=A(i,(new t).unlock(o.paymentPk,"all",!0,i.satoshis,n.fromBinary(e.toArray(i.script,"base64"))));if(c.push(`${i.txid}_${i.vout}`),a.addInput(r),h+=BigInt(i.satoshis),m=await s.computeFee(a),h>=g+BigInt(m))break}if(h<g)throw new Error("Not enough ordinals to send");o.signer&&(a=await C(a,o.signer)),await a.fee(s),await a.sign();const w=a.outputs.findIndex(t=>t.change);if(-1!==w){const t=a.outputs[w];f={satoshis:t.satoshis,txid:a.id("hex"),vout:w,script:Buffer.from(t.lockingScript.toBinary()).toString("base64")}}return f&&(f.satoshis=a.outputs[a.outputs.length-1].satoshis,f.txid=a.id("hex")),{tx:a,spentOutpoints:c,payChange:f}},M=async o=>{const{utxos:s,paymentPk:a,payments:c,satsPerKb:u=y,changeAddress:d=a.toAddress().toString(),metaData:f}=o,l=new i(u),p=new r;for(const t of c){const o={satoshis:t.amount,lockingScript:(new k).lock(t.to,void 0,f)};p.addOutput(o)}let h=0n;const g=p.outputs.reduce((t,o)=>t+(o.satoshis||0),0);let m,w=0;for(const o of s){const s=A(o,(new t).unlock(a,"all",!0,o.satoshis,n.fromBinary(e.toArray(o.script,"base64"))));if(p.addInput(s),h+=BigInt(o.satoshis),w=await l.computeFee(p),h>=g+w)break}if(h<g+w)throw new Error(`Not enough funds to send. Total sats in: ${h}, Total sats out: ${g}, Fee: ${w}`);if(h>g+w){const o=(new t).lock(d),n={lockingScript:o,change:!0};m={txid:"",vout:p.outputs.length,satoshis:0,script:Buffer.from(o.toHex(),"hex").toString("base64")},p.addOutput(n)}else h<g+w&&console.log("No change needed");await p.fee(l),await p.sign();const b=p.outputs.findIndex(t=>t.change);if(-1!==b){const t=p.outputs[b];m={satoshis:t.satoshis,txid:p.id("hex"),vout:b,script:Buffer.from(t.lockingScript.toBinary()).toString("base64")}}return m&&(m.satoshis=p.outputs[p.outputs.length-1].satoshis,m.txid=p.id("hex")),{tx:p,spentOutpoints:s.map(t=>`${t.txid}_${t.vout}`),payChange:m}},R=async o=>{const{protocol:s,tokenID:a,utxos:c,inputTokens:u,distributions:d,paymentPk:f,ordPk:h,changeAddress:g,tokenChangeAddress:m,satsPerKb:w=y,metaData:b,signer:I,decimals:x,additionalPayments:O=[],burn:$=!1,tokenInputMode:E=v.Needed,splitConfig:P={outputs:1,omitMetaData:!1}}=o;if(!u.every(t=>t.id===a))throw new Error("Input tokens do not match the provided tokenID");let N=0n,T=0n,_=0n;const D=d.reduce((t,o)=>t+l(o.tokens,x,p.BigInt),0n),L=new i(w);let M,R=new r;if(E===v.All)M=u,T=u.reduce((t,o)=>t+BigInt(o.amt),0n);else{M=[];for(const t of u)if(M.push(t),T+=BigInt(t.amt),T>=D)break;if(T<D)throw new Error("Not enough tokens to satisfy the transfer amount")}for(const t of M){const o=e.toArray(t.script,"base64"),s=n.fromBinary(o);R.addInput(A(t,(new k).unlock(h,"all",!0,t.satoshis,s)))}if(b)for(const t of Object.keys(b))void 0===b[t]&&delete b[t];for(const t of d){const o=l(t.tokens,x,p.BigInt);console.log({distTokenSat:o});const n={p:"bsv-20",op:$?"burn":"transfer",amt:o.toString()};let e;if(s===B.BSV20)e=S({},n,{tick:a});else{if(s!==B.BSV21)throw new Error("Invalid protocol");e=S({},n,{id:a})}R.addOutput({satoshis:1,lockingScript:(new k).lock(t.address,{dataB64:Buffer.from(JSON.stringify(e)).toString("base64"),contentType:"application/bsv-20"},t.omitMetaData?void 0:F(b))}),_+=o}if(N=T-_,N<0n)throw new Error("Not enough tokens to send");let j,V=[];console.log({changeTsats:N}),N>0n&&(V=U(R,N,s,a,m||h.toAddress().toString(),h,b,P,x));for(const o of O)R.addOutput({satoshis:o.amount,lockingScript:(new t).lock(o.to)});const K=g||f.toAddress().toString(),q=(new t).lock(K);R.addOutput({lockingScript:q,change:!0});let H=0n;const J=R.outputs.reduce((t,o)=>t+BigInt(o.satoshis||0),0n);let X=0;for(const o of c){const s=A(o,(new t).unlock(f,"all",!0,o.satoshis,n.fromBinary(e.toArray(o.script,"base64"))));if(R.addInput(s),H+=BigInt(o.satoshis),X=await L.computeFee(R),H>=J+BigInt(X))break}if(H<J+BigInt(X))throw new Error(`Not enough funds to transfer tokens. Total sats in: ${H}, Total sats out: ${J}, Fee: ${X}`);I&&(R=await C(R,I)),await R.fee(L),await R.sign();const W=R.id("hex");for(const t of V)t.txid=W;const G=R.outputs.findIndex(t=>t.change);if(-1!==G){const t=R.outputs[G];j={satoshis:t.satoshis,txid:W,vout:G,script:Buffer.from(t.lockingScript.toBinary()).toString("base64")}}return j&&(j.satoshis=R.outputs[R.outputs.length-1].satoshis,j.txid=R.id("hex")),{tx:R,spentOutpoints:R.inputs.map(t=>`${t.sourceTXID}_${t.sourceOutputIndex}`),payChange:j,tokenChange:V}},U=(t,o,n,e,s,i,r,a,c)=>{const u=[],d=void 0!==a.threshold?l(a.threshold,c,p.BigInt):void 0,f=a.outputs,h=o;let g;console.log({splitChangeAmt:h}),void 0!==d&&d>0n?(g=h/d,g=BigInt(Math.min(Number(g),f))):g=BigInt(f),g=BigInt(Math.max(Number(g),1));const m=h/g;let w=h%g;for(let o=0n;o<g;o++){let o=m;w>0n&&(o+=1n,w-=1n);const c={p:"bsv-20",op:"transfer",amt:o.toString()};let d;if(n===B.BSV20)d=S({},c,{tick:e});else{if(n!==B.BSV21)throw new Error("Invalid protocol");d=S({},c,{id:e})}const f=(new k).lock(s||i.toAddress().toString(),{dataB64:Buffer.from(JSON.stringify(d)).toString("base64"),contentType:"application/bsv-20"},a.omitMetaData?void 0:F(r)),l=t.outputs.length;t.addOutput({lockingScript:f,satoshis:1}),u.push({id:e,satoshis:1,script:Buffer.from(f.toBinary()).toString("base64"),txid:"",vout:l,amt:o.toString()})}return u},j=(t,o)=>{try{if("collection"===t){const t=o;if(!t.description)return new Error("Collection description is required");if(!t.quantity)return new Error("Collection quantity is required");if(t.rarityLabels){if(!Array.isArray(t.rarityLabels))return new Error("Rarity labels must be an array");if(!t.rarityLabels.every(t=>Object.values(t).every(t=>"string"==typeof t)))return new Error(`Invalid rarity labels ${t.rarityLabels}`)}if(t.traits){if("object"!=typeof t.traits)return new Error("Collection traits must be an object");if(t.traits&&!Object.keys(t.traits).every(o=>"string"==typeof o&&"object"==typeof t.traits[o]))return new Error("Collection traits must be a valid CollectionTraits object")}}if("collectionItem"===t){const t=o;if(!t.collectionId)return new Error("Collection id is required");if(!t.collectionId.includes("_"))return new Error("Collection id must be a valid outpoint");if(64!==t.collectionId.split("_")[0].length)return new Error("Collection id must contain a valid txid");if(Number.isNaN(Number.parseInt(t.collectionId.split("_")[1])))return new Error("Collection id must contain a valid vout");if(t.mintNumber&&"number"!=typeof t.mintNumber)return new Error("Mint number must be a number");if(t.rank&&"number"!=typeof t.rank)return new Error("Rank must be a number");if(t.rarityLabel&&"string"!=typeof t.rarityLabel)return new Error("Rarity label must be a string");if(t.traits&&"object"!=typeof t.traits)return new Error("Traits must be an object");if(t.attachments&&!Array.isArray(t.attachments))return new Error("Attachments must be an array")}return}catch(t){return new Error("Invalid JSON data")}};class V{lock(o,s,i,r){const a=e.fromBase58Check(o).data,c=e.fromBase58Check(s).data;let u=new n;if(void 0!==(null==r?void 0:r.dataB64)&&void 0!==(null==r?void 0:r.contentType)){const t=m("ord"),o=Buffer.from(r.dataB64,"base64").toString("hex").trim();if(!o)throw new Error("Invalid file data");const e=m(r.contentType);if(!e)throw new Error("Invalid media type");u=n.fromASM(`OP_0 OP_IF ${t} OP_1 ${e} OP_0 ${o} OP_ENDIF`)}return u.writeScript(n.fromHex("2097dfd76851bf465e8f715593b217714858bbe9570ff3bd5e33840a34e20ff0262102ba79df5f8ae7604a9830f03c7933028186aede0675a16f025dc4f8be8eec0382201008ce7480da41702918d1ec8e6849ba32b4d65b1e40dc669c31a1e6306b266c0000")).writeBin(a).writeBin(V.buildOutput(i,(new t).lock(c).toBinary())).writeScript(n.fromHex("615179547a75537a537a537a0079537a75527a527a7575615579008763567901c161517957795779210ac407f0e4bd44bfc207355a778b046225a7068fc59ee7eda43ad905aadbffc800206c266b30e6a1319c66dc401e5bd6b432ba49688eecd118297041da8074ce081059795679615679aa0079610079517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01007e81517a75615779567956795679567961537956795479577995939521414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff00517951796151795179970079009f63007952799367007968517a75517a75517a7561527a75517a517951795296a0630079527994527a75517a6853798277527982775379012080517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01205279947f7754537993527993013051797e527e54797e58797e527e53797e52797e57797e0079517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a756100795779ac517a75517a75517a75517a75517a75517a75517a75517a75517a7561517a75517a756169587951797e58797eaa577961007982775179517958947f7551790128947f77517a75517a75618777777777777777777767557951876351795779a9876957795779ac777777777777777767006868"))}cancelListing(o,n="all",e=!1,s,i){const r=(new t).unlock(o,n,e,s,i);return{sign:async function(t,o){return(await r.sign(t,o)).writeOpCode(a.OP_1)},estimateLength:async function(){return 107}}}purchaseListing(t,o){const n={sign:async function(n,s){var i;if(n.outputs.length<2)throw new Error("Malformed transaction");const r=(new u).writeBin(V.buildOutput(n.outputs[0].satoshis||0,n.outputs[0].lockingScript.toBinary()));if(n.outputs.length>2){const t=new e.Writer;for(const o of n.outputs.slice(2))t.write(V.buildOutput(o.satoshis||0,o.lockingScript.toBinary()));r.writeBin(t.toArray())}else r.writeOpCode(a.OP_0);const c=n.inputs[s];let f=t;if(!f&&c.sourceTransaction)f=c.sourceTransaction.outputs[c.sourceOutputIndex].satoshis;else if(!t)throw new Error("sourceTransaction or sourceSatoshis is required");const l=c.sourceTXID||(null==(i=c.sourceTransaction)?void 0:i.id("hex"));let p=o;var h;p||(p=null==(h=c.sourceTransaction)?void 0:h.outputs[c.sourceOutputIndex].lockingScript);const g=d.format({sourceTXID:l,sourceOutputIndex:c.sourceOutputIndex,sourceSatoshis:f,transactionVersion:n.version,otherInputs:[],inputIndex:s,outputs:n.outputs,inputSequence:c.sequence,subscript:p,lockTime:n.lockTime,scope:d.SIGHASH_ALL|d.SIGHASH_ANYONECANPAY|d.SIGHASH_FORKID});return r.writeBin(g).writeOpCode(a.OP_0)},estimateLength:async function(t,o){return(await n.sign(t,o)).toBinary().length}};return n}static buildOutput(t,o){const n=new e.Writer;return n.writeUInt64LEBn(new c(t)),n.writeVarIntNum(o.length),n.write(o),n.toArray()}}const{toArray:K}=e,q=async o=>{const{utxos:s,listings:a,paymentPk:c,ordPk:u,changeAddress:d,satsPerKb:f=y,additionalPayments:l=[]}=o,p=new i(f),h=new r;a.length>100&&console.warn("Creating many inscriptions at once can be slow. Consider using multiple transactions instead.");for(const t of a){h.addOutput({satoshis:1,lockingScript:(new V).lock(t.ordAddress,t.payAddress,t.price)});const o=K(t.listingUtxo.script,"base64"),e=n.fromBinary(o);h.addInput(A(t.listingUtxo,(new k).unlock(u,"all",!0,t.listingUtxo.satoshis,e)))}for(const o of l)h.addOutput({satoshis:o.amount,lockingScript:(new t).lock(o.to)});let g;const m=(new t).lock(d||c.toAddress().toString());h.addOutput({lockingScript:m,change:!0});let w=0n;const b=h.outputs.reduce((t,o)=>t+BigInt(o.satoshis||0),0n);let S=0;for(const o of s){const s=A(o,(new t).unlock(c,"all",!0,o.satoshis,n.fromBinary(e.toArray(o.script,"base64"))));if(h.addInput(s),w+=BigInt(o.satoshis),S=await p.computeFee(h),w>=b+BigInt(S))break}if(w<b+BigInt(S))throw new Error(`Not enough funds to create ordinal listings. Total sats in: ${w}, Total sats out: ${b}, Fee: ${S}`);await h.fee(p),await h.sign();const I=h.outputs.findIndex(t=>t.change);if(-1!==I){const t=h.outputs[I];g={satoshis:t.satoshis,txid:h.id("hex"),vout:I,script:Buffer.from(t.lockingScript.toBinary()).toString("base64")}}return g&&(g.satoshis=h.outputs[h.outputs.length-1].satoshis,g.txid=h.id("hex")),{tx:h,spentOutpoints:h.inputs.map(t=>`${t.sourceTXID}_${t.sourceOutputIndex}`),payChange:g}},H=async o=>{const{utxos:s,protocol:a,tokenID:c,ordPk:u,paymentPk:d,additionalPayments:f=[],changeAddress:h,tokenChangeAddress:g,inputTokens:m,listings:w,decimals:b,satsPerKb:I=y}=o;if(w.length>100&&console.warn("Creating many inscriptions at once can be slow. Consider using multiple transactions instead."),!m.every(t=>t.id===c))throw new Error("Input tokens do not match the provided tokenID");let x=0n,v=0n,O=0n;if(!m.every(t=>t.id===c))throw new Error("Input tokens do not match the provided tokenID");const $=new i(I),E=new r;for(const t of w){const o=l(t.tokens,b,p.BigInt),n={p:"bsv-20",op:"transfer",amt:o.toString()};let e;if(a===B.BSV20)e=S({},n,{tick:c});else{if(a!==B.BSV21)throw new Error("Invalid protocol");e=S({},n,{id:c})}E.addOutput({satoshis:1,lockingScript:(new V).lock(t.ordAddress,t.payAddress,t.price,{dataB64:Buffer.from(JSON.stringify(e)).toString("base64"),contentType:"application/bsv-20"})}),O+=o}for(const t of m)E.addInput(A(t,(new k).unlock(u,"all",!0,t.satoshis,n.fromBinary(K(t.script,"base64"))))),v+=BigInt(t.amt);let P,N;if(x=v-O,x<0n)throw new Error("Not enough tokens to send");if(x>0n){const t={p:"bsv-20",op:"transfer",amt:x.toString()};let o;if(a===B.BSV20)o=S({},t,{tick:c});else{if(a!==B.BSV21)throw new Error("Invalid protocol");o=S({},t,{id:c})}const n=(new k).lock(g,{dataB64:Buffer.from(JSON.stringify(o)).toString("base64"),contentType:"application/bsv-20"}),e=E.outputs.length;E.addOutput({lockingScript:n,satoshis:1}),P=[{id:c,satoshis:1,script:Buffer.from(n.toBinary()).toString("base64"),txid:"",vout:e,amt:x.toString()}]}for(const o of f)E.addOutput({satoshis:o.amount,lockingScript:(new t).lock(o.to)});const T=h||d.toAddress().toString(),_=(new t).lock(T);E.addOutput({lockingScript:_,change:!0});let C=0n;const F=E.outputs.reduce((t,o)=>t+BigInt(o.satoshis||0),0n);let D=0;for(const o of s){const s=A(o,(new t).unlock(d,"all",!0,o.satoshis,n.fromBinary(e.toArray(o.script,"base64"))));if(E.addInput(s),C+=BigInt(o.satoshis),D=await $.computeFee(E),C>=F+BigInt(D))break}if(C<F+BigInt(D))throw new Error(`Not enough funds to create token listings. Total sats in: ${C}, Total sats out: ${F}, Fee: ${D}`);await E.fee($),await E.sign();const L=E.id("hex");P&&(P=P.map(t=>S({},t,{txid:L})));const M=E.outputs.findIndex(t=>t.change);if(-1!==M){const t=E.outputs[M];N={satoshis:t.satoshis,txid:L,vout:M,script:Buffer.from(t.lockingScript.toBinary()).toString("base64")}}return N&&(N.satoshis=E.outputs[E.outputs.length-1].satoshis,N.txid=E.id("hex")),{tx:E,spentOutpoints:E.inputs.map(t=>`${t.sourceTXID}_${t.sourceOutputIndex}`),payChange:N,tokenChange:P}},J=async o=>{const{utxos:s,listingUtxos:a,ordPk:c,paymentPk:u,changeAddress:d,additionalPayments:f=[],satsPerKb:l=y}=o;a.length>100&&console.warn("Creating many inscriptions at once can be slow. Consider using multiple transactions instead.");const p=new i(l),h=new r;for(const o of a)h.addInput(A(o,(new V).cancelListing(c,"all",!0,o.satoshis,n.fromBinary(e.toArray(o.script,"base64"))))),h.addOutput({satoshis:1,lockingScript:(new t).lock(c.toAddress().toString())});for(const o of f)h.addOutput({satoshis:o.amount,lockingScript:(new t).lock(o.to)});let g;const m=d||u.toAddress().toString(),w=(new t).lock(m);h.addOutput({lockingScript:w,change:!0});let b=0n;const k=h.outputs.reduce((t,o)=>t+BigInt(o.satoshis||0),0n);let S=0;for(const o of s){const s=A(o,(new t).unlock(u,"all",!0,o.satoshis,n.fromBinary(e.toArray(o.script,"base64"))));if(h.addInput(s),b+=BigInt(o.satoshis),S=await p.computeFee(h),b>=k+BigInt(S))break}if(b<k+BigInt(S))throw new Error(`Not enough funds to cancel ordinal listings. Total sats in: ${b}, Total sats out: ${k}, Fee: ${S}`);await h.fee(p),await h.sign();const I=h.outputs.findIndex(t=>t.change);if(-1!==I){const t=h.outputs[I];g={satoshis:t.satoshis,txid:h.id("hex"),vout:I,script:Buffer.from(t.lockingScript.toBinary()).toString("base64")}}return g&&(g.satoshis=h.outputs[h.outputs.length-1].satoshis,g.txid=h.id("hex")),{tx:h,spentOutpoints:h.inputs.map(t=>`${t.sourceTXID}_${t.sourceOutputIndex}`),payChange:g}},X=async o=>{const{protocol:s,tokenID:a,ordAddress:c,changeAddress:u,paymentPk:d,ordPk:f,additionalPayments:l,listingUtxos:p,utxos:h,satsPerKb:g=y}=o;let m=0;if(p.length>100&&console.warn("Creating many inscriptions at once can be slow. Consider using multiple transactions instead."),!p.every(t=>t.id===a))throw new Error("Input tokens do not match the provided tokenID");const w=new i(g),b=new r;for(const t of p)b.addInput(A(t,(new V).cancelListing(f,"all",!0,t.satoshis,n.fromBinary(e.toArray(t.script,"base64"))))),m+=Number.parseInt(t.amt);const I={p:"bsv-20",op:"transfer",amt:m.toString()};let x;if(s===B.BSV20)x=S({},I,{tick:a});else{if(s!==B.BSV21)throw new Error("Invalid protocol");x=S({},I,{id:a})}const v={address:c||f.toAddress().toString(),inscription:{dataB64:Buffer.from(JSON.stringify(x)).toString("base64"),contentType:"application/bsv-20"}},O=(new k).lock(v.address,v.inscription);b.addOutput({satoshis:1,lockingScript:O});for(const o of l)b.addOutput({satoshis:o.amount,lockingScript:(new t).lock(o.to)});let $;const E=u||d.toAddress().toString(),P=(new t).lock(E);b.addOutput({lockingScript:P,change:!0});let N=0n;const T=b.outputs.reduce((t,o)=>t+BigInt(o.satoshis||0),0n);let _=0;for(const o of h){const s=A(o,(new t).unlock(d,"all",!0,o.satoshis,n.fromBinary(e.toArray(o.script,"base64"))));if(b.addInput(s),N+=BigInt(o.satoshis),_=await w.computeFee(b),N>=T+BigInt(_))break}if(N<T+BigInt(_))throw new Error(`Not enough funds to cancel token listings. Total sats in: ${N}, Total sats out: ${T}, Fee: ${_}`);await b.fee(w),await b.sign();const C=[{amt:m.toString(),script:Buffer.from(O.toHex(),"hex").toString("base64"),txid:b.id("hex"),vout:0,id:a,satoshis:1}],F=b.outputs.findIndex(t=>t.change);if(-1!==F){const t=b.outputs[F];$={satoshis:t.satoshis,txid:b.id("hex"),vout:F,script:Buffer.from(t.lockingScript.toBinary()).toString("base64")}}return $&&($.satoshis=b.outputs[b.outputs.length-1].satoshis,$.txid=b.id("hex")),{tx:b,spentOutpoints:b.inputs.map(t=>`${t.sourceTXID}_${t.sourceOutputIndex}`),payChange:$,tokenChange:C}},W=async(t,o)=>{throw new Error("Not implemented")},G=async s=>{const{utxos:a,paymentPk:c,listing:u,ordAddress:d,changeAddress:f,additionalPayments:l=[],satsPerKb:p=y,royalties:h=[],metaData:g}=s,m=new i(p),w=new r;w.addInput(A(u.listingUtxo,(new V).purchaseListing(1,n.fromBinary(e.toArray(u.listingUtxo.script,"base64"))))),w.addOutput({satoshis:1,lockingScript:(new k).lock(d,void 0,g)});const b=new e.Reader(e.toArray(u.payout,"base64")),S=b.readUInt64LEBn().toNumber(),I=b.readVarIntNum(),B=b.read(I),v=o.fromBinary(B);w.addOutput({satoshis:S,lockingScript:v});for(const o of l)w.addOutput({satoshis:o.amount,lockingScript:(new t).lock(o.to)});for(const o of h){let s;const i=Math.floor(Number(o.percentage)*S);switch(o.type){case x.Paymail:s=await W();break;case x.Script:s=n.fromBinary(e.toArray(o.destination,"base64"));break;case x.Address:s=(new t).lock(o.destination);break;default:throw new Error("Invalid royalty type")}if(!s)throw new Error("Invalid royalty destination");w.addOutput({satoshis:i,lockingScript:s})}let O;const $=f||c.toAddress().toString(),E=(new t).lock($);w.addOutput({lockingScript:E,change:!0});let P=0n;const N=w.outputs.reduce((t,o)=>t+BigInt(o.satoshis||0),0n);let T=0;for(const o of a){const s=A(o,(new t).unlock(c,"all",!0,o.satoshis,n.fromBinary(e.toArray(o.script,"base64"))));if(w.addInput(s),P+=BigInt(o.satoshis),T=await m.computeFee(w),P>=N+BigInt(T))break}if(P<N+BigInt(T))throw new Error(`Not enough funds to purchase ordinal listing. Total sats in: ${P}, Total sats out: ${N}, Fee: ${T}`);await w.fee(m),await w.sign();const _=w.outputs.findIndex(t=>t.change);if(-1!==_){const t=w.outputs[_];O={satoshis:t.satoshis,txid:w.id("hex"),vout:_,script:Buffer.from(t.lockingScript.toBinary()).toString("base64")}}return O&&(O.satoshis=w.outputs[w.outputs.length-1].satoshis,O.txid=w.id("hex")),{tx:w,spentOutpoints:w.inputs.map(t=>`${t.sourceTXID}_${t.sourceOutputIndex}`),payChange:O}},Y=async s=>{const{protocol:a,tokenID:c,utxos:u,paymentPk:d,listingUtxo:f,ordAddress:l,changeAddress:p,satsPerKb:h=y,additionalPayments:g=[],metaData:m}=s,w=new i(h),b=new r;b.addInput(A(f,(new V).purchaseListing(1,n.fromBinary(e.toArray(f.script,"base64")))));const I={p:"bsv-20",op:"transfer",amt:f.amt};let x;if(a===B.BSV20)x=S({},I,{tick:c});else{if(a!==B.BSV21)throw new Error("Invalid protocol");x=S({},I,{id:c})}const v=Buffer.from(JSON.stringify(x)).toString("base64");if(b.addOutput({satoshis:1,lockingScript:(new k).lock(l,{dataB64:v,contentType:"application/bsv-20"},m)}),!f.payout)throw new Error("Listing UTXO does not have a payout script");const O=new e.Reader(e.toArray(f.payout,"base64")),$=O.readUInt64LEBn().toNumber(),E=O.readVarIntNum(),P=O.read(E),N=o.fromBinary(P);b.addOutput({satoshis:$,lockingScript:N});for(const o of g)b.addOutput({satoshis:o.amount,lockingScript:(new t).lock(o.to)});let T;const _=p||d.toAddress().toString(),C=(new t).lock(_);b.addOutput({lockingScript:C,change:!0});let F=0n;const D=b.outputs.reduce((t,o)=>t+BigInt(o.satoshis||0),0n);let L=0;for(const o of u){const s=A(o,(new t).unlock(d,"all",!0,o.satoshis,n.fromBinary(e.toArray(o.script,"base64"))));if(b.addInput(s),F+=BigInt(o.satoshis),L=await w.computeFee(b),F>=D+BigInt(L))break}if(F<D+BigInt(L))throw new Error(`Not enough funds to purchase token listing. Total sats in: ${F}, Total sats out: ${D}, Fee: ${L}`);await b.fee(w),await b.sign();const M=b.outputs.findIndex(t=>t.change);if(-1!==M){const t=b.outputs[M];T={satoshis:t.satoshis,txid:b.id("hex"),vout:M,script:Buffer.from(t.lockingScript.toBinary()).toString("base64")}}return T&&(T.satoshis=b.outputs[b.outputs.length-1].satoshis,T.txid=b.id("hex")),{tx:b,spentOutpoints:b.inputs.map(t=>`${t.sourceTXID}_${t.sourceOutputIndex}`),payChange:T}};g.disableFS(!0);const z=g.default,Q=new Error("Image must be a square image with dimensions <= 400x400"),Z=new Error("Image must be a square image"),tt=new Error("Error processing image"),ot=new Error("Image dimensions are undefined"),nt=async o=>{const{symbol:s,icon:a,decimals:c,utxos:u,initialDistribution:d,paymentPk:f,destinationAddress:l,changeAddress:p,satsPerKb:h=y,additionalPayments:g=[]}=o,m=new i(h),w=new r;let b;if("string"==typeof a)b=a;else{const t=await(async t=>{const{dataB64:o,contentType:n}=t;if("image/svg+xml"===n)return(t=>{const o=Buffer.from(t,"base64").toString("utf-8"),n=o.match(/<svg[^>]*\s+width="([^"]+)"/),e=o.match(/<svg[^>]*\s+height="([^"]+)"/);if(!n||!e)return ot;const s=Number.parseInt(n[1],10),i=Number.parseInt(e[1],10);return Number.isNaN(s)||Number.isNaN(i)?ot:s!==i?Z:s>400||i>400?Q:null})(o);if((e=n)!=e)return tt;var e;try{const t=Buffer.from(o,"base64"),n=z(t);return void 0===n.width||void 0===n.height?ot:n.width!==n.height?Z:n.width>400||n.height>400?Q:null}catch(t){return tt}})(a);if(t)throw t;const o=(new k).lock(l,a);w.addOutput({satoshis:1,lockingScript:o}),b="_0"}if(!(t=>{if(!t.includes("_")||t.endsWith("_"))return!1;const o=Number.parseInt(t.split("_")[1]);return!(Number.isNaN(o)||!t.startsWith("_")&&64!==t.split("_")[0].length)})(b))throw new Error("Invalid icon format. Must be either outpoint (format: txid_vout) or relative output index of the icon (format _vout). examples: ecb483eda58f26da1b1f8f15b782b1186abdf9c6399a1c3e63e0d429d5092a41_0 or _1");const S={p:"bsv-20",op:"deploy+mint",sym:s,icon:b,amt:(c?BigInt(d.tokens)*10n**BigInt(c):BigInt(d.tokens)).toString()};c&&(S.dec=c.toString());const I=Buffer.from(JSON.stringify(S)).toString("base64"),B={satoshis:1,lockingScript:(new k).lock(l,{dataB64:I,contentType:"application/bsv-20"})};w.addOutput(B);for(const o of g){const n={satoshis:o.amount,lockingScript:(new t).lock(o.to)};w.addOutput(n)}let x=0n;const v=w.outputs.reduce((t,o)=>t+BigInt(o.satoshis||0),0n);let O,$=0;for(const o of u){const s=A(o,(new t).unlock(f,"all",!0,o.satoshis,n.fromBinary(e.toArray(o.script,"base64"))));if(w.addInput(s),x+=BigInt(o.satoshis),$=await m.computeFee(w),x>=v+BigInt($))break}if(x<v+BigInt($))throw new Error(`Not enough funds to deploy token. Total sats in: ${x}, Total sats out: ${v}, Fee: ${$}`);const E=p||f.toAddress().toString(),P=(new t).lock(E);w.addOutput({lockingScript:P,change:!0}),await w.fee(m),await w.sign();const N=w.outputs.findIndex(t=>t.change);if(-1!==N){const t=w.outputs[N];O={satoshis:t.satoshis,txid:w.id("hex"),vout:N,script:Buffer.from(t.lockingScript.toBinary()).toString("base64")}}return{tx:w,spentOutpoints:w.inputs.map(t=>`${t.sourceTXID}_${t.sourceOutputIndex}`),payChange:O}},et=async t=>{const o=new r,s=[],{ordinals:i,metaData:a}=t;for(const r of i){if(1!==r.satoshis)throw new Error("1Sat Ordinal utxos must have exactly 1 satoshi");const i=A(r,(new k).unlock(t.ordPk,"all",!0,r.satoshis,n.fromBinary(e.toArray(r.script,"base64"))));s.push(`${r.txid}_${r.vout}`),o.addInput(i)}if(a&&(!a.app||!a.type))throw new Error("MAP.app and MAP.type are required fields");let c="";if(null!=a&&a.app&&null!=a&&a.type){c=`OP_FALSE OP_RETURN ${m(w)} ${m("SET")}`;for(const[t,o]of Object.entries(a))"cmd"!==t&&(c=`${c} ${m(t)} ${m(o)}`)}return o.addOutput({satoshis:0,lockingScript:n.fromASM(c||"OP_FALSE OP_RETURN")}),await o.sign(),{tx:o,spentOutpoints:s}};export{O as MAX_TOKEN_SUPPLY,V as OrdLock,k as OrdP2PKH,x as RoytaltyType,v as TokenInputMode,I as TokenSelectionStrategy,B as TokenType,et as burnOrdinals,J as cancelOrdListings,X as cancelOrdTokenListings,q as createOrdListings,H as createOrdTokenListings,D as createOrdinals,nt as deployBsv21Token,P as fetchNftUtxos,E as fetchPayUtxos,N as fetchTokenUtxos,G as purchaseOrdListing,Y as purchaseOrdTokenListing,_ as selectTokenUtxos,L as sendOrdinals,M as sendUtxos,F as stringifyMetaData,R as transferOrdTokens,j as validateSubTypeData};
//# sourceMappingURL=index.modern.js.map
