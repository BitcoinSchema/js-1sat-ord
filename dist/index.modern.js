import{P2PKH as t,LockingScript as o,Script as e,Utils as n,fromUtxo as s,SatoshisPerKilobyte as r,Transaction as i,OP as a,BigNumber as c,UnlockingScript as u,TransactionSignature as d,NodejsHttpClient as f}from"@bsv/sdk";import{toToken as l,toTokenSat as p,ReturnTypes as h}from"satoshi-token";import{Sigma as g}from"sigma-protocol";import{imageMeta as w}from"image-meta";const m=t=>Buffer.from(t).toString("hex"),y="1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5",b=10,k="https://ordinals.gorillapool.io/api";class S extends t{lock(e,n,s){let r="";if(void 0!==(null==n?void 0:n.dataB64)&&void 0!==(null==n?void 0:n.contentType)){const t=m("ord"),o=Buffer.from(n.dataB64,"base64").toString("hex").trim();if(!o)throw new Error("Invalid file data");const e=m(n.contentType);if(!e)throw new Error("Invalid media type");r=`OP_0 OP_IF ${t} OP_1 ${e} OP_0 ${o} OP_ENDIF`}let i=`${r?`${r} `:""}${(new t).lock(e).toASM()}`;if(s&&(!s.app||!s.type))throw new Error("MAP.app and MAP.type are required fields");if(null!=s&&s.app&&null!=s&&s.type){i=`${i?`${i} `:""}OP_RETURN ${m(y)} ${m("SET")}`;for(const[t,o]of Object.entries(s))"cmd"!==t&&(i=`${i} ${m(t)} ${m(o)}`)}return o.fromASM(i)}}function B(){return B=Object.assign?Object.assign.bind():function(t){for(var o=1;o<arguments.length;o++){var e=arguments[o];for(var n in e)({}).hasOwnProperty.call(e,n)&&(t[n]=e[n])}return t},B.apply(null,arguments)}var I,x,v,O;!function(t){t.SmallestFirst="smallest",t.LargestFirst="largest",t.RetainOrder="retain",t.Random="random"}(I||(I={})),function(t){t.BSV20="bsv20",t.BSV21="bsv21"}(x||(x={})),function(t){t.Paymail="paymail",t.Address="address",t.Script="script"}(v||(v={})),function(t){t.All="all",t.Needed="needed"}(O||(O={}));const $=2n**64n-1n,{fromBase58Check:A}=n,E=(t,o)=>s(B({},t,{script:Buffer.from(t.script,"base64").toString("hex")}),o),T=async(o,e="base64")=>{const n=`${k}/txos/address/${o}/unspent?bsv20=false`;console.log({payUrl:n});const s=await fetch(n);if(!s.ok)throw new Error("Error fetching pay utxos");let r=await s.json();r=r.filter(t=>1!==t.satoshis&&!C(t));const i=A(o),a=(new t).lock(i.data);return r=r.map(t=>({txid:t.txid,vout:t.vout,satoshis:t.satoshis,script:"hex"===e||"base64"===e?Buffer.from(a.toBinary()).toString(e):a.toASM()})),r},N=async(t,o,n=10,s=0,r="base64")=>{let i=`${k}/txos/address/${t}/unspent?limit=${n}&offset=${s}&`;o&&(i+=`q=${Buffer.from(JSON.stringify({map:{subTypeData:{collectionId:o}}})).toString("base64")}`);const a=await fetch(i);if(!a.ok)throw new Error(`Error fetching NFT utxos for ${t}`);let c=await a.json();c=c.filter(t=>{var o;return 1===t.satoshis&&!(null!=(o=t.data)&&o.list)});const u=c.map(t=>`${t.txid}_${t.vout}`),d=await fetch(`${k}/txos/outpoints?script=true`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify([...u])});if(!d.ok)throw new Error(`Error fetching NFT scripts for ${t}`);return c=(await d.json()||[]).map(t=>{let n=t.script;"hex"===r?n=Buffer.from(n,"base64").toString("hex"):"asm"===r&&(n=e.fromHex(Buffer.from(n,"base64").toString("hex")).toASM());const s={origin:t.origin.outpoint,script:n,vout:t.vout,txid:t.txid,satoshis:1};return o&&(s.collectionId=o),s}),c},P=async(t,o,e,n=10,s=0)=>{const r=`${k}/bsv20/${e}/${t===x.BSV20?"tick":"id"}/${o}?bsv20=true&listing=false&limit=${n}&offset=${s}`,i=await fetch(r);if(!i.ok)throw new Error(`Error fetching ${t} utxos`);let a=await i.json();return a=a.map(t=>({amt:t.amt,script:t.script,vout:t.vout,txid:t.txid,id:o,satoshis:1})),a},C=t=>!!t.lock,_=(t,o,e,n={})=>{const{inputStrategy:s=I.RetainOrder,outputStrategy:r=I.RetainOrder}=n,i=[...t].sort((t,o)=>{if(s===I.RetainOrder)return 0;const e=BigInt(t.amt),n=BigInt(o.amt);switch(s){case I.SmallestFirst:return Number(e-n);case I.LargestFirst:return Number(n-e);case I.Random:return Math.random()-.5;default:return 0}});let a=0;const c=[];for(const t of i)if(c.push(t),a+=l(t.amt,e),a>=o&&o>0)break;return r!==I.RetainOrder&&c.sort((t,o)=>{const e=BigInt(t.amt),n=BigInt(o.amt);switch(r){case I.SmallestFirst:return Number(e-n);case I.LargestFirst:return Number(n-e);case I.Random:return Math.random()-.5;default:return 0}}),{selectedUtxos:c,totalSelected:a,isEnough:a>=o}},F=async(t,o)=>{const e=null==o?void 0:o.idKey,n=null==o?void 0:o.keyHost;if(e){const o=new g(t),{signedTx:n}=o.sign(e);return n}if(n){const e=null==o?void 0:o.authToken,s=new g(t);try{const{signedTx:t}=await s.remoteSign(n,e);return t}catch(t){throw console.log(t),new Error(`Remote signing to ${n} failed`)}}throw new Error("Signer must be a LocalSigner or RemoteSigner")},D=t=>{if(!t)return;const o={app:t.app,type:t.type};for(const[e,n]of Object.entries(t))void 0!==n&&(o[e]="string"==typeof n?n:Array.isArray(n)||"object"==typeof n?JSON.stringify(n):String(n));return o},L=async o=>{const{utxos:s,destinations:a,paymentPk:c,changeAddress:u,satsPerKb:d=b,metaData:f,signer:l,additionalPayments:p=[]}=o;a.length>100&&console.warn("Creating many inscriptions at once can be slow. Consider using multiple transactions instead.");const h=new r(d);let g,w=new i;for(const t of a){if(!t.inscription)throw new Error("Inscription is required for all destinations");if(f)for(const t of Object.keys(f))void 0===f[t]&&delete f[t];w.addOutput({satoshis:1,lockingScript:(new S).lock(t.address,t.inscription,D(f))})}for(const o of p)w.addOutput({satoshis:o.amount,lockingScript:(new t).lock(o.to)});const m=u||c.toAddress().toString(),y=(new t).lock(m);w.addOutput({lockingScript:y,change:!0});let k=0n;const B=w.outputs.reduce((t,o)=>t+BigInt(o.satoshis||0),0n);if(l){const o=s.pop();w.addInput(E(o,(new t).unlock(c,"all",!0,o.satoshis,e.fromBinary(n.toArray(o.script,"base64"))))),k+=BigInt(o.satoshis),w=await F(w,l)}let I=0;for(const o of s){if(k>=B+BigInt(I))break;const s=E(o,(new t).unlock(c,"all",!0,o.satoshis,e.fromBinary(n.toArray(o.script,"base64"))));w.addInput(s),k+=BigInt(o.satoshis),I=await h.computeFee(w)}if(k<B+BigInt(I))throw new Error(`Not enough funds to create ordinals. Total sats in: ${k}, Total sats out: ${B}, Fee: ${I}`);await w.fee(h),await w.sign();const x=w.outputs.findIndex(t=>t.change);if(-1!==x){const t=w.outputs[x];g={satoshis:t.satoshis,txid:w.id("hex"),vout:x,script:Buffer.from(t.lockingScript.toBinary()).toString("base64")}}return g&&(g.satoshis=w.outputs[w.outputs.length-1].satoshis,g.txid=w.id("hex")),{tx:w,spentOutpoints:s.map(t=>`${t.txid}_${t.vout}`),payChange:g}},U=async o=>{o.satsPerKb||(o.satsPerKb=b),o.additionalPayments||(o.additionalPayments=[]),void 0===o.enforceUniformSend&&(o.enforceUniformSend=!0);const s=new r(o.satsPerKb);let a=new i;const c=[];for(const t of o.ordinals){if(1!==t.satoshis)throw new Error("1Sat Ordinal utxos must have exactly 1 satoshi");const s=E(t,(new S).unlock(o.ordPk,"all",!0,t.satoshis,e.fromBinary(n.toArray(t.script,"base64"))));c.push(`${t.txid}_${t.vout}`),a.addInput(s)}if(o.enforceUniformSend&&o.destinations.length!==o.ordinals.length)throw new Error("Number of destinations must match number of ordinals being sent");for(const e of o.destinations){var u,d;let n;n=null!=(u=e.inscription)&&u.dataB64&&null!=(d=e.inscription)&&d.contentType?(new S).lock(e.address,e.inscription,D(o.metaData)):(new t).lock(e.address),a.addOutput({satoshis:1,lockingScript:n})}for(const e of o.additionalPayments)a.addOutput({satoshis:e.amount,lockingScript:(new t).lock(e.to)});let f;const l=o.changeAddress||o.paymentPk.toAddress().toString(),p=(new t).lock(l);a.addOutput({lockingScript:p,change:!0});let h=0n;const g=a.outputs.reduce((t,o)=>t+BigInt(o.satoshis||0),0n);let w=0;for(const r of o.paymentUtxos){const i=E(r,(new t).unlock(o.paymentPk,"all",!0,r.satoshis,e.fromBinary(n.toArray(r.script,"base64"))));if(c.push(`${r.txid}_${r.vout}`),a.addInput(i),h+=BigInt(r.satoshis),w=await s.computeFee(a),h>=g+BigInt(w))break}if(h<g)throw new Error("Not enough ordinals to send");o.signer&&(a=await F(a,o.signer)),await a.fee(s),await a.sign();const m=a.outputs.findIndex(t=>t.change);if(-1!==m){const t=a.outputs[m];f={satoshis:t.satoshis,txid:a.id("hex"),vout:m,script:Buffer.from(t.lockingScript.toBinary()).toString("base64")}}return f&&(f.satoshis=a.outputs[a.outputs.length-1].satoshis,f.txid=a.id("hex")),{tx:a,spentOutpoints:c,payChange:f}},R=async o=>{const{utxos:s,paymentPk:a,payments:c,satsPerKb:u=b,changeAddress:d=a.toAddress().toString(),metaData:f}=o,l=new r(u),p=new i;for(const t of c){const o={satoshis:t.amount,lockingScript:(new S).lock(t.to,void 0,f)};p.addOutput(o)}let h=0n;const g=p.outputs.reduce((t,o)=>t+(o.satoshis||0),0);let w,m=0;for(const o of s){const s=E(o,(new t).unlock(a,"all",!0,o.satoshis,e.fromBinary(n.toArray(o.script,"base64"))));if(p.addInput(s),h+=BigInt(o.satoshis),m=await l.computeFee(p),h>=g+m)break}if(h<g+m)throw new Error(`Not enough funds to send. Total sats in: ${h}, Total sats out: ${g}, Fee: ${m}`);if(h>g+m){const o=(new t).lock(d),e={lockingScript:o,change:!0};w={txid:"",vout:p.outputs.length,satoshis:0,script:Buffer.from(o.toHex(),"hex").toString("base64")},p.addOutput(e)}else h<g+m&&console.log("No change needed");await p.fee(l),await p.sign();const y=p.outputs.findIndex(t=>t.change);if(-1!==y){const t=p.outputs[y];w={satoshis:t.satoshis,txid:p.id("hex"),vout:y,script:Buffer.from(t.lockingScript.toBinary()).toString("base64")}}return w&&(w.satoshis=p.outputs[p.outputs.length-1].satoshis,w.txid=p.id("hex")),{tx:p,spentOutpoints:s.map(t=>`${t.txid}_${t.vout}`),payChange:w}},j=async o=>{const{protocol:s,tokenID:a,utxos:c,inputTokens:u,distributions:d,paymentPk:f,ordPk:l,changeAddress:g,tokenChangeAddress:w,satsPerKb:m=b,metaData:y,signer:k,decimals:I,additionalPayments:v=[],burn:$=!1,tokenInputMode:A=O.Needed,splitConfig:T={outputs:1,omitMetaData:!1}}=o;if(!u.every(t=>t.id===a))throw new Error("Input tokens do not match the provided tokenID");let N=0n,P=0n,C=0n;const _=d.reduce((t,o)=>t+p(o.tokens,I,h.BigInt),0n),L=new r(m);let U,R=new i;if(A===O.All)U=u,P=u.reduce((t,o)=>t+BigInt(o.amt),0n);else{U=[];for(const t of u)if(U.push(t),P+=BigInt(t.amt),P>=_)break;if(P<_)throw new Error("Not enough tokens to satisfy the transfer amount")}for(const t of U){const o=n.toArray(t.script,"base64"),s=e.fromBinary(o);R.addInput(E(t,(new S).unlock(l,"all",!0,t.satoshis,s)))}if(y)for(const t of Object.keys(y))void 0===y[t]&&delete y[t];for(const t of d){const o=p(t.tokens,I,h.BigInt);console.log({distTokenSat:o});const e={p:"bsv-20",op:$?"burn":"transfer",amt:o.toString()};let n;if(s===x.BSV20)n=B({},e,{tick:a});else{if(s!==x.BSV21)throw new Error("Invalid protocol");n=B({},e,{id:a})}R.addOutput({satoshis:1,lockingScript:(new S).lock(t.address,{dataB64:Buffer.from(JSON.stringify(n)).toString("base64"),contentType:"application/bsv-20"},t.omitMetaData?void 0:D(y))}),C+=o}if(N=P-C,N<0n)throw new Error("Not enough tokens to send");let j,q=[];console.log({changeTsats:N}),N>0n&&(q=M(R,N,s,a,w||l.toAddress().toString(),l,y,T,I));for(const o of v)R.addOutput({satoshis:o.amount,lockingScript:(new t).lock(o.to)});const K=g||f.toAddress().toString(),V=(new t).lock(K);R.addOutput({lockingScript:V,change:!0});let H=0n;const J=R.outputs.reduce((t,o)=>t+BigInt(o.satoshis||0),0n);let X=0;for(const o of c){const s=E(o,(new t).unlock(f,"all",!0,o.satoshis,e.fromBinary(n.toArray(o.script,"base64"))));if(R.addInput(s),H+=BigInt(o.satoshis),X=await L.computeFee(R),H>=J+BigInt(X))break}if(H<J+BigInt(X))throw new Error(`Not enough funds to transfer tokens. Total sats in: ${H}, Total sats out: ${J}, Fee: ${X}`);k&&(R=await F(R,k)),await R.fee(L),await R.sign();const W=R.id("hex");for(const t of q)t.txid=W;const G=R.outputs.findIndex(t=>t.change);if(-1!==G){const t=R.outputs[G];j={satoshis:t.satoshis,txid:W,vout:G,script:Buffer.from(t.lockingScript.toBinary()).toString("base64")}}return j&&(j.satoshis=R.outputs[R.outputs.length-1].satoshis,j.txid=R.id("hex")),{tx:R,spentOutpoints:R.inputs.map(t=>`${t.sourceTXID}_${t.sourceOutputIndex}`),payChange:j,tokenChange:q}},M=(t,o,e,n,s,r,i,a,c)=>{const u=[],d=void 0!==a.threshold?p(a.threshold,c,h.BigInt):void 0,f=a.outputs,l=o;let g;console.log({splitChangeAmt:l}),void 0!==d&&d>0n?(g=l/d,g=BigInt(Math.min(Number(g),f))):g=BigInt(f),g=BigInt(Math.max(Number(g),1));const w=l/g;let m=l%g;for(let o=0n;o<g;o++){let o=w;m>0n&&(o+=1n,m-=1n);const c={p:"bsv-20",op:"transfer",amt:o.toString()};let d;if(e===x.BSV20)d=B({},c,{tick:n});else{if(e!==x.BSV21)throw new Error("Invalid protocol");d=B({},c,{id:n})}const f=(new S).lock(s||r.toAddress().toString(),{dataB64:Buffer.from(JSON.stringify(d)).toString("base64"),contentType:"application/bsv-20"},a.omitMetaData?void 0:D(i)),l=t.outputs.length;t.addOutput({lockingScript:f,satoshis:1}),u.push({id:n,satoshis:1,script:Buffer.from(f.toBinary()).toString("base64"),txid:"",vout:l,amt:o.toString()})}return u},q=(t,o)=>{try{if("collection"===t){const t=o;if(!t.description)return new Error("Collection description is required");if(!t.quantity)return new Error("Collection quantity is required");if(t.rarityLabels){if(!Array.isArray(t.rarityLabels))return new Error("Rarity labels must be an array");if(!t.rarityLabels.every(t=>Object.values(t).every(t=>"string"==typeof t)))return new Error(`Invalid rarity labels ${t.rarityLabels}`)}if(t.traits){if("object"!=typeof t.traits)return new Error("Collection traits must be an object");if(t.traits&&!Object.keys(t.traits).every(o=>"string"==typeof o&&"object"==typeof t.traits[o]))return new Error("Collection traits must be a valid CollectionTraits object")}}if("collectionItem"===t){const t=o;if(!t.collectionId)return new Error("Collection id is required");if(!t.collectionId.includes("_"))return new Error("Collection id must be a valid outpoint");if(64!==t.collectionId.split("_")[0].length)return new Error("Collection id must contain a valid txid");if(Number.isNaN(Number.parseInt(t.collectionId.split("_")[1])))return new Error("Collection id must contain a valid vout");if(t.mintNumber&&"number"!=typeof t.mintNumber)return new Error("Mint number must be a number");if(t.rank&&"number"!=typeof t.rank)return new Error("Rank must be a number");if(t.rarityLabel&&"string"!=typeof t.rarityLabel)return new Error("Rarity label must be a string");if(t.traits&&"object"!=typeof t.traits)return new Error("Traits must be an object");if(t.attachments&&!Array.isArray(t.attachments))return new Error("Attachments must be an array")}return}catch(t){return new Error("Invalid JSON data")}};class K{lock(o,s,r,i){const a=n.fromBase58Check(o).data,c=n.fromBase58Check(s).data;let u=new e;if(void 0!==(null==i?void 0:i.dataB64)&&void 0!==(null==i?void 0:i.contentType)){const t=m("ord"),o=Buffer.from(i.dataB64,"base64").toString("hex").trim();if(!o)throw new Error("Invalid file data");const n=m(i.contentType);if(!n)throw new Error("Invalid media type");u=e.fromASM(`OP_0 OP_IF ${t} OP_1 ${n} OP_0 ${o} OP_ENDIF`)}return u.writeScript(e.fromHex("2097dfd76851bf465e8f715593b217714858bbe9570ff3bd5e33840a34e20ff0262102ba79df5f8ae7604a9830f03c7933028186aede0675a16f025dc4f8be8eec0382201008ce7480da41702918d1ec8e6849ba32b4d65b1e40dc669c31a1e6306b266c0000")).writeBin(a).writeBin(K.buildOutput(r,(new t).lock(c).toBinary())).writeScript(e.fromHex("615179547a75537a537a537a0079537a75527a527a7575615579008763567901c161517957795779210ac407f0e4bd44bfc207355a778b046225a7068fc59ee7eda43ad905aadbffc800206c266b30e6a1319c66dc401e5bd6b432ba49688eecd118297041da8074ce081059795679615679aa0079610079517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01007e81517a75615779567956795679567961537956795479577995939521414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff00517951796151795179970079009f63007952799367007968517a75517a75517a7561527a75517a517951795296a0630079527994527a75517a6853798277527982775379012080517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01205279947f7754537993527993013051797e527e54797e58797e527e53797e52797e57797e0079517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a756100795779ac517a75517a75517a75517a75517a75517a75517a75517a75517a7561517a75517a756169587951797e58797eaa577961007982775179517958947f7551790128947f77517a75517a75618777777777777777777767557951876351795779a9876957795779ac777777777777777767006868"))}cancelListing(o,e="all",n=!1,s,r){const i=(new t).unlock(o,e,n,s,r);return{sign:async function(t,o){return(await i.sign(t,o)).writeOpCode(a.OP_1)},estimateLength:async function(){return 107}}}purchaseListing(t,o){const e={sign:async function(e,s){var r;if(e.outputs.length<2)throw new Error("Malformed transaction");const i=(new u).writeBin(K.buildOutput(e.outputs[0].satoshis||0,e.outputs[0].lockingScript.toBinary()));if(e.outputs.length>2){const t=new n.Writer;for(const o of e.outputs.slice(2))t.write(K.buildOutput(o.satoshis||0,o.lockingScript.toBinary()));i.writeBin(t.toArray())}else i.writeOpCode(a.OP_0);const c=e.inputs[s];let f=t;if(!f&&c.sourceTransaction)f=c.sourceTransaction.outputs[c.sourceOutputIndex].satoshis;else if(!t)throw new Error("sourceTransaction or sourceSatoshis is required");const l=c.sourceTXID||(null==(r=c.sourceTransaction)?void 0:r.id("hex"));let p=o;var h;p||(p=null==(h=c.sourceTransaction)?void 0:h.outputs[c.sourceOutputIndex].lockingScript);const g=d.format({sourceTXID:l,sourceOutputIndex:c.sourceOutputIndex,sourceSatoshis:f,transactionVersion:e.version,otherInputs:[],inputIndex:s,outputs:e.outputs,inputSequence:c.sequence,subscript:p,lockTime:e.lockTime,scope:d.SIGHASH_ALL|d.SIGHASH_ANYONECANPAY|d.SIGHASH_FORKID});return i.writeBin(g).writeOpCode(a.OP_0)},estimateLength:async function(t,o){return(await e.sign(t,o)).toBinary().length}};return e}static buildOutput(t,o){const e=new n.Writer;return e.writeUInt64LEBn(new c(t)),e.writeVarIntNum(o.length),e.write(o),e.toArray()}}const{toArray:V}=n,H=async o=>{const{utxos:s,listings:a,paymentPk:c,ordPk:u,changeAddress:d,satsPerKb:f=b,additionalPayments:l=[]}=o,p=new r(f),h=new i;a.length>100&&console.warn("Creating many inscriptions at once can be slow. Consider using multiple transactions instead.");for(const t of a){h.addOutput({satoshis:1,lockingScript:(new K).lock(t.ordAddress,t.payAddress,t.price)});const o=V(t.listingUtxo.script,"base64"),n=e.fromBinary(o);h.addInput(E(t.listingUtxo,(new S).unlock(u,"all",!0,t.listingUtxo.satoshis,n)))}for(const o of l)h.addOutput({satoshis:o.amount,lockingScript:(new t).lock(o.to)});let g;const w=(new t).lock(d||c.toAddress().toString());h.addOutput({lockingScript:w,change:!0});let m=0n;const y=h.outputs.reduce((t,o)=>t+BigInt(o.satoshis||0),0n);let k=0;for(const o of s){const s=E(o,(new t).unlock(c,"all",!0,o.satoshis,e.fromBinary(n.toArray(o.script,"base64"))));if(h.addInput(s),m+=BigInt(o.satoshis),k=await p.computeFee(h),m>=y+BigInt(k))break}if(m<y+BigInt(k))throw new Error(`Not enough funds to create ordinal listings. Total sats in: ${m}, Total sats out: ${y}, Fee: ${k}`);await h.fee(p),await h.sign();const B=h.outputs.findIndex(t=>t.change);if(-1!==B){const t=h.outputs[B];g={satoshis:t.satoshis,txid:h.id("hex"),vout:B,script:Buffer.from(t.lockingScript.toBinary()).toString("base64")}}return g&&(g.satoshis=h.outputs[h.outputs.length-1].satoshis,g.txid=h.id("hex")),{tx:h,spentOutpoints:h.inputs.map(t=>`${t.sourceTXID}_${t.sourceOutputIndex}`),payChange:g}},J=async o=>{const{utxos:s,protocol:a,tokenID:c,ordPk:u,paymentPk:d,additionalPayments:f=[],changeAddress:l,tokenChangeAddress:g,inputTokens:w,listings:m,decimals:y,satsPerKb:k=b}=o;if(m.length>100&&console.warn("Creating many inscriptions at once can be slow. Consider using multiple transactions instead."),!w.every(t=>t.id===c))throw new Error("Input tokens do not match the provided tokenID");let I=0n,v=0n,O=0n;if(!w.every(t=>t.id===c))throw new Error("Input tokens do not match the provided tokenID");const $=new r(k),A=new i;for(const t of m){const o=p(t.tokens,y,h.BigInt),e={p:"bsv-20",op:"transfer",amt:o.toString()};let n;if(a===x.BSV20)n=B({},e,{tick:c});else{if(a!==x.BSV21)throw new Error("Invalid protocol");n=B({},e,{id:c})}A.addOutput({satoshis:1,lockingScript:(new K).lock(t.ordAddress,t.payAddress,t.price,{dataB64:Buffer.from(JSON.stringify(n)).toString("base64"),contentType:"application/bsv-20"})}),O+=o}for(const t of w)A.addInput(E(t,(new S).unlock(u,"all",!0,t.satoshis,e.fromBinary(V(t.script,"base64"))))),v+=BigInt(t.amt);let T,N;if(I=v-O,I<0n)throw new Error("Not enough tokens to send");if(I>0n){const t={p:"bsv-20",op:"transfer",amt:I.toString()};let o;if(a===x.BSV20)o=B({},t,{tick:c});else{if(a!==x.BSV21)throw new Error("Invalid protocol");o=B({},t,{id:c})}const e=(new S).lock(g,{dataB64:Buffer.from(JSON.stringify(o)).toString("base64"),contentType:"application/bsv-20"}),n=A.outputs.length;A.addOutput({lockingScript:e,satoshis:1}),T=[{id:c,satoshis:1,script:Buffer.from(e.toBinary()).toString("base64"),txid:"",vout:n,amt:I.toString()}]}for(const o of f)A.addOutput({satoshis:o.amount,lockingScript:(new t).lock(o.to)});const P=l||d.toAddress().toString(),C=(new t).lock(P);A.addOutput({lockingScript:C,change:!0});let _=0n;const F=A.outputs.reduce((t,o)=>t+BigInt(o.satoshis||0),0n);let D=0;for(const o of s){const s=E(o,(new t).unlock(d,"all",!0,o.satoshis,e.fromBinary(n.toArray(o.script,"base64"))));if(A.addInput(s),_+=BigInt(o.satoshis),D=await $.computeFee(A),_>=F+BigInt(D))break}if(_<F+BigInt(D))throw new Error(`Not enough funds to create token listings. Total sats in: ${_}, Total sats out: ${F}, Fee: ${D}`);await A.fee($),await A.sign();const L=A.id("hex");T&&(T=T.map(t=>B({},t,{txid:L})));const U=A.outputs.findIndex(t=>t.change);if(-1!==U){const t=A.outputs[U];N={satoshis:t.satoshis,txid:L,vout:U,script:Buffer.from(t.lockingScript.toBinary()).toString("base64")}}return N&&(N.satoshis=A.outputs[A.outputs.length-1].satoshis,N.txid=A.id("hex")),{tx:A,spentOutpoints:A.inputs.map(t=>`${t.sourceTXID}_${t.sourceOutputIndex}`),payChange:N,tokenChange:T}},X=async o=>{const{utxos:s,listingUtxos:a,ordPk:c,paymentPk:u,changeAddress:d,additionalPayments:f=[],satsPerKb:l=b}=o;a.length>100&&console.warn("Creating many inscriptions at once can be slow. Consider using multiple transactions instead.");const p=new r(l),h=new i;for(const o of a)h.addInput(E(o,(new K).cancelListing(c,"all",!0,o.satoshis,e.fromBinary(n.toArray(o.script,"base64"))))),h.addOutput({satoshis:1,lockingScript:(new t).lock(c.toAddress().toString())});for(const o of f)h.addOutput({satoshis:o.amount,lockingScript:(new t).lock(o.to)});let g;const w=d||u.toAddress().toString(),m=(new t).lock(w);h.addOutput({lockingScript:m,change:!0});let y=0n;const k=h.outputs.reduce((t,o)=>t+BigInt(o.satoshis||0),0n);let S=0;for(const o of s){const s=E(o,(new t).unlock(u,"all",!0,o.satoshis,e.fromBinary(n.toArray(o.script,"base64"))));if(h.addInput(s),y+=BigInt(o.satoshis),S=await p.computeFee(h),y>=k+BigInt(S))break}if(y<k+BigInt(S))throw new Error(`Not enough funds to cancel ordinal listings. Total sats in: ${y}, Total sats out: ${k}, Fee: ${S}`);await h.fee(p),await h.sign();const B=h.outputs.findIndex(t=>t.change);if(-1!==B){const t=h.outputs[B];g={satoshis:t.satoshis,txid:h.id("hex"),vout:B,script:Buffer.from(t.lockingScript.toBinary()).toString("base64")}}return g&&(g.satoshis=h.outputs[h.outputs.length-1].satoshis,g.txid=h.id("hex")),{tx:h,spentOutpoints:h.inputs.map(t=>`${t.sourceTXID}_${t.sourceOutputIndex}`),payChange:g}},W=async o=>{const{protocol:s,tokenID:a,ordAddress:c,changeAddress:u,paymentPk:d,ordPk:f,additionalPayments:l,listingUtxos:p,utxos:h,satsPerKb:g=b}=o;let w=0;if(p.length>100&&console.warn("Creating many inscriptions at once can be slow. Consider using multiple transactions instead."),!p.every(t=>t.id===a))throw new Error("Input tokens do not match the provided tokenID");const m=new r(g),y=new i;for(const t of p)y.addInput(E(t,(new K).cancelListing(f,"all",!0,t.satoshis,e.fromBinary(n.toArray(t.script,"base64"))))),w+=Number.parseInt(t.amt);const k={p:"bsv-20",op:"transfer",amt:w.toString()};let I;if(s===x.BSV20)I=B({},k,{tick:a});else{if(s!==x.BSV21)throw new Error("Invalid protocol");I=B({},k,{id:a})}const v={address:c||f.toAddress().toString(),inscription:{dataB64:Buffer.from(JSON.stringify(I)).toString("base64"),contentType:"application/bsv-20"}},O=(new S).lock(v.address,v.inscription);y.addOutput({satoshis:1,lockingScript:O});for(const o of l)y.addOutput({satoshis:o.amount,lockingScript:(new t).lock(o.to)});let $;const A=u||d.toAddress().toString(),T=(new t).lock(A);y.addOutput({lockingScript:T,change:!0});let N=0n;const P=y.outputs.reduce((t,o)=>t+BigInt(o.satoshis||0),0n);let C=0;for(const o of h){const s=E(o,(new t).unlock(d,"all",!0,o.satoshis,e.fromBinary(n.toArray(o.script,"base64"))));if(y.addInput(s),N+=BigInt(o.satoshis),C=await m.computeFee(y),N>=P+BigInt(C))break}if(N<P+BigInt(C))throw new Error(`Not enough funds to cancel token listings. Total sats in: ${N}, Total sats out: ${P}, Fee: ${C}`);await y.fee(m),await y.sign();const _=[{amt:w.toString(),script:Buffer.from(O.toHex(),"hex").toString("base64"),txid:y.id("hex"),vout:0,id:a,satoshis:1}],F=y.outputs.findIndex(t=>t.change);if(-1!==F){const t=y.outputs[F];$={satoshis:t.satoshis,txid:y.id("hex"),vout:F,script:Buffer.from(t.lockingScript.toBinary()).toString("base64")}}return $&&($.satoshis=y.outputs[y.outputs.length-1].satoshis,$.txid=y.id("hex")),{tx:y,spentOutpoints:y.inputs.map(t=>`${t.sourceTXID}_${t.sourceOutputIndex}`),payChange:$,tokenChange:_}},G=async(t,o)=>{throw new Error("Not implemented")},Y=async s=>{const{utxos:a,paymentPk:c,listing:u,ordAddress:d,changeAddress:f,additionalPayments:l=[],satsPerKb:p=b,royalties:h=[],metaData:g}=s,w=new r(p),m=new i;m.addInput(E(u.listingUtxo,(new K).purchaseListing(1,e.fromBinary(n.toArray(u.listingUtxo.script,"base64"))))),m.addOutput({satoshis:1,lockingScript:(new S).lock(d,void 0,g)});const y=new n.Reader(n.toArray(u.payout,"base64")),k=y.readUInt64LEBn().toNumber(),B=y.readVarIntNum(),I=y.read(B),x=o.fromBinary(I);m.addOutput({satoshis:k,lockingScript:x});for(const o of l)m.addOutput({satoshis:o.amount,lockingScript:(new t).lock(o.to)});for(const o of h){let s;const r=Math.floor(Number(o.percentage)*k);switch(o.type){case v.Paymail:s=await G();break;case v.Script:s=e.fromBinary(n.toArray(o.destination,"base64"));break;case v.Address:s=(new t).lock(o.destination);break;default:throw new Error("Invalid royalty type")}if(!s)throw new Error("Invalid royalty destination");m.addOutput({satoshis:r,lockingScript:s})}let O;const $=f||c.toAddress().toString(),A=(new t).lock($);m.addOutput({lockingScript:A,change:!0});let T=0n;const N=m.outputs.reduce((t,o)=>t+BigInt(o.satoshis||0),0n);let P=0;for(const o of a){const s=E(o,(new t).unlock(c,"all",!0,o.satoshis,e.fromBinary(n.toArray(o.script,"base64"))));if(m.addInput(s),T+=BigInt(o.satoshis),P=await w.computeFee(m),T>=N+BigInt(P))break}if(T<N+BigInt(P))throw new Error(`Not enough funds to purchase ordinal listing. Total sats in: ${T}, Total sats out: ${N}, Fee: ${P}`);await m.fee(w),await m.sign();const C=m.outputs.findIndex(t=>t.change);if(-1!==C){const t=m.outputs[C];O={satoshis:t.satoshis,txid:m.id("hex"),vout:C,script:Buffer.from(t.lockingScript.toBinary()).toString("base64")}}return O&&(O.satoshis=m.outputs[m.outputs.length-1].satoshis,O.txid=m.id("hex")),{tx:m,spentOutpoints:m.inputs.map(t=>`${t.sourceTXID}_${t.sourceOutputIndex}`),payChange:O}},Q=async s=>{const{protocol:a,tokenID:c,utxos:u,paymentPk:d,listingUtxo:f,ordAddress:l,changeAddress:p,satsPerKb:h=b,additionalPayments:g=[],metaData:w}=s,m=new r(h),y=new i;y.addInput(E(f,(new K).purchaseListing(1,e.fromBinary(n.toArray(f.script,"base64")))));const k={p:"bsv-20",op:"transfer",amt:f.amt};let I;if(a===x.BSV20)I=B({},k,{tick:c});else{if(a!==x.BSV21)throw new Error("Invalid protocol");I=B({},k,{id:c})}const v=Buffer.from(JSON.stringify(I)).toString("base64");if(y.addOutput({satoshis:1,lockingScript:(new S).lock(l,{dataB64:v,contentType:"application/bsv-20"},w)}),!f.payout)throw new Error("Listing UTXO does not have a payout script");const O=new n.Reader(n.toArray(f.payout,"base64")),$=O.readUInt64LEBn().toNumber(),A=O.readVarIntNum(),T=O.read(A),N=o.fromBinary(T);y.addOutput({satoshis:$,lockingScript:N});for(const o of g)y.addOutput({satoshis:o.amount,lockingScript:(new t).lock(o.to)});let P;const C=p||d.toAddress().toString(),_=(new t).lock(C);y.addOutput({lockingScript:_,change:!0});let F=0n;const D=y.outputs.reduce((t,o)=>t+BigInt(o.satoshis||0),0n);let L=0;for(const o of u){const s=E(o,(new t).unlock(d,"all",!0,o.satoshis,e.fromBinary(n.toArray(o.script,"base64"))));if(y.addInput(s),F+=BigInt(o.satoshis),L=await m.computeFee(y),F>=D+BigInt(L))break}if(F<D+BigInt(L))throw new Error(`Not enough funds to purchase token listing. Total sats in: ${F}, Total sats out: ${D}, Fee: ${L}`);await y.fee(m),await y.sign();const U=y.outputs.findIndex(t=>t.change);if(-1!==U){const t=y.outputs[U];P={satoshis:t.satoshis,txid:y.id("hex"),vout:U,script:Buffer.from(t.lockingScript.toBinary()).toString("base64")}}return P&&(P.satoshis=y.outputs[y.outputs.length-1].satoshis,P.txid=y.id("hex")),{tx:y,spentOutpoints:y.inputs.map(t=>`${t.sourceTXID}_${t.sourceOutputIndex}`),payChange:P}},z=new Error("Image must be a square image with dimensions <= 400x400"),Z=new Error("Image must be a square image"),tt=new Error("Error processing image"),ot=new Error("Image dimensions are undefined"),et=async o=>{const{symbol:s,icon:a,decimals:c,utxos:u,initialDistribution:d,paymentPk:f,destinationAddress:l,changeAddress:p,satsPerKb:h=b,additionalPayments:g=[]}=o,m=new r(h),y=new i;let k;if("string"==typeof a)k=a;else{const t=await(async t=>{const{dataB64:o,contentType:e}=t;if("image/svg+xml"===e)return(t=>{const o=Buffer.from(t,"base64").toString("utf-8"),e=o.match(/<svg[^>]*\s+width="([^"]+)"/),n=o.match(/<svg[^>]*\s+height="([^"]+)"/);if(!e||!n)return ot;const s=Number.parseInt(e[1],10),r=Number.parseInt(n[1],10);return Number.isNaN(s)||Number.isNaN(r)?ot:s!==r?Z:s>400||r>400?z:null})(o);if((n=e)!=n)return tt;var n;try{const t=Buffer.from(o,"base64"),e=w(t);return void 0===e.width||void 0===e.height?ot:e.width!==e.height?Z:e.width>400||e.height>400?z:null}catch(t){return tt}})(a);if(t)throw t;const o=(new S).lock(l,a);y.addOutput({satoshis:1,lockingScript:o}),k="_0"}if(!(t=>{if(!t.includes("_")||t.endsWith("_"))return!1;const o=Number.parseInt(t.split("_")[1]);return!(Number.isNaN(o)||!t.startsWith("_")&&64!==t.split("_")[0].length)})(k))throw new Error("Invalid icon format. Must be either outpoint (format: txid_vout) or relative output index of the icon (format _vout). examples: ecb483eda58f26da1b1f8f15b782b1186abdf9c6399a1c3e63e0d429d5092a41_0 or _1");const B={p:"bsv-20",op:"deploy+mint",sym:s,icon:k,amt:(c?BigInt(d.tokens)*10n**BigInt(c):BigInt(d.tokens)).toString()};c&&(B.dec=c.toString());const I=Buffer.from(JSON.stringify(B)).toString("base64"),x={satoshis:1,lockingScript:(new S).lock(l,{dataB64:I,contentType:"application/bsv-20"})};y.addOutput(x);for(const o of g){const e={satoshis:o.amount,lockingScript:(new t).lock(o.to)};y.addOutput(e)}let v=0n;const O=y.outputs.reduce((t,o)=>t+BigInt(o.satoshis||0),0n);let $,A=0;for(const o of u){const s=E(o,(new t).unlock(f,"all",!0,o.satoshis,e.fromBinary(n.toArray(o.script,"base64"))));if(y.addInput(s),v+=BigInt(o.satoshis),A=await m.computeFee(y),v>=O+BigInt(A))break}if(v<O+BigInt(A))throw new Error(`Not enough funds to deploy token. Total sats in: ${v}, Total sats out: ${O}, Fee: ${A}`);const T=p||f.toAddress().toString(),N=(new t).lock(T);y.addOutput({lockingScript:N,change:!0}),await y.fee(m),await y.sign();const P=y.outputs.findIndex(t=>t.change);if(-1!==P){const t=y.outputs[P];$={satoshis:t.satoshis,txid:y.id("hex"),vout:P,script:Buffer.from(t.lockingScript.toBinary()).toString("base64")}}return{tx:y,spentOutpoints:y.inputs.map(t=>`${t.sourceTXID}_${t.sourceOutputIndex}`),payChange:$}},nt=async t=>{const o=new i,s=[],{ordinals:r,metaData:a}=t;for(const i of r){if(1!==i.satoshis)throw new Error("1Sat Ordinal utxos must have exactly 1 satoshi");const r=E(i,(new S).unlock(t.ordPk,"all",!0,i.satoshis,e.fromBinary(n.toArray(i.script,"base64"))));s.push(`${i.txid}_${i.vout}`),o.addInput(r)}if(a&&(!a.app||!a.type))throw new Error("MAP.app and MAP.type are required fields");let c="";if(null!=a&&a.app&&null!=a&&a.type){c=`OP_FALSE OP_RETURN ${m(y)} ${m("SET")}`;for(const[t,o]of Object.entries(a))"cmd"!==t&&(c=`${c} ${m(t)} ${m(o)}`)}return o.addOutput({satoshis:0,lockingScript:e.fromASM(c||"OP_FALSE OP_RETURN")}),await o.sign(),{tx:o,spentOutpoints:s}};class st{constructor(t){this.fetch=void 0,this.fetch=t}async request(t,o){const e={method:o.method,headers:o.headers,body:JSON.stringify(o.data)},n=await this.fetch.call(window,t,e),s=n.headers.get("Content-Type"),r=null!=s&&s.startsWith("application/json")?await n.json():await n.text();return{ok:n.ok,status:n.status,statusText:n.statusText,data:r}}}const rt=()=>new it;class it{constructor(t=function(){const t={async request(...t){throw new Error("No method available to perform HTTP request")}};if("undefined"!=typeof window&&"function"==typeof window.fetch){console.log("Using browser fetch");const t=window.fetch;return window.fetch=async(...o)=>await t(...o),new st(window.fetch)}if("undefined"==typeof require)return t;try{const t=require("node:https");return new f(t)}catch(o){return t}}()){this.URL=void 0,this.httpClient=void 0,this.URL=`${k}/tx`,this.httpClient=t}async broadcast(t){const o={method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},data:{rawtx:n.toBase64(t.toBinary())}};try{var e,s;const t=await this.httpClient.request(this.URL,o);return t.ok?{status:"success",txid:t.data,message:"broadcast successful"}:{status:"error",code:null!=(e=t.status.toString())?e:"ERR_UNKNOWN",description:null!=(s=t.data.message)?s:"Unknown error"}}catch(t){return{status:"error",code:"500",description:t instanceof Error?t.message:"Internal Server Error"}}}}export{$ as MAX_TOKEN_SUPPLY,it as OneSatBroadcaster,K as OrdLock,S as OrdP2PKH,v as RoytaltyType,O as TokenInputMode,I as TokenSelectionStrategy,x as TokenType,nt as burnOrdinals,X as cancelOrdListings,W as cancelOrdTokenListings,H as createOrdListings,J as createOrdTokenListings,L as createOrdinals,et as deployBsv21Token,N as fetchNftUtxos,T as fetchPayUtxos,P as fetchTokenUtxos,rt as oneSatBroadcaster,Y as purchaseOrdListing,Q as purchaseOrdTokenListing,_ as selectTokenUtxos,U as sendOrdinals,R as sendUtxos,D as stringifyMetaData,j as transferOrdTokens,q as validateSubTypeData};
//# sourceMappingURL=index.modern.js.map
