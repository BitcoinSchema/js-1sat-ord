import{P2PKH as t,LockingScript as o,Script as n,Utils as s,fromUtxo as e,SatoshisPerKilobyte as i,Transaction as r,OP as a,BigNumber as c,UnlockingScript as u,TransactionSignature as d}from"@bsv/sdk";import{Sigma as f}from"sigma-protocol";import p from"jimp";const l=t=>Buffer.from(t).toString("hex"),g=10,h="https://ordinals.gorillapool.io/api";class w extends t{lock(n,s,e){let i="";if(void 0!==(null==s?void 0:s.dataB64)&&void 0!==(null==s?void 0:s.contentType)){const t=l("ord"),o=Buffer.from(s.dataB64,"base64").toString("hex").trim();if(!o)throw new Error("Invalid file data");const n=l(s.contentType);if(!n)throw new Error("Invalid media type");i=`OP_0 OP_IF ${t} OP_1 ${n} OP_0 ${o} OP_ENDIF`}let r=`${i?`${i} `:""}${(new t).lock(n).toASM()}`;if(e&&(!e.app||!e.type))throw new Error("MAP.app and MAP.type are required fields");if(null!=e&&e.app&&null!=e&&e.type){r=`${r} OP_RETURN ${l("1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5")} ${l("SET")}`;for(const[t,o]of Object.entries(e))"cmd"!==t&&(r=`${r} ${l(t)} ${l(o)}`)}return o.fromASM(r)}}function m(){return m=Object.assign?Object.assign.bind():function(t){for(var o=1;o<arguments.length;o++){var n=arguments[o];for(var s in n)({}).hasOwnProperty.call(n,s)&&(t[s]=n[s])}return t},m.apply(null,arguments)}var y,b;!function(t){t.BSV20="bsv20",t.BSV21="bsv21"}(y||(y={})),function(t){t.Paymail="paymail",t.Address="address",t.Script="script"}(b||(b={}));const{fromBase58Check:k}=s,B=(t,o)=>e(m({},t,{script:Buffer.from(t.script,"base64").toString("hex")}),o),S=async(o,n="base64")=>{const s=`${h}/txos/address/${o}/unspent?bsv20=false`;console.log({payUrl:s});const e=await fetch(s);if(!e.ok)throw new Error("Error fetching pay utxos");let i=await e.json();i=i.filter(t=>1!==t.satoshis);const r=k(o),a=(new t).lock(r.data);return i=i.map(t=>({txid:t.txid,vout:t.vout,satoshis:t.satoshis,script:"hex"===n||"base64"===n?Buffer.from(a.toBinary()).toString(n):a.toASM()})),i},I=async(t,o,s=10,e=0,i="base64")=>{let r=`${h}/txos/address/${t}/unspent?limit=${s}&offset=${e}&`;o&&(r+=`q=${Buffer.from(JSON.stringify({map:{subTypeData:{collectionId:o}}})).toString("base64")}`);const a=await fetch(r);if(!a.ok)throw new Error(`Error fetching NFT utxos for ${t}`);let c=await a.json();c=c.filter(t=>{var o;return 1===t.satoshis&&!(null!=(o=t.data)&&o.list)});const u=c.map(t=>`${t.txid}_${t.vout}`),d=await fetch(`${h}/txos/outpoints?script=true`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify([...u])});if(!d.ok)throw new Error(`Error fetching NFT scripts for ${t}`);return c=(await d.json()||[]).map(t=>{let s=t.script;"hex"===i?s=Buffer.from(s,"base64").toString("hex"):"asm"===i&&(s=n.fromHex(Buffer.from(s,"base64").toString("hex")).toASM());const e={origin:t.origin.outpoint,script:s,vout:t.vout,txid:t.txid,satoshis:1};return o&&(e.collectionId=o),e}),c},x=async(t,o,n)=>{const s=`${h}/bsv20/${n}/${t===y.BSV20?"tick":"id"}/${o}?bsv20=true&listing=false`,e=await fetch(s);if(!e.ok)throw new Error(`Error fetching ${t} utxos`);let i=await e.json();return i=i.map(t=>({amt:t.amt,script:t.script,vout:t.vout,txid:t.txid,id:o,satoshis:1})),i},v=async(t,o)=>{const n=null==o?void 0:o.idKey,s=null==o?void 0:o.keyHost;if(n){const o=new f(t),{signedTx:s}=o.sign(n);return s}if(s){const n=null==o?void 0:o.authToken,e=new f(t);try{const{signedTx:t}=await e.remoteSign(s,n);return t}catch(t){throw console.log(t),new Error(`Remote signing to ${s} failed`)}}throw new Error("Signer must be a LocalSigner or RemoteSigner")},O=t=>{if(!t)return;const o={app:t.app,type:t.type};for(const[n,s]of Object.entries(t))void 0!==s&&(o[n]="string"==typeof s?s:Array.isArray(s)||"object"==typeof s?JSON.stringify(s):String(s));return o},$=async o=>{const{utxos:e,destinations:a,paymentPk:c,changeAddress:u,satsPerKb:d=g,metaData:f,signer:p,additionalPayments:l=[]}=o;a.length>100&&console.warn("Creating many inscriptions at once can be slow. Consider using multiple transactions instead.");const h=new i(d);let m,y=new r;for(const t of a){if(!t.inscription)throw new Error("Inscription is required for all destinations");if(f)for(const t of Object.keys(f))void 0===f[t]&&delete f[t];y.addOutput({satoshis:1,lockingScript:(new w).lock(t.address,t.inscription,O(f))})}for(const o of l)y.addOutput({satoshis:o.amount,lockingScript:(new t).lock(o.to)});const b=u||c.toAddress().toString(),k=(new t).lock(b);y.addOutput({lockingScript:k,change:!0});let S=0n;const I=y.outputs.reduce((t,o)=>t+BigInt(o.satoshis||0),0n);if(p){const o=e.pop();y.addInput(B(o,(new t).unlock(c,"all",!0,o.satoshis,n.fromBinary(s.toArray(o.script,"base64"))))),S+=BigInt(o.satoshis),y=await v(y,p)}let x=0;for(const o of e){if(S>=I+BigInt(x))break;const e=B(o,(new t).unlock(c,"all",!0,o.satoshis,n.fromBinary(s.toArray(o.script,"base64"))));y.addInput(e),S+=BigInt(o.satoshis),x=await h.computeFee(y)}if(S<I+BigInt(x))throw new Error(`Not enough funds to purchase listing. Total sats in: ${S}, Total sats out: ${I}, Fee: ${x}`);await y.fee(h),await y.sign();const $=y.outputs.findIndex(t=>t.change);if(-1!==$){const t=y.outputs[$];m={satoshis:t.satoshis,txid:y.id("hex"),vout:$,script:Buffer.from(t.lockingScript.toBinary()).toString("base64")}}return m&&(m.satoshis=y.outputs[y.outputs.length-1].satoshis,m.txid=y.id("hex")),{tx:y,spentOutpoints:e.map(t=>`${t.txid}_${t.vout}`),payChange:m}},A=async o=>{o.satsPerKb||(o.satsPerKb=g),o.additionalPayments||(o.additionalPayments=[]),void 0===o.enforceUniformSend&&(o.enforceUniformSend=!0);const e=new i(o.satsPerKb);let a=new r;const c=[];for(const t of o.ordinals){if(1!==t.satoshis)throw new Error("1Sat Ordinal utxos must have exactly 1 satoshi");const e=B(t,(new w).unlock(o.ordPk,"all",!0,t.satoshis,n.fromBinary(s.toArray(t.script,"base64"))));c.push(`${t.txid}_${t.vout}`),a.addInput(e)}if(o.enforceUniformSend&&o.destinations.length!==o.ordinals.length)throw new Error("Number of destinations must match number of ordinals being sent");for(const n of o.destinations){var u,d;let s;s=null!=(u=n.inscription)&&u.dataB64&&null!=(d=n.inscription)&&d.contentType?(new w).lock(n.address,n.inscription,O(o.metaData)):(new t).lock(n.address),a.addOutput({satoshis:1,lockingScript:s})}for(const n of o.additionalPayments)a.addOutput({satoshis:n.amount,lockingScript:(new t).lock(n.to)});let f;const p=o.changeAddress||o.paymentPk.toAddress().toString(),l=(new t).lock(p);a.addOutput({lockingScript:l,change:!0});let h=0n;const m=a.outputs.reduce((t,o)=>t+BigInt(o.satoshis||0),0n);let y=0;for(const i of o.paymentUtxos){const r=B(i,(new t).unlock(o.paymentPk,"all",!0,i.satoshis,n.fromBinary(s.toArray(i.script,"base64"))));if(c.push(`${i.txid}_${i.vout}`),a.addInput(r),h+=BigInt(i.satoshis),y=await e.computeFee(a),h>=m+BigInt(y))break}if(h<m)throw new Error("Not enough ordinals to send");o.signer&&(a=await v(a,o.signer)),await a.fee(e),await a.sign();const b=a.outputs.findIndex(t=>t.change);if(-1!==b){const t=a.outputs[b];f={satoshis:t.satoshis,txid:a.id("hex"),vout:b,script:Buffer.from(t.lockingScript.toBinary()).toString("base64")}}return f&&(f.satoshis=a.outputs[a.outputs.length-1].satoshis,f.txid=a.id("hex")),{tx:a,spentOutpoints:c,payChange:f}},E=async o=>{const{utxos:e,paymentPk:a,payments:c,satsPerKb:u=g,changeAddress:d=a.toAddress().toString()}=o,f=new i(u),p=new r;for(const o of c){const n={satoshis:o.amount,lockingScript:(new t).lock(o.to)};p.addOutput(n)}let l=0n;const h=p.outputs.reduce((t,o)=>t+(o.satoshis||0),0);let w,m=0;for(const o of e){const e=B(o,(new t).unlock(a,"all",!0,o.satoshis,n.fromBinary(s.toArray(o.script,"base64"))));if(p.addInput(e),l+=BigInt(o.satoshis),m=await f.computeFee(p),l>=h+m)break}if(l<h+m)throw new Error(`Not enough funds to send. Total sats in: ${l}, Total sats out: ${h}, Fee: ${m}`);if(l>h+m){const o=(new t).lock(d),n={lockingScript:o,change:!0};w={txid:"",vout:p.outputs.length,satoshis:0,script:Buffer.from(o.toHex(),"hex").toString("base64")},p.addOutput(n)}else l<h+m&&console.log("No change needed");await p.fee(f),await p.sign();const y=p.outputs.findIndex(t=>t.change);if(-1!==y){const t=p.outputs[y];w={satoshis:t.satoshis,txid:p.id("hex"),vout:y,script:Buffer.from(t.lockingScript.toBinary()).toString("base64")}}return w&&(w.satoshis=p.outputs[p.outputs.length-1].satoshis,w.txid=p.id("hex")),{tx:p,spentOutpoints:e.map(t=>`${t.txid}_${t.vout}`),payChange:w}},T=async o=>{const{protocol:e,tokenID:a,utxos:c,inputTokens:u,distributions:d,paymentPk:f,ordPk:p,changeAddress:l,tokenChangeAddress:h,satsPerKb:b=g,decimals:k,additionalPayments:S=[],burn:I=!1}=o;let x=0n,v=0n,O=0n;if(!u.every(t=>t.id===a))throw new Error("Input tokens do not match the provided tokenID");const $=new i(b),A=new r;for(const t of u){const o=s.toArray(t.script,"base64"),e=n.fromBinary(o);A.addInput(B(t,(new w).unlock(p,"all",!0,t.satoshis,e))),v+=BigInt(t.amt)}for(const t of d){const o={p:"bsv-20",op:I?"burn":"transfer",amt:t.amt};let n;if(k>0&&(o.amt=(BigInt(t.amt)*10n**BigInt(k)).toString()),e===y.BSV20)n=m({},o,{tick:a});else{if(e!==y.BSV21)throw new Error("Invalid protocol");n=m({},o,{id:a})}A.addOutput({satoshis:1,lockingScript:(new w).lock(t.address,{dataB64:Buffer.from(JSON.stringify(n)).toString("base64"),contentType:"application/bsv-20"})}),O+=BigInt(n.amt)}let E,T;if(x=v-O,x<0n)throw new Error("Not enough tokens to send");if(x>0n){const t={p:"bsv-20",op:"transfer",amt:x.toString()};let o;if(e===y.BSV20)o=m({},t,{tick:a});else{if(e!==y.BSV21)throw new Error("Invalid protocol");o=m({},t,{id:a})}const n=(new w).lock(h||p.toAddress().toString(),{dataB64:Buffer.from(JSON.stringify(o)).toString("base64"),contentType:"application/bsv-20"}),s=A.outputs.length;A.addOutput({lockingScript:n,satoshis:1}),E={id:a,satoshis:1,script:Buffer.from(n.toBinary()).toString("base64"),txid:"",vout:s,amt:x.toString()}}for(const o of S)A.addOutput({satoshis:o.amount,lockingScript:(new t).lock(o.to)});const P=l||f.toAddress().toString(),N=(new t).lock(P);A.addOutput({lockingScript:N,change:!0});let C=0n;const _=A.outputs.reduce((t,o)=>t+BigInt(o.satoshis||0),0n);let F=0;for(const o of c){const e=B(o,(new t).unlock(f,"all",!0,o.satoshis,n.fromBinary(s.toArray(o.script,"base64"))));if(A.addInput(e),C+=BigInt(o.satoshis),F=await $.computeFee(A),C>=_+BigInt(F))break}if(C<_+BigInt(F))throw new Error(`Not enough funds to purchase listing. Total sats in: ${C}, Total sats out: ${_}, Fee: ${F}`);await A.fee($),await A.sign();const D=A.id("hex");E&&(E.txid=D);const L=A.outputs.findIndex(t=>t.change);if(-1!==L){const t=A.outputs[L];T={satoshis:t.satoshis,txid:D,vout:L,script:Buffer.from(t.lockingScript.toBinary()).toString("base64")}}return T&&(T.satoshis=A.outputs[A.outputs.length-1].satoshis,T.txid=A.id("hex")),{tx:A,spentOutpoints:A.inputs.map(t=>`${t.sourceTXID}_${t.sourceOutputIndex}`),payChange:T,tokenChange:E}},P=(t,o)=>{try{if("collection"===t){const t=o;if(!t.description)return new Error("Collection description is required");if(!t.quantity)return new Error("Collection quantity is required");if(t.rarityLabels){if(!Array.isArray(t.rarityLabels))return new Error("Rarity labels must be an array");if(!t.rarityLabels.every(t=>Object.values(t).every(t=>"string"==typeof t)))return new Error(`Invalid rarity labels ${t.rarityLabels}`)}if(t.traits){if("object"!=typeof t.traits)return new Error("Collection traits must be an object");if(t.traits&&!Object.keys(t.traits).every(o=>"string"==typeof o&&"object"==typeof t.traits[o]))return new Error("Collection traits must be a valid CollectionTraits object")}}if("collectionItem"===t){const t=o;if(!t.collectionId)return new Error("Collection id is required");if(!t.collectionId.includes("_"))return new Error("Collection id must be a valid outpoint");if(64!==t.collectionId.split("_")[0].length)return new Error("Collection id must contain a valid txid");if(Number.isNaN(Number.parseInt(t.collectionId.split("_")[1])))return new Error("Collection id must contain a valid vout");if(t.mintNumber&&"number"!=typeof t.mintNumber)return new Error("Mint number must be a number");if(t.rank&&"number"!=typeof t.rank)return new Error("Rank must be a number");if(t.rarityLabel&&"string"!=typeof t.rarityLabel)return new Error("Rarity label must be a string");if(t.traits&&"object"!=typeof t.traits)return new Error("Traits must be an object");if(t.attachments&&!Array.isArray(t.attachments))return new Error("Attachments must be an array")}return}catch(t){return new Error("Invalid JSON data")}};class N{lock(o,e,i,r){const a=s.fromBase58Check(o).data,c=s.fromBase58Check(e).data;let u=new n;if(void 0!==(null==r?void 0:r.dataB64)&&void 0!==(null==r?void 0:r.contentType)){const t=l("ord"),o=Buffer.from(r.dataB64,"base64").toString("hex").trim();if(!o)throw new Error("Invalid file data");const s=l(r.contentType);if(!s)throw new Error("Invalid media type");u=n.fromASM(`OP_0 OP_IF ${t} OP_1 ${s} OP_0 ${o} OP_ENDIF`)}return u.writeScript(n.fromHex("2097dfd76851bf465e8f715593b217714858bbe9570ff3bd5e33840a34e20ff0262102ba79df5f8ae7604a9830f03c7933028186aede0675a16f025dc4f8be8eec0382201008ce7480da41702918d1ec8e6849ba32b4d65b1e40dc669c31a1e6306b266c0000")).writeBin(a).writeBin(N.buildOutput(i,(new t).lock(c).toBinary())).writeScript(n.fromHex("615179547a75537a537a537a0079537a75527a527a7575615579008763567901c161517957795779210ac407f0e4bd44bfc207355a778b046225a7068fc59ee7eda43ad905aadbffc800206c266b30e6a1319c66dc401e5bd6b432ba49688eecd118297041da8074ce081059795679615679aa0079610079517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01007e81517a75615779567956795679567961537956795479577995939521414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff00517951796151795179970079009f63007952799367007968517a75517a75517a7561527a75517a517951795296a0630079527994527a75517a6853798277527982775379012080517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01205279947f7754537993527993013051797e527e54797e58797e527e53797e52797e57797e0079517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a756100795779ac517a75517a75517a75517a75517a75517a75517a75517a75517a7561517a75517a756169587951797e58797eaa577961007982775179517958947f7551790128947f77517a75517a75618777777777777777777767557951876351795779a9876957795779ac777777777777777767006868"))}cancelListing(o,n="all",s=!1,e,i){const r=(new t).unlock(o,n,s,e,i);return{sign:async function(t,o){return(await r.sign(t,o)).writeOpCode(a.OP_1)},estimateLength:async function(){return 107}}}purchaseListing(t,o){const n={sign:async function(n,e){var i;if(n.outputs.length<2)throw new Error("Malformed transaction");const r=(new u).writeBin(N.buildOutput(n.outputs[0].satoshis||0,n.outputs[0].lockingScript.toBinary()));if(n.outputs.length>2){const t=new s.Writer;for(const o of n.outputs.slice(2))t.write(N.buildOutput(o.satoshis||0,o.lockingScript.toBinary()));r.writeBin(t.toArray())}else r.writeOpCode(a.OP_0);const c=n.inputs[e];let f=t;if(!f&&c.sourceTransaction)f=c.sourceTransaction.outputs[c.sourceOutputIndex].satoshis;else if(!t)throw new Error("sourceTransaction or sourceSatoshis is required");const p=c.sourceTXID||(null==(i=c.sourceTransaction)?void 0:i.id("hex"));let l=o;var g;l||(l=null==(g=c.sourceTransaction)?void 0:g.outputs[c.sourceOutputIndex].lockingScript);const h=d.format({sourceTXID:p,sourceOutputIndex:c.sourceOutputIndex,sourceSatoshis:f,transactionVersion:n.version,otherInputs:[],inputIndex:e,outputs:n.outputs,inputSequence:c.sequence,subscript:l,lockTime:n.lockTime,scope:d.SIGHASH_ALL|d.SIGHASH_ANYONECANPAY|d.SIGHASH_FORKID});return r.writeBin(h).writeOpCode(a.OP_0)},estimateLength:async function(t,o){return(await n.sign(t,o)).toBinary().length}};return n}static buildOutput(t,o){const n=new s.Writer;return n.writeUInt64LEBn(new c(t)),n.writeVarIntNum(o.length),n.write(o),n.toArray()}}const{toArray:C}=s,_=async o=>{const{utxos:e,listings:a,paymentPk:c,ordPk:u,changeAddress:d,satsPerKb:f=g,additionalPayments:p=[]}=o,l=new i(f),h=new r;a.length>100&&console.warn("Creating many inscriptions at once can be slow. Consider using multiple transactions instead.");for(const t of a){h.addOutput({satoshis:1,lockingScript:(new N).lock(t.ordAddress,t.payAddress,t.price)});const o=C(t.listingUtxo.script,"base64"),s=n.fromBinary(o);h.addInput(B(t.listingUtxo,(new w).unlock(u,"all",!0,t.listingUtxo.satoshis,s)))}for(const o of p)h.addOutput({satoshis:o.amount,lockingScript:(new t).lock(o.to)});let m;const y=(new t).lock(d||c.toAddress().toString());h.addOutput({lockingScript:y,change:!0});let b=0n;const k=h.outputs.reduce((t,o)=>t+BigInt(o.satoshis||0),0n);let S=0;for(const o of e){const e=B(o,(new t).unlock(c,"all",!0,o.satoshis,n.fromBinary(s.toArray(o.script,"base64"))));if(h.addInput(e),b+=BigInt(o.satoshis),S=await l.computeFee(h),b>=k+BigInt(S))break}if(b<k+BigInt(S))throw new Error(`Not enough funds to purchase listing. Total sats in: ${b}, Total sats out: ${k}, Fee: ${S}`);await h.fee(l),await h.sign();const I=h.outputs.findIndex(t=>t.change);if(-1!==I){const t=h.outputs[I];m={satoshis:t.satoshis,txid:h.id("hex"),vout:I,script:Buffer.from(t.lockingScript.toBinary()).toString("base64")}}return m&&(m.satoshis=h.outputs[h.outputs.length-1].satoshis,m.txid=h.id("hex")),{tx:h,spentOutpoints:h.inputs.map(t=>`${t.sourceTXID}_${t.sourceOutputIndex}`),payChange:m}},F=async o=>{const{utxos:e,protocol:a,tokenID:c,ordPk:u,paymentPk:d,additionalPayments:f=[],changeAddress:p,tokenChangeAddress:l,inputTokens:h,listings:b,decimals:k,satsPerKb:S=g}=o;if(b.length>100&&console.warn("Creating many inscriptions at once can be slow. Consider using multiple transactions instead."),!h.every(t=>t.id===c))throw new Error("Input tokens do not match the provided tokenID");let I=0n,x=0n,v=0n;if(!h.every(t=>t.id===c))throw new Error("Input tokens do not match the provided tokenID");const O=new i(S),$=new r;for(const t of b){const o={p:"bsv-20",op:"transfer",amt:t.amt.toString()};let n;if(k>0&&(o.amt=(t.amt*10n**BigInt(k)).toString()),a===y.BSV20)n=m({},o,{tick:c});else{if(a!==y.BSV21)throw new Error("Invalid protocol");n=m({},o,{id:c})}$.addOutput({satoshis:1,lockingScript:(new N).lock(t.ordAddress,t.payAddress,t.price,{dataB64:Buffer.from(JSON.stringify(n)).toString("base64"),contentType:"application/bsv-20"})}),v+=BigInt(o.amt)}for(const t of h)$.addInput(B(t,(new w).unlock(u,"all",!0,t.satoshis,n.fromBinary(C(t.script,"base64"))))),x+=BigInt(t.amt);let A,E;if(I=x-v,I<0n)throw new Error("Not enough tokens to send");if(I>0n){const t={p:"bsv-20",op:"transfer",amt:I.toString()};let o;if(a===y.BSV20)o=m({},t,{tick:c});else{if(a!==y.BSV21)throw new Error("Invalid protocol");o=m({},t,{id:c})}const n=(new w).lock(l,{dataB64:Buffer.from(JSON.stringify(o)).toString("base64"),contentType:"application/bsv-20"}),s=$.outputs.length;$.addOutput({lockingScript:n,satoshis:1}),A={id:c,satoshis:1,script:Buffer.from(n.toBinary()).toString("base64"),txid:"",vout:s,amt:I.toString()}}for(const o of f)$.addOutput({satoshis:o.amount,lockingScript:(new t).lock(o.to)});const T=p||d.toAddress().toString(),P=(new t).lock(T);$.addOutput({lockingScript:P,change:!0});let _=0n;const F=$.outputs.reduce((t,o)=>t+BigInt(o.satoshis||0),0n);let D=0;for(const o of e){const e=B(o,(new t).unlock(d,"all",!0,o.satoshis,n.fromBinary(s.toArray(o.script,"base64"))));if($.addInput(e),_+=BigInt(o.satoshis),D=await O.computeFee($),_>=F+BigInt(D))break}if(_<F+BigInt(D))throw new Error(`Not enough funds to purchase listing. Total sats in: ${_}, Total sats out: ${F}, Fee: ${D}`);await $.fee(O),await $.sign();const L=$.id("hex");A&&(A.txid=L);const j=$.outputs.findIndex(t=>t.change);if(-1!==j){const t=$.outputs[j];E={satoshis:t.satoshis,txid:L,vout:j,script:Buffer.from(t.lockingScript.toBinary()).toString("base64")}}return E&&(E.satoshis=$.outputs[$.outputs.length-1].satoshis,E.txid=$.id("hex")),{tx:$,spentOutpoints:$.inputs.map(t=>`${t.sourceTXID}_${t.sourceOutputIndex}`),payChange:E,tokenChange:A}},D=async o=>{const{utxos:e,listingUtxos:a,ordPk:c,paymentPk:u,changeAddress:d,additionalPayments:f=[],satsPerKb:p=g}=o;a.length>100&&console.warn("Creating many inscriptions at once can be slow. Consider using multiple transactions instead.");const l=new i(p),h=new r;for(const o of a)h.addInput(B(o,(new N).cancelListing(c,"all",!0,o.satoshis,n.fromBinary(s.toArray(o.script,"base64"))))),h.addOutput({satoshis:1,lockingScript:(new t).lock(c.toAddress().toString())});for(const o of f)h.addOutput({satoshis:o.amount,lockingScript:(new t).lock(o.to)});let w;const m=d||u.toAddress().toString(),y=(new t).lock(m);h.addOutput({lockingScript:y,change:!0});let b=0n;const k=h.outputs.reduce((t,o)=>t+BigInt(o.satoshis||0),0n);let S=0;for(const o of e){const e=B(o,(new t).unlock(u,"all",!0,o.satoshis,n.fromBinary(s.toArray(o.script,"base64"))));if(h.addInput(e),b+=BigInt(o.satoshis),S=await l.computeFee(h),b>=k+BigInt(S))break}if(b<k+BigInt(S))throw new Error(`Not enough funds to purchase listing. Total sats in: ${b}, Total sats out: ${k}, Fee: ${S}`);await h.fee(l),await h.sign();const I=h.outputs.findIndex(t=>t.change);if(-1!==I){const t=h.outputs[I];w={satoshis:t.satoshis,txid:h.id("hex"),vout:I,script:Buffer.from(t.lockingScript.toBinary()).toString("base64")}}return w&&(w.satoshis=h.outputs[h.outputs.length-1].satoshis,w.txid=h.id("hex")),{tx:h,spentOutpoints:h.inputs.map(t=>`${t.sourceTXID}_${t.sourceOutputIndex}`),payChange:w}},L=async o=>{const{protocol:e,tokenID:a,ordAddress:c,changeAddress:u,paymentPk:d,ordPk:f,additionalPayments:p,listingUtxos:l,utxos:h,satsPerKb:b=g}=o;let k=0;if(l.length>100&&console.warn("Creating many inscriptions at once can be slow. Consider using multiple transactions instead."),!l.every(t=>t.id===a))throw new Error("Input tokens do not match the provided tokenID");const S=new i(b),I=new r;for(const t of l)I.addInput(B(t,(new N).cancelListing(f,"all",!0,t.satoshis,n.fromBinary(s.toArray(t.script,"base64"))))),k+=Number.parseInt(t.amt);const x={p:"bsv-20",op:"transfer",amt:k.toString()};let v;if(e===y.BSV20)v=m({},x,{tick:a});else{if(e!==y.BSV21)throw new Error("Invalid protocol");v=m({},x,{id:a})}const O={address:c||f.toAddress().toString(),inscription:{dataB64:Buffer.from(JSON.stringify(v)).toString("base64"),contentType:"application/bsv-20"}},$=(new w).lock(O.address,O.inscription);I.addOutput({satoshis:1,lockingScript:$});for(const o of p)I.addOutput({satoshis:o.amount,lockingScript:(new t).lock(o.to)});let A;const E=u||d.toAddress().toString(),T=(new t).lock(E);I.addOutput({lockingScript:T,change:!0});let P=0n;const C=I.outputs.reduce((t,o)=>t+BigInt(o.satoshis||0),0n);let _=0;for(const o of h){const e=B(o,(new t).unlock(d,"all",!0,o.satoshis,n.fromBinary(s.toArray(o.script,"base64"))));if(I.addInput(e),P+=BigInt(o.satoshis),_=await S.computeFee(I),P>=C+BigInt(_))break}if(P<C+BigInt(_))throw new Error(`Not enough funds to purchase listing. Total sats in: ${P}, Total sats out: ${C}, Fee: ${_}`);await I.fee(S),await I.sign();const F={amt:k.toString(),script:Buffer.from($.toHex(),"hex").toString("base64"),txid:I.id("hex"),vout:0,id:a,satoshis:1},D=I.outputs.findIndex(t=>t.change);if(-1!==D){const t=I.outputs[D];A={satoshis:t.satoshis,txid:I.id("hex"),vout:D,script:Buffer.from(t.lockingScript.toBinary()).toString("base64")}}return A&&(A.satoshis=I.outputs[I.outputs.length-1].satoshis,A.txid=I.id("hex")),{tx:I,spentOutpoints:I.inputs.map(t=>`${t.sourceTXID}_${t.sourceOutputIndex}`),payChange:A,tokenChange:F}},j=async e=>{const{utxos:a,paymentPk:c,listing:u,ordAddress:d,changeAddress:f,additionalPayments:p=[],satsPerKb:l=g}=e,h=new i(l),w=new r;w.addInput(B(u.listingUtxo,(new N).purchaseListing(1,n.fromBinary(s.toArray(u.listingUtxo.script,"base64"))))),w.addOutput({satoshis:1,lockingScript:(new t).lock(d)});const m=new s.Reader(s.toArray(u.payout,"base64")),y=m.readUInt64LEBn().toNumber(),b=m.readVarIntNum(),k=m.read(b),S=o.fromBinary(k);w.addOutput({satoshis:y,lockingScript:S});for(const o of p)w.addOutput({satoshis:o.amount,lockingScript:(new t).lock(o.to)});let I;const x=f||c.toAddress().toString(),v=(new t).lock(x);w.addOutput({lockingScript:v,change:!0});let O=0n;const $=w.outputs.reduce((t,o)=>t+BigInt(o.satoshis||0),0n);let A=0;for(const o of a){const e=B(o,(new t).unlock(c,"all",!0,o.satoshis,n.fromBinary(s.toArray(o.script,"base64"))));if(w.addInput(e),O+=BigInt(o.satoshis),A=await h.computeFee(w),O>=$+BigInt(A))break}if(O<$+BigInt(A))throw new Error(`Not enough funds to purchase listing. Total sats in: ${O}, Total sats out: ${$}, Fee: ${A}`);await w.fee(h),await w.sign();const E=w.outputs.findIndex(t=>t.change);if(-1!==E){const t=w.outputs[E];I={satoshis:t.satoshis,txid:w.id("hex"),vout:E,script:Buffer.from(t.lockingScript.toBinary()).toString("base64")}}return I&&(I.satoshis=w.outputs[w.outputs.length-1].satoshis,I.txid=w.id("hex")),{tx:w,spentOutpoints:w.inputs.map(t=>`${t.sourceTXID}_${t.sourceOutputIndex}`),payChange:I}},U=async e=>{const{protocol:a,tokenID:c,utxos:u,paymentPk:d,listingUtxo:f,ordAddress:p,changeAddress:l,satsPerKb:h=g,additionalPayments:b=[]}=e,k=new i(h),S=new r;S.addInput(B(f,(new N).purchaseListing(1,n.fromBinary(s.toArray(f.script,"base64")))));const I={p:"bsv-20",op:"transfer",amt:f.amt};let x;if(a===y.BSV20)x=m({},I,{tick:c});else{if(a!==y.BSV21)throw new Error("Invalid protocol");x=m({},I,{id:c})}const v=Buffer.from(JSON.stringify(x)).toString("base64");if(S.addOutput({satoshis:1,lockingScript:(new w).lock(p,{dataB64:v,contentType:"bsv-20"})}),!f.payout)throw new Error("Listing UTXO does not have a payout script");const O=new s.Reader(s.toArray(f.payout,"base64")),$=O.readUInt64LEBn().toNumber(),A=O.readVarIntNum(),E=O.read(A),T=o.fromBinary(E);S.addOutput({satoshis:$,lockingScript:T});for(const o of b)S.addOutput({satoshis:o.amount,lockingScript:(new t).lock(o.to)});let P;const C=l||d.toAddress().toString(),_=(new t).lock(C);S.addOutput({lockingScript:_,change:!0});let F=0n;const D=S.outputs.reduce((t,o)=>t+BigInt(o.satoshis||0),0n);let L=0;for(const o of u){const e=B(o,(new t).unlock(d,"all",!0,o.satoshis,n.fromBinary(s.toArray(o.script,"base64"))));if(S.addInput(e),F+=BigInt(o.satoshis),L=await k.computeFee(S),F>=D+BigInt(L))break}if(F<D+BigInt(L))throw new Error(`Not enough funds to purchase token listing. Total sats in: ${F}, Total sats out: ${D}, Fee: ${L}`);await S.fee(k),await S.sign();const j=S.outputs.findIndex(t=>t.change);if(-1!==j){const t=S.outputs[j];P={satoshis:t.satoshis,txid:S.id("hex"),vout:j,script:Buffer.from(t.lockingScript.toBinary()).toString("base64")}}return P&&(P.satoshis=S.outputs[S.outputs.length-1].satoshis,P.txid=S.id("hex")),{tx:S,spentOutpoints:S.inputs.map(t=>`${t.sourceTXID}_${t.sourceOutputIndex}`),payChange:P}},V=new Error("Image must be a square image with dimensions <= 400x400"),K=new Error("Image must be a square image"),M=new Error("Error processing image"),q=new Error("Image dimensions are undefined"),H=async o=>{const{symbol:e,icon:a,decimals:c,utxos:u,initialDistribution:d,paymentPk:f,destinationAddress:l,changeAddress:h,satsPerKb:m=g,additionalPayments:y=[]}=o,b=new i(m),k=new r;let S;if("string"==typeof a)S=a;else{const t=await(async t=>{const{dataB64:o,contentType:n}=t;if("image/svg+xml"===n)return(t=>{const o=Buffer.from(t,"base64").toString("utf-8"),n=o.match(/<svg[^>]*\s+width="([^"]+)"/),s=o.match(/<svg[^>]*\s+height="([^"]+)"/);if(console.log({widthMatch:n,heightMatch:s}),!n||!s)return q;const e=Number.parseInt(n[1],10),i=Number.parseInt(s[1],10);return Number.isNaN(e)||Number.isNaN(i)?q:e!==i?K:e>400||i>400?V:null})(o);if((s=n)!=s)return M;var s;try{const t=Buffer.from(o,"base64"),n=await p.read(t),s=n.getWidth(),e=n.getHeight();return void 0===s||void 0===e?q:s!==e?K:s>400||e>400?V:null}catch(t){return M}})(a);if(t)throw t;const o=(new w).lock(l,a);k.addOutput({satoshis:1,lockingScript:o}),S="_0"}if(!(t=>{if(!t.includes("_")||t.endsWith("_"))return!1;const o=Number.parseInt(t.split("_")[1]);return!(Number.isNaN(o)||!t.startsWith("_")&&64!==t.split("_")[0].length)})(S))throw new Error("Invalid icon format. Must be either outpoint (format: txid_vout) or relative output index of the icon (format _vout). examples: ecb483eda58f26da1b1f8f15b782b1186abdf9c6399a1c3e63e0d429d5092a41_0 or _1");const I={p:"bsv-20",op:"deploy+mint",sym:e,icon:S,amt:(c?BigInt(d.amt)*10n**BigInt(c):BigInt(d.amt)).toString()};c&&(I.dec=c.toString());const x=Buffer.from(JSON.stringify(I)).toString("base64"),v={satoshis:1,lockingScript:(new w).lock(l,{dataB64:x,contentType:"application/bsv-20"})};k.addOutput(v);for(const o of y){const n={satoshis:o.amount,lockingScript:(new t).lock(o.to)};k.addOutput(n)}let O=0n;const $=k.outputs.reduce((t,o)=>t+BigInt(o.satoshis||0),0n);let A,E=0;for(const o of u){const e=B(o,(new t).unlock(f,"all",!0,o.satoshis,n.fromBinary(s.toArray(o.script,"base64"))));if(k.addInput(e),O+=BigInt(o.satoshis),E=await b.computeFee(k),O>=$+BigInt(E))break}if(O<$+BigInt(E))throw new Error(`Not enough funds to deploy token. Total sats in: ${O}, Total sats out: ${$}, Fee: ${E}`);const T=h||f.toAddress().toString(),P=(new t).lock(T);k.addOutput({lockingScript:P,change:!0}),await k.fee(b),await k.sign();const N=k.outputs.findIndex(t=>t.change);if(-1!==N){const t=k.outputs[N];A={satoshis:t.satoshis,txid:k.id("hex"),vout:N,script:Buffer.from(t.lockingScript.toBinary()).toString("base64")}}return{tx:k,spentOutpoints:k.inputs.map(t=>`${t.sourceTXID}_${t.sourceOutputIndex}`),payChange:A}};export{N as OrdLock,w as OrdP2PKH,b as RoytaltyType,y as TokenType,D as cancelOrdListings,L as cancelOrdTokenListings,_ as createOrdListings,F as createOrdTokenListings,$ as createOrdinals,H as deployBsv21Token,I as fetchNftUtxos,S as fetchPayUtxos,x as fetchTokenUtxos,j as purchaseOrdListing,U as purchaseOrdTokenListing,A as sendOrdinals,E as sendUtxos,O as stringifyMetaData,T as transferOrdTokens,P as validateSubTypeData};
//# sourceMappingURL=index.modern.js.map
