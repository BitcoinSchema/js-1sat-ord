import{Script as t,Transaction as s,TxIn as n,P2PKHAddress as o,TxOut as e,SigHash as i}from"bsv-wasm-web";import{Buffer as r}from"buffer";import*as _ from"dotenv";import{Sigma as g}from"sigma-protocol";const c=t=>{for(var s=[],n=0,o=t.length;n<o;n++){var e=Number(t.charCodeAt(n)).toString(16);s.push(e)}return s.join("")};_.config();const a=(s,n,o,e)=>{const i=c("ord"),_=r.from(n,"base64").toString("hex"),g=c(o);let a=`${s.get_locking_script().to_asm_string()} OP_0 OP_IF ${i} OP_1 ${g} OP_0 ${_} OP_ENDIF`;if(e&&null!=e&&e.app&&null!=e&&e.type){a=`${a} OP_RETURN ${c("1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5")} ${c("SET")}`;for(const[t,s]of Object.entries(e))"cmd"!==t&&(a=`${a} ${c(t)} ${c(s)}`)}return t.from_asm_string(a)},u=async(_,c,u,p,m,l,f,h)=>{let d=new s(1,0),x=new n(r.from(_.txid,"hex"),_.vout,t.from_asm_string(""));d.add_input(x);const I=a(o.from_string(c),l.dataB64,l.contentType,f);let w=new e(BigInt(1),I);d.add_output(w);const $=o.from_string(p).get_locking_script();let y=new e(BigInt(1),$);const B=Math.ceil(m*(d.get_size()+y.to_bytes().byteLength)),b=_.satoshis-1-B;if(b<0)throw new Error("Inadequate satoshis for fee");if(b>0){let t=new e(BigInt(b),$);d.add_output(t)}const k=d.sign(u,i.ALL|i.FORKID,0,t.from_asm_string(_.script),BigInt(_.satoshis));if(x.set_unlocking_script(t.from_asm_string(`${k.to_hex()} ${u.to_public_key().to_hex()}`)),d.set_input(0,x),h){const t=new g(d),{signedTx:s}=t.sign(h);d=s}return d},p=async(_,g,c,u,p,m,l,f,h)=>{let d=new s(1,0),x=new n(r.from(g.txid,"hex"),g.vout,t.from_asm_string(""));d.add_input(x);let I,w=new n(r.from(_.txid,"hex"),_.vout,t.from_asm_string(""));d.add_input(w);const $=o.from_string(l);I=null!=f&&f.dataB64&&null!=f&&f.contentType?a($,f.dataB64,f.contentType,h):$.get_locking_script();let y=new e(BigInt(1),I);d.add_output(y);const B=o.from_string(u).get_locking_script();let b=new e(BigInt(1),B);const k=Math.ceil(p*(d.get_size()+b.to_bytes().byteLength));let O=new e(BigInt(_.satoshis-k),B);d.add_output(O);const v=d.sign(m,i.InputOutput,0,t.from_asm_string(g.script),BigInt(g.satoshis));x.set_unlocking_script(t.from_asm_string(`${v.to_hex()} ${m.to_public_key().to_hex()}`)),d.set_input(0,x);const P=d.sign(c,i.InputOutput,1,t.from_asm_string(_.script),BigInt(_.satoshis));return w.set_unlocking_script(t.from_asm_string(`${P.to_hex()} ${c.to_public_key().to_hex()}`)),d.set_input(1,w),d},m=async(o,_,g,c)=>{const a=new s(1,0);let u=0;for(let t of o||[])u+=t.satoshis;const p=u-c;console.log({feeSats:c,satsIn:u,satsOut:p}),a.add_output(new e(BigInt(p),g.get_locking_script()));let m=0;for(let s of o||[]){console.log({u:s});const o=new n(r.from(s.txid,"hex"),s.vout,t.from_asm_string(""));console.log({inx:o}),o.set_satoshis(BigInt(s.satoshis)),a.add_input(o);const e=a.sign(_,i.InputOutputs,m,t.from_asm_string(s.script),BigInt(s.satoshis));o.set_unlocking_script(t.from_asm_string(`${e.to_hex()} ${_.to_public_key().to_hex()}`)),a.set_input(m,o),m++}return a};export{a as buildInscription,u as createOrdinal,p as sendOrdinal,m as sendUtxos};
//# sourceMappingURL=index.modern.js.map
