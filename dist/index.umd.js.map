{"version":3,"file":"index.umd.js","sources":["../src/utils/strings.ts","../src/types.ts","../src/constants.ts","../src/templates/ordP2pkh.ts","../src/utils/utxo.ts","../src/signData.ts","../src/utils/subtypeData.ts","../src/createOrdinals.ts","../src/sendOrdinals.ts","../src/sendUtxos.ts","../src/transferOrdinals.ts","../src/templates/ordLock.ts","../src/createListings.ts","../src/cancelListings.ts","../src/purchaseOrdListing.ts","../src/utils/icon.ts","../src/deployBsv21.ts","../src/validate.ts"],"sourcesContent":["/**\n * Converts a string to its hexadecimal representation\n *\n * @param {string} utf8Str - The string to convert\n * @returns {string} The hexadecimal representation of the input string\n */\nconst toHex = (utf8Str: string): string => {\n  return Buffer.from(utf8Str).toString(\"hex\");\n};\n\nexport { toHex };\n","import type { PrivateKey, Script, Transaction } from \"@bsv/sdk\";\nimport type { AuthToken } from \"sigma-protocol\";\n\n// biome-ignore lint/complexity/noBannedTypes: Reserved for future use\ntype Signer = {};\n\nexport interface LocalSigner extends Signer {\n\tidKey: PrivateKey;\n}\n\nexport interface RemoteSigner extends Signer {\n\tkeyHost: string;\n\tauthToken?: AuthToken;\n}\n\nexport type Destination = {\n\taddress: string;\n\tinscription?: Inscription;\n};\n\n/**\n * @typedef {Object} Listing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n * @property {Utxo} listingUtxo - Utxo of the listing\n */\nexport type NewListing = {\n\tpayAddress: string;\n\tprice: number;\n\tordAddress: string;\n\tlistingUtxo: Utxo;\n}\n\n/**\n * @typedef {Object} ExistingListing\n * @property {string} payout - Payment output script base64 encoded\n * @property {Utxo} listingUtxo - Utxo of the listing\n */\nexport type ExistingListing = {\n  payout: string;\n  listingUtxo: Utxo;\n}\n\n/**\n * @typedef {Object} NewTokenListing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n * @property {bigint} amt - Number of tokens as a bigint. Not adjusted for decimals (library will add zeros according to dec value).\n */\nexport type NewTokenListing = {\n\tpayAddress: string;\n\tprice: number;\n\tamt: bigint;\n\tordAddress: string;\n}\n\n/**\n * @typedef {Object} Distribution\n * @property {string} address - Destination address. Must be a Ordinals address (BSV address for recieving 1Sat ordinals tokens).\n * @property {string} amt - Number of tokens as a string, considering decimals. Not display format. Ex. 100000000 for 1 token with 8 decimal places.\n */\nexport type Distribution = {\n\taddress: string;\n\tamt: string;\n};\n\n/**\n * @typedef {Object} Utxo\n * @property {number} satoshis - Amount in satoshis\n * @property {string} txid - Transaction id\n * @property {number} vout - Output index\n * @property {string} script - Base64 encoded locking script\n */\nexport type Utxo = {\n\tsatoshis: number;\n\ttxid: string;\n\tvout: number;\n\tscript: string;\n};\n\n/**\n * @typedef {Object} NftUtxo\n * @property {string} collectionId - Optional. Collection id of the NFT\n * @property {string} contentType - Media type of the NFT\n * @property {string} creatorBapId - Optional. Creator BAP id of the NFT\n * @property {string} origin - Origin address of the NFT\n * @property {number} satoshis - Always 1\n */\nexport interface NftUtxo extends Utxo {\n\tcollectionId?: string;\n\tcontentType: string;\n\tcreatorBapId?: string;\n\torigin: string;\n\tsatoshis: 1;\n}\n\n/**\n * @typedef {Object} TokenUtxo\n * @property {string} amt - Number of tokens as a string, adjusted for decimals. Ex. 100000000 for 1 token with 8 decimal places.\n * @property {string} id - Token id -  either tick or id depending on protocol\n * @property {string} satoshis - Always 1\n * @property {string} [payout] - Optional. Payment output script base64 encoded\n * @property {number} [price] - Optional. Listing price in satoshis\n * @property {boolean} [isListing] - Optional. True if the token is a listing\n */\nexport interface TokenUtxo extends Utxo {\n\tamt: string;\n\tid: string;\n\tsatoshis: 1;\n  payout?: string;\n  price?: number;\n  isListing?: boolean;\n}\n\nexport type Inscription = {\n\tdataB64: string;\n\tcontentType: string;\n};\n\nexport type ImageContentType =\n\t| \"image/png\"\n\t| \"image/jpeg\"\n\t| \"image/gif\"\n\t| \"image/svg+xml\"\n\t| \"image/webp\";\n\n/**\n * @typedef {Object} IconInscription\n * @property {string} dataB64 - Base64 encoded image data. Must be a square image.\n * @property {ImageContentType} contentType - Media type of the image\n */\nexport type IconInscription = {\n\tdataB64: string;\n\tcontentType: ImageContentType;\n};\n\nexport type Payment = {\n\tto: string;\n\tamount: number;\n};\n\nexport type TokenInscription = {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\" | \"mint\" | \"deploy+mint\" | \"burn\";\n  dec?: string;\n};\n\nexport interface MintTokenInscription extends TokenInscription {\n\top: \"mint\";\n}\n\nexport interface DeployMintTokenInscription extends TokenInscription {\n\top: \"deploy+mint\";\n\tsym: string;\n\ticon: string;\n}\n\nexport interface TransferTokenInscription extends TokenInscription {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\" | \"burn\";\n}\n\nexport interface TransferBSV20Inscription extends TransferTokenInscription {\n\ttick: string;\n}\n\nexport interface TransferBSV21Inscription extends TransferTokenInscription {\n\tid: string;\n}\n\nexport enum TokenType {\n\tBSV20 = \"bsv20\",\n\tBSV21 = \"bsv21\",\n}\n\nexport type CreateOrdinalsResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\n/**\n * MAP (Magic Attribute Protocol) metadata object with stringified values for writing to the blockchain\n * @typedef {Object} MAP\n * @property {string} app - Application identifier\n * @property {string} type - Metadata type\n * @property {string} [prop] - Optional. Additional metadata properties\n */\nexport type MAP = {\n\tapp: string;\n\ttype: string;\n\t[prop: string]: string;\n};\n\nexport type PreMAP = {\n\tapp: string;\n\ttype: string;\n\t[prop: string]: unknown;\n\troyalties?: Royalty[];\n\tsubTypeData?: CollectionSubTypeData | CollectionItemSubTypeData;\n};\n\nexport type CreateOrdinalsConfig = {\n\tutxos: Utxo[];\n\tdestinations: Destination[];\n\tpaymentPk: PrivateKey;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: PreMAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n};\n\nexport enum RoytaltyType {\n\tPaymail = \"paymail\",\n\tAddress = \"address\",\n\tScript = \"script\",\n}\n\n/**\n * Royalty object\n * @typedef {Object} Royalty\n * @property {RoytaltyType} type - Royalty type, string, one of \"paymail\", \"address\", \"script\"\n * @property {string} destination - Royalty destination\n * @property {string} percentage - Royalty percentage as a string float 0-1\n */\nexport type Royalty = {\n\ttype: RoytaltyType;\n\tdestination: string;\n\tpercentage: string; // string float 0-1\n};\n\nexport interface CreateOrdinalsMetadata extends PreMAP {\n\ttype: \"ord\",\n\tname: string,\n\tpreviewUrl?: string,\n}\n\nexport interface CreateOrdinalsCollectionMetadata extends CreateOrdinalsMetadata {\n\tsubType: \"collection\",\n\tsubTypeData: CollectionSubTypeData, // JSON stringified CollectionSubTypeData\n\troyalties?: Royalty[],\n};\n\nexport interface CreateOrdinalsCollectionItemMetadata extends CreateOrdinalsMetadata {\n\tsubType: \"collectionItem\",\n\tsubTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n};\n\n/**\n * Configuration object for creating an ordinals collection\n * @typedef {Object} CreateOrdinalsCollectionConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collection\"\n * @property metaData.name - Collection name\n * @property metaData.subTypeData - JSON stringified CollectionSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionConfig extends CreateOrdinalsConfig {\n\tmetaData: CreateOrdinalsCollectionMetadata\n}\n\nexport type CollectionTraits = {\n\t[trait: string]: CollectionTrait;\n};\n\nexport type CollectionTrait = {\n\tvalues: string[];\n\toccurancePercentages: string[];\n};\n\nexport type Rarity = {\n\t[key: string]: string;\n}\n\nexport type RarityLabels = Rarity[]\nexport interface CollectionSubTypeData {\n\tdescription: string;\n\tquantity: number;\n\trarityLabels: RarityLabels;\n\ttraits: CollectionTraits;\n}\n\nexport interface CreateOrdinalsCollectionItemMetadata extends PreMAP {\n\ttype: \"ord\",\n\tname: string,\n\tsubType: \"collectionItem\",\n\tsubTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n\troyalties?: Royalty[],\n\tpreviewUrl?: string,\n}\n\n/**\n * Configuration object for creating an ordinals collection item\n * @typedef {Object} CreateOrdinalsCollectionItemConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection item\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collectionItem\"\n * @property metaData.name - Collection item name\n * @property metaData.subTypeData - JSON stringified CollectionItemSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionItemConfig extends CreateOrdinalsConfig {\n\tmetaData: CreateOrdinalsCollectionItemMetadata\n}\n\n/**\n * Subtype data for an ordinals collection item\n * @typedef {Object} CollectionItemSubTypeData\n * @property {string} collectionId - Collection id\n * @property {number} mintNumner - Mint number\n * @property {number} rank - Rank\n * @property {string} rarityLabel - Rarity label\n * @property {string} traits - traits object\n * @property {string} attachments - array of attachment objects\n */\nexport interface CollectionItemSubTypeData {\n\tcollectionId: string;\n\tmintNumber?: number;\n\trank?: number;\n\trarityLabel?: RarityLabels;\n\ttraits?: CollectionItemTraits;\n\tattachments?: CollectionItemAttachment[];\n}\n\nexport type CollectionItemTraits = {\n\tname: string;\n\tvalue: string;\n\trarityLabel?: string;\n\toccurancePercentrage?: string;\n};\n\nexport type CollectionItemAttachment = {\n\tname: string;\n\tdescription?: string;\n\t\"content-type\": string;\n\turl: string;\n}\n\nexport type SendOrdinalsResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type SendOrdinalsConfig = {\n\tpaymentUtxos: Utxo[];\n\tordinals: Utxo[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tdestinations: Destination[];\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: PreMAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n\tenforceUniformSend?: boolean;\n}\n\nexport type DeployBsv21TokenResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type DeployBsv21TokenConfig = {\n\tsymbol: string;\n  decimals?: number;\n\ticon: string | IconInscription;\n\tutxos: Utxo[];\n\tinitialDistribution: Distribution;\n\tpaymentPk: PrivateKey;\n\tdestinationAddress: string;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[];\n};\n\nexport type SendUtxosResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type SendUtxosConfig = {\n\tutxos: Utxo[];\n\tpaymentPk: PrivateKey;\n\tpayments: Payment[];\n\tsatsPerKb?: number;\n\tchangeAddress?: string;\n};\n\nexport interface TransferOrdTokensResult extends SendOrdinalsResult {\n\ttokenChange?: TokenUtxo;\n}\n\nexport type TransferOrdTokensConfig = {\n\tprotocol: TokenType;\n\ttokenID: string;\n  decimals: number;\n\tutxos: Utxo[];\n\tinputTokens: TokenUtxo[];\n\tdistributions: Distribution[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tchangeAddress?: string;\n\ttokenChangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: PreMAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n\tburn?: boolean;\n}\n\nexport type CreateOrdListingsConfig = {\n\tutxos: Utxo[];\n\tlistings: NewListing[];\n\troyalty?: number;\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey,\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[];\n}\n\nexport type PurchaseOrdListingConfig = {\n\tutxos: Utxo[];\n\tpaymentPk: PrivateKey;\n\tlisting: ExistingListing;\n\tordAddress: string;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[],\n}\n\nexport type PurchaseOrdTokenListingConfig = {\n\tprotocol: TokenType;\n\ttokenID: string;\n\tutxos: Utxo[];\n\tpaymentPk: PrivateKey;\n\tlistingUtxo: TokenUtxo;\n\tordAddress: string;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[],\n}\n\nexport type CancelOrdListingsConfig = {\n\tutxos: Utxo[],\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tlistingUtxos: Utxo[];\n\tadditionalPayments?: Payment[];\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n}\n\nexport interface CancelOrdTokenListingsConfig extends CancelOrdListingsConfig {\n\tutxos: Utxo[],\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tlistingUtxos: TokenUtxo[];\n\tadditionalPayments: Payment[];\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tprotocol: TokenType,\n\ttokenID: string;\n\tordAddress?: string;\n}\n\n/**\n * Configuration object for creating a token listing\n * @typedef {Object} CreateOrdTokenListingsConfig\n * @property {Utxo[]} utxos - Array of payment Utxos\n * @property {TokenUtxo[]} inputTokens - Array of TokenUtxos to be listed\n * @property {NewTokenListing[]} listings - Array of NewTokenListings\n * @property {PrivateKey} paymentPk - Private key of the payment address\n * @property {PrivateKey} ordPk - Private key of the ord address\n * @property {string} tokenChangeAddress - Address to send the token change\n * @property {number} [satsPerKb] - Optional. Satoshis per kilobyte\n * @property {Payment[]} [additionalPayments] - Optional. Array of additional payments\n * @property {TokenType} protocol - Token protocol\n * @property {string} tokenID - Token id\n * @property {number} decimals - Number of decimal places for this token.\n */\nexport interface CreateOrdTokenListingsConfig {\n\tutxos: Utxo[];\n\tlistings: NewTokenListing[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey,\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[];\n\tprotocol: TokenType;\n\ttokenID: string;\n  decimals: number;\n\tinputTokens: TokenUtxo[];\n\ttokenChangeAddress: string;\n}\n\n","export const MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\nexport const DEFAULT_SAT_PER_KB = 10;\nexport const API_HOST = \"https://ordinals.gorillapool.io/api\";","import {\n\tLockingScript,\n\tP2PKH,\n\ttype Script,\n} from \"@bsv/sdk\";\nimport type { Inscription, MAP } from \"../types\";\nimport { toHex } from \"../utils/strings\";\nimport { MAP_PREFIX } from \"../constants\";\n\n/**\n * OrdP2PKH (1Sat Ordinal + Pay To Public Key Hash) class implementing ScriptTemplate.\n *\n * This class provides methods to create an Ordinal with Pay To Public Key Hash locking and unlocking scripts. \n * It extends the standard P2PKH script template and provides a custom lock method.\n */\nexport default class OrdP2PKH extends P2PKH {\n\t/**\n\t * Creates a 1Sat Ordinal + P2PKH locking script for a given address string\n\t *\n\t * @param {string} address - An destination address for the Ordinal.\n\t * @param {Object} [inscription] - Base64 encoded file data and Content type of the file.\n\t * @param {MAP} [metaData] - (optional) MAP Metadata to be included in OP_RETURN.\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\t// unlock method inherits from p2pkh\n\tlock(\n\t\taddress: string,\n    inscription?: Inscription,\n\t\tmetaData?: MAP | undefined,\n\t): Script {\n\t\tlet ordAsm = \"\";\n\t\t// This can be omitted for reinscriptions that just update metadata\n\t\tif (inscription?.dataB64 !== undefined && inscription?.contentType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(inscription.dataB64, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(inscription.contentType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`;\n\t\t}\n\n\t\t// Create ordinal output and inscription in a single output\n\t\tconst lockingScript = new P2PKH().lock(address);\n\t\tlet inscriptionAsm = `${ordAsm ? `${ordAsm} ` : \"\"}${lockingScript.toASM()}`;\n\n\t\t// MAP.app and MAP.type keys are required\n\t\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t\t}\n\n\t\tif (metaData?.app && metaData?.type) {\n\t\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\t\tconst mapCmdValue = toHex(\"SET\");\n\t\t\tinscriptionAsm = `${inscriptionAsm} OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\t\tif (key !== \"cmd\") {\n\t\t\t\t\tinscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\n\t\t\t\t\t\tvalue as string,\n\t\t\t\t\t)}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn LockingScript.fromASM(inscriptionAsm);\n\t}\n}\n","import {\n\ttype Transaction,\n\ttype UnlockingScript,\n\tfromUtxo,\n\ttype TransactionInput,\n\tUtils,\n\tP2PKH,\n  Script,\n} from \"@bsv/sdk\";\nimport { type NftUtxo, TokenType, type TokenUtxo, type Utxo } from \"../types\";\nimport { API_HOST } from \"../constants\";\n\nconst { fromBase58Check } = Utils;\n\n/**\n * Converts a Utxo object with a base64 encoded script to a Utxo object with a hex encoded script\n * @param {Utxo} utxo - Utxo object with base64 encoded script\n * @param {Object} unlockScriptTemplate - Object with sign and estimateLength functions\n * @returns {TransactionInput} Utxo object with hex encoded script\n */\nexport const inputFromB64Utxo = (\n\tutxo: Utxo,\n\tunlockScriptTemplate: {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>;\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>;\n\t},\n): TransactionInput => {\n\tconst input = fromUtxo(\n\t\t{\n\t\t\t...utxo,\n\t\t\tscript: Buffer.from(utxo.script, \"base64\").toString(\"hex\"),\n\t\t},\n\t\tunlockScriptTemplate,\n\t);\n\treturn input;\n};\n\n/**\n * Fetches pay utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<Utxo[]>} Array of pay utxos\n */\nexport const fetchPayUtxos = async (address: string, scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\"): Promise<Utxo[]> => {\n\tconst payUrl = `${API_HOST}/txos/address/${address}/unspent?bsv20=false`;\n\tconsole.log({ payUrl });\n\tconst payRes = await fetch(payUrl);\n\tif (!payRes.ok) {\n\t\tthrow new Error(\"Error fetching pay utxos\");\n\t}\n\tlet payUtxos = await payRes.json();\n\t// exclude all 1 satoshi utxos\n\tpayUtxos = payUtxos.filter((u: { satoshis: number }) => u.satoshis !== 1);\n\n\t// Get pubkey hash from address\n\tconst pubKeyHash = fromBase58Check(address);\n\tconst p2pkhScript = new P2PKH().lock(pubKeyHash.data);\n\tpayUtxos = payUtxos.map((utxo: Partial<Utxo>) => ({\n\t\ttxid: utxo.txid,\n\t\tvout: utxo.vout,\n\t\tsatoshis: utxo.satoshis,\n\t\tscript: scriptEncoding === \"hex\" || scriptEncoding === \"base64\" ? Buffer.from(p2pkhScript.toBinary()).toString(scriptEncoding) : p2pkhScript.toASM(),\n\t}));\n\treturn payUtxos as Utxo[];\n};\n\n/**\n * Fetches NFT utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @param {string} [collectionId] - Optional. Collection id (collection insciprtion origin)\n * @param {number} [limit=10] - Optional. Number of utxos to fetch. Default is 10\n * @param {number} [offset=0] - Optional. Offset for fetching utxos. Default is 0\n * @param {string} [scriptEncoding=\"base64\"] - Optional. Encoding for the script. Default is base64. Options are hex, base64, or asm.\n * @returns {Promise<Utxo[]>} Array of NFT utxos\n */\nexport const fetchNftUtxos = async (\n\taddress: string,\n\tcollectionId?: string,\n\tlimit = 10,\n\toffset = 0,\n  scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\",\n): Promise<NftUtxo[]> => {\n\tlet url = `${API_HOST}/txos/address/${address}/unspent?limit=${limit}&offset=${offset}&`;\n\n\tif (collectionId) {\n\t\tconst query = {\n\t\t\tmap: {\n\t\t\t\tsubTypeData: { collectionId },\n\t\t\t},\n\t\t};\n\t\tconst b64Query = Buffer.from(JSON.stringify(query)).toString(\"base64\");\n\t\turl += `q=${b64Query}`;\n\t}\n\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching NFT utxos for ${address}`);\n\t}\n\n\t// Returns a BSV20Txo but we only need a few fields\n\tlet nftUtxos = await res.json();\n\n\t// Only include 1 satoshi outputs, non listings\n\tnftUtxos = nftUtxos.filter(\n\t\t(u: {\n\t\t\tsatoshis: number;\n\t\t\tdata: { list: { price: number; payout: string } | undefined } | null;\n\t\t}) => u.satoshis === 1 && !u.data?.list,\n\t);\n\n\tconst outpoints = nftUtxos.map(\n\t\t(utxo: { txid: string; vout: number }) => `${utxo.txid}_${utxo.vout}`,\n\t);\n\t// Fetch the scripts up to the limit\n\tconst nftRes = await fetch(`${API_HOST}/txos/outpoints?script=true`, {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t\tbody: JSON.stringify([...outpoints]),\n\t});\n\n\tif (!nftRes.ok) {\n\t\tthrow new Error(`Error fetching NFT scripts for ${address}`);\n\t}\n\n\tconst nfts = (await nftRes.json() || [])\n\n\tnftUtxos = nfts.map(\n\t\t(utxo: {\n\t\t\torigin: { outpoint: string };\n\t\t\tscript: string;\n\t\t\tvout: number;\n\t\t\ttxid: string;\n\t\t}) => {\n      let script = utxo.script;\n      if (scriptEncoding === \"hex\") {\n        script = Buffer.from(script, \"base64\").toString(\"hex\");\n      } else if (scriptEncoding === \"asm\") {\n        script = Script.fromHex(Buffer.from(script, \"base64\").toString(\"hex\")).toASM();\n      }\n\t\t\tconst nftUtxo = {\n\t\t\t\torigin: utxo.origin.outpoint,\n\t\t\t\tscript,\n\t\t\t\tvout: utxo.vout,\n\t\t\t\ttxid: utxo.txid,\n\t\t\t\tsatoshis: 1,\n\t\t\t} as NftUtxo;\n\t\t\tif (collectionId) {\n\t\t\t\tnftUtxo.collectionId = collectionId;\n\t\t\t}\n\t\t\treturn nftUtxo;\n\t\t},\n\t);\n\n\treturn nftUtxos as NftUtxo[];\n};\n\n/**\n * Fetches token utxos from the API\n * @param {TokenType} protocol - Token protocol. Either BSV20 or BSV21\n * @param {string} tokenId - Token id. Ticker for BSV20 and id (mint+deploy inscription origin) for BSV21\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<TokenUtxo[]>} Array of token utxos\n */\nexport const fetchTokenUtxos = async (\n\tprotocol: TokenType,\n\ttokenId: string,\n\taddress: string,\n): Promise<TokenUtxo[]> => {\n\tconst url = `${API_HOST}/bsv20/${address}/${protocol === TokenType.BSV20 ? \"tick\" : \"id\"}/${tokenId}?bsv20=true&listing=false`;\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching ${protocol} utxos`);\n\t}\n\n\t// returns a BSV20Txo but we only need a few fields\n\tlet tokenUtxos = await res.json();\n\n\ttokenUtxos = tokenUtxos.map((utxo: Partial<TokenUtxo>) => ({\n\t\tamt: utxo.amt,\n\t\tscript: utxo.script,\n\t\tvout: utxo.vout,\n\t\ttxid: utxo.txid,\n\t\tid: tokenId,\n\t\tsatoshis: 1,\n\t}));\n\n\treturn tokenUtxos as TokenUtxo[];\n};\n","import type { Transaction } from \"@bsv/sdk\";\nimport { Sigma } from \"sigma-protocol\";\nimport type { LocalSigner, RemoteSigner } from \"./types\";\n\n/**\n * Signs data in the transaction with Sigma protocol\n * @param {Transaction} tx - Transaction to sign\n * @param {LocalSigner | RemoteSigner} signer - Local or remote signer (used for data signature)\n * @returns {Transaction} Transaction with signed data\n */\nexport const signData = async (\n\ttx: Transaction,\n\tsigner: LocalSigner | RemoteSigner,\n): Promise<Transaction> => {\n\t// Sign tx if idKey or remote signer like starfish/tokenpass\n\tconst idKey = (signer as LocalSigner)?.idKey;\n\tconst keyHost = (signer as RemoteSigner)?.keyHost;\n\n\tif (idKey) {\n\t\tconst sigma = new Sigma(tx);\n\t\tconst { signedTx } = sigma.sign(idKey);\n\t\treturn signedTx;\n\t}\n\tif (keyHost) {\n\t\tconst authToken = (signer as RemoteSigner)?.authToken;\n\t\tconst sigma = new Sigma(tx);\n\t\ttry {\n\t\t\tconst { signedTx } = await sigma.remoteSign(keyHost, authToken);\n\t\t\treturn signedTx;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthrow new Error(`Remote signing to ${keyHost} failed`);\n\t\t}\n\t}\n\tthrow new Error(\"Signer must be a LocalSigner or RemoteSigner\");\n};\n","import type { MAP, PreMAP } from \"../types\";\n\nconst stringifyMetaData = (metaData?: PreMAP): MAP | undefined => {\n  if (!metaData) return undefined;\n\tconst result: MAP = {\n\t\tapp: metaData.app,\n\t\ttype: metaData.type,\n\t};\n\n\tfor (const [key, value] of Object.entries(metaData)) {\n\t\tif (value !== undefined) {\n\t\t\tif (typeof value === \"string\") {\n\t\t\t\tresult[key] = value;\n\t\t\t} else if (Array.isArray(value) || typeof value === \"object\") {\n\t\t\t\tresult[key] = JSON.stringify(value);\n\t\t\t} else {\n\t\t\t\tresult[key] = String(value);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\nexport default stringifyMetaData;\n","import { Transaction, SatoshisPerKilobyte, P2PKH, Script, Utils } from \"@bsv/sdk\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n\tUtxo,\n\tCreateOrdinalsConfig,\n\tCreateOrdinalsResult,\n\tCreateOrdinalsCollectionConfig,\n\tCreateOrdinalsCollectionItemConfig,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Creates a transaction with inscription outputs\n * @param {CreateOrdinalsConfig | CreateOrdinalsCollectionConfig | CreateOrdinalsCollectionItemConfig} config - Configuration object for creating ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {string} config.changeAddress - Optional. Address to send change to. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Local or remote signer (used for data signature)\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<CreateOrdinalsResult>} Transaction with inscription outputs\n */\nexport const createOrdinals = async (\n\tconfig:\n\t\t| CreateOrdinalsConfig\n\t\t| CreateOrdinalsCollectionConfig\n\t\t| CreateOrdinalsCollectionItemConfig,\n): Promise<CreateOrdinalsResult> => {\n\tconst {\n\t\tutxos,\n\t\tdestinations,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t} = config;\n\t\n\t// Warn if creating many inscriptions at once\n\tif (destinations.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Outputs\n\t// Add inscription outputs\n\tfor (const destination of destinations) {\n\t\tif (!destination.inscription) {\n\t\t\tthrow new Error(\"Inscription is required for all destinations\");\n\t\t}\n\n\t\t// remove any undefined fields from metadata\n\t\tif (metaData) {\n\t\t\tfor(const key of Object.keys(metaData)) {\n\t\t\t\tif (metaData[key] === undefined) {\n\t\t\t\t\tdelete metaData[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription,\n\t\t\t\tstringifyMetaData(metaData),\n\t\t\t),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\tlet payChange: Utxo | undefined;\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\n\tif(signer) {\n\t\tconst utxo = utxos.pop() as Utxo\n\t\ttx.addInput(inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t)));\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\ttx = await signData(tx, signer);\n\t}\n\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\tScript,\n\ttype TransactionOutput,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type { SendOrdinalsResult, SendOrdinalsConfig, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Sends ordinals to the given destinations\n * @param {SendOrdinalsConfig} config - Configuration object for sending ordinals\n * @param {Utxo[]} config.paymentUtxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.ordinals - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {string} config.changeAddress - Optional. Address to send change to, if any. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @param {boolean} config.enforceUniformSend - Optional. Default: true. Enforce that the number of destinations matches the number of ordinals being sent. Sending ordinals requires a 1:1 mapping of destinations to ordinals. This is only used for sub-protocols like BSV21 that manage tokens without sending the inscriptions directly.\n * @returns {Promise<SendOrdinalsResult>} Transaction, spent outpoints, and change vout\n */\nexport const sendOrdinals = async (\n\tconfig: SendOrdinalsConfig,\n): Promise<SendOrdinalsResult> => {\n\tif (!config.satsPerKb) {\n\t\tconfig.satsPerKb = DEFAULT_SAT_PER_KB;\n\t}\n\tif (!config.additionalPayments) {\n\t\tconfig.additionalPayments = [];\n\t}\n\tif (config.enforceUniformSend === undefined) {\n\t\tconfig.enforceUniformSend = true;\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(config.satsPerKb);\n\tlet tx = new Transaction();\n\tconst spentOutpoints: string[] = [];\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of config.ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(\n\t\t\tordUtxo,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tconfig.ordPk, \n\t\t\t\t\"all\",\n\t\t\t\ttrue, \n\t\t\t\tordUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(ordUtxo.script, 'base64'))\n\t\t\t),\n\t\t);\n\t\tspentOutpoints.push(`${ordUtxo.txid}_${ordUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// check that ordinals coming in matches ordinals going out if supplied\n\tif (\n\t\tconfig.enforceUniformSend &&\n\t\tconfig.destinations.length !== config.ordinals.length\n\t) {\n\t\tthrow new Error(\n\t\t\t\"Number of destinations must match number of ordinals being sent\",\n\t\t);\n\t}\n\n\t// Add ordinal outputs\n\tfor (const destination of config.destinations) {\n\t\tlet s: Script;\n\t\tif (\n\t\t\tdestination.inscription?.dataB64 &&\n\t\t\tdestination.inscription?.contentType\n\t\t) {\n\t\t\ts = new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription,\n\t\t\t\tstringifyMetaData(config.metaData),\n\t\t\t);\n\t\t} else {\n\t\t\ts = new P2PKH().lock(destination.address);\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: s,\n\t\t});\n\t}\n\n  \n\t// Add additional payments if any\n\tfor (const p of config.additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n  // add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = config.changeAddress || config.paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of config.paymentUtxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tconfig.paymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\tspentOutpoints.push(`${utxo.txid}_${utxo.vout}`);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (totalSatsIn < totalSatsOut) {\n\t\tthrow new Error(\"Not enough ordinals to send\");\n\t}\n\n\tif (config.signer) {\n\t\ttx = await signData(tx, config.signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChange,\n\t};\n};\n","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype TransactionOutput,\n\tUtils,\n\tScript,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type { SendUtxosConfig, SendUtxosResult, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Sends utxos to the given destination\n * @param {SendUtxosConfig} config - Configuration object for sending utxos\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {Payment[]} config.payments - Array of payments with addresses and amounts\n * @param {number} [config.satsPerKb] - Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {string} [config.changeAddress] - Address to send change to. If not provided, defaults to paymentPk address\n * @returns {Promise<SendUtxosResult>} Transaction with utxo outputs\n */\nexport const sendUtxos = async (\n\tconfig: SendUtxosConfig,\n): Promise<SendUtxosResult> => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tpayments,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tchangeAddress = paymentPk.toAddress().toString(),\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\t// Outputs\n\tfor (const payment of payments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new P2PKH().lock(payment.to),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + (out.satoshis || 0),\n\t\t0,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\ttx.addInput(input);\n\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + fee) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + fee) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to send. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChange: Utxo | undefined;\n\tif (totalSatsIn > totalSatsOut + fee) {\n\t\t// Change\n\t\tconst changeScript = new P2PKH().lock(changeAddress);\n\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t} else if (totalSatsIn < totalSatsOut + fee) {\n\t\tconsole.log(\"No change needed\");\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\t\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTokenType,\n\ttype TransferBSV20Inscription,\n\ttype TransferTokenInscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferOrdTokensConfig,\n\ttype TransferOrdTokensResult,\n\ttype TokenUtxo,\n\ttype Utxo,\n} from \"./types\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { P2PKH, SatoshisPerKilobyte, Script, Transaction, Utils } from \"@bsv/sdk\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Transfer tokens to a destination\n * @param {TransferOrdTokensConfig} config - Configuration object for transferring tokens\n * @param {TokenType} config.protocol - Token protocol. Must be TokenType.BSV20 or TokenType.BSV21\n * @param {string} config.tokenID - Token ID. Either the tick or id value depending on the protocol\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {TokenUtxo[]} config.inputTokens - Token utxos to spend\n * @param {Distribution[]} config.distributions - Array of destinations with addresses and amounts\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {string} config.changeAddress - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {string} config.tokenChangeAddress - Optional. Address to send token change to, if any. If not provided, defaults to ordPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @param {decimals} config.decimals - Number of decimal places for the token\n * @param {burn} config.burn - Optional. Set to true to burn the tokens.\n * @returns {Promise<TransferOrdTokensResult>} Transaction with token transfer outputs\n */\nexport const transferOrdTokens = async (config: TransferOrdTokensConfig): Promise<TransferOrdTokensResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tinputTokens,\n\t\tdistributions,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tchangeAddress,\n\t\ttokenChangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n    decimals,\n\t\tadditionalPayments = [],\n\t\tburn = false\n\t} = config;\n\n\t// calculate change amount\n\tlet changeAmt = 0n;\n\tlet totalAmtIn = 0n;\n\tlet totalAmtOut = 0n;\n\n\t// Ensure these inputs are for the expected token\n\tif (!inputTokens.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\tfor (const token of inputTokens) {\n\t\tconst inputScriptBinary = Utils.toArray(token.script, \"base64\");\n\t\tconst inputScript = Script.fromBinary(inputScriptBinary);\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\ttoken,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\ttoken.satoshis,\n\t\t\t\tinputScript,\n\t\t\t),\n\t\t));\n\t\n\t\ttotalAmtIn += BigInt(token.amt);\n\t}\n\n\t// build destination inscriptions\n\tfor (const dest of distributions) {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: burn ? \"burn\" : \"transfer\",\n\t\t\tamt: dest.amt,\n\t\t}\n    if (decimals > 0) {\n      transferInscription.amt = (BigInt(dest.amt) * BigInt(10 ** decimals)).toString();\n    }\n\t\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\ttick: tokenID,\n\t\t\t} as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\tid: tokenID,\n\t\t\t} as TransferBSV21Inscription;\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid protocol\");\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdest.address,\n\t\t\t\t{\n\t\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\t\t\tcontentType: \"application/bsv20\",\n\t\t\t\t},\n\t\t\t),\n\t\t});\n\t\ttotalAmtOut += BigInt(transferInscription.amt);\n\t};\n\tchangeAmt = totalAmtIn - totalAmtOut;\n\n\tlet tokenChange: TokenUtxo | undefined;\n\t// check that you have enough tokens to send and return change\n\tif (changeAmt < 0n) {\n\t\tthrow new Error(\"Not enough tokens to send\");\n\t}\n\tif (changeAmt > 0n) {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: \"transfer\",\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\ttick: tokenID,\n\t\t\t} as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\tid: tokenID,\n\t\t\t} as TransferBSV21Inscription;\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid protocol\");\n\t\t}\n\n\t\tconst lockingScript = new OrdP2PKH().lock(\n\t\t\ttokenChangeAddress || ordPk.toAddress().toString(), \n\t\t\t{\n\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString('base64'),\n\t\t\t\tcontentType: \"application/bsv-20\",\n\t\t\t}\n\t\t);\n\t\tconst vout = tx.outputs.length;\n\t\ttx.addOutput({ lockingScript, satoshis: 1 });\n\t\ttokenChange = {\n\t\t\tid: tokenID,\n\t\t\tsatoshis: 1,\n\t\t\tscript: Buffer.from(lockingScript.toBinary()).toString(\"base64\"),\n\t\t\ttxid: \"\",\n\t\t\tvout,\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst txid = tx.id(\"hex\") as string;\n\tif (tokenChange) {\n\t\ttokenChange.txid = txid;\n\t}\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t\ttokenChange,\n\t};\n};","import {\n\tBigNumber,\n\ttype LockingScript,\n\tOP,\n\tP2PKH,\n\ttype PrivateKey,\n\tScript,\n\ttype Transaction,\n\tTransactionSignature,\n\tUnlockingScript,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { toHex } from \"../utils/strings\";\nimport type { Inscription } from \"../types\";\n\nexport const oLockPrefix =\n\t\"2097dfd76851bf465e8f715593b217714858bbe9570ff3bd5e33840a34e20ff0262102ba79df5f8ae7604a9830f03c7933028186aede0675a16f025dc4f8be8eec0382201008ce7480da41702918d1ec8e6849ba32b4d65b1e40dc669c31a1e6306b266c0000\";\nexport const oLockSuffix =\n\t\"615179547a75537a537a537a0079537a75527a527a7575615579008763567901c161517957795779210ac407f0e4bd44bfc207355a778b046225a7068fc59ee7eda43ad905aadbffc800206c266b30e6a1319c66dc401e5bd6b432ba49688eecd118297041da8074ce081059795679615679aa0079610079517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01007e81517a75615779567956795679567961537956795479577995939521414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff00517951796151795179970079009f63007952799367007968517a75517a75517a7561527a75517a517951795296a0630079527994527a75517a6853798277527982775379012080517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01205279947f7754537993527993013051797e527e54797e58797e527e53797e52797e57797e0079517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a756100795779ac517a75517a75517a75517a75517a75517a75517a75517a75517a7561517a75517a756169587951797e58797eaa577961007982775179517958947f7551790128947f77517a75517a75618777777777777777777767557951876351795779a9876957795779ac777777777777777767006868\";\n\n/**\n * OrdLock class implementing ScriptTemplate.\n *\n * This class provides methods for interacting with OrdinalLock contract \n */\nexport default class OrdLock {\n\t/**\n\t * Creates a 1Sat Ordinal Lock script\n\t *\n\t * @param {string} ordAddress - An address which can cancel listing.\n\t * @param {string} payAddress - Address which is paid on purchase\n\t * @param {number} price - Listing price in satoshis\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\tlock(\n\t\tordAddress: string,\n\t\tpayAddress: string,\n\t\tprice: number,\n\t\tinscription?: Inscription,\n\t): Script {\n\t\tconst cancelPkh = Utils.fromBase58Check(ordAddress).data as number[];\n\t\tconst payPkh = Utils.fromBase58Check(payAddress).data as number[];\n\n\t\tlet script = new Script()\n\t\tif (inscription?.dataB64 !== undefined && inscription?.contentType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(inscription.dataB64, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(inscription.contentType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tscript = Script.fromASM(`OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`);\n\t\t}\n\n\t\treturn script.writeScript(Script.fromHex(oLockPrefix))\n\t\t\t.writeBin(cancelPkh)\n\t\t\t.writeBin(OrdLock.buildOutput(price, new P2PKH().lock(payPkh).toBinary()))\n\t\t\t.writeScript(Script.fromHex(oLockSuffix))\n\t}\n\n\tcancelListing(\n\t\tprivateKey: PrivateKey,\n\t\tsignOutputs: 'all' | 'none' | 'single' = 'all',\n\t\tanyoneCanPay = false,\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: () => Promise<number>\n\t} {\n\t\tconst p2pkh = new P2PKH().unlock(privateKey, signOutputs, anyoneCanPay, sourceSatoshis, lockingScript)\n\t\treturn {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await p2pkh.sign(tx, inputIndex)).writeOpCode(OP.OP_1)\n\t\t\t},\n\t\t\testimateLength: async () => {\n\t\t\t\treturn 107\n\t\t\t}\n\t\t}\n\t}\n\n\tpurchaseListing(\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>\n\t} {\n\t\tconst purchase = {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\tif (tx.outputs.length < 2) {\n\t\t\t\t\tthrow new Error(\"Malformed transaction\")\n\t\t\t\t}\n\t\t\t\tconst script = new UnlockingScript()\n\t\t\t\t\t.writeBin(OrdLock.buildOutput(\n\t\t\t\t\t\ttx.outputs[0].satoshis || 0,\n\t\t\t\t\t\ttx.outputs[0].lockingScript.toBinary()\n\t\t\t\t\t))\n\t\t\t\tif (tx.outputs.length > 2) {\n\t\t\t\t\tconst writer = new Utils.Writer()\n\t\t\t\t\tfor (const output of tx.outputs.slice(2)) {\n\t\t\t\t\t\twriter.write(OrdLock.buildOutput(output.satoshis || 0, output.lockingScript.toBinary()))\n\t\t\t\t\t}\n\t\t\t\t\tscript.writeBin(writer.toArray())\n\t\t\t\t} else {\n\t\t\t\t\tscript.writeOpCode(OP.OP_0)\n\t\t\t\t}\n\n\t\t\t\tconst input = tx.inputs[inputIndex]\n\t\t\t\tlet sourceSats = sourceSatoshis as number\n\t\t\t\tif (!sourceSats && input.sourceTransaction) {\n\t\t\t\t\tsourceSats = input.sourceTransaction.outputs[input.sourceOutputIndex].satoshis as number\n\t\t\t\t} else if (!sourceSatoshis) {\n\t\t\t\t\tthrow new Error(\"sourceTransaction or sourceSatoshis is required\")\n\t\t\t\t}\n\n\t\t\t\tconst sourceTXID = (input.sourceTXID || input.sourceTransaction?.id('hex')) as string\n\t\t\t\tlet subscript = lockingScript as LockingScript\n\t\t\t\tif (!subscript) {\n\t\t\t\t\tsubscript = input.sourceTransaction?.outputs[input.sourceOutputIndex].lockingScript as LockingScript\n\t\t\t\t}\n\t\t\t\tconst preimage = TransactionSignature.format({\n\t\t\t\t\tsourceTXID,\n\t\t\t\t\tsourceOutputIndex: input.sourceOutputIndex,\n\t\t\t\t\tsourceSatoshis: sourceSats,\n\t\t\t\t\ttransactionVersion: tx.version,\n\t\t\t\t\totherInputs: [],\n\t\t\t\t\tinputIndex,\n\t\t\t\t\toutputs: tx.outputs,\n\t\t\t\t\tinputSequence: input.sequence,\n\t\t\t\t\tsubscript,\n\t\t\t\t\tlockTime: tx.lockTime,\n\t\t\t\t\tscope: TransactionSignature.SIGHASH_ALL |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_ANYONECANPAY |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_FORKID\n\t\t\t\t});\n\n\t\t\t\treturn script.writeBin(preimage).writeOpCode(OP.OP_0)\n\t\t\t},\n\t\t\testimateLength: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await purchase.sign(tx, inputIndex)).toBinary().length\n\t\t\t}\n\t\t}\n\t\treturn purchase\n\t}\n\n\tstatic buildOutput(satoshis: number, script: number[]): number[] {\n\t\tconst writer = new Utils.Writer()\n\t\twriter.writeUInt64LEBn(new BigNumber(satoshis))\n\t\twriter.writeVarIntNum(script.length)\n\t\twriter.write(script)\n\t\treturn writer.toArray()\n\t}\n}\n","import {\n\tP2PKH,\n\tSatoshisPerKilobyte,\n\tScript,\n\tTransaction,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport {\n\ttype CreateOrdTokenListingsConfig,\n\ttype CreateOrdListingsConfig,\n\ttype Utxo,\n\ttype TransferTokenInscription,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\tTokenType,\n\ttype TokenUtxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nconst { toArray } = Utils;\n\n// TODO: Handle royalty\nexport const createOrdListings = async (config: CreateOrdListingsConfig) => {\n\tconst {\n\t\tutxos,\n\t\tlistings,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t\troyalty,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Warn if creating many inscriptions at once\n\tif (listings.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Outputs\n\t// Add listing outputs\n\tfor (const listing of listings) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdLock().lock(\n\t\t\t\tlisting.ordAddress,\n\t\t\t\tlisting.payAddress,\n\t\t\t\tlisting.price,\n\t\t\t),\n\t\t});\n\t\tconst inputScriptBinary = toArray(listing.listingUtxo.script, \"base64\");\n\t\tconst inputScript = Script.fromBinary(inputScriptBinary);\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\tlisting.listingUtxo,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlisting.listingUtxo.satoshis,\n\t\t\t\tinputScript,\n\t\t\t),\n\t\t));\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Check if change is needed\n\tlet payChange: Utxo | undefined;\n\tconst changeScript = new P2PKH().lock(\n\t\tchangeAddress || paymentPk.toAddress().toString(),\n\t);\n\tconst changeOutput = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOutput);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\nexport const createOrdTokenListings = async (\n\tconfig: CreateOrdTokenListingsConfig,\n) => {\n\tconst {\n\t\tutxos,\n\t\tprotocol,\n\t\ttokenID,\n\t\tordPk,\n\t\tpaymentPk,\n\t\tadditionalPayments = [],\n\t\tchangeAddress,\n\t\ttokenChangeAddress,\n\t\tinputTokens,\n\t\tlistings,\n    decimals,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\n\t// Warn if creating many inscriptions at once\n\tif (listings.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Ensure these inputs are for the expected token\n\tif (!inputTokens.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\t// calculate change amount\n\tlet changeAmt = 0n;\n\tlet totalAmtIn = 0n;\n\tlet totalAmtOut = 0n;\n\n\t// Ensure these inputs are for the expected token\n\tif (!inputTokens.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\t// Outputs\n\t// Add listing outputs\n\tfor (const listing of listings) {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: \"transfer\",\n\t\t\tamt: listing.amt.toString(),\n\t\t};\n    // NewTokenListing is not adjusted for decimals\n    if (decimals > 0) {\n      transferInscription.amt = (listing.amt * BigInt(10 ** decimals)).toString();\n    }\n\t\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\ttick: tokenID,\n\t\t\t} as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\tid: tokenID,\n\t\t\t} as TransferBSV21Inscription;\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid protocol\");\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdLock().lock(\n\t\t\t\tlisting.payAddress,\n\t\t\t\tlisting.ordAddress,\n\t\t\t\tlisting.price,\n\t\t\t\t{\n\t\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\t\t\tcontentType: \"application/bsv20\",\n\t\t\t\t},\n\t\t\t),\n\t\t});\n    totalAmtOut += BigInt(transferInscription.amt);\n\t}\n\n  // Input tokens are already adjusted for decimals\n\tfor (const token of inputTokens) {\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\ttoken,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\ttoken.satoshis,\n\t\t\t\tScript.fromBinary(toArray(token.script, \"base64\")),\n\t\t\t),\n\t\t));\n\n\t\ttotalAmtIn += BigInt(token.amt);\n\t}\n\tchangeAmt = totalAmtIn - totalAmtOut;\n\n\tlet tokenChange: TokenUtxo | undefined;\n\t// check that you have enough tokens to send and return change\n\tif (changeAmt < 0n) {\n\t\tthrow new Error(\"Not enough tokens to send\");\n\t}\n\tif (changeAmt > 0n) {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: \"transfer\",\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\ttick: tokenID,\n\t\t\t} as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\tid: tokenID,\n\t\t\t} as TransferBSV21Inscription;\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid protocol\");\n\t\t}\n\n\t\tconst lockingScript = new OrdP2PKH().lock(tokenChangeAddress, {\n\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString('base64'),\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t});\n\t\tconst vout = tx.outputs.length;\n\t\ttx.addOutput({ lockingScript, satoshis: 1 });\n\t\ttokenChange = {\n\t\t\tid: tokenID,\n\t\t\tsatoshis: 1,\n\t\t\tscript: Buffer.from(lockingScript.toBinary()).toString(\"base64\"),\n\t\t\ttxid: \"\",\n\t\t\tvout,\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst txid = tx.id(\"hex\") as string;\n\tif (tokenChange) {\n\t\ttokenChange.txid = txid;\n\t}\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t\ttokenChange,\n\t};\n};\n","import { P2PKH, SatoshisPerKilobyte, Script, Transaction, Utils } from \"@bsv/sdk\";\nimport {\n\tTokenType,\n\ttype TokenUtxo,\n\ttype CancelOrdListingsConfig,\n\ttype CancelOrdTokenListingsConfig,\n\ttype Destination,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\n\nexport const cancelOrdListings = async (config: CancelOrdListingsConfig) => {\n\tconst {\n\t\tutxos,\n\t\tlistingUtxos,\n\t\tordPk,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tadditionalPayments = [],\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\n\t// Warn if creating many inscriptions at once\n\tif (listingUtxos.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\t\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinals we're cancelling\n\tfor (const listingUtxo of listingUtxos) {\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().cancelListing(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlistingUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, 'base64'))\n\t\t\t)\n\t\t));\n\t\t// Add cancel outputs returning listed ordinals\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new P2PKH().lock(ordPk.toAddress().toString()),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo, \n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpaymentPk, \n\t\t\t\t\"all\",\n\t\t\t\ttrue, \n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t\t)\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\nexport const cancelOrdTokenListings = async (\n\tconfig: CancelOrdTokenListingsConfig,\n) => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tadditionalPayments,\n\t\tlistingUtxos,\n\t\tutxos,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\t// calculate change amount\n\tlet totalAmtIn = 0;\n\n\tif (listingUtxos.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Ensure these inputs are for the expected token\n\tif (!listingUtxos.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinals we're cancelling\n\tfor (const listingUtxo of listingUtxos) {\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().cancelListing(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlistingUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, 'base64'))\n\t\t\t)\n\t\t));\n\t\ttotalAmtIn += Number.parseInt(listingUtxo.amt);\n\t}\n\n\tconst transferInscription: TransferTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"transfer\",\n\t\tamt: totalAmtIn.toString(),\n\t};\n\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\tif (protocol === TokenType.BSV20) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\ttick: tokenID,\n\t\t} as TransferBSV20Inscription;\n\t} else if (protocol === TokenType.BSV21) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\tid: tokenID,\n\t\t} as TransferBSV21Inscription;\n\t} else {\n\t\tthrow new Error(\"Invalid protocol\");\n\t}\n\n\tconst destination: Destination = {\n\t\taddress: ordAddress || ordPk.toAddress().toString(),\n\t\tinscription: {\n\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t},\n\t};\n\n  const lockingScript = new OrdP2PKH().lock(\n    destination.address,\n    destination.inscription\n  );\n\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript,\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n  const tokenChange: TokenUtxo = {\n    amt: totalAmtIn.toString(),\n    script: Buffer.from(lockingScript.toHex(), 'hex').toString('base64'),\n    txid: tx.id(\"hex\") as string,\n    vout: 0,\n    id: tokenID,\n    satoshis: 1\n  };\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n    tokenChange\n\t};\n};","import {\n\tLockingScript,\n\tP2PKH,\n\tSatoshisPerKilobyte,\n\tScript,\n\tTransaction,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport {\n\tTokenType,\n\ttype PurchaseOrdListingConfig,\n\ttype PurchaseOrdTokenListingConfig,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\n\nexport const purchaseOrdListing = async (config: PurchaseOrdListingConfig) => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tlisting,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tadditionalPayments = [],\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinal we're purchasing\n\ttx.addInput(\n\t\tinputFromB64Utxo(\n\t\t\tlisting.listingUtxo,\n\t\t\tnew OrdLock().purchaseListing(\n\t\t\t\t1,\n\t\t\t\tScript.fromBinary(Utils.toArray(listing.listingUtxo.script, \"base64\")),\n\t\t\t),\n\t\t),\n\t);\n\n\t// Outputs\n\t// Add the purchased output\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript: new P2PKH().lock(ordAddress),\n\t});\n\n\t// add the payment output\n\tconst reader = new Utils.Reader(Utils.toArray(listing.payout, \"base64\"));\n\tconst satoshis = reader.readUInt64LEBn().toNumber();\n\tconst scriptLength = reader.readVarIntNum();\n\tconst scriptBin = reader.read(scriptLength);\n\tconst lockingScript = LockingScript.fromBinary(scriptBin);\n\ttx.addOutput({\n\t\tsatoshis,\n\t\tlockingScript,\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo,\n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpaymentPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, \"base64\")),\n\t\t\t),\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\nexport const purchaseOrdTokenListing = async (\n\tconfig: PurchaseOrdTokenListingConfig,\n) => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tpaymentPk,\n\t\tlistingUtxo,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinal we're purchasing\n\ttx.addInput(\n\t\tinputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().purchaseListing(\n\t\t\t\t1,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, \"base64\")),\n\t\t\t),\n\t\t),\n\t);\n\n\t// Outputs\n\tconst transferInscription: TransferTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"transfer\",\n\t\tamt: listingUtxo.amt,\n\t};\n\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\tif (protocol === TokenType.BSV20) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\ttick: tokenID,\n\t\t} as TransferBSV20Inscription;\n\t} else if (protocol === TokenType.BSV21) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\tid: tokenID,\n\t\t} as TransferBSV21Inscription;\n\t} else {\n\t\tthrow new Error(\"Invalid protocol\");\n\t}\n\tconst dataB64 = Buffer.from(JSON.stringify(inscription)).toString(\"base64\");\n\n\t// Add the purchased output\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(ordAddress, {\n\t\t\tdataB64,\n\t\t\tcontentType: \"bsv-20\",\n\t\t}),\n\t});\n\n  if (!listingUtxo.payout) {\n    throw new Error(\"Listing UTXO does not have a payout script\");\n  }\n\n  // Add the payment output\n  const reader = new Utils.Reader(Utils.toArray(listingUtxo.payout, \"base64\"));\n  const satoshis = reader.readUInt64LEBn().toNumber();\n  const scriptLength = reader.readVarIntNum();\n  const scriptBin = reader.read(scriptLength);\n  const lockingScript = LockingScript.fromBinary(scriptBin);\n  tx.addOutput({\n    satoshis,\n    lockingScript,\n  });\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo,\n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpaymentPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, \"base64\")),\n\t\t\t),\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase token listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n","// import sharp from \"sharp\";\n// import type { IconInscription, ImageContentType } from \"../types\";\n\n// // export the errors for use in tests\n// export const ErrorOversizedIcon = new Error(\n// \t\"Image must be a square image with dimensions <= 400x400\",\n// );\n// export const ErrorIconProportions = new Error(\"Image must be a square image\");\n// export const ErrorInvalidIconData = new Error(\"Error processing image\");\n// export const ErrorImageDimensionsUndefined = new Error(\n// \t\"Image dimensions are undefined\",\n// );\n\n// export const validIconData = async (\n// \ticon: IconInscription,\n// ): Promise<Error | null> => {\n// \tconst { dataB64, contentType } = icon;\n// \ttry {\n// \t\tconst buffer = Buffer.from(dataB64, \"base64\");\n// \t\tlet image = sharp(buffer);\n\n// \t\t// Special handling for SVG\n// \t\tif (contentType === \"image/svg+xml\") {\n// \t\t\t// Convert SVG to PNG for consistent dimension checking\n// \t\t\timage = image.png();\n// \t\t}\n\n// \t\tconst metadata = await image.metadata();\n\n// \t\tif (metadata.width === undefined || metadata.height === undefined) {\n// \t\t\treturn ErrorImageDimensionsUndefined;\n// \t\t}\n// \t\t// Check if the image is a square\n// \t\tif (metadata.width !== metadata.height) {\n// \t\t\treturn ErrorIconProportions;\n// \t\t}\n// \t\t// ensure the image is <= 400x400\n// \t\tif (metadata.width > 400 || metadata.height > 400) {\n// \t\t\treturn ErrorOversizedIcon;\n// \t\t}\n\n// \t\treturn null;\n// \t} catch (error) {\n// \t\treturn ErrorInvalidIconData;\n// \t}\n// };\n\nimport Jimp from \"jimp\";\nimport type { IconInscription, ImageContentType } from \"../types\";\n\nexport const ErrorOversizedIcon = new Error(\n\t\"Image must be a square image with dimensions <= 400x400\",\n);\nexport const ErrorIconProportions = new Error(\"Image must be a square image\");\nexport const ErrorInvalidIconData = new Error(\"Error processing image\");\nexport const ErrorImageDimensionsUndefined = new Error(\n\t\"Image dimensions are undefined\",\n);\n\nconst isImageContentType = (value: string): value is ImageContentType => {\n\treturn (value as ImageContentType) === value;\n};\n\nexport const validIconData = async (\n\ticon: IconInscription,\n): Promise<Error | null> => {\n\tconst { dataB64, contentType } = icon;\n\n\tif (contentType === \"image/svg+xml\") {\n\t\treturn validateSvg(dataB64);\n\t}\n\n\t// make sure the contentType is one of ImageContentType\n\tif (!isImageContentType(contentType)) {\n\t\treturn ErrorInvalidIconData;\n\t}\n\n\ttry {\n\t\tconst buffer = Buffer.from(dataB64, \"base64\");\n\t\tconst image = await Jimp.read(buffer);\n\n\t\tconst width = image.getWidth();\n\t\tconst height = image.getHeight();\n\n\t\tif (width === undefined || height === undefined) {\n\t\t\treturn ErrorImageDimensionsUndefined;\n\t\t}\n\t\tif (width !== height) {\n\t\t\treturn ErrorIconProportions;\n\t\t}\n\t\tif (width > 400 || height > 400) {\n\t\t\treturn ErrorOversizedIcon;\n\t\t}\n\n\t\treturn null;\n\t} catch (error) {\n\t\treturn ErrorInvalidIconData;\n\t}\n};\n\nconst validateSvg = (svgBase64: string): Error | null => {\n  const svgString = Buffer.from(svgBase64, \"base64\").toString(\"utf-8\");\n  const widthMatch = svgString.match(/<svg[^>]*\\s+width=\"([^\"]+)\"/);\n  const heightMatch = svgString.match(/<svg[^>]*\\s+height=\"([^\"]+)\"/);\n  console.log({widthMatch, heightMatch})\n  if (!widthMatch || !heightMatch) {\n    return ErrorImageDimensionsUndefined;\n  }\n\n\tconst width = Number.parseInt(widthMatch[1], 10);\n\tconst height = Number.parseInt(heightMatch[1], 10);\n\n\tif (Number.isNaN(width) || Number.isNaN(height)) {\n\t\treturn ErrorImageDimensionsUndefined;\n\t}\n\n\tif (width !== height) {\n\t\treturn ErrorIconProportions;\n\t}\n\tif (width > 400 || height > 400) {\n\t\treturn ErrorOversizedIcon;\n\t}\n\n\treturn null;\n}\n\nexport const validIconFormat = (icon: string): boolean => {\n\tif (!icon.includes(\"_\") || icon.endsWith(\"_\")) {\n\t\treturn false;\n\t}\n\n\t// use parseint to validate the vout\n\tconst iconVout = Number.parseInt(icon.split(\"_\")[1]);\n\tif (Number.isNaN(iconVout)) {\n\t\treturn false;\n\t}\n\n\tif (!icon.startsWith(\"_\") && icon.split(\"_\")[0].length !== 64) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","import {\n\tTransaction,\n\tP2PKH,\n\tSatoshisPerKilobyte,\n\ttype TransactionOutput,\n\tUtils,\n\tScript,\n} from \"@bsv/sdk\";\nimport type {\n\tDeployBsv21TokenConfig,\n\tDeployBsv21TokenResult,\n\tDeployMintTokenInscription,\n\tInscription,\n\tUtxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { validIconData, validIconFormat } from \"./utils/icon\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\n\n/**\n * Deploys & Mints a BSV21 token to the given destination address\n * @param {DeployBsv21TokenConfig} config - Configuration object for deploying BSV21 token\n * @param {string} config.symbol - Token ticker symbol\n * @param {number} config.decimals - Number of decimal places to display\n * @param {string | IconInscription} config.icon - outpoint (format: txid_vout) or Inscription. If Inscription, must be a valid image type\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {Distribution} config.initialDistribution - Initial distribution with addresses and total supply (not adjusted for decimals, library will add zeros)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {string} config.destinationAddress - Address to deploy token to.\n * @param {string} config.changeAddress - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<DeployBsv21TokenResult>} Transaction to deploy BSV 2.1 token\n */\nexport const deployBsv21Token = async (\n\tconfig: DeployBsv21TokenConfig,\n): Promise<DeployBsv21TokenResult> => {\n\tconst {\n\t\tsymbol,\n\t\ticon,\n    decimals,\n\t\tutxos,\n\t\tinitialDistribution,\n\t\tpaymentPk,\n\t\tdestinationAddress,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\tlet iconValue: string;\n\tif (typeof icon === \"string\") {\n\t\ticonValue = icon;\n\t} else {\n\t\tconst iconError = await validIconData(icon);\n\t\tif (iconError) {\n\t\t\tthrow iconError;\n\t\t}\n\t\t// add icon inscription to the transaction\n\t\tconst iconScript = new OrdP2PKH().lock(destinationAddress, icon);\n\t\tconst iconOut = {\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: iconScript,\n\t\t};\n\t\ttx.addOutput(iconOut);\n\t\t// relative output index of the icon\n\t\ticonValue = \"_0\";\n\t}\n\n\t// Ensure the icon format\n\tif (!validIconFormat(iconValue)) {\n\t\tthrow new Error(\n\t\t\t\"Invalid icon format. Must be either outpoint (format: txid_vout) or relative output index of the icon (format _vout). examples: ecb483eda58f26da1b1f8f15b782b1186abdf9c6399a1c3e63e0d429d5092a41_0 or _1\",\n\t\t);\n\t}\n  \n\t// Outputs\n  const amt = decimals ? BigInt(initialDistribution.amt) * 10n ** BigInt(decimals) : BigInt(initialDistribution.amt);\n\tconst fileData: DeployMintTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"deploy+mint\",\n\t\tsym: symbol,\n\t\ticon: iconValue,\n\t\tamt: amt.toString(),\n\t};\n\n  if (decimals) {\n    fileData.dec = decimals.toString();\n  }\n\n\tconst b64File = Buffer.from(JSON.stringify(fileData)).toString(\"base64\");\n\tconst sendTxOut = {\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(destinationAddress, {\n\t\t\tdataB64: b64File,\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t} as Inscription),\n\t};\n\ttx.addOutput(sendTxOut);\n\n\t// Additional payments\n\tfor (const payment of additionalPayments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new P2PKH().lock(payment.to),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to deploy token. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n","import type { CollectionItemSubTypeData, CollectionSubTypeData } from \"./types\";\n\n/**\n * Validates sub type data\n * @param {string} subType - Sub type of the ordinals token\n * @param {string} subTypeData - Sub type data of the ordinals token\n * @returns {Error | undefined} Error if validation fails, undefined if validation passes\n */\nexport const validateSubTypeData = (\n  subType: \"collection\" | \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData | CollectionSubTypeData,\n): Error | undefined => {\n  try {\n    if (subType === \"collection\") {\n      const collectionData = subTypeData as CollectionSubTypeData;\n      if (!collectionData.description) {\n        return new Error(\"Collection description is required\");\n      }\n      if (!collectionData.quantity) {\n        return new Error(\"Collection quantity is required\");\n      }\n      if (collectionData.rarityLabels) {\n        if (!Array.isArray(collectionData.rarityLabels)) {\n          return new Error(\"Rarity labels must be an array\");\n        }\n        // make sure keys and values are strings\n        if (!collectionData.rarityLabels.every((label) => {\n          return Object.values(label).every(value => typeof value === 'string');\n        })) {\n          return new Error(`Invalid rarity labels ${collectionData.rarityLabels}`);\n        }\n      }\n      if (collectionData.traits ) {\n        if (typeof collectionData.traits !== \"object\") {\n        return new Error(\"Collection traits must be an object\");\n        }\n        if (collectionData.traits && !Object.keys(collectionData.traits).every(key => typeof key === 'string' && typeof collectionData.traits[key] === 'object')) {\n          return new Error(\"Collection traits must be a valid CollectionTraits object\");\n        }\n      }\n    }\n    if (subType === \"collectionItem\") {\n      const itemData = subTypeData as CollectionItemSubTypeData;\n      if (!itemData.collectionId) {\n        return new Error(\"Collection id is required\");\n      }\n      if (!itemData.collectionId.includes(\"_\")) {\n        return new Error(\"Collection id must be a valid outpoint\");\n      }\n      if (itemData.collectionId.split(\"_\")[0].length !== 64) {\n        return new Error(\"Collection id must contain a valid txid\");\n      }\n      if (Number.isNaN(Number.parseInt(itemData.collectionId.split(\"_\")[1]))) {\n        return new Error(\"Collection id must contain a valid vout\");\n      }\n\n      if (itemData.mintNumber && typeof itemData.mintNumber !== \"number\") {\n        return new Error(\"Mint number must be a number\");\n      }\n      if (itemData.rank && typeof itemData.rank !== \"number\") {\n        return new Error(\"Rank must be a number\");\n      }\n      if (itemData.rarityLabel && typeof itemData.rarityLabel !== \"string\") {\n        return new Error(\"Rarity label must be a string\");\n      }\n      if (itemData.traits && typeof itemData.traits !== \"object\") {\n        return new Error(\"Traits must be an object\");\n      }\n      if (itemData.attachments && !Array.isArray(itemData.attachments)) {\n        return new Error(\"Attachments must be an array\");\n      }\n    }\n    return undefined;\n  } catch (error) {\n    return new Error(\"Invalid JSON data\");\n  }\n};"],"names":["TokenType","RoytaltyType","toHex","utf8Str","Buffer","from","toString","DEFAULT_SAT_PER_KB","API_HOST","OrdP2PKH","_P2PKH","apply","arguments","_inheritsLoose","prototype","lock","address","inscription","metaData","ordAsm","undefined","dataB64","contentType","ordHex","fileHex","trim","Error","fileMediaType","inscriptionAsm","P2PKH","toASM","app","type","_i","_Object$entries","Object","entries","length","_Object$entries$_i","key","value","LockingScript","fromASM","fromBase58Check","Utils","inputFromB64Utxo","utxo","unlockScriptTemplate","fromUtxo","_extends","script","signData","tx","signer","_exit","_temp2","_result","idKey","keyHost","_sigma$sign","Sigma","sign","Promise","resolve","signedTx","_temp","authToken","sigma","remoteSign","then","_ref","_catch","e","console","log","reject","stringifyMetaData","result","Array","isArray","JSON","stringify","String","pact","state","s","_Pact","o","bind","v","_settle","observer","onFulfilled","this","_this","onRejected","_isSettledPact","thenable","Symbol","iterator","OrdLock","_proto","ordAddress","payAddress","price","cancelPkh","data","payPkh","Script","writeScript","fromHex","writeBin","buildOutput","toBinary","cancelListing","privateKey","signOutputs","anyoneCanPay","sourceSatoshis","lockingScript","p2pkh","unlock","inputIndex","_p2pkh$sign","writeOpCode","OP","OP_1","estimateLength","purchaseListing","purchase","_input$sourceTransact","outputs","UnlockingScript","satoshis","_step","writer","Writer","_iterator","_createForOfIteratorHelperLoose","slice","done","output","write","toArray","OP_0","input","inputs","sourceSats","sourceTransaction","sourceOutputIndex","_input$sourceTransact2","sourceTXID","id","subscript","preimage","TransactionSignature","format","transactionVersion","version","otherInputs","inputSequence","sequence","lockTime","scope","SIGHASH_ALL","SIGHASH_ANYONECANPAY","SIGHASH_FORKID","_purchase$sign","writeUInt64LEBn","BigNumber","writeVarIntNum","_iteratorSymbol","callback","_forOf","target","body","check","step","_cycle","next","return","_fixup","TypeError","values","i","push","array","_forTo","ErrorOversizedIcon","ErrorIconProportions","ErrorInvalidIconData","ErrorImageDimensionsUndefined","config","_interrupt","totalSatsIn","totalSatsOut","BigInt","fee","modelOrFee","payChangeOutIdx","findIndex","change","changeOutput","payChange","txid","vout","spentOutpoints","map","utxos","listingUtxos","ordPk","paymentPk","changeAddress","_config$additionalPay","additionalPayments","_config$satsPerKb","satsPerKb","warn","SatoshisPerKilobyte","Transaction","listingUtxo","addInput","fromBinary","addOutput","toAddress","_step2","_iterator2","p","amount","to","changeScript","reduce","total","out","computeFee","_modelOrFee$computeFe","_interrupt2","_temp4","tokenChange","amt","totalAmtIn","tokenID","protocol","_config$satsPerKb2","every","token","_step3","_iterator3","Number","parseInt","transferInscription","op","BSV20","tick","BSV21","destination","_iterator4","_step4","_temp3","_modelOrFee$computeFe2","listings","listing","inputScriptBinary","inputScript","_config$additionalPay2","tokenChangeAddress","inputTokens","decimals","changeAmt","totalAmtOut","Math","pow","_step5","_iterator5","destinations","_Object$keys","keys","pop","_signData","iconValue","icon","includes","endsWith","iconVout","split","isNaN","startsWith","validIconFormat","initialDistribution","fileData","sym","symbol","dec","b64File","sendTxOut","destinationAddress","payment","svgBase64","svgString","widthMatch","match","heightMatch","width","height","validateSvg","buffer","Jimp","read","image","getWidth","getHeight","validIconData","iconError","iconScript","collectionId","limit","offset","scriptEncoding","url","subTypeData","fetch","res","ok","json","nftUtxos","outpoints","filter","u","_u$data","list","method","headers","concat","nftRes","nfts","nftUtxo","origin","outpoint","payUrl","payRes","payUtxos","pubKeyHash","p2pkhScript","tokenId","tokenUtxos","reader","Reader","payout","readUInt64LEBn","toNumber","scriptLength","readVarIntNum","scriptBin","enforceUniformSend","ordinals","ordUtxo","_destination$inscript","_destination$inscript2","paymentUtxos","changeOut","payments","_config$changeAddress","distributions","_config$burn","burn","dest","subType","collectionData","description","quantity","rarityLabels","label","traits","itemData","mintNumber","rank","rarityLabel","attachments","error"],"mappings":"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"}