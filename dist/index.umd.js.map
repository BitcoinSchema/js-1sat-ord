{"version":3,"file":"index.umd.js","sources":["../src/utils/strings.ts","../src/types.ts","../src/constants.ts","../src/templates/ordP2pkh.ts","../src/utils/utxo.ts","../src/signData.ts","../src/sendOrdinals.ts","../src/sendUtxos.ts","../src/createOrdinals.ts","../src/transferOrdinals.ts"],"sourcesContent":["/**\n * Converts a string to its hexadecimal representation\n *\n * @param {string} utf8Str - The string to convert\n * @returns {string} The hexadecimal representation of the input string\n */\nconst toHex = (utf8Str: string): string => {\n  return Buffer.from(utf8Str).toString(\"hex\");\n};\n\nexport { toHex };\n","import type { PrivateKey, Transaction } from \"@bsv/sdk\";\nimport type { AuthToken } from \"sigma-protocol\";\n\n// biome-ignore lint/complexity/noBannedTypes: Reserved for future use\ntype Signer = {};\n\nexport interface LocalSigner extends Signer {\n\tidKey: PrivateKey;\n}\n\nexport interface RemoteSigner extends Signer {\n\tkeyHost: string;\n\tauthToken?: AuthToken;\n}\n\nexport type Destination = {\n\taddress: string;\n\tinscription?: Inscription;\n};\n\n/**\n * @typedef {Object} Distribution\n * @property {string} address - Destination address. Must be a Ordinals address (BSV address for recieving 1Sat ordinals tokens).\n * @property {string} amt - Number of tokens as a string, considering decimals. Not display format. Ex. 100000000 for 1 token with 8 decimal places.\n */\nexport type Distribution = {\n\taddress: string;\n\tamt: string;\n};\n\n/**\n * @typedef {Object} Utxo\n * @property {number} satoshis - Amount in satoshis\n * @property {string} txid - Transaction id\n * @property {number} vout - Output index\n * @property {string} script - Base64 encoded locking script\n */\nexport type Utxo = {\n\tsatoshis: number;\n\ttxid: string;\n\tvout: number;\n\tscript: string;\n};\n\n/**\n * @typedef {Object} NftUtxo\n * @property {string} collectionId - Optional. Collection id of the NFT\n * @property {string} contentType - Media type of the NFT\n * @property {string} creatorBapId - Optional. Creator BAP id of the NFT\n * @property {string} origin - Origin address of the NFT\n * @property {number} satoshis - Always 1\n */\nexport interface NftUtxo extends Utxo {\n\tcollectionId?: string;\n\tcontentType: string;\n\tcreatorBapId?: string;\n\torigin: string;\n\tsatoshis: 1;\n}\n\n/**\n * @typedef {Object} TokenUtxo\n * @property {string} amt - Number of tokens as a string\n * @property {string} id - Token id -  either tick or id depending on protocol\n * @property {string} satoshis - Always 1\n */\nexport interface TokenUtxo extends Utxo {\n\tamt: string;\n\tid: string;\n\tsatoshis: 1;\n}\n\nexport type Inscription = {\n\tdataB64: string;\n\tcontentType: string;\n};\n\nexport type ImageContentType =\n\t| \"image/png\"\n\t| \"image/jpeg\"\n\t| \"image/gif\"\n\t| \"image/svg+xml\"\n\t| \"image/webp\";\n\n/**\n * @typedef {Object} IconInscription\n * @property {string} dataB64 - Base64 encoded image data. Must be a square image.\n * @property {ImageContentType} contentType - Media type of the image\n */\nexport type IconInscription = {\n\tdataB64: string;\n\tcontentType: ImageContentType;\n};\n\nexport type MAP = {\n\tapp: string;\n\ttype: string;\n\t[prop: string]: string;\n};\n\nexport type Payment = {\n\tto: string;\n\tamount: number;\n};\n\nexport type TokenInscription = {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\" | \"mint\" | \"deploy+mint\";\n};\n\nexport interface MintTokenInscription extends TokenInscription {\n\top: \"mint\";\n}\n\nexport interface DeployMintTokenInscription extends TokenInscription {\n\top: \"deploy+mint\";\n\tsym: string;\n\ticon: string;\n}\n\nexport interface TransferTokenInscription extends TokenInscription {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\";\n}\n\nexport interface TransferBSV20Inscription extends TransferTokenInscription {\n\ttick: string;\n}\n\nexport interface TransferBSV21Inscription extends TransferTokenInscription {\n\tid: string;\n}\n\nexport enum TokenType {\n\tBSV20 = \"bsv20\",\n\tBSV21 = \"bsv21\",\n}\n\n\nexport type CreateOrdinalsResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type CreateOrdinalsConfig = {\n\tutxos: Utxo[];\n\tdestinations: Destination[];\n\tpaymentPk: PrivateKey;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: MAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n};\n\nexport type SendOrdinalsResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type SendOrdinalsConfig = {\n\tpaymentUtxos: Utxo[];\n\tordinals: Utxo[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tdestinations: Destination[];\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: MAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n\tenforceUniformSend?: boolean;\n}\n\nexport type DeployBsv21TokenResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type DeployBsv21TokenConfig = {\n\tsymbol: string;\n\ticon: string | IconInscription;\n\tutxos: Utxo[];\n\tinitialDistribution: Distribution;\n\tpaymentPk: PrivateKey;\n\tdestinationAddress: string;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[];\n};\n\nexport type SendUtxosResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type SendUtxosConfig = {\n\tutxos: Utxo[];\n\tpaymentPk: PrivateKey;\n\tpayments: Payment[];\n\tsatsPerKb?: number;\n\tchangeAddress?: string;\n};\n\nexport interface TransferOrdTokensResult extends SendOrdinalsResult {\n\ttokenChange?: TokenUtxo;\n}\n\nexport type TransferOrdTokensConfig = {\n\tprotocol: TokenType;\n\ttokenID: string;\n\tutxos: Utxo[];\n\tinputTokens: TokenUtxo[];\n\tdistributions: Distribution[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tchangeAddress?: string;\n\ttokenChangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: MAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n}","export const MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\nexport const DEFAULT_SAT_PER_KB = 10;\nexport const API_HOST = \"https://ordinals.gorillapool.io/api\";","import {\n\tLockingScript,\n\tP2PKH,\n\ttype Script,\n} from \"@bsv/sdk\";\nimport type { MAP } from \"../types\";\nimport { toHex } from \"../utils/strings\";\nimport { MAP_PREFIX } from \"../constants\";\n\n/**\n * OrdP2PKH (1Sat Ordinal + Pay To Public Key Hash) class implementing ScriptTemplate.\n *\n * This class provides methods to create an Ordinal with Pay To Public Key Hash locking and unlocking scripts. \n * It extends the standard P2PKH script template and provides a custom lock method.\n */\nexport default class OrdP2PKH extends P2PKH {\n\t/**\n\t * Creates a 1Sat Ordinal + P2PKH locking script for a given address string\n\t *\n\t * @param {string} address - An destination address for the Ordinal.\n\t * @param {string} [b64File] - Base64 encoded file data.\n\t * @param {string} [mediaType] - Media type of the file.\n\t * @param {MAP} [metaData] - (optional) MAP Metadata to be included in OP_RETURN.\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\t// unlock method inherits from p2pkh\n\tlock(\n\t\taddress: string,\n\t\tb64File?: string | undefined,\n\t\tmediaType?: string | undefined,\n\t\tmetaData?: MAP | undefined,\n\t): Script {\n\t\tlet ordAsm = \"\";\n\t\t// This can be omitted for reinscriptions that just update metadata\n\t\tif (b64File !== undefined && mediaType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(b64File, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(mediaType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`;\n\t\t}\n\n\t\t// Create ordinal output and inscription in a single output\n\t\tconst lockingScript = new P2PKH().lock(address);\n\t\tlet inscriptionAsm = `${ordAsm ? `${ordAsm} ` : \"\"}${lockingScript.toASM()}`;\n\n\t\t// MAP.app and MAP.type keys are required\n\t\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t\t}\n\n\t\tif (metaData?.app && metaData?.type) {\n\t\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\t\tconst mapCmdValue = toHex(\"SET\");\n\t\t\tinscriptionAsm = `${inscriptionAsm} OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\t\tif (key !== \"cmd\") {\n\t\t\t\t\tinscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\n\t\t\t\t\t\tvalue as string,\n\t\t\t\t\t)}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn LockingScript.fromASM(inscriptionAsm);\n\t}\n}\n","import {\n\ttype Transaction,\n\ttype UnlockingScript,\n\tfromUtxo,\n\ttype TransactionInput,\n\tUtils,\n\tP2PKH,\n} from \"@bsv/sdk\";\nimport { type NftUtxo, TokenType, type TokenUtxo, type Utxo } from \"../types\";\nimport { API_HOST } from \"../constants\";\n\nconst { fromBase58Check } = Utils;\n\n/**\n * Converts a Utxo object with a base64 encoded script to a Utxo object with a hex encoded script\n * @param {Utxo} utxo - Utxo object with base64 encoded script\n * @param {Object} unlockScriptTemplate - Object with sign and estimateLength functions\n * @returns {TransactionInput} Utxo object with hex encoded script\n */\nexport const inputFromB64Utxo = (\n\tutxo: Utxo,\n\tunlockScriptTemplate: {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>;\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>;\n\t},\n): TransactionInput => {\n\tconst input = fromUtxo(\n\t\t{\n\t\t\t...utxo,\n\t\t\tscript: Buffer.from(utxo.script, \"base64\").toString(\"hex\"),\n\t\t},\n\t\tunlockScriptTemplate,\n\t);\n\tinput.sourceTXID = utxo.txid;\n\treturn input;\n};\n\n/**\n * Fetches pay utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<Utxo[]>} Array of pay utxos\n */\nexport const fetchPayUtxos = async (address: string): Promise<Utxo[]> => {\n\tconst payUrl = `${API_HOST}/txos/address/${address}/unspent?bsv20=false`;\n\tconsole.log({ payUrl });\n\tconst payRes = await fetch(payUrl);\n\tif (!payRes.ok) {\n\t\tthrow new Error(\"Error fetching pay utxos\");\n\t}\n\tlet payUtxos = await payRes.json();\n\t// exclude all 1 satoshi utxos\n\tpayUtxos = payUtxos.filter((u: { satoshis: number }) => u.satoshis !== 1);\n\n\t// Get pubkey hash from address\n\tconst pubKeyHash = fromBase58Check(address);\n\tconst p2pkhScript = new P2PKH().lock(pubKeyHash.data);\n\tpayUtxos = payUtxos.map((utxo: Partial<Utxo>) => ({\n\t\ttxid: utxo.txid,\n\t\tvout: utxo.vout,\n\t\tsatoshis: utxo.satoshis,\n\t\tscript: Buffer.from(p2pkhScript.toBinary()).toString(\"base64\"),\n\t}));\n\treturn payUtxos as Utxo[];\n};\n\n/**\n * Fetches NFT utxos from the API\n * @param {string} tokenId - Token id\n * @param {string} address - Address to fetch utxos for\n * @param {string} [collectionId] - Optional. Collection id (collection insciprtion origin)\n * @param {number} [limit=10] - Optional. Number of utxos to fetch. Default is 10\n * @param {number} [offset=0] - Optional. Offset for fetching utxos. Default is 0\n * @returns {Promise<Utxo[]>} Array of NFT utxos\n */\nexport const fetchNftUtxos = async (\n\ttokenId: string,\n\taddress: string,\n\tcollectionId?: string,\n\tlimit = 10,\n\toffset = 0,\n): Promise<Utxo[]> => {\n\tlet url = `${API_HOST}/txos/address/${address}/unspent?limit=${limit}&offset=${offset}&`;\n\n\tif (collectionId) {\n\t\tconst query = {\n\t\t\tmap: {\n\t\t\t\tsubTypeData: { collectionId },\n\t\t\t},\n\t\t};\n\t\tconst b64Query = Buffer.from(JSON.stringify(query)).toString(\"base64\");\n\t\turl += `query=${b64Query}`;\n\t}\n\n\tconsole.log({ url });\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching NFT utxos for ${address}`);\n\t}\n\n\t// Returns a BSV20Txo but we only need a few fields\n\tlet nftUtxos = await res.json();\n\n\t// Only include 1 satoshi outputs, non listings\n\tnftUtxos = nftUtxos.filter(\n\t\t(u: {\n\t\t\tsatoshis: number;\n\t\t\tdata: { list: { price: number; payout: string } | undefined };\n\t\t}) => u.satoshis === 1 && !u.data.list,\n\t);\n\n\tconst outpoints = nftUtxos.map(\n\t\t(utxo: { txid: string; vout: number }) => `${utxo.txid}_${utxo.vout}`,\n\t);\n\t// Fetch the scripts up to the limit\n\tconst nftRes = await fetch(`${API_HOST}/txos/outpoints`, {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t\tbody: JSON.stringify({ outpoints }),\n\t});\n\n\tif (!nftRes.ok) {\n\t\tthrow new Error(`Error fetching NFT scripts for ${address}`);\n\t}\n\n\tconst nfts = await nftRes.json();\n\n\tnftUtxos = nfts.map(\n\t\t(utxo: {\n\t\t\torigin: { outpoint: string };\n\t\t\tscript: string;\n\t\t\tvout: number;\n\t\t\ttxid: string;\n\t\t}) => ({\n\t\t\torigin: utxo.origin.outpoint,\n\t\t\tscript: utxo.script,\n\t\t\tvout: utxo.vout,\n\t\t\ttxid: utxo.txid,\n\t\t\tid: tokenId,\n\t\t\tsatoshis: 1,\n\t\t}),\n\t);\n\n\treturn nftUtxos as NftUtxo[];\n};\n\n/**\n * Fetches token utxos from the API\n * @param {TokenType} protocol - Token protocol. Either BSV20 or BSV21\n * @param {string} tokenId - Token id. Ticker for BSV20 and id (mint+deploy inscription origin) for BSV21\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<TokenUtxo[]>} Array of token utxos\n */\nexport const fetchTokenUtxos = async (\n\tprotocol: TokenType,\n\ttokenId: string,\n\taddress: string,\n): Promise<TokenUtxo[]> => {\n\tconst url = `${API_HOST}/bsv20/${address}/${protocol === TokenType.BSV20 ? \"tick\" : \"id\"}/${tokenId}?bsv20=true&listing=false`;\n\tconsole.log({ url });\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching ${protocol} utxos`);\n\t}\n\n\t// returns a BSV20Txo but we only need a few fields\n\tlet tokenUtxos = await res.json();\n\n\ttokenUtxos = tokenUtxos.map((utxo: Partial<TokenUtxo>) => ({\n\t\tamt: utxo.amt,\n\t\tscript: utxo.script,\n\t\tvout: utxo.vout,\n\t\ttxid: utxo.txid,\n\t\tid: tokenId,\n\t\tsatoshis: 1,\n\t}));\n\n\treturn tokenUtxos as TokenUtxo[];\n};\n","import type { Transaction } from \"@bsv/sdk\";\nimport { Sigma } from \"sigma-protocol\";\nimport type { LocalSigner, RemoteSigner } from \"./types\";\n\n/**\n * Signs data in the transaction with Sigma protocol\n * @param {Transaction} tx - Transaction to sign\n * @param {LocalSigner | RemoteSigner} signer - Local or remote signer (used for data signature)\n * @returns {Transaction} Transaction with signed data\n */\nexport const signData = async (\n\ttx: Transaction,\n\tsigner: LocalSigner | RemoteSigner,\n): Promise<Transaction> => {\n\t// Sign tx if idKey or remote signer like starfish/tokenpass\n\tconst idKey = (signer as LocalSigner)?.idKey;\n\tconst keyHost = (signer as RemoteSigner)?.keyHost;\n\n\tif (idKey) {\n\t\tconst sigma = new Sigma(tx);\n\t\tconst { signedTx } = sigma.sign(idKey);\n\t\treturn signedTx;\n\t}\n\tif (keyHost) {\n\t\tconst authToken = (signer as RemoteSigner)?.authToken;\n\t\tconst sigma = new Sigma(tx);\n\t\ttry {\n\t\t\tconst { signedTx } = await sigma.remoteSign(keyHost, authToken);\n\t\t\treturn signedTx;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthrow new Error(`Remote signing to ${keyHost} failed`);\n\t\t}\n\t}\n\tthrow new Error(\"Signer must be a LocalSigner or RemoteSigner\");\n};\n","import {\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype Script,\n\ttype TransactionOutput,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type { SendOrdinalsResult, SendOrdinalsConfig, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\n\n/**\n * Sends ordinals to the given destinations\n * @param {SendOrdinalsConfig} config - Configuration object for sending ordinals\n * @param {Utxo[]} config.paymentUtxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.ordinals - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {string} config.changeAddress - Optional. Address to send change to, if any. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {MAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @param {boolean} config.enforceUniformSend - Optional. Default: true. Enforce that the number of destinations matches the number of ordinals being sent. Sending ordinals requires a 1:1 mapping of destinations to ordinals. This is only used for sub-protocols like BSV21 that manage tokens without sending the inscriptions directly.\n * @returns {Promise<SendOrdinalsResult>} Transaction, spent outpoints, and change vout\n */\nexport const sendOrdinals = async (\n\tconfig: SendOrdinalsConfig,\n): Promise<SendOrdinalsResult> => {\n\tif (!config.satsPerKb) {\n\t\tconfig.satsPerKb = DEFAULT_SAT_PER_KB;\n\t}\n\tif (!config.additionalPayments) {\n\t\tconfig.additionalPayments = [];\n\t}\n\tif (config.enforceUniformSend === undefined) {\n\t\tconfig.enforceUniformSend = true;\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(config.satsPerKb);\n\tlet tx = new Transaction();\n\tconst spentOutpoints: string[] = [];\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of config.ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(\n\t\t\tordUtxo,\n\t\t\tnew OrdP2PKH().unlock(config.ordPk),\n\t\t);\n\t\tspentOutpoints.push(`${ordUtxo.txid}_${ordUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// check that ordinals coming in matches ordinals going out if supplied\n\tif (\n\t\tconfig.enforceUniformSend &&\n\t\tconfig.destinations.length !== config.ordinals.length\n\t) {\n\t\tthrow new Error(\n\t\t\t\"Number of destinations must match number of ordinals being sent\",\n\t\t);\n\t}\n\n\t// Add ordinal outputs\n\tfor (const destination of config.destinations) {\n\t\tlet s: Script;\n\t\tif (\n\t\t\tdestination.inscription?.dataB64 &&\n\t\t\tdestination.inscription?.contentType\n\t\t) {\n\t\t\ts = new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription.dataB64,\n\t\t\t\tdestination.inscription.contentType,\n\t\t\t\tconfig.metaData,\n\t\t\t);\n\t\t} else {\n\t\t\ts = new P2PKH().lock(destination.address);\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: s,\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of config.additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of config.paymentUtxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(config.paymentPk));\n\t\tspentOutpoints.push(`${utxo.txid}_${utxo.vout}`);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (totalSatsIn < totalSatsOut) {\n\t\tthrow new Error(\"Not enough ordinals to send\");\n\t}\n\n\tlet payChange: Utxo | undefined;\n\tif (totalSatsIn > totalSatsOut + BigInt(fee)) {\n\t\tconst changeScript = new P2PKH().lock(\n\t\t\tconfig.changeAddress || config.paymentPk.toAddress().toString(),\n\t\t);\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not available until the transaction is signed\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t}\n\n\tif (config.signer) {\n\t\ttx = await signData(tx, config.signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChange,\n\t};\n};\n","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype TransactionOutput,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type { SendUtxosConfig, SendUtxosResult, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Sends utxos to the given destination\n * @param {SendUtxosConfig} config - Configuration object for sending utxos\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {Payment[]} config.payments - Array of payments with addresses and amounts\n * @param {number} [config.satsPerKb] - Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {string} [config.changeAddress] - Address to send change to. If not provided, defaults to paymentPk address\n * @returns {Promise<SendUtxosResult>} Transaction with utxo outputs\n */\nexport const sendUtxos = async (\n\tconfig: SendUtxosConfig,\n): Promise<SendUtxosResult> => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tpayments,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tchangeAddress = paymentPk.toAddress().toString(),\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\t// Outputs\n\tfor (const payment of payments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new P2PKH().lock(payment.to),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + (out.satoshis || 0),\n\t\t0,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + fee) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + fee) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to send. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChange: Utxo | undefined;\n\tif (totalSatsIn > totalSatsOut + fee) {\n\t\t// Change\n\t\tconst changeScript = new P2PKH().lock(changeAddress);\n\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t} else if (totalSatsIn < totalSatsOut + fee) {\n\t\tconsole.log(\"No change needed\");\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n} from \"@bsv/sdk\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n\tUtxo,\n\tDestination,\n\tMAP,\n\tLocalSigner,\n\tRemoteSigner,\n\tPayment,\n\tCreateOrdinalsConfig,\n\tCreateOrdinalsResult,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { signData } from \"./signData\";\n\n/**\n * Creates a transaction with inscription outputs\n * @param {CreateOrdinalsConfig} config - Configuration object for creating ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {string} config.changeAddress - Optional. Address to send change to. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {MAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Local or remote signer (used for data signature)\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<CreateOrdinalsResult>} Transaction with inscription outputs\n */\nexport const createOrdinals = async (\n\tconfig: CreateOrdinalsConfig,\n): Promise<CreateOrdinalsResult> => {\n\tconst {\n\t\tutxos,\n\t\tdestinations,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Inputs\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\t}\n\n\t// Warn if creating many inscriptions at once\n\tif (destinations.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Outputs\n\t// Add inscription outputs\n\tfor (const destination of destinations) {\n\t\tif (!destination.inscription) {\n\t\t\tthrow new Error(\"Inscription is required for all destinations\");\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription.dataB64,\n\t\t\t\tdestination.inscription.contentType,\n\t\t\t\tmetaData,\n\t\t\t),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\tlet payChangeVout: number | undefined;\n\n\t// Calculate total input and output amounts\n\tconst totalInput = utxos.reduce(\n\t\t(sum, utxo) => sum + BigInt(utxo.satoshis),\n\t\t0n,\n\t);\n\tconst totalOutput = tx.outputs.reduce(\n\t\t(sum, output) => sum + BigInt(output.satoshis || 0),\n\t\t0n,\n\t);\n\n\t// Estimate fee\n\tconst estimatedFee = await modelOrFee.computeFee(tx);\n\n\t// Check if change is needed\n\tlet payChange: Utxo | undefined;\n\tif (totalInput > totalOutput + BigInt(estimatedFee)) {\n\t\tconst changeScript = new P2PKH().lock(\n\t\t\tchangeAddress || paymentPk.toAddress().toString(),\n\t\t);\n\t\tconst changeOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\t// Add change output\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet,\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\n\t\ttx.addOutput(changeOutput);\n\t}\n\n\tif (signer) {\n\t\ttx = await signData(tx, signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\ttype Destination,\n\tTokenType,\n\ttype TransferBSV20Inscription,\n\ttype TransferTokenInscription,\n  type TransferBSV21Inscription,\n\ttype TransferOrdTokensConfig,\n\ttype TransferOrdTokensResult,\n\ttype SendOrdinalsConfig,\n\ttype TokenUtxo,\n} from \"./types\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { sendOrdinals } from \"./sendOrdinals\";\n\n/**\n * Transfer tokens to a destination\n * @param {TransferOrdTokensConfig} config - Configuration object for transferring tokens\n * @param {TokenType} config.protocol - Token protocol. Must be TokenType.BSV20 or TokenType.BSV21\n * @param {string} config.tokenID - Token ID. Either the tick or id value depending on the protocol\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {TokenUtxo[]} config.inputTokens - Token utxos to spend\n * @param {Distribution[]} config.distributions - Array of destinations with addresses and amounts\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {string} config.changeAddress - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {string} config.tokenChangeAddress - Optional. Address to send token change to, if any. If not provided, defaults to ordPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {MAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<TransferOrdTokensResult>} Transaction with token transfer outputs\n */\nexport const transferOrdTokens = async (config: TransferOrdTokensConfig): Promise<TransferOrdTokensResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tinputTokens,\n\t\tdistributions,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tchangeAddress,\n\t\ttokenChangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\t// calculate change amount\n\tlet changeAmt = 0n;\n\tlet totalAmtIn = 0n;\n\tlet totalAmtOut = 0n;\n\n  // Ensure these inputs are for the expected token\n\tif(!inputTokens.every(\n\t\t(token) => token.id === tokenID,\n\t)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n\tfor (const token of inputTokens) {\n\t\ttotalAmtIn += BigInt(token.amt);\n\t}\n\n\tfor (const dest of distributions) {\n\t\ttotalAmtOut += BigInt(dest.amt);\n\t}\n\n\t// check that you have enough tokens to send\n\tif (totalAmtIn < totalAmtOut) {\n\t\tthrow new Error(\"Not enough tokens to send\");\n\t}\n\n\tchangeAmt = totalAmtIn - totalAmtOut;\n\n\t// add change to distributions\n\tif (changeAmt > 0n) {\n\t\tconst changeDistribution = {\n\t\t\taddress: tokenChangeAddress || ordPk.toAddress().toString(),\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t\tdistributions.push(changeDistribution);\n\t}\n\n\t// build destination inscriptions\n\tconst destinations: Destination[] = distributions.map((dest) => {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: \"transfer\",\n\t\t\tamt: dest.amt,\n\t\t}\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n\t\treturn {\n\t\t\taddress: dest.address,\n\t\t\tinscription: {\n\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\t\tcontentType: \"application/bsv-20\",\n\t\t\t},\n\t\t};\n\t});\n\n\tconst sendOrdinalsConfig: SendOrdinalsConfig = {\n\t\tpaymentUtxos: utxos,\n\t\tordinals: inputTokens,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tdestinations,\n\t\tchangeAddress: changeAddress || paymentPk.toAddress().toString(),\n\t\tsatsPerKb,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments,\n\t\tenforceUniformSend: false\n\t};\n\n\tconst { tx, spentOutpoints, payChange } = await sendOrdinals(sendOrdinalsConfig);\n\t\n\t// find the tokenChangeVout by looking for the destination with the tokenChangeAddress\n\tconst tokenChangeVout = destinations.findIndex(\n\t\t(d) => d.address === (tokenChangeAddress || ordPk.toAddress().toString())\n\t);\n\t\n\tlet tokenChange: TokenUtxo | undefined;\n\tif (tokenChangeVout !== -1) {\n\t\ttokenChange = {\n\t\t\tid: tokenID,\n\t\t\tamt: changeAmt.toString(),\n\t\t\tsatoshis: 1,\n\t\t\ttxid: tx.id(\"hex\"),\n\t\t\tvout: tokenChangeVout,\n\t\t\tscript: Buffer.from(tx.outputs[tokenChangeVout].lockingScript.toHex(), \"hex\").toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChange,\n\t\ttokenChange,\n\t}\n};"],"names":["TokenType","toHex","utf8Str","Buffer","from","toString","API_HOST","OrdP2PKH","_P2PKH","apply","this","arguments","prototype","lock","address","b64File","mediaType","metaData","ordAsm","undefined","ordHex","fileHex","trim","Error","fileMediaType","inscriptionAsm","P2PKH","toASM","app","type","mapCmdValue","_i","_Object$entries","Object","entries","length","_Object$entries$_i","key","value","LockingScript","fromASM","exports","fromBase58Check","Utils","inputFromB64Utxo","utxo","unlockScriptTemplate","input","fromUtxo","_extends","script","sourceTXID","txid","signData","tx","signer","_exit","_temp2","_result","idKey","keyHost","_sigma$sign","Sigma","sign","Promise","resolve","signedTx","_temp","authToken","sigma","remoteSign","then","_ref","_catch","e","console","log","reject","pact","state","s","_Pact","o","_settle","bind","v","onFulfilled","result","_this","onRejected","_isSettledPact","thenable","sendOrdinals","config","_interrupt","_temp4","fee","modelOrFee","payChange","satoshis","outputs","id","spentOutpoints","totalSatsIn","totalSatsOut","BigInt","changeScript","changeAddress","paymentPk","toAddress","changeOut","lockingScript","change","vout","addOutput","_signData","satsPerKb","additionalPayments","enforceUniformSend","_step","SatoshisPerKilobyte","Transaction","_iterator","_createForOfIteratorHelperLoose","ordinals","done","ordUtxo","unlock","ordPk","push","addInput","destinations","_step2","_iterator2","_destination$inscript","_destination$inscript2","destination","inscription","dataB64","contentType","_step3","_iterator3","p","amount","to","reduce","total","out","_temp3","array","body","check","_cycle","i","_forOf","paymentUtxos","computeFee","_modelOrFee$computeFe","observer","utxos","_config$satsPerKb","_config$additionalPay","warn","totalInput","sum","totalOutput","output","estimatedFee","map","changeOutput","tokenId","collectionId","limit","offset","url","JSON","stringify","subTypeData","fetch","res","ok","json","nftUtxos","outpoints","filter","u","data","list","method","headers","nftRes","nfts","origin","outpoint","payUrl","payRes","payUtxos","pubKeyHash","p2pkhScript","toBinary","protocol","BSV20","tokenUtxos","amt","payments","DEFAULT_SAT_PER_KB","_config$changeAddress","payment","sendTxOut","tokenID","inputTokens","distributions","tokenChangeAddress","changeAmt","totalAmtIn","totalAmtOut","every","token","changeDistribution","dest","transferInscription","op","tick","BSV21","sendOrdinalsConfig","tokenChange","tokenChangeVout","findIndex","d"],"mappings":"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"}