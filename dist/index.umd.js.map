{"version":3,"file":"index.umd.js","sources":["../src/utils/strings.ts","../src/types.ts","../src/constants.ts","../src/templates/ordP2pkh.ts","../src/utils/utxo.ts","../src/signData.ts","../src/utils/subtypeData.ts","../src/createOrdinals.ts","../src/sendOrdinals.ts","../src/sendUtxos.ts","../src/transferOrdinals.ts","../src/templates/ordLock.ts","../src/createListings.ts","../src/cancelListings.ts","../src/purchaseOrdListing.ts","../src/validate.ts"],"sourcesContent":["/**\n * Converts a string to its hexadecimal representation\n *\n * @param {string} utf8Str - The string to convert\n * @returns {string} The hexadecimal representation of the input string\n */\nconst toHex = (utf8Str: string): string => {\n  return Buffer.from(utf8Str).toString(\"hex\");\n};\n\nexport { toHex };\n","import type { PrivateKey, Script, Transaction } from \"@bsv/sdk\";\nimport type { AuthToken } from \"sigma-protocol\";\n\n// biome-ignore lint/complexity/noBannedTypes: Reserved for future use\ntype Signer = {};\n\nexport interface LocalSigner extends Signer {\n\tidKey: PrivateKey;\n}\n\nexport interface RemoteSigner extends Signer {\n\tkeyHost: string;\n\tauthToken?: AuthToken;\n}\n\nexport type Destination = {\n\taddress: string;\n\tinscription?: Inscription;\n};\n\n/**\n * @typedef {Object} Listing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n * @property {Utxo} listingUtxo - Utxo of the listing\n */\nexport type Listing = {\n\tpayAddress: string;\n\tprice: number;\n\tordAddress: string;\n\tlistingUtxo: Utxo;\n}\n\n/**\n * @typedef {Object} TokenListing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n * @property {TokenUtxo} listingUtxo - Utxo of the listing\n */\nexport type TokenListing = {\n\tpayAddress: string;\n\tprice: number;\n\tamt: bigint;\n\tordAddress: string;\n\tlistingUtxo: TokenUtxo;\n}\n\n/**\n * @typedef {Object} Distribution\n * @property {string} address - Destination address. Must be a Ordinals address (BSV address for recieving 1Sat ordinals tokens).\n * @property {string} amt - Number of tokens as a string, considering decimals. Not display format. Ex. 100000000 for 1 token with 8 decimal places.\n */\nexport type Distribution = {\n\taddress: string;\n\tamt: string;\n};\n\n/**\n * @typedef {Object} Utxo\n * @property {number} satoshis - Amount in satoshis\n * @property {string} txid - Transaction id\n * @property {number} vout - Output index\n * @property {string} script - Base64 encoded locking script\n */\nexport type Utxo = {\n\tsatoshis: number;\n\ttxid: string;\n\tvout: number;\n\tscript: string;\n};\n\n/**\n * @typedef {Object} NftUtxo\n * @property {string} collectionId - Optional. Collection id of the NFT\n * @property {string} contentType - Media type of the NFT\n * @property {string} creatorBapId - Optional. Creator BAP id of the NFT\n * @property {string} origin - Origin address of the NFT\n * @property {number} satoshis - Always 1\n */\nexport interface NftUtxo extends Utxo {\n\tcollectionId?: string;\n\tcontentType: string;\n\tcreatorBapId?: string;\n\torigin: string;\n\tsatoshis: 1;\n}\n\n/**\n * @typedef {Object} TokenUtxo\n * @property {string} amt - Number of tokens as a string\n * @property {string} id - Token id -  either tick or id depending on protocol\n * @property {string} satoshis - Always 1\n */\nexport interface TokenUtxo extends Utxo {\n\tamt: string;\n\tid: string;\n\tsatoshis: 1;\n}\n\nexport type Inscription = {\n\tdataB64: string;\n\tcontentType: string;\n};\n\nexport type ImageContentType =\n\t| \"image/png\"\n\t| \"image/jpeg\"\n\t| \"image/gif\"\n\t| \"image/svg+xml\"\n\t| \"image/webp\";\n\n/**\n * @typedef {Object} IconInscription\n * @property {string} dataB64 - Base64 encoded image data. Must be a square image.\n * @property {ImageContentType} contentType - Media type of the image\n */\nexport type IconInscription = {\n\tdataB64: string;\n\tcontentType: ImageContentType;\n};\n\nexport type Payment = {\n\tto: string;\n\tamount: number;\n};\n\nexport type TokenInscription = {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\" | \"mint\" | \"deploy+mint\" | \"burn\";\n};\n\nexport interface MintTokenInscription extends TokenInscription {\n\top: \"mint\";\n}\n\nexport interface DeployMintTokenInscription extends TokenInscription {\n\top: \"deploy+mint\";\n\tsym: string;\n\ticon: string;\n}\n\nexport interface TransferTokenInscription extends TokenInscription {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\" | \"burn\";\n}\n\nexport interface TransferBSV20Inscription extends TransferTokenInscription {\n\ttick: string;\n}\n\nexport interface TransferBSV21Inscription extends TransferTokenInscription {\n\tid: string;\n}\n\nexport enum TokenType {\n\tBSV20 = \"bsv20\",\n\tBSV21 = \"bsv21\",\n}\n\nexport type CreateOrdinalsResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\n/**\n * MAP (Magic Attribute Protocol) metadata object with stringified values for writing to the blockchain\n * @typedef {Object} MAP\n * @property {string} app - Application identifier\n * @property {string} type - Metadata type\n * @property {string} [prop] - Optional. Additional metadata properties\n */\nexport type MAP = {\n\tapp: string;\n\ttype: string;\n\t[prop: string]: string;\n};\n\nexport type PreMAP = {\n\tapp: string;\n\ttype: string;\n\t[prop: string]: unknown;\n\troyalties?: Royalty[];\n\tsubTypeData?: CollectionSubTypeData | CollectionItemSubTypeData;\n};\n\nexport type CreateOrdinalsConfig = {\n\tutxos: Utxo[];\n\tdestinations: Destination[];\n\tpaymentPk: PrivateKey;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: PreMAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n};\n\nexport enum RoytaltyType {\n\tPaymail = \"paymail\",\n\tAddress = \"address\",\n\tScript = \"script\",\n}\n\n/**\n * Royalty object\n * @typedef {Object} Royalty\n * @property {RoytaltyType} type - Royalty type, string, one of \"paymail\", \"address\", \"script\"\n * @property {string} destination - Royalty destination\n * @property {string} percentage - Royalty percentage as a string float 0-1\n */\nexport type Royalty = {\n\ttype: RoytaltyType;\n\tdestination: string;\n\tpercentage: string; // string float 0-1\n};\n\nexport interface CreateOrdinalsMetadata extends PreMAP {\n\ttype: \"ord\",\n\tname: string,\n\tpreviewUrl?: string,\n}\n\nexport interface CreateOrdinalsCollectionMetadata extends CreateOrdinalsMetadata {\n\tsubType: \"collection\",\n\tsubTypeData: CollectionSubTypeData, // JSON stringified CollectionSubTypeData\n\troyalties?: Royalty[],\n};\n\nexport interface CreateOrdinalsCollectionItemMetadata extends CreateOrdinalsMetadata {\n\tsubType: \"collectionItem\",\n\tsubTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n};\n\n/**\n * Configuration object for creating an ordinals collection\n * @typedef {Object} CreateOrdinalsCollectionConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collection\"\n * @property metaData.name - Collection name\n * @property metaData.subTypeData - JSON stringified CollectionSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionConfig extends CreateOrdinalsConfig {\n\tmetaData: CreateOrdinalsCollectionMetadata\n}\n\nexport type CollectionTraits = {\n\t[trait: string]: CollectionTrait;\n};\n\nexport type CollectionTrait = {\n\tvalues: string[];\n\toccurancePercentages: string[];\n};\n\nexport type Rarity = {\n\t[key: string]: string;\n}\n\nexport type RarityLabels = Rarity[]\nexport interface CollectionSubTypeData {\n\tdescription: string;\n\tquantity: number;\n\trarityLabels: RarityLabels;\n\ttraits: CollectionTraits;\n}\n\nexport interface CreateOrdinalsCollectionItemMetadata extends PreMAP {\n\ttype: \"ord\",\n\tname: string,\n\tsubType: \"collectionItem\",\n\tsubTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n\troyalties?: Royalty[],\n\tpreviewUrl?: string,\n}\n\n/**\n * Configuration object for creating an ordinals collection item\n * @typedef {Object} CreateOrdinalsCollectionItemConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection item\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collectionItem\"\n * @property metaData.name - Collection item name\n * @property metaData.subTypeData - JSON stringified CollectionItemSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionItemConfig extends CreateOrdinalsConfig {\n\tmetaData: CreateOrdinalsCollectionItemMetadata\n}\n\n/**\n * Subtype data for an ordinals collection item\n * @typedef {Object} CollectionItemSubTypeData\n * @property {string} collectionId - Collection id\n * @property {number} mintNumner - Mint number\n * @property {number} rank - Rank\n * @property {string} rarityLabel - Rarity label\n * @property {string} traits - traits object\n * @property {string} attachments - array of attachment objects\n */\nexport interface CollectionItemSubTypeData {\n\tcollectionId: string;\n\tmintNumber?: number;\n\trank?: number;\n\trarityLabel?: RarityLabels;\n\ttraits?: CollectionItemTraits;\n\tattachments?: CollectionItemAttachment[];\n}\n\nexport type CollectionItemTraits = {\n\tname: string;\n\tvalue: string;\n\trarityLabel?: string;\n\toccurancePercentrage?: string;\n};\n\nexport type CollectionItemAttachment = {\n\tname: string;\n\tdescription?: string;\n\t\"content-type\": string;\n\turl: string;\n}\n\nexport type SendOrdinalsResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type SendOrdinalsConfig = {\n\tpaymentUtxos: Utxo[];\n\tordinals: Utxo[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tdestinations: Destination[];\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: PreMAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n\tenforceUniformSend?: boolean;\n}\n\nexport type DeployBsv21TokenResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type DeployBsv21TokenConfig = {\n\tsymbol: string;\n\ticon: string | IconInscription;\n\tutxos: Utxo[];\n\tinitialDistribution: Distribution;\n\tpaymentPk: PrivateKey;\n\tdestinationAddress: string;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[];\n};\n\nexport type SendUtxosResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type SendUtxosConfig = {\n\tutxos: Utxo[];\n\tpaymentPk: PrivateKey;\n\tpayments: Payment[];\n\tsatsPerKb?: number;\n\tchangeAddress?: string;\n};\n\nexport interface TransferOrdTokensResult extends SendOrdinalsResult {\n\ttokenChange?: TokenUtxo;\n}\n\nexport type TransferOrdTokensConfig = {\n\tprotocol: TokenType;\n\ttokenID: string;\n\tutxos: Utxo[];\n\tinputTokens: TokenUtxo[];\n\tdistributions: Distribution[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tchangeAddress?: string;\n\ttokenChangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: PreMAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n\tburn?: boolean;\n}\n\nexport type CreateOrdListingsConfig = {\n\tutxos: Utxo[];\n\tlistings: Listing[];\n\troyalty: number;\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey,\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[];\n}\n\nexport type PurchaseOrdListingConfig = {\n\tprotocol: TokenType;\n\ttokenID: string;\n\tutxos: Utxo[];\n\tpaymentPk: PrivateKey;\n\tlisting: TokenListing;\n\tordAddress: string;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[],\n}\n\nexport type PurchaseOrdTokenListingConfig = {\n\tprotocol: TokenType;\n\ttokenID: string;\n\tutxos: Utxo[];\n\tpaymentPk: PrivateKey;\n\tlistingUtxo: TokenUtxo;\n\tordAddress: string;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[],\n}\n\nexport type CancelOrdListingsConfig = {\n\tutxos: Utxo[],\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tlistingUtxos: Utxo[];\n\tadditionalPayments: Payment[];\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n}\n\nexport interface CancelOrdTokenListingsConfig extends CancelOrdListingsConfig {\n\tutxos: Utxo[],\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tlistingUtxos: TokenUtxo[];\n\tadditionalPayments: Payment[];\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tprotocol: TokenType,\n\ttokenID: string;\n\tordAddress?: string;\n}\n\nexport interface CreateOrdTokenListingsConfig {\n\tutxos: Utxo[];\n\tlistings: TokenListing[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey,\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[];\n\tprotocol: TokenType;\n\ttokenID: string;\n\tinputTokens: TokenUtxo[];\n\ttokenChangeAddress: string;\n}\n\n","export const MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\nexport const DEFAULT_SAT_PER_KB = 10;\nexport const API_HOST = \"https://ordinals.gorillapool.io/api\";","import {\n\tLockingScript,\n\tP2PKH,\n\ttype Script,\n} from \"@bsv/sdk\";\nimport type { Inscription, MAP } from \"../types\";\nimport { toHex } from \"../utils/strings\";\nimport { MAP_PREFIX } from \"../constants\";\n\n/**\n * OrdP2PKH (1Sat Ordinal + Pay To Public Key Hash) class implementing ScriptTemplate.\n *\n * This class provides methods to create an Ordinal with Pay To Public Key Hash locking and unlocking scripts. \n * It extends the standard P2PKH script template and provides a custom lock method.\n */\nexport default class OrdP2PKH extends P2PKH {\n\t/**\n\t * Creates a 1Sat Ordinal + P2PKH locking script for a given address string\n\t *\n\t * @param {string} address - An destination address for the Ordinal.\n\t * @param {Object} [inscription] - Base64 encoded file data and Content type of the file.\n\t * @param {MAP} [metaData] - (optional) MAP Metadata to be included in OP_RETURN.\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\t// unlock method inherits from p2pkh\n\tlock(\n\t\taddress: string,\n    inscription?: Inscription,\n\t\tmetaData?: MAP | undefined,\n\t): Script {\n\t\tlet ordAsm = \"\";\n\t\t// This can be omitted for reinscriptions that just update metadata\n\t\tif (inscription?.dataB64 !== undefined && inscription?.contentType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(inscription.dataB64, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(inscription.contentType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`;\n\t\t}\n\n\t\t// Create ordinal output and inscription in a single output\n\t\tconst lockingScript = new P2PKH().lock(address);\n\t\tlet inscriptionAsm = `${ordAsm ? `${ordAsm} ` : \"\"}${lockingScript.toASM()}`;\n\n\t\t// MAP.app and MAP.type keys are required\n\t\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t\t}\n\n\t\tif (metaData?.app && metaData?.type) {\n\t\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\t\tconst mapCmdValue = toHex(\"SET\");\n\t\t\tinscriptionAsm = `${inscriptionAsm} OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\t\tif (key !== \"cmd\") {\n\t\t\t\t\tinscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\n\t\t\t\t\t\tvalue as string,\n\t\t\t\t\t)}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn LockingScript.fromASM(inscriptionAsm);\n\t}\n}\n","import {\n\ttype Transaction,\n\ttype UnlockingScript,\n\tfromUtxo,\n\ttype TransactionInput,\n\tUtils,\n\tP2PKH,\n  Script,\n} from \"@bsv/sdk\";\nimport { type NftUtxo, TokenType, type TokenUtxo, type Utxo } from \"../types\";\nimport { API_HOST } from \"../constants\";\n\nconst { fromBase58Check } = Utils;\n\n/**\n * Converts a Utxo object with a base64 encoded script to a Utxo object with a hex encoded script\n * @param {Utxo} utxo - Utxo object with base64 encoded script\n * @param {Object} unlockScriptTemplate - Object with sign and estimateLength functions\n * @returns {TransactionInput} Utxo object with hex encoded script\n */\nexport const inputFromB64Utxo = (\n\tutxo: Utxo,\n\tunlockScriptTemplate: {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>;\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>;\n\t},\n): TransactionInput => {\n\tconst input = fromUtxo(\n\t\t{\n\t\t\t...utxo,\n\t\t\tscript: Buffer.from(utxo.script, \"base64\").toString(\"hex\"),\n\t\t},\n\t\tunlockScriptTemplate,\n\t);\n\treturn input;\n};\n\n/**\n * Fetches pay utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<Utxo[]>} Array of pay utxos\n */\nexport const fetchPayUtxos = async (address: string, scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\"): Promise<Utxo[]> => {\n\tconst payUrl = `${API_HOST}/txos/address/${address}/unspent?bsv20=false`;\n\tconsole.log({ payUrl });\n\tconst payRes = await fetch(payUrl);\n\tif (!payRes.ok) {\n\t\tthrow new Error(\"Error fetching pay utxos\");\n\t}\n\tlet payUtxos = await payRes.json();\n\t// exclude all 1 satoshi utxos\n\tpayUtxos = payUtxos.filter((u: { satoshis: number }) => u.satoshis !== 1);\n\n\t// Get pubkey hash from address\n\tconst pubKeyHash = fromBase58Check(address);\n\tconst p2pkhScript = new P2PKH().lock(pubKeyHash.data);\n\tpayUtxos = payUtxos.map((utxo: Partial<Utxo>) => ({\n\t\ttxid: utxo.txid,\n\t\tvout: utxo.vout,\n\t\tsatoshis: utxo.satoshis,\n\t\tscript: scriptEncoding === \"hex\" || scriptEncoding === \"base64\" ? Buffer.from(p2pkhScript.toBinary()).toString(scriptEncoding) : p2pkhScript.toASM(),\n\t}));\n\treturn payUtxos as Utxo[];\n};\n\n/**\n * Fetches NFT utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @param {string} [collectionId] - Optional. Collection id (collection insciprtion origin)\n * @param {number} [limit=10] - Optional. Number of utxos to fetch. Default is 10\n * @param {number} [offset=0] - Optional. Offset for fetching utxos. Default is 0\n * @param {string} [scriptEncoding=\"base64\"] - Optional. Encoding for the script. Default is base64. Options are hex, base64, or asm.\n * @returns {Promise<Utxo[]>} Array of NFT utxos\n */\nexport const fetchNftUtxos = async (\n\taddress: string,\n\tcollectionId?: string,\n\tlimit = 10,\n\toffset = 0,\n  scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\",\n): Promise<NftUtxo[]> => {\n\tlet url = `${API_HOST}/txos/address/${address}/unspent?limit=${limit}&offset=${offset}&`;\n\n\tif (collectionId) {\n\t\tconst query = {\n\t\t\tmap: {\n\t\t\t\tsubTypeData: { collectionId },\n\t\t\t},\n\t\t};\n\t\tconst b64Query = Buffer.from(JSON.stringify(query)).toString(\"base64\");\n\t\turl += `q=${b64Query}`;\n\t}\n\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching NFT utxos for ${address}`);\n\t}\n\n\t// Returns a BSV20Txo but we only need a few fields\n\tlet nftUtxos = await res.json();\n\n\t// Only include 1 satoshi outputs, non listings\n\tnftUtxos = nftUtxos.filter(\n\t\t(u: {\n\t\t\tsatoshis: number;\n\t\t\tdata: { list: { price: number; payout: string } | undefined } | null;\n\t\t}) => u.satoshis === 1 && !u.data?.list,\n\t);\n\n\tconst outpoints = nftUtxos.map(\n\t\t(utxo: { txid: string; vout: number }) => `${utxo.txid}_${utxo.vout}`,\n\t);\n\t// Fetch the scripts up to the limit\n\tconst nftRes = await fetch(`${API_HOST}/txos/outpoints?script=true`, {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t\tbody: JSON.stringify([...outpoints]),\n\t});\n\n\tif (!nftRes.ok) {\n\t\tthrow new Error(`Error fetching NFT scripts for ${address}`);\n\t}\n\n\tconst nfts = (await nftRes.json() || [])\n\n\tnftUtxos = nfts.map(\n\t\t(utxo: {\n\t\t\torigin: { outpoint: string };\n\t\t\tscript: string;\n\t\t\tvout: number;\n\t\t\ttxid: string;\n\t\t}) => {\n      let script = utxo.script;\n      if (scriptEncoding === \"hex\") {\n        script = Buffer.from(script, \"base64\").toString(\"hex\");\n      } else if (scriptEncoding === \"asm\") {\n        script = Script.fromHex(Buffer.from(script, \"base64\").toString(\"hex\")).toASM();\n      }\n\t\t\tconst nftUtxo = {\n\t\t\t\torigin: utxo.origin.outpoint,\n\t\t\t\tscript,\n\t\t\t\tvout: utxo.vout,\n\t\t\t\ttxid: utxo.txid,\n\t\t\t\tsatoshis: 1,\n\t\t\t} as NftUtxo;\n\t\t\tif (collectionId) {\n\t\t\t\tnftUtxo.collectionId = collectionId;\n\t\t\t}\n\t\t\treturn nftUtxo;\n\t\t},\n\t);\n\n\treturn nftUtxos as NftUtxo[];\n};\n\n/**\n * Fetches token utxos from the API\n * @param {TokenType} protocol - Token protocol. Either BSV20 or BSV21\n * @param {string} tokenId - Token id. Ticker for BSV20 and id (mint+deploy inscription origin) for BSV21\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<TokenUtxo[]>} Array of token utxos\n */\nexport const fetchTokenUtxos = async (\n\tprotocol: TokenType,\n\ttokenId: string,\n\taddress: string,\n): Promise<TokenUtxo[]> => {\n\tconst url = `${API_HOST}/bsv20/${address}/${protocol === TokenType.BSV20 ? \"tick\" : \"id\"}/${tokenId}?bsv20=true&listing=false`;\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching ${protocol} utxos`);\n\t}\n\n\t// returns a BSV20Txo but we only need a few fields\n\tlet tokenUtxos = await res.json();\n\n\ttokenUtxos = tokenUtxos.map((utxo: Partial<TokenUtxo>) => ({\n\t\tamt: utxo.amt,\n\t\tscript: utxo.script,\n\t\tvout: utxo.vout,\n\t\ttxid: utxo.txid,\n\t\tid: tokenId,\n\t\tsatoshis: 1,\n\t}));\n\n\treturn tokenUtxos as TokenUtxo[];\n};\n","import type { Transaction } from \"@bsv/sdk\";\nimport { Sigma } from \"sigma-protocol\";\nimport type { LocalSigner, RemoteSigner } from \"./types\";\n\n/**\n * Signs data in the transaction with Sigma protocol\n * @param {Transaction} tx - Transaction to sign\n * @param {LocalSigner | RemoteSigner} signer - Local or remote signer (used for data signature)\n * @returns {Transaction} Transaction with signed data\n */\nexport const signData = async (\n\ttx: Transaction,\n\tsigner: LocalSigner | RemoteSigner,\n): Promise<Transaction> => {\n\t// Sign tx if idKey or remote signer like starfish/tokenpass\n\tconst idKey = (signer as LocalSigner)?.idKey;\n\tconst keyHost = (signer as RemoteSigner)?.keyHost;\n\n\tif (idKey) {\n\t\tconst sigma = new Sigma(tx);\n\t\tconst { signedTx } = sigma.sign(idKey);\n\t\treturn signedTx;\n\t}\n\tif (keyHost) {\n\t\tconst authToken = (signer as RemoteSigner)?.authToken;\n\t\tconst sigma = new Sigma(tx);\n\t\ttry {\n\t\t\tconst { signedTx } = await sigma.remoteSign(keyHost, authToken);\n\t\t\treturn signedTx;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthrow new Error(`Remote signing to ${keyHost} failed`);\n\t\t}\n\t}\n\tthrow new Error(\"Signer must be a LocalSigner or RemoteSigner\");\n};\n","import type { MAP, PreMAP } from \"../types\";\n\nconst stringifyMetaData = (metaData?: PreMAP): MAP | undefined => {\n  if (!metaData) return undefined;\n\tconst result: MAP = {\n\t\tapp: metaData.app,\n\t\ttype: metaData.type,\n\t};\n\n\tfor (const [key, value] of Object.entries(metaData)) {\n\t\tif (value !== undefined) {\n\t\t\tif (typeof value === \"string\") {\n\t\t\t\tresult[key] = value;\n\t\t\t} else if (Array.isArray(value) || typeof value === \"object\") {\n\t\t\t\tresult[key] = JSON.stringify(value);\n\t\t\t} else {\n\t\t\t\tresult[key] = String(value);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\nexport default stringifyMetaData;\n","import { Transaction, SatoshisPerKilobyte, P2PKH, Script, Utils } from \"@bsv/sdk\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n\tUtxo,\n\tCreateOrdinalsConfig,\n\tCreateOrdinalsResult,\n\tCreateOrdinalsCollectionConfig,\n\tCreateOrdinalsCollectionItemConfig,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Creates a transaction with inscription outputs\n * @param {CreateOrdinalsConfig | CreateOrdinalsCollectionConfig | CreateOrdinalsCollectionItemConfig} config - Configuration object for creating ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {string} config.changeAddress - Optional. Address to send change to. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Local or remote signer (used for data signature)\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<CreateOrdinalsResult>} Transaction with inscription outputs\n */\nexport const createOrdinals = async (\n\tconfig:\n\t\t| CreateOrdinalsConfig\n\t\t| CreateOrdinalsCollectionConfig\n\t\t| CreateOrdinalsCollectionItemConfig,\n): Promise<CreateOrdinalsResult> => {\n\tconst {\n\t\tutxos,\n\t\tdestinations,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t} = config;\n\t\n\t// Warn if creating many inscriptions at once\n\tif (destinations.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Outputs\n\t// Add inscription outputs\n\tfor (const destination of destinations) {\n\t\tif (!destination.inscription) {\n\t\t\tthrow new Error(\"Inscription is required for all destinations\");\n\t\t}\n\n\t\t// remove any undefined fields from metadata\n\t\tif (metaData) {\n\t\t\tfor(const key of Object.keys(metaData)) {\n\t\t\t\tif (metaData[key] === undefined) {\n\t\t\t\t\tdelete metaData[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription,\n\t\t\t\tstringifyMetaData(metaData),\n\t\t\t),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\tlet payChange: Utxo | undefined;\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\n\tif(signer) {\n\t\tconst utxo = utxos.pop() as Utxo\n\t\ttx.addInput(inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t)));\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\ttx = await signData(tx, signer);\n\t}\n\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\tScript,\n\ttype TransactionOutput,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type { SendOrdinalsResult, SendOrdinalsConfig, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Sends ordinals to the given destinations\n * @param {SendOrdinalsConfig} config - Configuration object for sending ordinals\n * @param {Utxo[]} config.paymentUtxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.ordinals - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {string} config.changeAddress - Optional. Address to send change to, if any. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @param {boolean} config.enforceUniformSend - Optional. Default: true. Enforce that the number of destinations matches the number of ordinals being sent. Sending ordinals requires a 1:1 mapping of destinations to ordinals. This is only used for sub-protocols like BSV21 that manage tokens without sending the inscriptions directly.\n * @returns {Promise<SendOrdinalsResult>} Transaction, spent outpoints, and change vout\n */\nexport const sendOrdinals = async (\n\tconfig: SendOrdinalsConfig,\n): Promise<SendOrdinalsResult> => {\n\tif (!config.satsPerKb) {\n\t\tconfig.satsPerKb = DEFAULT_SAT_PER_KB;\n\t}\n\tif (!config.additionalPayments) {\n\t\tconfig.additionalPayments = [];\n\t}\n\tif (config.enforceUniformSend === undefined) {\n\t\tconfig.enforceUniformSend = true;\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(config.satsPerKb);\n\tlet tx = new Transaction();\n\tconst spentOutpoints: string[] = [];\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of config.ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(\n\t\t\tordUtxo,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tconfig.ordPk, \n\t\t\t\t\"all\",\n\t\t\t\ttrue, \n\t\t\t\tordUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(ordUtxo.script, 'base64'))\n\t\t\t),\n\t\t);\n\t\tspentOutpoints.push(`${ordUtxo.txid}_${ordUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// check that ordinals coming in matches ordinals going out if supplied\n\tif (\n\t\tconfig.enforceUniformSend &&\n\t\tconfig.destinations.length !== config.ordinals.length\n\t) {\n\t\tthrow new Error(\n\t\t\t\"Number of destinations must match number of ordinals being sent\",\n\t\t);\n\t}\n\n\t// Add ordinal outputs\n\tfor (const destination of config.destinations) {\n\t\tlet s: Script;\n\t\tif (\n\t\t\tdestination.inscription?.dataB64 &&\n\t\t\tdestination.inscription?.contentType\n\t\t) {\n\t\t\ts = new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription,\n\t\t\t\tstringifyMetaData(config.metaData),\n\t\t\t);\n\t\t} else {\n\t\t\ts = new P2PKH().lock(destination.address);\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: s,\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of config.additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of config.paymentUtxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tconfig.paymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\tspentOutpoints.push(`${utxo.txid}_${utxo.vout}`);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (totalSatsIn < totalSatsOut) {\n\t\tthrow new Error(\"Not enough ordinals to send\");\n\t}\n\n\tlet payChange: Utxo | undefined;\n\tif (totalSatsIn > totalSatsOut + BigInt(fee)) {\n\t\tconst changeScript = new P2PKH().lock(\n\t\t\tconfig.changeAddress || config.paymentPk.toAddress().toString(),\n\t\t);\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not available until the transaction is signed\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t}\n\n\tif (config.signer) {\n\t\ttx = await signData(tx, config.signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChange,\n\t};\n};\n","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype TransactionOutput,\n\tUtils,\n\tScript,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type { SendUtxosConfig, SendUtxosResult, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Sends utxos to the given destination\n * @param {SendUtxosConfig} config - Configuration object for sending utxos\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {Payment[]} config.payments - Array of payments with addresses and amounts\n * @param {number} [config.satsPerKb] - Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {string} [config.changeAddress] - Address to send change to. If not provided, defaults to paymentPk address\n * @returns {Promise<SendUtxosResult>} Transaction with utxo outputs\n */\nexport const sendUtxos = async (\n\tconfig: SendUtxosConfig,\n): Promise<SendUtxosResult> => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tpayments,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tchangeAddress = paymentPk.toAddress().toString(),\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\t// Outputs\n\tfor (const payment of payments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new P2PKH().lock(payment.to),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + (out.satoshis || 0),\n\t\t0,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\ttx.addInput(input);\n\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + fee) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + fee) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to send. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChange: Utxo | undefined;\n\tif (totalSatsIn > totalSatsOut + fee) {\n\t\t// Change\n\t\tconst changeScript = new P2PKH().lock(changeAddress);\n\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t} else if (totalSatsIn < totalSatsOut + fee) {\n\t\tconsole.log(\"No change needed\");\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\t\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTokenType,\n\ttype TransferBSV20Inscription,\n\ttype TransferTokenInscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferOrdTokensConfig,\n\ttype TransferOrdTokensResult,\n\ttype TokenUtxo,\n\ttype Utxo,\n} from \"./types\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { P2PKH, SatoshisPerKilobyte, Script, Transaction, Utils } from \"@bsv/sdk\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Transfer tokens to a destination\n * @param {TransferOrdTokensConfig} config - Configuration object for transferring tokens\n * @param {TokenType} config.protocol - Token protocol. Must be TokenType.BSV20 or TokenType.BSV21\n * @param {string} config.tokenID - Token ID. Either the tick or id value depending on the protocol\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {TokenUtxo[]} config.inputTokens - Token utxos to spend\n * @param {Distribution[]} config.distributions - Array of destinations with addresses and amounts\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {string} config.changeAddress - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {string} config.tokenChangeAddress - Optional. Address to send token change to, if any. If not provided, defaults to ordPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @param {burn} config.burn - Optional. Set to true to burn the tokens.\n * @returns {Promise<TransferOrdTokensResult>} Transaction with token transfer outputs\n */\nexport const transferOrdTokens = async (config: TransferOrdTokensConfig): Promise<TransferOrdTokensResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tinputTokens,\n\t\tdistributions,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tchangeAddress,\n\t\ttokenChangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t\tburn = false\n\t} = config;\n\n\t// calculate change amount\n\tlet changeAmt = 0n;\n\tlet totalAmtIn = 0n;\n\tlet totalAmtOut = 0n;\n\n\t// Ensure these inputs are for the expected token\n\tif (!inputTokens.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\tfor (const token of inputTokens) {\n\t\tconst inputScriptBinary = Utils.toArray(token.script, \"base64\");\n\t\tconst inputScript = Script.fromBinary(inputScriptBinary);\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\ttoken,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\ttoken.satoshis,\n\t\t\t\tinputScript,\n\t\t\t),\n\t\t));\n\t\n\t\ttotalAmtIn += BigInt(token.amt);\n\t}\n\n\t// build destination inscriptions\n\tfor (const dest of distributions) {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: burn ? \"burn\" : \"transfer\",\n\t\t\tamt: dest.amt,\n\t\t}\n\t\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\ttick: tokenID,\n\t\t\t} as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\tid: tokenID,\n\t\t\t} as TransferBSV21Inscription;\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid protocol\");\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdest.address,\n\t\t\t\t{\n\t\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\t\t\tcontentType: \"application/bsv20\",\n\t\t\t\t},\n\t\t\t),\n\t\t});\n\t\ttotalAmtOut += BigInt(dest.amt);\n\t};\n\tchangeAmt = totalAmtIn - totalAmtOut;\n\n\tlet tokenChange: TokenUtxo | undefined;\n\t// check that you have enough tokens to send and return change\n\tif (changeAmt < 0n) {\n\t\tthrow new Error(\"Not enough tokens to send\");\n\t}\n\tif (changeAmt > 0n) {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: \"transfer\",\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\ttick: tokenID,\n\t\t\t} as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\tid: tokenID,\n\t\t\t} as TransferBSV21Inscription;\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid protocol\");\n\t\t}\n\n\t\tconst lockingScript = new OrdP2PKH().lock(\n\t\t\ttokenChangeAddress || ordPk.toAddress().toString(), \n\t\t\t{\n\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString('base64'),\n\t\t\t\tcontentType: \"application/bsv-20\",\n\t\t\t}\n\t\t);\n\t\tconst vout = tx.outputs.length;\n\t\ttx.addOutput({ lockingScript, satoshis: 1 });\n\t\ttokenChange = {\n\t\t\tid: tokenID,\n\t\t\tsatoshis: 1,\n\t\t\tscript: Buffer.from(lockingScript.toBinary()).toString(\"base64\"),\n\t\t\ttxid: \"\",\n\t\t\tvout,\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst txid = tx.id(\"hex\") as string;\n\tif (tokenChange) {\n\t\ttokenChange.txid = txid;\n\t}\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t\ttokenChange,\n\t};\n};","import {\n\tBigNumber,\n\ttype LockingScript,\n\tOP,\n\tP2PKH,\n\ttype PrivateKey,\n\tScript,\n\ttype Transaction,\n\tTransactionSignature,\n\tUnlockingScript,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { toHex } from \"../utils/strings\";\nimport type { Inscription } from \"../types\";\n\nexport const oLockPrefix =\n\t\"2097dfd76851bf465e8f715593b217714858bbe9570ff3bd5e33840a34e20ff0262102ba79df5f8ae7604a9830f03c7933028186aede0675a16f025dc4f8be8eec0382201008ce7480da41702918d1ec8e6849ba32b4d65b1e40dc669c31a1e6306b266c0000\";\nexport const oLockSuffix =\n\t\"615179547a75537a537a537a0079537a75527a527a7575615579008763567901c161517957795779210ac407f0e4bd44bfc207355a778b046225a7068fc59ee7eda43ad905aadbffc800206c266b30e6a1319c66dc401e5bd6b432ba49688eecd118297041da8074ce081059795679615679aa0079610079517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01007e81517a75615779567956795679567961537956795479577995939521414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff00517951796151795179970079009f63007952799367007968517a75517a75517a7561527a75517a517951795296a0630079527994527a75517a6853798277527982775379012080517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01205279947f7754537993527993013051797e527e54797e58797e527e53797e52797e57797e0079517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a756100795779ac517a75517a75517a75517a75517a75517a75517a75517a75517a7561517a75517a756169587951797e58797eaa577961007982775179517958947f7551790128947f77517a75517a75618777777777777777777767557951876351795779a9876957795779ac777777777777777767006868\";\n\n/**\n * OrdLock class implementing ScriptTemplate.\n *\n * This class provides methods for interacting with OrdinalLock contract \n */\nexport default class OrdLock {\n\t/**\n\t * Creates a 1Sat Ordinal Lock script\n\t *\n\t * @param {string} ordAddress - An address which can cancel listing.\n\t * @param {string} payAddress - Address which is paid on purchase\n\t * @param {number} price - Listing price in satoshis\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\tlock(\n\t\tordAddress: string,\n\t\tpayAddress: string,\n\t\tprice: number,\n    inscription?: Inscription,\n\t): Script {\n\t\tconst cancelPkh = Utils.fromBase58Check(ordAddress).data as number[];\n\t\tconst payPkh = Utils.fromBase58Check(payAddress).data as number[];\n\n\t\tlet script = new Script()\n\t\tif (inscription?.dataB64 !== undefined && inscription?.contentType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(inscription.dataB64, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(inscription.contentType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tscript = Script.fromASM(`OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`);\n\t\t}\n\t\t\n\t\treturn script.writeScript(Script.fromHex(oLockPrefix))\n\t\t\t.writeBin(cancelPkh)\n\t\t\t.writeBin(OrdLock.buildOutput(price, new P2PKH().lock(payPkh).toBinary()))\n\t\t\t.writeScript(Script.fromHex(oLockSuffix))\n\t}\n\n\tcancelListing(\n\t\tprivateKey: PrivateKey,\n\t\tsignOutputs: 'all' | 'none' | 'single' = 'all',\n\t\tanyoneCanPay = false,\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: () => Promise<number>\n\t} {\n\t\tconst p2pkh = new P2PKH().unlock(privateKey, signOutputs, anyoneCanPay, sourceSatoshis, lockingScript)\n\t\treturn {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await p2pkh.sign(tx, inputIndex)).writeOpCode(OP.OP_1)\n\t\t\t},\n\t\t\testimateLength: async () => {\n\t\t\t\treturn 107\n\t\t\t}\n\t\t}\n\t}\n\n\tpurchaseListing(\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>\n\t} {\n\t\tconst purchase = {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\tif (tx.outputs.length < 2) {\n\t\t\t\t\tthrow new Error(\"Malformed transaction\")\n\t\t\t\t}\n\t\t\t\tconst script = new UnlockingScript()\n\t\t\t\t\t.writeBin(OrdLock.buildOutput(\n\t\t\t\t\t\ttx.outputs[0].satoshis || 0,\n\t\t\t\t\t\ttx.outputs[0].lockingScript.toBinary()\n\t\t\t\t\t))\n\t\t\t\tif(tx.outputs.length > 2) {\n\t\t\t\t\tconst writer = new Utils.Writer()\n\t\t\t\t\tfor(const output of tx.outputs.slice(2)) {\n\t\t\t\t\t\twriter.write(OrdLock.buildOutput(output.satoshis || 0, output.lockingScript.toBinary()))\n\t\t\t\t\t}\n\t\t\t\t\tscript.writeBin(writer.toArray())\n\t\t\t\t} else {\n\t\t\t\t\tscript.writeOpCode(OP.OP_0)\n\t\t\t\t}\n\n        const input = tx.inputs[inputIndex]\n        let sourceSats: number\n        if (!sourceSatoshis && input.sourceTransaction) {\n          sourceSats = input.sourceTransaction.outputs[input.sourceOutputIndex].satoshis as number\n        } else if (!sourceSatoshis) {\n          throw new Error(\"sourceTransaction or sourceSatoshis is required\")\n        }\n        sourceSats = sourceSatoshis as number\n        \n        const sourceTXID = (input.sourceTXID || input.sourceTransaction?.id('hex')) as string\n        let subscript = lockingScript as LockingScript\n        if (!lockingScript) {\n          subscript = input.sourceTransaction?.outputs[input.sourceOutputIndex].lockingScript as LockingScript\n        }\n\t\t\t\tconst preimage = TransactionSignature.format({\n\t\t\t\t\tsourceTXID,\n\t\t\t\t\tsourceOutputIndex: input.sourceOutputIndex,\n\t\t\t\t\tsourceSatoshis: sourceSats,\n\t\t\t\t\ttransactionVersion: tx.version,\n\t\t\t\t\totherInputs: [],\n\t\t\t\t\tinputIndex,\n\t\t\t\t\toutputs: tx.outputs,\n\t\t\t\t\tinputSequence: input.sequence,\n\t\t\t\t\tsubscript,\n\t\t\t\t\tlockTime: tx.lockTime,\n\t\t\t\t\tscope: TransactionSignature.SIGHASH_ALL |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_ANYONECANPAY |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_FORKID\n\t\t\t\t  });\n\n\t\t\t\treturn script.writeBin(preimage).writeOpCode(OP.OP_0)\n\t\t\t},\n\t\t\testimateLength: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await purchase.sign(tx, inputIndex)).toBinary().length\n\t\t\t}\n\t\t}\n\t\treturn purchase\n\t}\n\n\tstatic buildOutput(satoshis: number, script: number[]): number[] {\n\t\tconst writer = new Utils.Writer()\n\t\twriter.writeUInt64LEBn(new BigNumber(satoshis))\n\t\twriter.writeVarIntNum(script.length)\n\t\twriter.write(script)\n\t\treturn writer.toArray()\n\t}\n}\n","import {\n\tP2PKH,\n\tSatoshisPerKilobyte,\n\tScript,\n\tTransaction,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport {\n\ttype CreateOrdTokenListingsConfig,\n\ttype CreateOrdListingsConfig,\n\ttype Utxo,\n\ttype TransferTokenInscription,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\tTokenType,\n\ttype TokenUtxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nconst { toArray } = Utils;\n\n// TODO: Handle royalty\nexport const createOrdListings = async (config: CreateOrdListingsConfig) => {\n\tconst {\n\t\tutxos,\n\t\tlistings,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t\troyalty,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Warn if creating many inscriptions at once\n\tif (listings.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Outputs\n\t// Add listing outputs\n\tfor (const listing of listings) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdLock().lock(\n\t\t\t\tlisting.payAddress,\n\t\t\t\tlisting.ordAddress,\n\t\t\t\tlisting.price,\n\t\t\t),\n\t\t});\n\t\tconst inputScriptBinary = toArray(listing.listingUtxo.script, \"base64\");\n\t\tconst inputScript = Script.fromBinary(inputScriptBinary);\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\tlisting.listingUtxo,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlisting.listingUtxo.satoshis,\n\t\t\t\tinputScript,\n\t\t\t),\n\t\t));\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Check if change is needed\n\tlet payChange: Utxo | undefined;\n\tconst changeScript = new P2PKH().lock(\n\t\tchangeAddress || paymentPk.toAddress().toString(),\n\t);\n\tconst changeOutput = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOutput);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\nexport const createOrdTokenListings = async (\n\tconfig: CreateOrdTokenListingsConfig,\n) => {\n\tconst {\n\t\tutxos,\n\t\tprotocol,\n\t\ttokenID,\n\t\tordPk,\n\t\tpaymentPk,\n\t\tadditionalPayments = [],\n\t\tchangeAddress,\n\t\ttokenChangeAddress,\n\t\tinputTokens,\n\t\tlistings,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\n\t// Warn if creating many inscriptions at once\n\tif (listings.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Ensure these inputs are for the expected token\n\tif (!inputTokens.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\t// calculate change amount\n\tlet changeAmt = 0n;\n\tlet totalAmtIn = 0n;\n\tlet totalAmtOut = 0n;\n\n\t// Ensure these inputs are for the expected token\n\tif (!inputTokens.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\t// Outputs\n\t// Add listing outputs\n\tfor (const listing of listings) {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: \"transfer\",\n\t\t\tamt: listing.amt.toString(),\n\t\t};\n\t\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\ttick: tokenID,\n\t\t\t} as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\tid: tokenID,\n\t\t\t} as TransferBSV21Inscription;\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid protocol\");\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdLock().lock(\n\t\t\t\tlisting.payAddress,\n\t\t\t\tlisting.ordAddress,\n\t\t\t\tlisting.price,\n\t\t\t\t{\n\t\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\t\t\tcontentType: \"application/bsv20\",\n\t\t\t\t},\n\t\t\t),\n\t\t});\n\t\ttotalAmtOut += listing.amt;\n\t}\n\n\tfor (const token of inputTokens) {\n\t\tconst inputScriptBinary = toArray(token.script, \"base64\");\n\t\tconst inputScript = Script.fromBinary(inputScriptBinary);\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\ttoken,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\ttoken.satoshis,\n\t\t\t\tinputScript,\n\t\t\t),\n\t\t));\n\n\t\ttotalAmtIn += BigInt(token.amt);\n\t}\n\tchangeAmt = totalAmtIn - totalAmtOut;\n\n\tlet tokenChange: TokenUtxo | undefined;\n\t// check that you have enough tokens to send and return change\n\tif (changeAmt < 0n) {\n\t\tthrow new Error(\"Not enough tokens to send\");\n\t}\n\tif (changeAmt > 0n) {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: \"transfer\",\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\ttick: tokenID,\n\t\t\t} as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\tid: tokenID,\n\t\t\t} as TransferBSV21Inscription;\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid protocol\");\n\t\t}\n\n\t\tconst lockingScript = new OrdP2PKH().lock(tokenChangeAddress, {\n\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString('base64'),\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t});\n\t\tconst vout = tx.outputs.length;\n\t\ttx.addOutput({ lockingScript, satoshis: 1 });\n\t\ttokenChange = {\n\t\t\tid: tokenID,\n\t\t\tsatoshis: 1,\n\t\t\tscript: Buffer.from(lockingScript.toBinary()).toString(\"base64\"),\n\t\t\ttxid: \"\",\n\t\t\tvout,\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst txid = tx.id(\"hex\") as string;\n\tif (tokenChange) {\n\t\ttokenChange.txid = txid;\n\t}\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t\ttokenChange,\n\t};\n};\n","import { P2PKH, SatoshisPerKilobyte, Script, Transaction, Utils } from \"@bsv/sdk\";\nimport {\n\tTokenType,\n\ttype CancelOrdListingsConfig,\n\ttype CancelOrdTokenListingsConfig,\n\ttype Destination,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\n\nexport const cancelOrdListings = async (config: CancelOrdListingsConfig) => {\n\tconst {\n\t\tutxos,\n\t\tlistingUtxos,\n\t\tordPk,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tadditionalPayments,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\n\t// Warn if creating many inscriptions at once\n\tif (listingUtxos.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\t\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinals we're cancelling\n\tfor (const listingUtxo of listingUtxos) {\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().cancelListing(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlistingUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, 'base64'))\n\t\t\t)\n\t\t));\n\t\t// Add cancel outputs returning listed ordinals\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new P2PKH().lock(ordPk.toAddress().toString()),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo, \n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpaymentPk, \n\t\t\t\t\"all\",\n\t\t\t\ttrue, \n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t\t)\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\nexport const cancelOrdTokenListings = async (\n\tconfig: CancelOrdTokenListingsConfig,\n) => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tadditionalPayments,\n\t\tlistingUtxos,\n\t\tutxos,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\t// calculate change amount\n\tlet totalAmtIn = 0;\n\n\tif (listingUtxos.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Ensure these inputs are for the expected token\n\tif (!listingUtxos.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinals we're cancelling\n\tfor (const listingUtxo of listingUtxos) {\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().cancelListing(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlistingUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, 'base64'))\n\t\t\t)\n\t\t));\n\t\ttotalAmtIn += Number.parseInt(listingUtxo.amt);\n\t}\n\n\tconst transferInscription: TransferTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"transfer\",\n\t\tamt: totalAmtIn.toString(),\n\t};\n\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\tif (protocol === TokenType.BSV20) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\ttick: tokenID,\n\t\t} as TransferBSV20Inscription;\n\t} else if (protocol === TokenType.BSV21) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\tid: tokenID,\n\t\t} as TransferBSV21Inscription;\n\t} else {\n\t\tthrow new Error(\"Invalid protocol\");\n\t}\n\n\tconst destination: Destination = {\n\t\taddress: ordAddress || ordPk.toAddress().toString(),\n\t\tinscription: {\n\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t},\n\t};\n\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\tdestination.address,\n\t\t\tdestination.inscription\n\t\t),\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};","import { P2PKH, SatoshisPerKilobyte, Script, Transaction, Utils } from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport {\n\tTokenType,\n\ttype Inscription,\n\ttype PurchaseOrdListingConfig,\n\ttype PurchaseOrdTokenListingConfig,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\n\nexport const purchaseOrdListings = async (config: PurchaseOrdListingConfig) => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tpaymentPk,\n\t\tlisting,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tadditionalPayments = [],\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinal we're purchasing\n\ttx.addInput(inputFromB64Utxo(\n\t\tlisting.listingUtxo,\n\t\tnew OrdLock().purchaseListing(\n\t\t\tlisting.listingUtxo.satoshis,\n\t\t\tScript.fromHex(Buffer.from(listing.listingUtxo.script, \"base64\").toString(\"hex\")),\n\t\t),\n\t));\n\n\t// Outputs\n\t// Add the purchased output\n\tconst transferInscription: TransferTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"transfer\",\n\t\tamt: listing.listingUtxo.amt,\n\t};\n\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\tif (protocol === TokenType.BSV20) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\ttick: tokenID,\n\t\t} as TransferBSV20Inscription;\n\t} else if (protocol === TokenType.BSV21) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\tid: tokenID,\n\t\t} as TransferBSV21Inscription;\n\t} else {\n\t\tthrow new Error(\"Invalid protocol\");\n\t}\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(ordAddress, {\n\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString('base64'),\n\t\t\tcontentType: \"application/bsv-20\"\n\t\t}),\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\nexport const purchaseOrdTokenListing = async (\n\tconfig: PurchaseOrdTokenListingConfig,\n) => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tpaymentPk,\n\t\tlistingUtxo,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinal we're purchasing\n\ttx.addInput(inputFromB64Utxo(\n\t\tlistingUtxo,\n\t\tnew OrdLock().purchaseListing(\n\t\t\t1,\n\t\t\tScript.fromHex(Buffer.from(listingUtxo.script, \"base64\").toString(\"hex\")),\n\t\t),\n\t));\n\n\t// Outputs\n\tconst transferInscription: TransferTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"transfer\",\n\t\tamt: listingUtxo.amt,\n\t};\n\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\tif (protocol === TokenType.BSV20) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\ttick: tokenID,\n\t\t} as TransferBSV20Inscription;\n\t} else if (protocol === TokenType.BSV21) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\tid: tokenID,\n\t\t} as TransferBSV21Inscription;\n\t} else {\n\t\tthrow new Error(\"Invalid protocol\");\n\t}\n\tconst dataB64 = Buffer.from(JSON.stringify(inscription)).toString(\"base64\");\n\n\t// Add the purchased output\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(ordAddress, {\n\t\t\tdataB64,\n\t\t\tcontentType: \"bsv-20\",\n\t\t}),\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase token listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n  return {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import type { CollectionItemSubTypeData, CollectionSubTypeData } from \"./types\";\n\n/**\n * Validates sub type data\n * @param {string} subType - Sub type of the ordinals token\n * @param {string} subTypeData - Sub type data of the ordinals token\n * @returns {Error | undefined} Error if validation fails, undefined if validation passes\n */\nexport const validateSubTypeData = (\n  subType: \"collection\" | \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData | CollectionSubTypeData,\n): Error | undefined => {\n  try {\n    if (subType === \"collection\") {\n      const collectionData = subTypeData as CollectionSubTypeData;\n      if (!collectionData.description) {\n        return new Error(\"Collection description is required\");\n      }\n      if (!collectionData.quantity) {\n        return new Error(\"Collection quantity is required\");\n      }\n      if (collectionData.rarityLabels) {\n        if (!Array.isArray(collectionData.rarityLabels)) {\n          return new Error(\"Rarity labels must be an array\");\n        }\n        // make sure keys and values are strings\n        if (!collectionData.rarityLabels.every((label) => {\n          return Object.values(label).every(value => typeof value === 'string');\n        })) {\n          return new Error(`Invalid rarity labels ${collectionData.rarityLabels}`);\n        }\n      }\n      if (collectionData.traits ) {\n        if (typeof collectionData.traits !== \"object\") {\n        return new Error(\"Collection traits must be an object\");\n        }\n        if (collectionData.traits && !Object.keys(collectionData.traits).every(key => typeof key === 'string' && typeof collectionData.traits[key] === 'object')) {\n          return new Error(\"Collection traits must be a valid CollectionTraits object\");\n        }\n      }\n    }\n    if (subType === \"collectionItem\") {\n      const itemData = subTypeData as CollectionItemSubTypeData;\n      if (!itemData.collectionId) {\n        return new Error(\"Collection id is required\");\n      }\n      if (!itemData.collectionId.includes(\"_\")) {\n        return new Error(\"Collection id must be a valid outpoint\");\n      }\n      if (itemData.collectionId.split(\"_\")[0].length !== 64) {\n        return new Error(\"Collection id must contain a valid txid\");\n      }\n      if (Number.isNaN(Number.parseInt(itemData.collectionId.split(\"_\")[1]))) {\n        return new Error(\"Collection id must contain a valid vout\");\n      }\n\n      if (itemData.mintNumber && typeof itemData.mintNumber !== \"number\") {\n        return new Error(\"Mint number must be a number\");\n      }\n      if (itemData.rank && typeof itemData.rank !== \"number\") {\n        return new Error(\"Rank must be a number\");\n      }\n      if (itemData.rarityLabel && typeof itemData.rarityLabel !== \"string\") {\n        return new Error(\"Rarity label must be a string\");\n      }\n      if (itemData.traits && typeof itemData.traits !== \"object\") {\n        return new Error(\"Traits must be an object\");\n      }\n      if (itemData.attachments && !Array.isArray(itemData.attachments)) {\n        return new Error(\"Attachments must be an array\");\n      }\n    }\n    return undefined;\n  } catch (error) {\n    return new Error(\"Invalid JSON data\");\n  }\n};"],"names":["TokenType","RoytaltyType","toHex","utf8Str","Buffer","from","toString","DEFAULT_SAT_PER_KB","API_HOST","OrdP2PKH","_P2PKH","apply","arguments","_inheritsLoose","prototype","lock","address","inscription","metaData","ordAsm","undefined","dataB64","contentType","ordHex","fileHex","trim","Error","fileMediaType","inscriptionAsm","P2PKH","toASM","app","type","_i","_Object$entries","Object","entries","length","_Object$entries$_i","key","value","LockingScript","fromASM","fromBase58Check","Utils","inputFromB64Utxo","utxo","unlockScriptTemplate","fromUtxo","_extends","script","signData","tx","signer","_exit","_temp2","_result","idKey","keyHost","_sigma$sign","Sigma","sign","Promise","resolve","signedTx","_temp","authToken","sigma","remoteSign","then","_ref","_catch","e","console","log","reject","stringifyMetaData","result","Array","isArray","JSON","stringify","String","pact","state","s","_Pact","o","bind","v","_settle","observer","onFulfilled","this","_this","onRejected","_isSettledPact","thenable","_iteratorSymbol","Symbol","iterator","OrdLock","_proto","ordAddress","payAddress","price","cancelPkh","data","payPkh","Script","writeScript","fromHex","writeBin","buildOutput","toBinary","cancelListing","privateKey","signOutputs","anyoneCanPay","sourceSatoshis","lockingScript","p2pkh","unlock","inputIndex","_p2pkh$sign","writeOpCode","OP","OP_1","estimateLength","purchaseListing","purchase","_input$sourceTransact","outputs","UnlockingScript","satoshis","_step","writer","Writer","_iterator","_createForOfIteratorHelperLoose","slice","done","output","write","toArray","OP_0","sourceSats","input","inputs","sourceTransaction","sourceOutputIndex","_input$sourceTransact2","sourceTXID","id","subscript","preimage","TransactionSignature","format","transactionVersion","version","otherInputs","inputSequence","sequence","lockTime","scope","SIGHASH_ALL","SIGHASH_ANYONECANPAY","SIGHASH_FORKID","_purchase$sign","writeUInt64LEBn","BigNumber","writeVarIntNum","callback","config","_interrupt","totalSatsIn","totalSatsOut","BigInt","fee","modelOrFee","payChangeOutIdx","findIndex","change","changeOutput","payChange","txid","vout","spentOutpoints","map","i","utxos","listingUtxos","ordPk","paymentPk","changeAddress","additionalPayments","_config$satsPerKb","satsPerKb","warn","SatoshisPerKilobyte","Transaction","listingUtxo","addInput","fromBinary","addOutput","toAddress","_step2","_iterator2","p","amount","to","changeScript","reduce","total","out","target","body","check","step","_cycle","next","array","_forOf","computeFee","_modelOrFee$computeFe","listings","_config$additionalPay","listing","inputScriptBinary","inputScript","return","_fixup","TypeError","push","_forTo","values","_temp4","destinations","destination","_Object$keys","keys","_temp3","pop","_signData","collectionId","limit","offset","scriptEncoding","url","subTypeData","fetch","res","ok","json","nftUtxos","outpoints","filter","u","_u$data","list","method","headers","concat","nftRes","nfts","nftUtxo","origin","outpoint","payUrl","payRes","payUtxos","pubKeyHash","p2pkhScript","protocol","tokenId","BSV20","tokenUtxos","amt","tokenID","transferInscription","op","tick","BSV21","changeOut","enforceUniformSend","ordinals","ordUtxo","_destination$inscript","_destination$inscript2","_step3","_iterator3","paymentUtxos","payments","_config$changeAddress","payment","sendTxOut","tokenChange","inputTokens","distributions","tokenChangeAddress","_config$burn","burn","changeAmt","totalAmtIn","totalAmtOut","every","token","dest","subType","collectionData","description","quantity","rarityLabels","label","traits","itemData","includes","split","Number","isNaN","parseInt","mintNumber","rank","rarityLabel","attachments","error"],"mappings":"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"}