{"version":3,"file":"index.umd.js","sources":["../src/utils/strings.ts","../src/ordP2pkh.ts","../src/constants.ts","../src/utils/utxo.ts","../src/signData.ts","../src/createOrdinals.ts","../src/sendOrdinals.ts","../src/sendUtxos.ts"],"sourcesContent":["/**\n * Converts a string to its hexadecimal representation\n *\n * @param {string} utf8Str - The string to convert\n * @returns {string} The hexadecimal representation of the input string\n */\nconst toHex = (utf8Str: string): string => {\n  return Buffer.from(utf8Str).toString(\"hex\");\n};\n\nexport { toHex };\n","import {\n\tLockingScript,\n\tP2PKH,\n\ttype Script,\n} from \"@bsv/sdk\";\nimport type { MAP } from \"./types\";\nimport { toHex } from \"./utils/strings\";\nimport { MAP_PREFIX } from \"./constants\";\n\n/**\n * OrdP2PKH (1Sat Ordinal + Pay To Public Key Hash) class implementing ScriptTemplate.\n *\n * This class provides methods to create an Ordinal with Pay To Public Key Hash locking and unlocking scripts. \n * It extends the standard P2PKH script template and provides a custom lock method.\n */\nexport default class OrdP2PKH extends P2PKH {\n\t/**\n\t * Creates a 1Sat Ordinal + P2PKH locking script for a given address string\n\t *\n\t * @param {string} address - An destination address for the Ordinal.\n\t * @param {string} [b64File] - Base64 encoded file data.\n\t * @param {string} [mediaType] - Media type of the file.\n\t * @param {MAP} [metaData] - (optional) MAP Metadata to be included in OP_RETURN.\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\t// unlock method inherits from p2pkh\n\tlock(\n\t\taddress: string,\n\t\tb64File?: string | undefined,\n\t\tmediaType?: string | undefined,\n\t\tmetaData?: MAP | undefined,\n\t): Script {\n\t\tlet ordAsm = \"\";\n\t\t// This can be omitted for reinscriptions that just update metadata\n\t\tif (b64File !== undefined && mediaType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(b64File, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(mediaType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`;\n\t\t}\n\n\t\t// Create ordinal output and inscription in a single output\n\t\tconst lockingScript = new P2PKH().lock(address);\n\t\tlet inscriptionAsm = `${ordAsm ? `${ordAsm} ` : \"\"}${lockingScript.toASM()}`;\n\n\t\t// MAP.app and MAP.type keys are required\n\t\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t\t}\n\n\t\tif (metaData?.app && metaData?.type) {\n\t\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\t\tconst mapCmdValue = toHex(\"SET\");\n\t\t\tinscriptionAsm = `${inscriptionAsm} OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\t\tif (key !== \"cmd\") {\n\t\t\t\t\tinscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\n\t\t\t\t\t\tvalue as string,\n\t\t\t\t\t)}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn LockingScript.fromASM(inscriptionAsm);\n\t}\n}\n","export const MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\nexport const DEFAULT_SAT_PER_KB = 10;","import { type Transaction, type UnlockingScript, fromUtxo, type TransactionInput } from \"@bsv/sdk\";\nimport type { Utxo } from \"../types\";\n\n/**\n * Converts a Utxo object with a base64 encoded script to a Utxo object with a hex encoded script\n * @param {Utxo} utxo - Utxo object with base64 encoded script\n * @param {Object} unlockScriptTemplate - Object with sign and estimateLength functions\n * @returns {TransactionInput} Utxo object with hex encoded script\n */\nexport const inputFromB64Utxo = (\n\tutxo: Utxo,\n\tunlockScriptTemplate: {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>;\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>;\n\t},\n): TransactionInput => {\n\tconst input = fromUtxo(\n\t\t{\n\t\t\t...utxo,\n\t\t\tscript: Buffer.from(utxo.script, \"base64\").toString(\"hex\"),\n\t\t},\n\t\tunlockScriptTemplate,\n\t);\n\tinput.sourceTXID = utxo.txid;\n\treturn input;\n};\n","import type { Transaction } from \"@bsv/sdk\";\nimport { Sigma } from \"sigma-protocol\";\nimport type { LocalSigner, RemoteSigner } from \"./types\";\n\n/**\n * Signs data in the transaction with Sigma protocol\n * @param {Transaction} tx - Transaction to sign\n * @param {LocalSigner | RemoteSigner} signer - Local or remote signer (used for data signature)\n * @returns {Transaction} Transaction with signed data\n */\nexport const signData = async (\n\ttx: Transaction,\n\tsigner: LocalSigner | RemoteSigner,\n): Promise<Transaction> => {\n\t// Sign tx if idKey or remote signer like starfish/tokenpass\n\tconst idKey = (signer as LocalSigner)?.idKey;\n\tconst keyHost = (signer as RemoteSigner)?.keyHost;\n\n\tif (idKey) {\n\t\tconst sigma = new Sigma(tx);\n\t\tconst { signedTx } = sigma.sign(idKey);\n\t\treturn signedTx;\n\t}\n\tif (keyHost) {\n\t\tconst authToken = (signer as RemoteSigner)?.authToken;\n\t\tconst sigma = new Sigma(tx);\n\t\ttry {\n\t\t\tconst { signedTx } = await sigma.remoteSign(keyHost, authToken);\n\t\t\treturn signedTx;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthrow new Error(`Remote signing to ${keyHost} failed`);\n\t\t}\n\t}\n\tthrow new Error(\"Signer must be a LocalSigner or RemoteSigner\");\n};\n","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n} from \"@bsv/sdk\";\nimport OrdP2PKH from \"./ordP2pkh\";\nimport type {\n\tUtxo,\n\tDestination,\n\tMAP,\n\tLocalSigner,\n\tRemoteSigner,\n\tPayment,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { signData } from \"./signData\";\n\n/**\n * Creates a transaction with inscription outputs\n * @param {Utxo[]} utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Destination[]} destinations - Array of destinations with addresses and inscriptions\n * @param {PrivateKey} paymentPk - Private key to sign utxos\n * @param {string} changeAddress - (optional) Address to send change to. If not provided, defaults to paymentPk address\n * @param {number} satsPerKb - Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {MAP} metaData - MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} signer - Local or remote signer (used for data signature)\n * @param {Payment[]} additionalPayments - Additional payments to include in the transaction\n * @returns {Promise<Transaction>} Transaction with inscription outputs\n */\nexport const createOrdinals = async (\n\tutxos: Utxo[],\n\tdestinations: Destination[],\n\tpaymentPk: PrivateKey,\n\tchangeAddress?: string,\n\tsatsPerKb: number = DEFAULT_SAT_PER_KB,\n\tmetaData?: MAP,\n\tsigner?: LocalSigner | RemoteSigner,\n\tadditionalPayments: Payment[] = [],\n): Promise<Transaction> => {\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Inputs\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\t}\n\n\t// Warn if creating many inscriptions at once\n\tif (destinations.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Outputs\n\t// Add inscription outputs\n\tfor (const destination of destinations) {\n\t\tif (!destination.inscription) {\n\t\t\tthrow new Error(\"Inscription is required for all destinations\");\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription.dataB64,\n\t\t\t\tdestination.inscription.contentType,\n\t\t\t\tmetaData,\n\t\t\t),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Add change output\n\ttx.addOutput({\n\t\tlockingScript: new P2PKH().lock(changeAddress || paymentPk.toAddress().toString()),\n\t\tchange: true,\n\t});\n\n\tif (signer) {\n\t\ttx = await signData(tx, signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\treturn tx;\n};\n","import { type PrivateKey, Transaction, SatoshisPerKilobyte, P2PKH, type Script, type TransactionOutput } from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./ordP2pkh\";\nimport type { Utxo, Destination, MAP, Payment, LocalSigner, RemoteSigner } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\n\n/**\n * Sends ordinals to the given destinations\n * @param {Utxo[]} paymentUtxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} ordinals - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} ordPk - Private key to sign ordinals\n * @param {Destination[]} destinations - Array of destinations with addresses and inscriptions\n * @param {string} changeAddress - (optional) Address to send change to, if any. If not provided, defaults to paymentPk address\n * @param {number} satsPerKb - (optional) Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {MAP} metaData - (optional) MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {Payment[]} additionalPayments -(optional)  Additional payments to include in the transaction\n * @param {boolean} enforceUniformSend - (optional) Enforce that the number of destinations matches the number of ordinals being sent. Sending ordinals requires a 1:1 mapping of destinations to ordinals. Default is true. This is only used for sub-protocols like BSV21 that manage tokens without sending the inscriptions directly.\n * @returns {Promise<Transaction>} Transaction with inscription outputs\n */\nexport const sendOrdinals = async (\n\tpaymentUtxos: Utxo[],\n\tordinals: Utxo[],\n\tpaymentPk: PrivateKey,\n\tordPk: PrivateKey,\n\tdestinations: Destination[],\n\tchangeAddress?: string,\n\tsatsPerKb: number = DEFAULT_SAT_PER_KB,\n\tmetaData?: MAP,\n\tsigner?: LocalSigner | RemoteSigner,\n\tadditionalPayments: Payment[] = [],\n\tenforceUniformSend = true,\n): Promise<Transaction> => {\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(ordUtxo, new OrdP2PKH().unlock(ordPk));\n\t\ttx.addInput(input);\n\t}\n\n\t// Add payment inputs\n\tfor (const paymentUtxo of paymentUtxos) {\n\t\tconst input = inputFromB64Utxo(paymentUtxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// check that ordinals coming in matches ordinals going out if supplied\n\tif (enforceUniformSend && destinations.length !== ordinals.length) {\n\t\tthrow new Error(\n\t\t\t\"Number of destinations must match number of ordinals being sent\",\n\t\t);\n\t}\n\n\t// Add ordinal outputs\n\tfor (const destination of destinations) {\n\t\tlet s: Script;\n\t\tif (\n\t\t\tdestination.inscription?.dataB64 &&\n\t\t\tdestination.inscription?.contentType\n\t\t) {\n\t\t\ts = new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription.dataB64,\n\t\t\t\tdestination.inscription.contentType,\n\t\t\t\tmetaData,\n\t\t\t);\n\t\t} else {\n\t\t\ts = new P2PKH().lock(destination.address);\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: s,\n\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\tconsole.log(\"Additional payment\", p);\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Add change output\n\tconst changeScript = new P2PKH().lock(changeAddress || paymentPk.toAddress().toString());\n\tconst changeOut: TransactionOutput = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\n\ttx.addOutput(changeOut);\n\tif (signer) {\n\t\ttx = await signData(tx, signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\treturn tx;\n};\n","import { type PrivateKey, Transaction, SatoshisPerKilobyte, P2PKH, type TransactionOutput } from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type { Distribution, Payment, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Sends utxos to the given destination\n * @param {Utxo[]} utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} paymentPk - Private key to sign utxos\n * @param {Payment[]} payments - Array of payments with addresses and amounts\n * @param {number} satsPerKb - Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @returns {Promise<Transaction>} Transaction with utxo outputs\n */\nexport const sendUtxos = async (\n\tutxos: Utxo[],\n\tpaymentPk: PrivateKey,\n\tpayments: Payment[],\n\tsatsPerKb: number = DEFAULT_SAT_PER_KB,\n): Promise<Transaction> => {\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\t// Inputs\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\tfor (const payment of payments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new P2PKH().lock(payment.to),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Change\n\tconst changeAddress = paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(changeAddress);\n\n\tconst changeOut: TransactionOutput = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\n\ttx.addOutput(changeOut);\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\treturn tx;\n};"],"names":["toHex","utf8Str","Buffer","from","toString","OrdP2PKH","_P2PKH","apply","this","arguments","prototype","lock","address","b64File","mediaType","metaData","ordAsm","undefined","ordHex","fileHex","trim","Error","fileMediaType","inscriptionAsm","P2PKH","toASM","app","type","mapCmdValue","_i","_Object$entries","Object","entries","length","_Object$entries$_i","key","value","LockingScript","fromASM","inputFromB64Utxo","utxo","unlockScriptTemplate","input","fromUtxo","_extends","script","sourceTXID","txid","signData","tx","signer","_exit","_temp2","_result","idKey","keyHost","_sigma$sign","Sigma","sign","Promise","resolve","signedTx","_temp","authToken","sigma","remoteSign","then","_ref","_catch","e","console","log","reject","utxos","destinations","paymentPk","changeAddress","satsPerKb","additionalPayments","_step","fee","modelOrFee","SatoshisPerKilobyte","Transaction","_iterator","_createForOfIteratorHelperLoose","done","unlock","addInput","warn","_step2","_iterator2","destination","inscription","addOutput","satoshis","lockingScript","dataB64","contentType","_step3","_iterator3","p","amount","to","toAddress","change","_signData","paymentUtxos","ordinals","ordPk","enforceUniformSend","ordUtxo","_destination$inscript","_destination$inscript2","s","_iterator4","_step4","changeScript","payments","payment","sendTxOut"],"mappings":"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"}