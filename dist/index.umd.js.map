{"version":3,"file":"index.umd.js","sources":["../src/utils/strings.ts","../src/types.ts","../src/ordP2pkh.ts","../src/constants.ts","../src/utils/utxo.ts","../src/signData.ts","../src/sendOrdinals.ts","../src/createOrdinals.ts","../src/sendUtxos.ts","../src/transferOrdinals.ts"],"sourcesContent":["/**\n * Converts a string to its hexadecimal representation\n *\n * @param {string} utf8Str - The string to convert\n * @returns {string} The hexadecimal representation of the input string\n */\nconst toHex = (utf8Str: string): string => {\n  return Buffer.from(utf8Str).toString(\"hex\");\n};\n\nexport { toHex };\n","import type { PrivateKey } from \"@bsv/sdk\";\nimport type { AuthToken } from \"sigma-protocol\";\n\n// biome-ignore lint/complexity/noBannedTypes: Reserved for future use\ntype Signer = {};\n\nexport interface LocalSigner extends Signer {\n\tidKey: PrivateKey;\n}\n\nexport interface RemoteSigner extends Signer {\n\tkeyHost: string;\n\tauthToken?: AuthToken;\n}\n\nexport type Destination = {\n\taddress: string;\n\tinscription?: Inscription;\n};\n\n/**\n * @typedef {Object} Distribution\n * @property {string} address - Destination address. Must be a Ordinals address (BSV address for recieving 1Sat ordinals tokens).\n * @property {string} amt - Number of tokens as a string, considering decimals. Not display format. Ex. 100000000 for 1 token with 8 decimal places.\n */\nexport type Distribution = {\n\taddress: string;\n\tamt: string;\n};\n\n/**\n * @typedef {Object} Utxo\n * @property {number} satoshis - Amount in satoshis\n * @property {string} txid - Transaction id\n * @property {number} vout - Output index\n * @property {string} script - Base64 encoded locking script\n */\nexport type Utxo = {\n\tsatoshis: number;\n\ttxid: string;\n\tvout: number;\n\tscript: string;\n};\n\n\n/**\n * @typedef {Object} TokenUtxo\n * @property {string} amt - Number of tokens as a string\n * @property {string} id - Token id -  either tick or id depending on protocol\n * @property {string} satoshis - Always 1\n */\nexport interface TokenUtxo extends Utxo {\n\tamt: string;\n\tid: string;\n\tsatoshis: 1;\n}\n\nexport type Inscription = {\n\tdataB64: string;\n\tcontentType: string;\n};\n\nexport type MAP = {\n\tapp: string;\n\ttype: string;\n\t[prop: string]: string;\n};\n\nexport type Payment = {\n\tto: string;\n\tamount: number;\n};\n\nexport type TokenInscription = {\n\tp: \"bsv-20\";\n\tamt: string;\n  op: \"transfer\" | \"mint\" | \"deploy+mint\";\n};\n\nexport interface MintTokenInscription extends TokenInscription {\n\top: \"mint\";\n};\n\nexport interface DeployMintTokenInscription extends TokenInscription {\n\top: \"deploy+mint\";\n\tsym: string;\n\ticon: string;\n};\n\nexport interface TransferTokenInscription extends TokenInscription {\n\tp: \"bsv-20\";\n\tamt: string;\n  op: \"transfer\";\n};\n\nexport interface TransferBSV20Inscription extends TransferTokenInscription {\n\ttick: string;\n}\n\nexport interface TransferBSV21Inscription extends TransferTokenInscription {\n\tid: string;\n}\n\nexport enum TokenType {\n\tBSV20 = \"bsv20\",\n\tBSV21 = \"bsv21\",\n}","import {\n\tLockingScript,\n\tP2PKH,\n\ttype Script,\n} from \"@bsv/sdk\";\nimport type { MAP } from \"./types\";\nimport { toHex } from \"./utils/strings\";\nimport { MAP_PREFIX } from \"./constants\";\n\n/**\n * OrdP2PKH (1Sat Ordinal + Pay To Public Key Hash) class implementing ScriptTemplate.\n *\n * This class provides methods to create an Ordinal with Pay To Public Key Hash locking and unlocking scripts. \n * It extends the standard P2PKH script template and provides a custom lock method.\n */\nexport default class OrdP2PKH extends P2PKH {\n\t/**\n\t * Creates a 1Sat Ordinal + P2PKH locking script for a given address string\n\t *\n\t * @param {string} address - An destination address for the Ordinal.\n\t * @param {string} [b64File] - Base64 encoded file data.\n\t * @param {string} [mediaType] - Media type of the file.\n\t * @param {MAP} [metaData] - (optional) MAP Metadata to be included in OP_RETURN.\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\t// unlock method inherits from p2pkh\n\tlock(\n\t\taddress: string,\n\t\tb64File?: string | undefined,\n\t\tmediaType?: string | undefined,\n\t\tmetaData?: MAP | undefined,\n\t): Script {\n\t\tlet ordAsm = \"\";\n\t\t// This can be omitted for reinscriptions that just update metadata\n\t\tif (b64File !== undefined && mediaType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(b64File, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(mediaType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`;\n\t\t}\n\n\t\t// Create ordinal output and inscription in a single output\n\t\tconst lockingScript = new P2PKH().lock(address);\n\t\tlet inscriptionAsm = `${ordAsm ? `${ordAsm} ` : \"\"}${lockingScript.toASM()}`;\n\n\t\t// MAP.app and MAP.type keys are required\n\t\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t\t}\n\n\t\tif (metaData?.app && metaData?.type) {\n\t\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\t\tconst mapCmdValue = toHex(\"SET\");\n\t\t\tinscriptionAsm = `${inscriptionAsm} OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\t\tif (key !== \"cmd\") {\n\t\t\t\t\tinscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\n\t\t\t\t\t\tvalue as string,\n\t\t\t\t\t)}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn LockingScript.fromASM(inscriptionAsm);\n\t}\n}\n","export const MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\nexport const DEFAULT_SAT_PER_KB = 10;","import { type Transaction, type UnlockingScript, fromUtxo, type TransactionInput } from \"@bsv/sdk\";\nimport type { Utxo } from \"../types\";\n\n/**\n * Converts a Utxo object with a base64 encoded script to a Utxo object with a hex encoded script\n * @param {Utxo} utxo - Utxo object with base64 encoded script\n * @param {Object} unlockScriptTemplate - Object with sign and estimateLength functions\n * @returns {TransactionInput} Utxo object with hex encoded script\n */\nexport const inputFromB64Utxo = (\n\tutxo: Utxo,\n\tunlockScriptTemplate: {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>;\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>;\n\t},\n): TransactionInput => {\n\tconst input = fromUtxo(\n\t\t{\n\t\t\t...utxo,\n\t\t\tscript: Buffer.from(utxo.script, \"base64\").toString(\"hex\"),\n\t\t},\n\t\tunlockScriptTemplate,\n\t);\n\tinput.sourceTXID = utxo.txid;\n\treturn input;\n};\n","import type { Transaction } from \"@bsv/sdk\";\nimport { Sigma } from \"sigma-protocol\";\nimport type { LocalSigner, RemoteSigner } from \"./types\";\n\n/**\n * Signs data in the transaction with Sigma protocol\n * @param {Transaction} tx - Transaction to sign\n * @param {LocalSigner | RemoteSigner} signer - Local or remote signer (used for data signature)\n * @returns {Transaction} Transaction with signed data\n */\nexport const signData = async (\n\ttx: Transaction,\n\tsigner: LocalSigner | RemoteSigner,\n): Promise<Transaction> => {\n\t// Sign tx if idKey or remote signer like starfish/tokenpass\n\tconst idKey = (signer as LocalSigner)?.idKey;\n\tconst keyHost = (signer as RemoteSigner)?.keyHost;\n\n\tif (idKey) {\n\t\tconst sigma = new Sigma(tx);\n\t\tconst { signedTx } = sigma.sign(idKey);\n\t\treturn signedTx;\n\t}\n\tif (keyHost) {\n\t\tconst authToken = (signer as RemoteSigner)?.authToken;\n\t\tconst sigma = new Sigma(tx);\n\t\ttry {\n\t\t\tconst { signedTx } = await sigma.remoteSign(keyHost, authToken);\n\t\t\treturn signedTx;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthrow new Error(`Remote signing to ${keyHost} failed`);\n\t\t}\n\t}\n\tthrow new Error(\"Signer must be a LocalSigner or RemoteSigner\");\n};\n","import { type PrivateKey, Transaction, SatoshisPerKilobyte, P2PKH, type Script, type TransactionOutput } from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./ordP2pkh\";\nimport type { Utxo, Destination, MAP, Payment, LocalSigner, RemoteSigner } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\n\n/**\n * Sends ordinals to the given destinations\n * @param {Utxo[]} paymentUtxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} ordinals - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} ordPk - Private key to sign ordinals\n * @param {Destination[]} destinations - Array of destinations with addresses and inscriptions\n * @param {string} changeAddress - (optional) Address to send change to, if any. If not provided, defaults to paymentPk address\n * @param {number} satsPerKb - (optional) Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {MAP} metaData - (optional) MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {Payment[]} additionalPayments -(optional)  Additional payments to include in the transaction\n * @param {boolean} enforceUniformSend - (optional) Enforce that the number of destinations matches the number of ordinals being sent. Sending ordinals requires a 1:1 mapping of destinations to ordinals. Default is true. This is only used for sub-protocols like BSV21 that manage tokens without sending the inscriptions directly.\n * @returns {Promise<Transaction>} Transaction with inscription outputs\n */\nexport const sendOrdinals = async (\n\tpaymentUtxos: Utxo[],\n\tordinals: Utxo[],\n\tpaymentPk: PrivateKey,\n\tordPk: PrivateKey,\n\tdestinations: Destination[],\n\tchangeAddress?: string,\n\tsatsPerKb: number = DEFAULT_SAT_PER_KB,\n\tmetaData?: MAP,\n\tsigner?: LocalSigner | RemoteSigner,\n\tadditionalPayments: Payment[] = [],\n\tenforceUniformSend = true,\n): Promise<Transaction> => {\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(ordUtxo, new OrdP2PKH().unlock(ordPk));\n\t\ttx.addInput(input);\n\t}\n\n\t// Add payment inputs\n\tfor (const paymentUtxo of paymentUtxos) {\n\t\tconst input = inputFromB64Utxo(paymentUtxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// check that ordinals coming in matches ordinals going out if supplied\n\tif (enforceUniformSend && destinations.length !== ordinals.length) {\n\t\tthrow new Error(\n\t\t\t\"Number of destinations must match number of ordinals being sent\",\n\t\t);\n\t}\n\n\t// Add ordinal outputs\n\tfor (const destination of destinations) {\n\t\tlet s: Script;\n\t\tif (\n\t\t\tdestination.inscription?.dataB64 &&\n\t\t\tdestination.inscription?.contentType\n\t\t) {\n\t\t\ts = new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription.dataB64,\n\t\t\t\tdestination.inscription.contentType,\n\t\t\t\tmetaData,\n\t\t\t);\n\t\t} else {\n\t\t\ts = new P2PKH().lock(destination.address);\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: s,\n\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\tconsole.log(\"Additional payment\", p);\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Add change output\n\tconst changeScript = new P2PKH().lock(changeAddress || paymentPk.toAddress().toString());\n\tconst changeOut: TransactionOutput = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\n\ttx.addOutput(changeOut);\n\tif (signer) {\n\t\ttx = await signData(tx, signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\treturn tx;\n};\n","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n} from \"@bsv/sdk\";\nimport OrdP2PKH from \"./ordP2pkh\";\nimport type {\n\tUtxo,\n\tDestination,\n\tMAP,\n\tLocalSigner,\n\tRemoteSigner,\n\tPayment,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { signData } from \"./signData\";\n\n/**\n * Creates a transaction with inscription outputs\n * @param {Utxo[]} utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Destination[]} destinations - Array of destinations with addresses and inscriptions\n * @param {PrivateKey} paymentPk - Private key to sign utxos\n * @param {string} changeAddress - (optional) Address to send change to. If not provided, defaults to paymentPk address\n * @param {number} satsPerKb - Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {MAP} metaData - MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} signer - Local or remote signer (used for data signature)\n * @param {Payment[]} additionalPayments - Additional payments to include in the transaction\n * @returns {Promise<Transaction>} Transaction with inscription outputs\n */\nexport const createOrdinals = async (\n\tutxos: Utxo[],\n\tdestinations: Destination[],\n\tpaymentPk: PrivateKey,\n\tchangeAddress?: string,\n\tsatsPerKb: number = DEFAULT_SAT_PER_KB,\n\tmetaData?: MAP,\n\tsigner?: LocalSigner | RemoteSigner,\n\tadditionalPayments: Payment[] = [],\n): Promise<Transaction> => {\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Inputs\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\t}\n\n\t// Warn if creating many inscriptions at once\n\tif (destinations.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Outputs\n\t// Add inscription outputs\n\tfor (const destination of destinations) {\n\t\tif (!destination.inscription) {\n\t\t\tthrow new Error(\"Inscription is required for all destinations\");\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription.dataB64,\n\t\t\t\tdestination.inscription.contentType,\n\t\t\t\tmetaData,\n\t\t\t),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Add change output\n\ttx.addOutput({\n\t\tlockingScript: new P2PKH().lock(changeAddress || paymentPk.toAddress().toString()),\n\t\tchange: true,\n\t});\n\n\tif (signer) {\n\t\ttx = await signData(tx, signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\treturn tx;\n};\n","import { type PrivateKey, Transaction, SatoshisPerKilobyte, P2PKH, type TransactionOutput } from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type { Distribution, Payment, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Sends utxos to the given destination\n * @param {Utxo[]} utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} paymentPk - Private key to sign utxos\n * @param {Payment[]} payments - Array of payments with addresses and amounts\n * @param {number} satsPerKb - Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @returns {Promise<Transaction>} Transaction with utxo outputs\n */\nexport const sendUtxos = async (\n\tutxos: Utxo[],\n\tpaymentPk: PrivateKey,\n\tpayments: Payment[],\n\tsatsPerKb: number = DEFAULT_SAT_PER_KB,\n): Promise<Transaction> => {\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\t// Inputs\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\tfor (const payment of payments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new P2PKH().lock(payment.to),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Change\n\tconst changeAddress = paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(changeAddress);\n\n\tconst changeOut: TransactionOutput = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\n\ttx.addOutput(changeOut);\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\treturn tx;\n};","import type {\n\tPrivateKey,\n\tTransaction,\n} from \"@bsv/sdk\";\nimport {\n\ttype Destination,\n\ttype Distribution,\n\ttype LocalSigner,\n\ttype MAP,\n\ttype Payment,\n\ttype RemoteSigner,\n\tTokenType,\n\ttype TokenUtxo,\n\ttype TransferBSV20Inscription,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n  type TransferBSV21Inscription,\n} from \"./types\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { sendOrdinals } from \"./sendOrdinals\";\n\n/**\n * Transfer tokens to a destination\n * @param {TokenType} protocol - Token protocol. Must be TokenType.BSV20 or TokenType.BSV21\n * @param {string} tokenID - Token ID. Either the tick or id value depending on the protocol\n * @param {Utxo[]} utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {TokenUtxo[]} inputTokens - Token utxos to spend\n * @param {Distribution[]} distributions - Array of destinations with addresses and amounts\n * @param {PrivateKey} paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} ordPk - Private key to sign ordinals\n * @param {string} changeAddress - Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {string} tokenChangeAddress - Address to send token change to, if any. If not provided, defaults to ordPk address\n * @param {number} satsPerKb - (optional) Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {MAP} metaData - (optional) MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} signer - (optional) Signer object to sign the transaction\n * @param {Payment[]} additionalPayments - (optional) Additional payments to include in the transaction\n * @returns {Promise<Transaction>} Transaction with token transfer outputs\n */\nexport const transferOrdTokens = async (\n\tprotocol: TokenType,\n\ttokenID: string, // either tick or id depending on protocol\n\tutxos: Utxo[],\n\tinputTokens: TokenUtxo[],\n\tdistributions: Distribution[],\n\tpaymentPk: PrivateKey,\n  ordPk: PrivateKey,\n\tchangeAddress?: string,\n  tokenChangeAddress?: string,\n\tsatsPerKb: number = DEFAULT_SAT_PER_KB,\n\tmetaData?: MAP,\n\tsigner?: LocalSigner | RemoteSigner,\n\tadditionalPayments: Payment[] = [],\n): Promise<Transaction> => {\n\t// calculate change amount\n\tlet changeAmt = 0n;\n\tlet totalAmtIn = 0n;\n\tlet totalAmtOut = 0n;\n\n  // Ensure these inputs are for the expected token\n\tif(!inputTokens.every(\n\t\t(token) => token.id === tokenID,\n\t)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n\tfor (const token of inputTokens) {\n\t\ttotalAmtIn += BigInt(token.amt);\n\t}\n\n\tfor (const dest of distributions) {\n\t\ttotalAmtOut += BigInt(dest.amt);\n\t}\n\n\t// check that you have enough tokens to send\n\tif (totalAmtIn < totalAmtOut) {\n\t\tthrow new Error(\"Not enough tokens to send\");\n\t}\n\n\tchangeAmt = totalAmtIn - totalAmtOut;\n\n\t// add change to destinations\n\tif (changeAmt > 0n) {\n\t\tconst changeDistribution = {\n\t\t\taddress: tokenChangeAddress || ordPk.toAddress().toString(),\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t\tdistributions.push(changeDistribution);\n\t}\n\n\t// build destination inscriptions\n\tconst destinations: Destination[] = distributions.map((dest) => {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: \"transfer\",\n\t\t\tamt: dest.amt,\n\t\t}\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n\t\treturn {\n\t\t\taddress: dest.address,\n\t\t\tinscription: {\n\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\t\tcontentType: \"application/bsv-20\",\n\t\t\t},\n\t\t};\n\t});\n\n\t// chaeck that\n\tconst tx = await sendOrdinals(\n\t\tutxos,\n\t\tinputTokens,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tdestinations,\n\t\tchangeAddress || paymentPk.toAddress().toString(),\n\t\tsatsPerKb,\n\t\tmetaData,\n    signer,\n\t\tadditionalPayments,\n\t\tfalse\n\t);\n\treturn tx;\n};\n"],"names":["TokenType","toHex","utf8Str","Buffer","from","toString","OrdP2PKH","_P2PKH","apply","this","arguments","prototype","lock","address","b64File","mediaType","metaData","ordAsm","undefined","ordHex","fileHex","trim","Error","fileMediaType","inscriptionAsm","P2PKH","toASM","app","type","mapCmdValue","_i","_Object$entries","Object","entries","length","_Object$entries$_i","key","value","LockingScript","fromASM","inputFromB64Utxo","utxo","unlockScriptTemplate","input","fromUtxo","_extends","script","sourceTXID","txid","signData","tx","signer","_exit","_temp2","_result","idKey","keyHost","_sigma$sign","Sigma","sign","Promise","resolve","signedTx","_temp","authToken","sigma","remoteSign","then","_ref","_catch","e","console","log","reject","sendOrdinals","paymentUtxos","ordinals","paymentPk","ordPk","destinations","changeAddress","satsPerKb","additionalPayments","enforceUniformSend","_step","fee","modelOrFee","SatoshisPerKilobyte","Transaction","_iterator","_createForOfIteratorHelperLoose","done","ordUtxo","satoshis","unlock","addInput","_iterator2","_step2","_step3","_iterator3","_destination$inscript","_destination$inscript2","s","destination","inscription","dataB64","contentType","addOutput","lockingScript","_iterator4","_step4","p","amount","to","changeScript","toAddress","change","_signData","utxos","warn","payments","payment","sendTxOut","protocol","tokenID","inputTokens","distributions","tokenChangeAddress","changeAmt","totalAmtIn","totalAmtOut","every","token","id","BigInt","amt","changeDistribution","push","map","dest","transferInscription","op","BSV20","tick","BSV21","JSON","stringify"],"mappings":"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"}