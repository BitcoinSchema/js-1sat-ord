{"version":3,"file":"index.umd.js","sources":["../src/utils/strings.ts","../src/types.ts","../src/constants.ts","../src/templates/ordP2pkh.ts","../src/utils/utxo.ts","../src/signData.ts","../src/utils/subtypeData.ts","../src/createOrdinals.ts","../src/sendOrdinals.ts","../src/sendUtxos.ts","../src/transferOrdinals.ts","../src/templates/ordLock.ts","../src/createListings.ts","../src/cancelListings.ts","../src/utils/paymail.ts","../src/purchaseOrdListing.ts","../src/utils/icon.ts","../src/deployBsv21.ts","../src/validate.ts"],"sourcesContent":["/**\n * Converts a string to its hexadecimal representation\n *\n * @param {string} utf8Str - The string to convert\n * @returns {string} The hexadecimal representation of the input string\n */\nconst toHex = (utf8Str: string): string => {\n  return Buffer.from(utf8Str).toString(\"hex\");\n};\n\nexport { toHex };\n","import type { PrivateKey, Transaction } from \"@bsv/sdk\";\nimport type { AuthToken } from \"sigma-protocol\";\n\n// biome-ignore lint/complexity/noBannedTypes: Reserved for future use\ntype Signer = {};\n\nexport interface LocalSigner extends Signer {\n  idKey: PrivateKey;\n}\n\nexport interface RemoteSigner extends Signer {\n  keyHost: string;\n  authToken?: AuthToken;\n}\n\nexport type Destination = {\n  address: string;\n  inscription?: Inscription;\n};\n\n/**\n * @typedef {Object} Listing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n * @property {Utxo} listingUtxo - Utxo of the listing\n */\nexport type NewListing = {\n  payAddress: string;\n  price: number;\n  ordAddress: string;\n  listingUtxo: Utxo;\n}\n\n/**\n * @typedef {Object} ExistingListing\n * @property {string} payout - Payment output script base64 encoded\n * @property {Utxo} listingUtxo - Utxo of the listing\n */\nexport type ExistingListing = {\n  payout: string;\n  listingUtxo: Utxo;\n}\n\n/**\n * @typedef {Object} NewTokenListing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n * @property {number} amt - Number of tokens as a number. Not adjusted for decimals (library will add zeros according to dec value).\n */\nexport type NewTokenListing = {\n  payAddress: string;\n  price: number;\n  amt: number;\n  ordAddress: string;\n}\n\n/**\n * @typedef {Object} Distribution\n * @property {string} address - Destination address. Must be a Ordinals address (BSV address for recieving 1Sat ordinals tokens).\n * @property {number} amt - Number of tokens as a string, considering decimals. Not display format. Ex. 100000000 for 1 token with 8 decimal places.\n */\nexport type Distribution = {\n  address: string;\n  amt: number;\n};\n\n/**\n * @typedef {Object} Utxo\n * @property {number} satoshis - Amount in satoshis\n * @property {string} txid - Transaction id\n * @property {number} vout - Output index\n * @property {string} script - Base64 encoded locking script\n */\nexport type Utxo = {\n  satoshis: number;\n  txid: string;\n  vout: number;\n  script: string;\n};\n\n/**\n * @typedef {Object} NftUtxo\n * @property {string} collectionId - Optional. Collection id of the NFT\n * @property {string} contentType - Media type of the NFT\n * @property {string} creatorBapId - Optional. Creator BAP id of the NFT\n * @property {string} origin - Origin address of the NFT\n * @property {number} satoshis - Always 1\n */\nexport interface NftUtxo extends Utxo {\n  collectionId?: string;\n  contentType: string;\n  creatorBapId?: string;\n  origin: string;\n  satoshis: 1;\n}\n\n/**\n * @typedef {Object} TokenUtxo\n * @property {string} amt - Number of tokens as a string, adjusted for decimals. Ex. 100000000 for 1 token with 8 decimal places.\n * @property {string} id - Token id -  either tick or id depending on protocol\n * @property {string} satoshis - Always 1\n * @property {string} [payout] - Optional. Payment output script base64 encoded\n * @property {number} [price] - Optional. Listing price in satoshis\n * @property {boolean} [isListing] - Optional. True if the token is a listing\n */\nexport interface TokenUtxo extends Utxo {\n  amt: string;\n  id: string;\n  satoshis: 1;\n  payout?: string;\n  price?: number;\n  isListing?: boolean;\n}\n\nexport type Inscription = {\n  dataB64: string;\n  contentType: string;\n};\n\nexport type ImageContentType =\n  | \"image/png\"\n  | \"image/jpeg\"\n  | \"image/gif\"\n  | \"image/svg+xml\"\n  | \"image/webp\";\n\n/**\n * @typedef {Object} IconInscription\n * @property {string} dataB64 - Base64 encoded image data. Must be a square image.\n * @property {ImageContentType} contentType - Media type of the image\n */\nexport type IconInscription = {\n  dataB64: string;\n  contentType: ImageContentType;\n};\n\nexport type Payment = {\n  to: string;\n  amount: number;\n};\n\nexport type TokenInscription = {\n  p: \"bsv-20\";\n  amt: string;\n  op: \"transfer\" | \"mint\" | \"deploy+mint\" | \"burn\";\n  dec?: string;\n};\n\nexport interface MintTokenInscription extends TokenInscription {\n  op: \"mint\";\n}\n\nexport interface DeployMintTokenInscription extends TokenInscription {\n  op: \"deploy+mint\";\n  sym: string;\n  icon: string;\n}\n\nexport interface TransferTokenInscription extends TokenInscription {\n  p: \"bsv-20\";\n  amt: string;\n  op: \"transfer\" | \"burn\";\n}\n\nexport interface TransferBSV20Inscription extends TransferTokenInscription {\n  tick: string;\n}\n\nexport interface TransferBSV21Inscription extends TransferTokenInscription {\n  id: string;\n}\n\nexport enum TokenType {\n  BSV20 = \"bsv20\",\n  BSV21 = \"bsv21\",\n}\n\nexport type CreateOrdinalsResult = {\n  tx: Transaction;\n  spentOutpoints: string[];\n  payChange?: Utxo;\n};\n\n/**\n * MAP (Magic Attribute Protocol) metadata object with stringified values for writing to the blockchain\n * @typedef {Object} MAP\n * @property {string} app - Application identifier\n * @property {string} type - Metadata type\n * @property {string} [prop] - Optional. Additional metadata properties\n */\nexport type MAP = {\n  app: string;\n  type: string;\n  [prop: string]: string;\n};\n\nexport type PreMAP = {\n  app: string;\n  type: string;\n  [prop: string]: unknown;\n  royalties?: Royalty[];\n  subTypeData?: CollectionSubTypeData | CollectionItemSubTypeData;\n};\n\nexport type CreateOrdinalsConfig = {\n  utxos: Utxo[];\n  destinations: Destination[];\n  paymentPk: PrivateKey;\n  changeAddress?: string;\n  satsPerKb?: number;\n  metaData?: PreMAP;\n  signer?: LocalSigner | RemoteSigner;\n  additionalPayments?: Payment[];\n};\n\nexport enum RoytaltyType {\n  Paymail = \"paymail\",\n  Address = \"address\",\n  Script = \"script\",\n}\n\n/**\n * Royalty object\n * @typedef {Object} Royalty\n * @property {RoytaltyType} type - Royalty type, string, one of \"paymail\", \"address\", \"script\"\n * @property {string} destination - Royalty destination\n * @property {string} percentage - Royalty percentage as a string float 0-1 (0.01 = 1%)\n */\nexport type Royalty = {\n  type: RoytaltyType;\n  destination: string;\n  percentage: string; // string float 0-1\n};\n\nexport interface CreateOrdinalsMetadata extends PreMAP {\n  type: \"ord\",\n  name: string,\n  previewUrl?: string,\n}\n\nexport interface CreateOrdinalsCollectionMetadata extends CreateOrdinalsMetadata {\n  subType: \"collection\",\n  subTypeData: CollectionSubTypeData, // JSON stringified CollectionSubTypeData\n  royalties?: Royalty[],\n};\n\nexport interface CreateOrdinalsCollectionItemMetadata extends CreateOrdinalsMetadata {\n  subType: \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n};\n\n/**\n * Configuration object for creating an ordinals collection\n * @typedef {Object} CreateOrdinalsCollectionConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collection\"\n * @property metaData.name - Collection name\n * @property metaData.subTypeData - JSON stringified CollectionSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionConfig extends CreateOrdinalsConfig {\n  metaData: CreateOrdinalsCollectionMetadata\n}\n\nexport type CollectionTraits = {\n  [trait: string]: CollectionTrait;\n};\n\nexport type CollectionTrait = {\n  values: string[];\n  occurancePercentages: string[];\n};\n\nexport type Rarity = {\n  [key: string]: string;\n}\n\nexport type RarityLabels = Rarity[]\nexport interface CollectionSubTypeData {\n  description: string;\n  quantity: number;\n  rarityLabels: RarityLabels;\n  traits: CollectionTraits;\n}\n\nexport interface CreateOrdinalsCollectionItemMetadata extends PreMAP {\n  type: \"ord\",\n  name: string,\n  subType: \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n  royalties?: Royalty[],\n  previewUrl?: string,\n}\n\n/**\n * Configuration object for creating an ordinals collection item\n * @typedef {Object} CreateOrdinalsCollectionItemConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection item\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collectionItem\"\n * @property metaData.name - Collection item name\n * @property metaData.subTypeData - JSON stringified CollectionItemSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionItemConfig extends CreateOrdinalsConfig {\n  metaData: CreateOrdinalsCollectionItemMetadata\n}\n\n/**\n * Subtype data for an ordinals collection item\n * @typedef {Object} CollectionItemSubTypeData\n * @property {string} collectionId - Collection id\n * @property {number} mintNumner - Mint number\n * @property {number} rank - Rank\n * @property {string} rarityLabel - Rarity label\n * @property {string} traits - traits object\n * @property {string} attachments - array of attachment objects\n */\nexport interface CollectionItemSubTypeData {\n  collectionId: string;\n  mintNumber?: number;\n  rank?: number;\n  rarityLabel?: RarityLabels;\n  traits?: CollectionItemTraits;\n  attachments?: CollectionItemAttachment[];\n}\n\nexport type CollectionItemTraits = {\n  name: string;\n  value: string;\n  rarityLabel?: string;\n  occurancePercentrage?: string;\n};\n\nexport type CollectionItemAttachment = {\n  name: string;\n  description?: string;\n  \"content-type\": string;\n  url: string;\n}\n\nexport type SendOrdinalsResult = {\n  tx: Transaction;\n  spentOutpoints: string[];\n  payChange?: Utxo;\n};\n\nexport type SendOrdinalsConfig = {\n  paymentUtxos: Utxo[];\n  ordinals: Utxo[];\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  destinations: Destination[];\n  changeAddress?: string;\n  satsPerKb?: number;\n  metaData?: PreMAP;\n  signer?: LocalSigner | RemoteSigner;\n  additionalPayments?: Payment[];\n  enforceUniformSend?: boolean;\n}\n\nexport type DeployBsv21TokenResult = {\n  tx: Transaction;\n  spentOutpoints: string[];\n  payChange?: Utxo;\n};\n\nexport type DeployBsv21TokenConfig = {\n  symbol: string;\n  decimals?: number;\n  icon: string | IconInscription;\n  utxos: Utxo[];\n  initialDistribution: Distribution;\n  paymentPk: PrivateKey;\n  destinationAddress: string;\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[];\n};\n\nexport type SendUtxosResult = {\n  tx: Transaction;\n  spentOutpoints: string[];\n  payChange?: Utxo;\n};\n\nexport type SendUtxosConfig = {\n  utxos: Utxo[];\n  paymentPk: PrivateKey;\n  payments: Payment[];\n  satsPerKb?: number;\n  changeAddress?: string;\n};\n\nexport interface TransferOrdTokensResult extends SendOrdinalsResult {\n  tokenChange?: TokenUtxo;\n}\n\nexport type TransferOrdTokensConfig = {\n  protocol: TokenType;\n  tokenID: string;\n  decimals: number;\n  utxos: Utxo[];\n  inputTokens: TokenUtxo[];\n  distributions: Distribution[];\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  changeAddress?: string;\n  tokenChangeAddress?: string;\n  satsPerKb?: number;\n  metaData?: PreMAP;\n  signer?: LocalSigner | RemoteSigner;\n  additionalPayments?: Payment[];\n  burn?: boolean;\n}\n\nexport type CreateOrdListingsConfig = {\n  utxos: Utxo[];\n  listings: NewListing[];\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey,\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[];\n}\n\nexport type PurchaseOrdListingConfig = {\n  utxos: Utxo[];\n  paymentPk: PrivateKey;\n  listing: ExistingListing;\n  ordAddress: string;\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[],\n  royalties?: Royalty[],\n}\n\nexport type PurchaseOrdTokenListingConfig = {\n  protocol: TokenType;\n  tokenID: string;\n  utxos: Utxo[];\n  paymentPk: PrivateKey;\n  listingUtxo: TokenUtxo;\n  ordAddress: string;\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[],\n}\n\nexport type CancelOrdListingsConfig = {\n  utxos: Utxo[],\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  listingUtxos: Utxo[];\n  additionalPayments?: Payment[];\n  changeAddress?: string;\n  satsPerKb?: number;\n}\n\nexport interface CancelOrdTokenListingsConfig extends CancelOrdListingsConfig {\n  utxos: Utxo[],\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  listingUtxos: TokenUtxo[];\n  additionalPayments: Payment[];\n  changeAddress?: string;\n  satsPerKb?: number;\n  protocol: TokenType,\n  tokenID: string;\n  ordAddress?: string;\n}\n\n/**\n * Configuration object for creating a token listing\n * @typedef {Object} CreateOrdTokenListingsConfig\n * @property {Utxo[]} utxos - Array of payment Utxos\n * @property {TokenUtxo[]} inputTokens - Array of TokenUtxos to be listed\n * @property {NewTokenListing[]} listings - Array of NewTokenListings\n * @property {PrivateKey} paymentPk - Private key of the payment address\n * @property {PrivateKey} ordPk - Private key of the ord address\n * @property {string} tokenChangeAddress - Address to send the token change\n * @property {number} [satsPerKb] - Optional. Satoshis per kilobyte\n * @property {Payment[]} [additionalPayments] - Optional. Array of additional payments\n * @property {TokenType} protocol - Token protocol\n * @property {string} tokenID - Token id\n * @property {number} decimals - Number of decimal places for this token.\n */\nexport interface CreateOrdTokenListingsConfig {\n  utxos: Utxo[];\n  listings: NewTokenListing[];\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey,\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[];\n  protocol: TokenType;\n  tokenID: string;\n  decimals: number;\n  inputTokens: TokenUtxo[];\n  tokenChangeAddress: string;\n}\n\nexport const MAX_TOKEN_SUPPLY = 2n ** 64n - 1n;","export const MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\nexport const DEFAULT_SAT_PER_KB = 10;\nexport const API_HOST = \"https://ordinals.gorillapool.io/api\";","import {\n\tLockingScript,\n\tP2PKH,\n\ttype Script,\n} from \"@bsv/sdk\";\nimport type { Inscription, MAP } from \"../types\";\nimport { toHex } from \"../utils/strings\";\nimport { MAP_PREFIX } from \"../constants\";\n\n/**\n * OrdP2PKH (1Sat Ordinal + Pay To Public Key Hash) class implementing ScriptTemplate.\n *\n * This class provides methods to create an Ordinal with Pay To Public Key Hash locking and unlocking scripts. \n * It extends the standard P2PKH script template and provides a custom lock method.\n */\nexport default class OrdP2PKH extends P2PKH {\n\t/**\n\t * Creates a 1Sat Ordinal + P2PKH locking script for a given address string\n\t *\n\t * @param {string} address - An destination address for the Ordinal.\n\t * @param {Object} [inscription] - Base64 encoded file data and Content type of the file.\n\t * @param {MAP} [metaData] - (optional) MAP Metadata to be included in OP_RETURN.\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\t// unlock method inherits from p2pkh\n\tlock(\n\t\taddress: string,\n    inscription?: Inscription,\n\t\tmetaData?: MAP | undefined,\n\t): Script {\n\t\tlet ordAsm = \"\";\n\t\t// This can be omitted for reinscriptions that just update metadata\n\t\tif (inscription?.dataB64 !== undefined && inscription?.contentType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(inscription.dataB64, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(inscription.contentType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`;\n\t\t}\n\n\t\t// Create ordinal output and inscription in a single output\n\t\tconst lockingScript = new P2PKH().lock(address);\n\t\tlet inscriptionAsm = `${ordAsm ? `${ordAsm} ` : \"\"}${lockingScript.toASM()}`;\n\n\t\t// MAP.app and MAP.type keys are required\n\t\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t\t}\n\n\t\tif (metaData?.app && metaData?.type) {\n\t\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\t\tconst mapCmdValue = toHex(\"SET\");\n\t\t\tinscriptionAsm = `${inscriptionAsm} OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\t\tif (key !== \"cmd\") {\n\t\t\t\t\tinscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\n\t\t\t\t\t\tvalue as string,\n\t\t\t\t\t)}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn LockingScript.fromASM(inscriptionAsm);\n\t}\n}\n","import {\n\ttype Transaction,\n\ttype UnlockingScript,\n\tfromUtxo,\n\ttype TransactionInput,\n\tUtils,\n\tP2PKH,\n  Script,\n} from \"@bsv/sdk\";\nimport { type NftUtxo, TokenType, type TokenUtxo, type Utxo } from \"../types\";\nimport { API_HOST } from \"../constants\";\n\nconst { fromBase58Check } = Utils;\n\n/**\n * Converts a Utxo object with a base64 encoded script to a Utxo object with a hex encoded script\n * @param {Utxo} utxo - Utxo object with base64 encoded script\n * @param {Object} unlockScriptTemplate - Object with sign and estimateLength functions\n * @returns {TransactionInput} Utxo object with hex encoded script\n */\nexport const inputFromB64Utxo = (\n\tutxo: Utxo,\n\tunlockScriptTemplate: {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>;\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>;\n\t},\n): TransactionInput => {\n\tconst input = fromUtxo(\n\t\t{\n\t\t\t...utxo,\n\t\t\tscript: Buffer.from(utxo.script, \"base64\").toString(\"hex\"),\n\t\t},\n\t\tunlockScriptTemplate,\n\t);\n\treturn input;\n};\n\n/**\n * Fetches pay utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<Utxo[]>} Array of pay utxos\n */\nexport const fetchPayUtxos = async (address: string, scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\"): Promise<Utxo[]> => {\n\tconst payUrl = `${API_HOST}/txos/address/${address}/unspent?bsv20=false`;\n\tconsole.log({ payUrl });\n\tconst payRes = await fetch(payUrl);\n\tif (!payRes.ok) {\n\t\tthrow new Error(\"Error fetching pay utxos\");\n\t}\n\tlet payUtxos = await payRes.json();\n\t// exclude all 1 satoshi utxos\n\tpayUtxos = payUtxos.filter((u: { satoshis: number }) => u.satoshis !== 1);\n\n\t// Get pubkey hash from address\n\tconst pubKeyHash = fromBase58Check(address);\n\tconst p2pkhScript = new P2PKH().lock(pubKeyHash.data);\n\tpayUtxos = payUtxos.map((utxo: Partial<Utxo>) => ({\n\t\ttxid: utxo.txid,\n\t\tvout: utxo.vout,\n\t\tsatoshis: utxo.satoshis,\n\t\tscript: scriptEncoding === \"hex\" || scriptEncoding === \"base64\" ? Buffer.from(p2pkhScript.toBinary()).toString(scriptEncoding) : p2pkhScript.toASM(),\n\t}));\n\treturn payUtxos as Utxo[];\n};\n\n/**\n * Fetches NFT utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @param {string} [collectionId] - Optional. Collection id (collection insciprtion origin)\n * @param {number} [limit=10] - Optional. Number of utxos to fetch. Default is 10\n * @param {number} [offset=0] - Optional. Offset for fetching utxos. Default is 0\n * @param {string} [scriptEncoding=\"base64\"] - Optional. Encoding for the script. Default is base64. Options are hex, base64, or asm.\n * @returns {Promise<Utxo[]>} Array of NFT utxos\n */\nexport const fetchNftUtxos = async (\n\taddress: string,\n\tcollectionId?: string,\n\tlimit = 10,\n\toffset = 0,\n  scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\",\n): Promise<NftUtxo[]> => {\n\tlet url = `${API_HOST}/txos/address/${address}/unspent?limit=${limit}&offset=${offset}&`;\n\n\tif (collectionId) {\n\t\tconst query = {\n\t\t\tmap: {\n\t\t\t\tsubTypeData: { collectionId },\n\t\t\t},\n\t\t};\n\t\tconst b64Query = Buffer.from(JSON.stringify(query)).toString(\"base64\");\n\t\turl += `q=${b64Query}`;\n\t}\n\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching NFT utxos for ${address}`);\n\t}\n\n\t// Returns a BSV20Txo but we only need a few fields\n\tlet nftUtxos = await res.json();\n\n\t// Only include 1 satoshi outputs, non listings\n\tnftUtxos = nftUtxos.filter(\n\t\t(u: {\n\t\t\tsatoshis: number;\n\t\t\tdata: { list: { price: number; payout: string } | undefined } | null;\n\t\t}) => u.satoshis === 1 && !u.data?.list,\n\t);\n\n\tconst outpoints = nftUtxos.map(\n\t\t(utxo: { txid: string; vout: number }) => `${utxo.txid}_${utxo.vout}`,\n\t);\n\t// Fetch the scripts up to the limit\n\tconst nftRes = await fetch(`${API_HOST}/txos/outpoints?script=true`, {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t\tbody: JSON.stringify([...outpoints]),\n\t});\n\n\tif (!nftRes.ok) {\n\t\tthrow new Error(`Error fetching NFT scripts for ${address}`);\n\t}\n\n\tconst nfts = (await nftRes.json() || [])\n\n\tnftUtxos = nfts.map(\n\t\t(utxo: {\n\t\t\torigin: { outpoint: string };\n\t\t\tscript: string;\n\t\t\tvout: number;\n\t\t\ttxid: string;\n\t\t}) => {\n      let script = utxo.script;\n      if (scriptEncoding === \"hex\") {\n        script = Buffer.from(script, \"base64\").toString(\"hex\");\n      } else if (scriptEncoding === \"asm\") {\n        script = Script.fromHex(Buffer.from(script, \"base64\").toString(\"hex\")).toASM();\n      }\n\t\t\tconst nftUtxo = {\n\t\t\t\torigin: utxo.origin.outpoint,\n\t\t\t\tscript,\n\t\t\t\tvout: utxo.vout,\n\t\t\t\ttxid: utxo.txid,\n\t\t\t\tsatoshis: 1,\n\t\t\t} as NftUtxo;\n\t\t\tif (collectionId) {\n\t\t\t\tnftUtxo.collectionId = collectionId;\n\t\t\t}\n\t\t\treturn nftUtxo;\n\t\t},\n\t);\n\n\treturn nftUtxos as NftUtxo[];\n};\n\n/**\n * Fetches token utxos from the API\n * @param {TokenType} protocol - Token protocol. Either BSV20 or BSV21\n * @param {string} tokenId - Token id. Ticker for BSV20 and id (mint+deploy inscription origin) for BSV21\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<TokenUtxo[]>} Array of token utxos\n */\nexport const fetchTokenUtxos = async (\n\tprotocol: TokenType,\n\ttokenId: string,\n\taddress: string,\n): Promise<TokenUtxo[]> => {\n\tconst url = `${API_HOST}/bsv20/${address}/${protocol === TokenType.BSV20 ? \"tick\" : \"id\"}/${tokenId}?bsv20=true&listing=false`;\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching ${protocol} utxos`);\n\t}\n\n\t// returns a BSV20Txo but we only need a few fields\n\tlet tokenUtxos = await res.json();\n\n\ttokenUtxos = tokenUtxos.map((utxo: Partial<TokenUtxo>) => ({\n\t\tamt: utxo.amt,\n\t\tscript: utxo.script,\n\t\tvout: utxo.vout,\n\t\ttxid: utxo.txid,\n\t\tid: tokenId,\n\t\tsatoshis: 1,\n\t}));\n\n\treturn tokenUtxos as TokenUtxo[];\n};\n","import type { Transaction } from \"@bsv/sdk\";\nimport { Sigma } from \"sigma-protocol\";\nimport type { LocalSigner, RemoteSigner } from \"./types\";\n\n/**\n * Signs data in the transaction with Sigma protocol\n * @param {Transaction} tx - Transaction to sign\n * @param {LocalSigner | RemoteSigner} signer - Local or remote signer (used for data signature)\n * @returns {Transaction} Transaction with signed data\n */\nexport const signData = async (\n\ttx: Transaction,\n\tsigner: LocalSigner | RemoteSigner,\n): Promise<Transaction> => {\n\t// Sign tx if idKey or remote signer like starfish/tokenpass\n\tconst idKey = (signer as LocalSigner)?.idKey;\n\tconst keyHost = (signer as RemoteSigner)?.keyHost;\n\n\tif (idKey) {\n\t\tconst sigma = new Sigma(tx);\n\t\tconst { signedTx } = sigma.sign(idKey);\n\t\treturn signedTx;\n\t}\n\tif (keyHost) {\n\t\tconst authToken = (signer as RemoteSigner)?.authToken;\n\t\tconst sigma = new Sigma(tx);\n\t\ttry {\n\t\t\tconst { signedTx } = await sigma.remoteSign(keyHost, authToken);\n\t\t\treturn signedTx;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthrow new Error(`Remote signing to ${keyHost} failed`);\n\t\t}\n\t}\n\tthrow new Error(\"Signer must be a LocalSigner or RemoteSigner\");\n};\n","import type { MAP, PreMAP } from \"../types\";\n\nconst stringifyMetaData = (metaData?: PreMAP): MAP | undefined => {\n  if (!metaData) return undefined;\n\tconst result: MAP = {\n\t\tapp: metaData.app,\n\t\ttype: metaData.type,\n\t};\n\n\tfor (const [key, value] of Object.entries(metaData)) {\n\t\tif (value !== undefined) {\n\t\t\tif (typeof value === \"string\") {\n\t\t\t\tresult[key] = value;\n\t\t\t} else if (Array.isArray(value) || typeof value === \"object\") {\n\t\t\t\tresult[key] = JSON.stringify(value);\n\t\t\t} else {\n\t\t\t\tresult[key] = String(value);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\nexport default stringifyMetaData;\n","import { Transaction, SatoshisPerKilobyte, P2PKH, Script, Utils } from \"@bsv/sdk\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n\tUtxo,\n\tCreateOrdinalsConfig,\n\tCreateOrdinalsResult,\n\tCreateOrdinalsCollectionConfig,\n\tCreateOrdinalsCollectionItemConfig,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Creates a transaction with inscription outputs\n * @param {CreateOrdinalsConfig | CreateOrdinalsCollectionConfig | CreateOrdinalsCollectionItemConfig} config - Configuration object for creating ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {string} config.changeAddress - Optional. Address to send change to. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Local or remote signer (used for data signature)\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<CreateOrdinalsResult>} Transaction with inscription outputs\n */\nexport const createOrdinals = async (\n\tconfig:\n\t\t| CreateOrdinalsConfig\n\t\t| CreateOrdinalsCollectionConfig\n\t\t| CreateOrdinalsCollectionItemConfig,\n): Promise<CreateOrdinalsResult> => {\n\tconst {\n\t\tutxos,\n\t\tdestinations,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t} = config;\n\t\n\t// Warn if creating many inscriptions at once\n\tif (destinations.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Outputs\n\t// Add inscription outputs\n\tfor (const destination of destinations) {\n\t\tif (!destination.inscription) {\n\t\t\tthrow new Error(\"Inscription is required for all destinations\");\n\t\t}\n\n\t\t// remove any undefined fields from metadata\n\t\tif (metaData) {\n\t\t\tfor(const key of Object.keys(metaData)) {\n\t\t\t\tif (metaData[key] === undefined) {\n\t\t\t\t\tdelete metaData[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription,\n\t\t\t\tstringifyMetaData(metaData),\n\t\t\t),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\tlet payChange: Utxo | undefined;\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\n\tif(signer) {\n\t\tconst utxo = utxos.pop() as Utxo\n\t\ttx.addInput(inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t)));\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\ttx = await signData(tx, signer);\n\t}\n\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\tScript,\n\ttype TransactionOutput,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type { SendOrdinalsResult, SendOrdinalsConfig, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Sends ordinals to the given destinations\n * @param {SendOrdinalsConfig} config - Configuration object for sending ordinals\n * @param {Utxo[]} config.paymentUtxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.ordinals - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {string} config.changeAddress - Optional. Address to send change to, if any. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @param {boolean} config.enforceUniformSend - Optional. Default: true. Enforce that the number of destinations matches the number of ordinals being sent. Sending ordinals requires a 1:1 mapping of destinations to ordinals. This is only used for sub-protocols like BSV21 that manage tokens without sending the inscriptions directly.\n * @returns {Promise<SendOrdinalsResult>} Transaction, spent outpoints, and change vout\n */\nexport const sendOrdinals = async (\n\tconfig: SendOrdinalsConfig,\n): Promise<SendOrdinalsResult> => {\n\tif (!config.satsPerKb) {\n\t\tconfig.satsPerKb = DEFAULT_SAT_PER_KB;\n\t}\n\tif (!config.additionalPayments) {\n\t\tconfig.additionalPayments = [];\n\t}\n\tif (config.enforceUniformSend === undefined) {\n\t\tconfig.enforceUniformSend = true;\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(config.satsPerKb);\n\tlet tx = new Transaction();\n\tconst spentOutpoints: string[] = [];\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of config.ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(\n\t\t\tordUtxo,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tconfig.ordPk, \n\t\t\t\t\"all\",\n\t\t\t\ttrue, \n\t\t\t\tordUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(ordUtxo.script, 'base64'))\n\t\t\t),\n\t\t);\n\t\tspentOutpoints.push(`${ordUtxo.txid}_${ordUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// check that ordinals coming in matches ordinals going out if supplied\n\tif (\n\t\tconfig.enforceUniformSend &&\n\t\tconfig.destinations.length !== config.ordinals.length\n\t) {\n\t\tthrow new Error(\n\t\t\t\"Number of destinations must match number of ordinals being sent\",\n\t\t);\n\t}\n\n\t// Add ordinal outputs\n\tfor (const destination of config.destinations) {\n\t\tlet s: Script;\n\t\tif (\n\t\t\tdestination.inscription?.dataB64 &&\n\t\t\tdestination.inscription?.contentType\n\t\t) {\n\t\t\ts = new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription,\n\t\t\t\tstringifyMetaData(config.metaData),\n\t\t\t);\n\t\t} else {\n\t\t\ts = new P2PKH().lock(destination.address);\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: s,\n\t\t});\n\t}\n\n  \n\t// Add additional payments if any\n\tfor (const p of config.additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n  // add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = config.changeAddress || config.paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of config.paymentUtxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tconfig.paymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\tspentOutpoints.push(`${utxo.txid}_${utxo.vout}`);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (totalSatsIn < totalSatsOut) {\n\t\tthrow new Error(\"Not enough ordinals to send\");\n\t}\n\n\tif (config.signer) {\n\t\ttx = await signData(tx, config.signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChange,\n\t};\n};\n","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype TransactionOutput,\n\tUtils,\n\tScript,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type { SendUtxosConfig, SendUtxosResult, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Sends utxos to the given destination\n * @param {SendUtxosConfig} config - Configuration object for sending utxos\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {Payment[]} config.payments - Array of payments with addresses and amounts\n * @param {number} [config.satsPerKb] - Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {string} [config.changeAddress] - Address to send change to. If not provided, defaults to paymentPk address\n * @returns {Promise<SendUtxosResult>} Transaction with utxo outputs\n */\nexport const sendUtxos = async (\n\tconfig: SendUtxosConfig,\n): Promise<SendUtxosResult> => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tpayments,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tchangeAddress = paymentPk.toAddress().toString(),\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\t// Outputs\n\tfor (const payment of payments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new P2PKH().lock(payment.to),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + (out.satoshis || 0),\n\t\t0,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\ttx.addInput(input);\n\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + fee) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + fee) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to send. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChange: Utxo | undefined;\n\tif (totalSatsIn > totalSatsOut + fee) {\n\t\t// Change\n\t\tconst changeScript = new P2PKH().lock(changeAddress);\n\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t} else if (totalSatsIn < totalSatsOut + fee) {\n\t\tconsole.log(\"No change needed\");\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\t\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import { P2PKH, SatoshisPerKilobyte, Script, Transaction, Utils } from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport {\n  TokenType,\n  type TokenUtxo,\n  type TransferBSV20Inscription,\n  type TransferBSV21Inscription,\n  type TransferOrdTokensConfig,\n  type TransferOrdTokensResult,\n  type TransferTokenInscription,\n  type Utxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Transfer tokens to a destination\n * @param {TransferOrdTokensConfig} config - Configuration object for transferring tokens\n * @param {TokenType} config.protocol - Token protocol. Must be TokenType.BSV20 or TokenType.BSV21\n * @param {string} config.tokenID - Token ID. Either the tick or id value depending on the protocol\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {TokenUtxo[]} config.inputTokens - Token utxos to spend\n * @param {Distribution[]} config.distributions - Array of destinations with addresses and amounts\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {string} config.changeAddress - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {string} config.tokenChangeAddress - Optional. Address to send token change to, if any. If not provided, defaults to ordPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @param {decimals} config.decimals - Number of decimal places for the token\n * @param {burn} config.burn - Optional. Set to true to burn the tokens.\n * @returns {Promise<TransferOrdTokensResult>} Transaction with token transfer outputs\n */\nexport const transferOrdTokens = async (config: TransferOrdTokensConfig): Promise<TransferOrdTokensResult> => {\n  const {\n    protocol,\n    tokenID,\n    utxos,\n    inputTokens,\n    distributions,\n    paymentPk,\n    ordPk,\n    changeAddress,\n    tokenChangeAddress,\n    satsPerKb = DEFAULT_SAT_PER_KB,\n    metaData,\n    signer,\n    decimals,\n    additionalPayments = [],\n    burn = false\n  } = config;\n\n  // calculate change amount\n  let changeAmt = 0n;\n  let totalAmtIn = 0n;\n  let totalAmtOut = 0n;\n\n  // Ensure these inputs are for the expected token\n  if (!inputTokens.every((token) => token.id === tokenID)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n  const modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n  const tx = new Transaction();\n\n  for (const token of inputTokens) {\n    const inputScriptBinary = Utils.toArray(token.script, \"base64\");\n    const inputScript = Script.fromBinary(inputScriptBinary);\n    tx.addInput(inputFromB64Utxo(\n      token,\n      new OrdP2PKH().unlock(\n        ordPk,\n        \"all\",\n        true,\n        token.satoshis,\n        inputScript,\n      ),\n    ));\n\n    totalAmtIn += BigInt(token.amt);\n  }\n\n  // build destination inscriptions\n  for (const dest of distributions) {\n    const bigAmt = BigInt(dest.amt * 10 ** decimals);\n    const transferInscription: TransferTokenInscription = {\n      p: \"bsv-20\",\n      op: burn ? \"burn\" : \"transfer\",\n      amt: bigAmt.toString(),\n    }\n    if (decimals > 0) {\n      transferInscription.amt = (BigInt(dest.amt) * 10n ** BigInt(decimals)).toString();\n    }\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n    if (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n    } else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n    tx.addOutput({\n      satoshis: 1,\n      lockingScript: new OrdP2PKH().lock(\n        dest.address,\n        {\n          dataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n          contentType: \"application/bsv-20\",\n        },\n      ),\n    });\n    totalAmtOut += bigAmt;\n  };\n  changeAmt = totalAmtIn - totalAmtOut;\n\n  let tokenChange: TokenUtxo | undefined;\n  // check that you have enough tokens to send and return change\n  if (changeAmt < 0n) {\n    throw new Error(\"Not enough tokens to send\");\n  }\n  if (changeAmt > 0n) {\n    const transferInscription: TransferTokenInscription = {\n      p: \"bsv-20\",\n      op: \"transfer\",\n      amt: changeAmt.toString(),\n    };\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n    if (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n    } else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n    const lockingScript = new OrdP2PKH().lock(\n      tokenChangeAddress || ordPk.toAddress().toString(),\n      {\n        dataB64: Buffer.from(JSON.stringify(inscription)).toString('base64'),\n        contentType: \"application/bsv-20\",\n      }\n    );\n    const vout = tx.outputs.length;\n    tx.addOutput({ lockingScript, satoshis: 1 });\n    tokenChange = {\n      id: tokenID,\n      satoshis: 1,\n      script: Buffer.from(lockingScript.toBinary()).toString(\"base64\"),\n      txid: \"\",\n      vout,\n      amt: changeAmt.toString(),\n    };\n  }\n\n  // Add additional payments if any\n  for (const p of additionalPayments) {\n    tx.addOutput({\n      satoshis: p.amount,\n      lockingScript: new P2PKH().lock(p.to),\n    });\n  }\n\n  // add change to the outputs\n  let payChange: Utxo | undefined;\n\n  const change = changeAddress || paymentPk.toAddress().toString();\n  const changeScript = new P2PKH().lock(change);\n  const changeOut = {\n    lockingScript: changeScript,\n    change: true,\n  };\n  tx.addOutput(changeOut);\n\n  let totalSatsIn = 0n;\n  const totalSatsOut = tx.outputs.reduce(\n    (total, out) => total + BigInt(out.satoshis || 0),\n    0n,\n  );\n  let fee = 0;\n  for (const utxo of utxos) {\n    const input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n      paymentPk,\n      \"all\",\n      true,\n      utxo.satoshis,\n      Script.fromBinary(Utils.toArray(utxo.script, 'base64'))\n    ));\n\n    tx.addInput(input);\n    // stop adding inputs if the total amount is enough\n    totalSatsIn += BigInt(utxo.satoshis);\n    fee = await modelOrFee.computeFee(tx);\n\n    if (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n      break;\n    }\n  }\n\n  // make sure we have enough\n  if (totalSatsIn < totalSatsOut + BigInt(fee)) {\n    throw new Error(\n      `Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n    );\n  }\n\n  // estimate the cost of the transaction and assign change value\n  await tx.fee(modelOrFee);\n\n  // Sign the transaction\n  await tx.sign();\n\n  const txid = tx.id(\"hex\") as string;\n  if (tokenChange) {\n    tokenChange.txid = txid;\n  }\n  // check for change\n  const payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n  if (payChangeOutIdx !== -1) {\n    const changeOutput = tx.outputs[payChangeOutIdx];\n    payChange = {\n      satoshis: changeOutput.satoshis as number,\n      txid,\n      vout: payChangeOutIdx,\n      script: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n        \"base64\",\n      ),\n    };\n  }\n\n  if (payChange) {\n    const changeOutput = tx.outputs[tx.outputs.length - 1];\n    payChange.satoshis = changeOutput.satoshis as number;\n    payChange.txid = tx.id(\"hex\") as string;\n  }\n\n  return {\n    tx,\n    spentOutpoints: tx.inputs.map(\n      (i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n    ),\n    payChange,\n    tokenChange,\n  };\n};","import {\n\tBigNumber,\n\ttype LockingScript,\n\tOP,\n\tP2PKH,\n\ttype PrivateKey,\n\tScript,\n\ttype Transaction,\n\tTransactionSignature,\n\tUnlockingScript,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { toHex } from \"../utils/strings\";\nimport type { Inscription } from \"../types\";\n\nexport const oLockPrefix =\n\t\"2097dfd76851bf465e8f715593b217714858bbe9570ff3bd5e33840a34e20ff0262102ba79df5f8ae7604a9830f03c7933028186aede0675a16f025dc4f8be8eec0382201008ce7480da41702918d1ec8e6849ba32b4d65b1e40dc669c31a1e6306b266c0000\";\nexport const oLockSuffix =\n\t\"615179547a75537a537a537a0079537a75527a527a7575615579008763567901c161517957795779210ac407f0e4bd44bfc207355a778b046225a7068fc59ee7eda43ad905aadbffc800206c266b30e6a1319c66dc401e5bd6b432ba49688eecd118297041da8074ce081059795679615679aa0079610079517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01007e81517a75615779567956795679567961537956795479577995939521414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff00517951796151795179970079009f63007952799367007968517a75517a75517a7561527a75517a517951795296a0630079527994527a75517a6853798277527982775379012080517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01205279947f7754537993527993013051797e527e54797e58797e527e53797e52797e57797e0079517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a756100795779ac517a75517a75517a75517a75517a75517a75517a75517a75517a7561517a75517a756169587951797e58797eaa577961007982775179517958947f7551790128947f77517a75517a75618777777777777777777767557951876351795779a9876957795779ac777777777777777767006868\";\n\n/**\n * OrdLock class implementing ScriptTemplate.\n *\n * This class provides methods for interacting with OrdinalLock contract \n */\nexport default class OrdLock {\n\t/**\n\t * Creates a 1Sat Ordinal Lock script\n\t *\n\t * @param {string} ordAddress - An address which can cancel listing.\n\t * @param {string} payAddress - Address which is paid on purchase\n\t * @param {number} price - Listing price in satoshis\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\tlock(\n\t\tordAddress: string,\n\t\tpayAddress: string,\n\t\tprice: number,\n\t\tinscription?: Inscription,\n\t): Script {\n\t\tconst cancelPkh = Utils.fromBase58Check(ordAddress).data as number[];\n\t\tconst payPkh = Utils.fromBase58Check(payAddress).data as number[];\n\n\t\tlet script = new Script()\n\t\tif (inscription?.dataB64 !== undefined && inscription?.contentType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(inscription.dataB64, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(inscription.contentType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tscript = Script.fromASM(`OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`);\n\t\t}\n\n\t\treturn script.writeScript(Script.fromHex(oLockPrefix))\n\t\t\t.writeBin(cancelPkh)\n\t\t\t.writeBin(OrdLock.buildOutput(price, new P2PKH().lock(payPkh).toBinary()))\n\t\t\t.writeScript(Script.fromHex(oLockSuffix))\n\t}\n\n\tcancelListing(\n\t\tprivateKey: PrivateKey,\n\t\tsignOutputs: 'all' | 'none' | 'single' = 'all',\n\t\tanyoneCanPay = false,\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: () => Promise<number>\n\t} {\n\t\tconst p2pkh = new P2PKH().unlock(privateKey, signOutputs, anyoneCanPay, sourceSatoshis, lockingScript)\n\t\treturn {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await p2pkh.sign(tx, inputIndex)).writeOpCode(OP.OP_1)\n\t\t\t},\n\t\t\testimateLength: async () => {\n\t\t\t\treturn 107\n\t\t\t}\n\t\t}\n\t}\n\n\tpurchaseListing(\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>\n\t} {\n\t\tconst purchase = {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\tif (tx.outputs.length < 2) {\n\t\t\t\t\tthrow new Error(\"Malformed transaction\")\n\t\t\t\t}\n\t\t\t\tconst script = new UnlockingScript()\n\t\t\t\t\t.writeBin(OrdLock.buildOutput(\n\t\t\t\t\t\ttx.outputs[0].satoshis || 0,\n\t\t\t\t\t\ttx.outputs[0].lockingScript.toBinary()\n\t\t\t\t\t))\n\t\t\t\tif (tx.outputs.length > 2) {\n\t\t\t\t\tconst writer = new Utils.Writer()\n\t\t\t\t\tfor (const output of tx.outputs.slice(2)) {\n\t\t\t\t\t\twriter.write(OrdLock.buildOutput(output.satoshis || 0, output.lockingScript.toBinary()))\n\t\t\t\t\t}\n\t\t\t\t\tscript.writeBin(writer.toArray())\n\t\t\t\t} else {\n\t\t\t\t\tscript.writeOpCode(OP.OP_0)\n\t\t\t\t}\n\n\t\t\t\tconst input = tx.inputs[inputIndex]\n\t\t\t\tlet sourceSats = sourceSatoshis as number\n\t\t\t\tif (!sourceSats && input.sourceTransaction) {\n\t\t\t\t\tsourceSats = input.sourceTransaction.outputs[input.sourceOutputIndex].satoshis as number\n\t\t\t\t} else if (!sourceSatoshis) {\n\t\t\t\t\tthrow new Error(\"sourceTransaction or sourceSatoshis is required\")\n\t\t\t\t}\n\n\t\t\t\tconst sourceTXID = (input.sourceTXID || input.sourceTransaction?.id('hex')) as string\n\t\t\t\tlet subscript = lockingScript as LockingScript\n\t\t\t\tif (!subscript) {\n\t\t\t\t\tsubscript = input.sourceTransaction?.outputs[input.sourceOutputIndex].lockingScript as LockingScript\n\t\t\t\t}\n\t\t\t\tconst preimage = TransactionSignature.format({\n\t\t\t\t\tsourceTXID,\n\t\t\t\t\tsourceOutputIndex: input.sourceOutputIndex,\n\t\t\t\t\tsourceSatoshis: sourceSats,\n\t\t\t\t\ttransactionVersion: tx.version,\n\t\t\t\t\totherInputs: [],\n\t\t\t\t\tinputIndex,\n\t\t\t\t\toutputs: tx.outputs,\n\t\t\t\t\tinputSequence: input.sequence,\n\t\t\t\t\tsubscript,\n\t\t\t\t\tlockTime: tx.lockTime,\n\t\t\t\t\tscope: TransactionSignature.SIGHASH_ALL |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_ANYONECANPAY |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_FORKID\n\t\t\t\t});\n\n\t\t\t\treturn script.writeBin(preimage).writeOpCode(OP.OP_0)\n\t\t\t},\n\t\t\testimateLength: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await purchase.sign(tx, inputIndex)).toBinary().length\n\t\t\t}\n\t\t}\n\t\treturn purchase\n\t}\n\n\tstatic buildOutput(satoshis: number, script: number[]): number[] {\n\t\tconst writer = new Utils.Writer()\n\t\twriter.writeUInt64LEBn(new BigNumber(satoshis))\n\t\twriter.writeVarIntNum(script.length)\n\t\twriter.write(script)\n\t\treturn writer.toArray()\n\t}\n}\n","import {\n  P2PKH,\n  SatoshisPerKilobyte,\n  Script,\n  Transaction,\n  Utils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport {\n  TokenType,\n  type CreateOrdListingsConfig,\n  type CreateOrdTokenListingsConfig,\n  type TokenUtxo,\n  type TransferBSV20Inscription,\n  type TransferBSV21Inscription,\n  type TransferTokenInscription,\n  type Utxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nconst { toArray } = Utils;\n\n// TODO: Handle royalty\nexport const createOrdListings = async (config: CreateOrdListingsConfig) => {\n  const {\n    utxos,\n    listings,\n    paymentPk,\n    ordPk,\n    changeAddress,\n    satsPerKb = DEFAULT_SAT_PER_KB,\n    additionalPayments = [],\n  } = config;\n\n  const modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n  const tx = new Transaction();\n\n  // Warn if creating many inscriptions at once\n  if (listings.length > 100) {\n    console.warn(\n      \"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n    );\n  }\n\n  // Outputs\n  // Add listing outputs\n  for (const listing of listings) {\n    tx.addOutput({\n      satoshis: 1,\n      lockingScript: new OrdLock().lock(\n        listing.ordAddress,\n        listing.payAddress,\n        listing.price,\n      ),\n    });\n    const inputScriptBinary = toArray(listing.listingUtxo.script, \"base64\");\n    const inputScript = Script.fromBinary(inputScriptBinary);\n    tx.addInput(inputFromB64Utxo(\n      listing.listingUtxo,\n      new OrdP2PKH().unlock(\n        ordPk,\n        \"all\",\n        true,\n        listing.listingUtxo.satoshis,\n        inputScript,\n      ),\n    ));\n  }\n\n  // Add additional payments if any\n  for (const p of additionalPayments) {\n    tx.addOutput({\n      satoshis: p.amount,\n      lockingScript: new P2PKH().lock(p.to),\n    });\n  }\n\n  // Check if change is needed\n  let payChange: Utxo | undefined;\n  const changeScript = new P2PKH().lock(\n    changeAddress || paymentPk.toAddress().toString(),\n  );\n  const changeOutput = {\n    lockingScript: changeScript,\n    change: true,\n  };\n  tx.addOutput(changeOutput);\n\n  let totalSatsIn = 0n;\n  const totalSatsOut = tx.outputs.reduce(\n    (total, out) => total + BigInt(out.satoshis || 0),\n    0n,\n  );\n  let fee = 0;\n  for (const utxo of utxos) {\n    const input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n      paymentPk,\n      \"all\",\n      true,\n      utxo.satoshis,\n      Script.fromBinary(Utils.toArray(utxo.script, 'base64'))\n    ));\n\n    tx.addInput(input);\n    // stop adding inputs if the total amount is enough\n    totalSatsIn += BigInt(utxo.satoshis);\n    fee = await modelOrFee.computeFee(tx);\n\n    if (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n      break;\n    }\n  }\n\n  // make sure we have enough\n  if (totalSatsIn < totalSatsOut + BigInt(fee)) {\n    throw new Error(\n      `Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n    );\n  }\n\n  // Calculate fee\n  await tx.fee(modelOrFee);\n\n  // Sign the transaction\n  await tx.sign();\n\n  // check for change\n  const payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n  if (payChangeOutIdx !== -1) {\n    const changeOutput = tx.outputs[payChangeOutIdx];\n    payChange = {\n      satoshis: changeOutput.satoshis as number,\n      txid: tx.id(\"hex\") as string,\n      vout: payChangeOutIdx,\n      script: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n        \"base64\",\n      ),\n    };\n  }\n\n  if (payChange) {\n    const changeOutput = tx.outputs[tx.outputs.length - 1];\n    payChange.satoshis = changeOutput.satoshis as number;\n    payChange.txid = tx.id(\"hex\") as string;\n  }\n\n  return {\n    tx,\n    spentOutpoints: tx.inputs.map(\n      (i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n    ),\n    payChange,\n  };\n};\n\nexport const createOrdTokenListings = async (\n  config: CreateOrdTokenListingsConfig,\n) => {\n  const {\n    utxos,\n    protocol,\n    tokenID,\n    ordPk,\n    paymentPk,\n    additionalPayments = [],\n    changeAddress,\n    tokenChangeAddress,\n    inputTokens,\n    listings,\n    decimals,\n    satsPerKb = DEFAULT_SAT_PER_KB,\n  } = config;\n\n\n  // Warn if creating many inscriptions at once\n  if (listings.length > 100) {\n    console.warn(\n      \"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n    );\n  }\n\n  // Ensure these inputs are for the expected token\n  if (!inputTokens.every((token) => token.id === tokenID)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n  // calculate change amount\n  let changeAmt = 0n;\n  let totalAmtIn = 0n;\n  let totalAmtOut = 0n;\n\n  // Ensure these inputs are for the expected token\n  if (!inputTokens.every((token) => token.id === tokenID)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n  const modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n  const tx = new Transaction();\n  // Outputs\n  // Add listing outputs\n  for (const listing of listings) {\n    // NewTokenListing is not adjusted for decimals\n    const bigAmt = BigInt(listing.amt * 10 ** decimals);\n    const transferInscription: TransferTokenInscription = {\n      p: \"bsv-20\",\n      op: \"transfer\",\n      amt: bigAmt.toString(),\n    };\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n    if (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n    } else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n    tx.addOutput({\n      satoshis: 1,\n      lockingScript: new OrdLock().lock(\n        listing.ordAddress,\n        listing.payAddress,\n        listing.price,\n        {\n          dataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n          contentType: \"application/bsv-20\",\n        },\n      ),\n    });\n    totalAmtOut += bigAmt;\n  }\n\n  // Input tokens are already adjusted for decimals\n  for (const token of inputTokens) {\n    tx.addInput(inputFromB64Utxo(\n      token,\n      new OrdP2PKH().unlock(\n        ordPk,\n        \"all\",\n        true,\n        token.satoshis,\n        Script.fromBinary(toArray(token.script, \"base64\")),\n      ),\n    ));\n\n    totalAmtIn += BigInt(token.amt);\n  }\n  changeAmt = totalAmtIn - totalAmtOut;\n\n  let tokenChange: TokenUtxo | undefined;\n  // check that you have enough tokens to send and return change\n  if (changeAmt < 0n) {\n    throw new Error(\"Not enough tokens to send\");\n  }\n  if (changeAmt > 0n) {\n    const transferInscription: TransferTokenInscription = {\n      p: \"bsv-20\",\n      op: \"transfer\",\n      amt: changeAmt.toString(),\n    };\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n    if (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n    } else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n    const lockingScript = new OrdP2PKH().lock(tokenChangeAddress, {\n      dataB64: Buffer.from(JSON.stringify(inscription)).toString('base64'),\n      contentType: \"application/bsv-20\",\n    });\n    const vout = tx.outputs.length;\n    tx.addOutput({ lockingScript, satoshis: 1 });\n    tokenChange = {\n      id: tokenID,\n      satoshis: 1,\n      script: Buffer.from(lockingScript.toBinary()).toString(\"base64\"),\n      txid: \"\",\n      vout,\n      amt: changeAmt.toString(),\n    };\n  }\n\n  // Add additional payments if any\n  for (const p of additionalPayments) {\n    tx.addOutput({\n      satoshis: p.amount,\n      lockingScript: new P2PKH().lock(p.to),\n    });\n  }\n\n  // add change to the outputs\n  let payChange: Utxo | undefined;\n\n  const change = changeAddress || paymentPk.toAddress().toString();\n  const changeScript = new P2PKH().lock(change);\n  const changeOut = {\n    lockingScript: changeScript,\n    change: true,\n  };\n  tx.addOutput(changeOut);\n\n  let totalSatsIn = 0n;\n  const totalSatsOut = tx.outputs.reduce(\n    (total, out) => total + BigInt(out.satoshis || 0),\n    0n,\n  );\n  let fee = 0;\n  for (const utxo of utxos) {\n    const input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n      paymentPk,\n      \"all\",\n      true,\n      utxo.satoshis,\n      Script.fromBinary(Utils.toArray(utxo.script, 'base64'))\n    ));\n\n    tx.addInput(input);\n    // stop adding inputs if the total amount is enough\n    totalSatsIn += BigInt(utxo.satoshis);\n    fee = await modelOrFee.computeFee(tx);\n\n    if (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n      break;\n    }\n  }\n\n  // make sure we have enough\n  if (totalSatsIn < totalSatsOut + BigInt(fee)) {\n    throw new Error(\n      `Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n    );\n  }\n\n  // estimate the cost of the transaction and assign change value\n  await tx.fee(modelOrFee);\n\n  // Sign the transaction\n  await tx.sign();\n\n  const txid = tx.id(\"hex\") as string;\n  if (tokenChange) {\n    tokenChange.txid = txid;\n  }\n  // check for change\n  const payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n  if (payChangeOutIdx !== -1) {\n    const changeOutput = tx.outputs[payChangeOutIdx];\n    payChange = {\n      satoshis: changeOutput.satoshis as number,\n      txid,\n      vout: payChangeOutIdx,\n      script: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n        \"base64\",\n      ),\n    };\n  }\n\n  if (payChange) {\n    const changeOutput = tx.outputs[tx.outputs.length - 1];\n    payChange.satoshis = changeOutput.satoshis as number;\n    payChange.txid = tx.id(\"hex\") as string;\n  }\n\n  return {\n    tx,\n    spentOutpoints: tx.inputs.map(\n      (i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n    ),\n    payChange,\n    tokenChange,\n  };\n};\n","import { P2PKH, SatoshisPerKilobyte, Script, Transaction, Utils } from \"@bsv/sdk\";\nimport {\n\tTokenType,\n\ttype TokenUtxo,\n\ttype CancelOrdListingsConfig,\n\ttype CancelOrdTokenListingsConfig,\n\ttype Destination,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\n\nexport const cancelOrdListings = async (config: CancelOrdListingsConfig) => {\n\tconst {\n\t\tutxos,\n\t\tlistingUtxos,\n\t\tordPk,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tadditionalPayments = [],\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\n\t// Warn if creating many inscriptions at once\n\tif (listingUtxos.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\t\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinals we're cancelling\n\tfor (const listingUtxo of listingUtxos) {\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().cancelListing(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlistingUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, 'base64'))\n\t\t\t)\n\t\t));\n\t\t// Add cancel outputs returning listed ordinals\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new P2PKH().lock(ordPk.toAddress().toString()),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo, \n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpaymentPk, \n\t\t\t\t\"all\",\n\t\t\t\ttrue, \n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t\t)\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\nexport const cancelOrdTokenListings = async (\n\tconfig: CancelOrdTokenListingsConfig,\n) => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tadditionalPayments,\n\t\tlistingUtxos,\n\t\tutxos,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\t// calculate change amount\n\tlet totalAmtIn = 0;\n\n\tif (listingUtxos.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Ensure these inputs are for the expected token\n\tif (!listingUtxos.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinals we're cancelling\n\tfor (const listingUtxo of listingUtxos) {\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().cancelListing(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlistingUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, 'base64'))\n\t\t\t)\n\t\t));\n\t\ttotalAmtIn += Number.parseInt(listingUtxo.amt);\n\t}\n\n\tconst transferInscription: TransferTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"transfer\",\n\t\tamt: totalAmtIn.toString(),\n\t};\n\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\tif (protocol === TokenType.BSV20) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\ttick: tokenID,\n\t\t} as TransferBSV20Inscription;\n\t} else if (protocol === TokenType.BSV21) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\tid: tokenID,\n\t\t} as TransferBSV21Inscription;\n\t} else {\n\t\tthrow new Error(\"Invalid protocol\");\n\t}\n\n\tconst destination: Destination = {\n\t\taddress: ordAddress || ordPk.toAddress().toString(),\n\t\tinscription: {\n\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t},\n\t};\n\n  const lockingScript = new OrdP2PKH().lock(\n    destination.address,\n    destination.inscription\n  );\n\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript,\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n  const tokenChange: TokenUtxo = {\n    amt: totalAmtIn.toString(),\n    script: Buffer.from(lockingScript.toHex(), 'hex').toString('base64'),\n    txid: tx.id(\"hex\") as string,\n    vout: 0,\n    id: tokenID,\n    satoshis: 1\n  };\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n    tokenChange\n\t};\n};","import { PaymailClient } from \"@bsv/paymail\";\nimport { LockingScript } from \"@bsv/sdk\";\n\nconst client = new PaymailClient();\n\nexport const resolvePaymail = async (paymailAddress: string, amtToReceive: number): Promise<LockingScript> => {\n  const destinationTx = await client.getP2pPaymentDestination(paymailAddress, amtToReceive);\n  // TODO: we are assuming only one output but in reality it can be many\n  return destinationTx.outputs[0].script as LockingScript;\n}","import {\n  LockingScript,\n  P2PKH,\n  SatoshisPerKilobyte,\n  Script,\n  Transaction,\n  Utils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport {\n  RoytaltyType,\n  TokenType,\n  type PurchaseOrdListingConfig,\n  type PurchaseOrdTokenListingConfig,\n  type TransferBSV20Inscription,\n  type TransferBSV21Inscription,\n  type TransferTokenInscription,\n  type Utxo,\n} from \"./types\";\nimport { resolvePaymail } from \"./utils/paymail\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\nexport const purchaseOrdListing = async (config: PurchaseOrdListingConfig) => {\n  const {\n    utxos,\n    paymentPk,\n    listing,\n    ordAddress,\n    changeAddress,\n    additionalPayments = [],\n    satsPerKb = DEFAULT_SAT_PER_KB,\n    royalties = [],\n  } = config;\n\n  const modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n  const tx = new Transaction();\n\n  // Inputs\n  // Add the locked ordinal we're purchasing\n  tx.addInput(\n    inputFromB64Utxo(\n      listing.listingUtxo,\n      new OrdLock().purchaseListing(\n        1,\n        Script.fromBinary(Utils.toArray(listing.listingUtxo.script, \"base64\")),\n      ),\n    ),\n  );\n\n  // Outputs\n  // Add the purchased output\n  tx.addOutput({\n    satoshis: 1,\n    lockingScript: new P2PKH().lock(ordAddress),\n  });\n\n  // add the payment output\n  const reader = new Utils.Reader(Utils.toArray(listing.payout, \"base64\"));\n  const satoshis = reader.readUInt64LEBn().toNumber();\n  const scriptLength = reader.readVarIntNum();\n  const scriptBin = reader.read(scriptLength);\n  const lockingScript = LockingScript.fromBinary(scriptBin);\n  tx.addOutput({\n    satoshis,\n    lockingScript,\n  });\n\n  // Add additional payments if any\n  for (const p of additionalPayments) {\n    tx.addOutput({\n      satoshis: p.amount,\n      lockingScript: new P2PKH().lock(p.to),\n    });\n  }\n\n  // Add any royalties\n  for (const r of royalties) {\n    let lockingScript: LockingScript | undefined;\n    const royaltySats = Math.floor(Number(r.percentage) * satoshis);\n\n    switch (r.type as RoytaltyType) {\n      case RoytaltyType.Paymail:\n        // resolve paymail address\n        lockingScript = await resolvePaymail(r.destination, royaltySats);\n        break;\n      case RoytaltyType.Script:\n        lockingScript = Script.fromBinary(Utils.toArray(r.destination, \"base64\"));\n        break;\n      case RoytaltyType.Address:\n        lockingScript = new P2PKH().lock(r.destination);\n        break;\n      default:\n        throw new Error(\"Invalid royalty type\");\n    }\n    if (!lockingScript) {\n      throw new Error(\"Invalid royalty destination\");\n    }\n    tx.addOutput({\n      satoshis: royaltySats,\n      lockingScript,\n    });\n  }\n\n  // add change to the outputs\n  let payChange: Utxo | undefined;\n\n  const change = changeAddress || paymentPk.toAddress().toString();\n  const changeScript = new P2PKH().lock(change);\n  const changeOut = {\n    lockingScript: changeScript,\n    change: true,\n  };\n  tx.addOutput(changeOut);\n\n  let totalSatsIn = 0n;\n  const totalSatsOut = tx.outputs.reduce(\n    (total, out) => total + BigInt(out.satoshis || 0),\n    0n,\n  );\n  let fee = 0;\n  for (const utxo of utxos) {\n    const input = inputFromB64Utxo(\n      utxo,\n      new P2PKH().unlock(\n        paymentPk,\n        \"all\",\n        true,\n        utxo.satoshis,\n        Script.fromBinary(Utils.toArray(utxo.script, \"base64\")),\n      ),\n    );\n\n    tx.addInput(input);\n    // stop adding inputs if the total amount is enough\n    totalSatsIn += BigInt(utxo.satoshis);\n    fee = await modelOrFee.computeFee(tx);\n\n    if (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n      break;\n    }\n  }\n\n  // make sure we have enough\n  if (totalSatsIn < totalSatsOut + BigInt(fee)) {\n    throw new Error(\n      `Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n    );\n  }\n\n  // estimate the cost of the transaction and assign change value\n  await tx.fee(modelOrFee);\n\n  // Sign the transaction\n  await tx.sign();\n\n  // check for change\n  const payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n  if (payChangeOutIdx !== -1) {\n    const changeOutput = tx.outputs[payChangeOutIdx];\n    payChange = {\n      satoshis: changeOutput.satoshis as number,\n      txid: tx.id(\"hex\") as string,\n      vout: payChangeOutIdx,\n      script: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n        \"base64\",\n      ),\n    };\n  }\n\n  if (payChange) {\n    const changeOutput = tx.outputs[tx.outputs.length - 1];\n    payChange.satoshis = changeOutput.satoshis as number;\n    payChange.txid = tx.id(\"hex\") as string;\n  }\n\n  return {\n    tx,\n    spentOutpoints: tx.inputs.map(\n      (i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n    ),\n    payChange,\n  };\n};\n\nexport const purchaseOrdTokenListing = async (\n  config: PurchaseOrdTokenListingConfig,\n) => {\n  const {\n    protocol,\n    tokenID,\n    utxos,\n    paymentPk,\n    listingUtxo,\n    ordAddress,\n    changeAddress,\n    satsPerKb = DEFAULT_SAT_PER_KB,\n    additionalPayments = [],\n  } = config;\n\n  const modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n  const tx = new Transaction();\n\n  // Inputs\n  // Add the locked ordinal we're purchasing\n  tx.addInput(\n    inputFromB64Utxo(\n      listingUtxo,\n      new OrdLock().purchaseListing(\n        1,\n        Script.fromBinary(Utils.toArray(listingUtxo.script, \"base64\")),\n      ),\n    ),\n  );\n\n  // Outputs\n  const transferInscription: TransferTokenInscription = {\n    p: \"bsv-20\",\n    op: \"transfer\",\n    amt: listingUtxo.amt,\n  };\n  let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n  if (protocol === TokenType.BSV20) {\n    inscription = {\n      ...transferInscription,\n      tick: tokenID,\n    } as TransferBSV20Inscription;\n  } else if (protocol === TokenType.BSV21) {\n    inscription = {\n      ...transferInscription,\n      id: tokenID,\n    } as TransferBSV21Inscription;\n  } else {\n    throw new Error(\"Invalid protocol\");\n  }\n  const dataB64 = Buffer.from(JSON.stringify(inscription)).toString(\"base64\");\n\n  // Add the purchased output\n  tx.addOutput({\n    satoshis: 1,\n    lockingScript: new OrdP2PKH().lock(ordAddress, {\n      dataB64,\n      contentType: \"bsv-20\",\n    }),\n  });\n\n  if (!listingUtxo.payout) {\n    throw new Error(\"Listing UTXO does not have a payout script\");\n  }\n\n  // Add the payment output\n  const reader = new Utils.Reader(Utils.toArray(listingUtxo.payout, \"base64\"));\n  const satoshis = reader.readUInt64LEBn().toNumber();\n  const scriptLength = reader.readVarIntNum();\n  const scriptBin = reader.read(scriptLength);\n  const lockingScript = LockingScript.fromBinary(scriptBin);\n  tx.addOutput({\n    satoshis,\n    lockingScript,\n  });\n\n  // Add additional payments if any\n  for (const p of additionalPayments) {\n    tx.addOutput({\n      satoshis: p.amount,\n      lockingScript: new P2PKH().lock(p.to),\n    });\n  }\n\n  // add change to the outputs\n  let payChange: Utxo | undefined;\n\n  const change = changeAddress || paymentPk.toAddress().toString();\n  const changeScript = new P2PKH().lock(change);\n  const changeOut = {\n    lockingScript: changeScript,\n    change: true,\n  };\n  tx.addOutput(changeOut);\n\n  let totalSatsIn = 0n;\n  const totalSatsOut = tx.outputs.reduce(\n    (total, out) => total + BigInt(out.satoshis || 0),\n    0n,\n  );\n  let fee = 0;\n  for (const utxo of utxos) {\n    const input = inputFromB64Utxo(\n      utxo,\n      new P2PKH().unlock(\n        paymentPk,\n        \"all\",\n        true,\n        utxo.satoshis,\n        Script.fromBinary(Utils.toArray(utxo.script, \"base64\")),\n      ),\n    );\n\n    tx.addInput(input);\n    // stop adding inputs if the total amount is enough\n    totalSatsIn += BigInt(utxo.satoshis);\n    fee = await modelOrFee.computeFee(tx);\n\n    if (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n      break;\n    }\n  }\n\n  // make sure we have enough\n  if (totalSatsIn < totalSatsOut + BigInt(fee)) {\n    throw new Error(\n      `Not enough funds to purchase token listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n    );\n  }\n\n  // estimate the cost of the transaction and assign change value\n  await tx.fee(modelOrFee);\n\n  // Sign the transaction\n  await tx.sign();\n\n  const payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n  if (payChangeOutIdx !== -1) {\n    const changeOutput = tx.outputs[payChangeOutIdx];\n    payChange = {\n      satoshis: changeOutput.satoshis as number,\n      txid: tx.id(\"hex\") as string,\n      vout: payChangeOutIdx,\n      script: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n        \"base64\",\n      ),\n    };\n  }\n\n  if (payChange) {\n    const changeOutput = tx.outputs[tx.outputs.length - 1];\n    payChange.satoshis = changeOutput.satoshis as number;\n    payChange.txid = tx.id(\"hex\") as string;\n  }\n\n  return {\n    tx,\n    spentOutpoints: tx.inputs.map(\n      (i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n    ),\n    payChange,\n  };\n};\n","// import sharp from \"sharp\";\n// import type { IconInscription, ImageContentType } from \"../types\";\n\n// // export the errors for use in tests\n// export const ErrorOversizedIcon = new Error(\n// \t\"Image must be a square image with dimensions <= 400x400\",\n// );\n// export const ErrorIconProportions = new Error(\"Image must be a square image\");\n// export const ErrorInvalidIconData = new Error(\"Error processing image\");\n// export const ErrorImageDimensionsUndefined = new Error(\n// \t\"Image dimensions are undefined\",\n// );\n\n// export const validIconData = async (\n// \ticon: IconInscription,\n// ): Promise<Error | null> => {\n// \tconst { dataB64, contentType } = icon;\n// \ttry {\n// \t\tconst buffer = Buffer.from(dataB64, \"base64\");\n// \t\tlet image = sharp(buffer);\n\n// \t\t// Special handling for SVG\n// \t\tif (contentType === \"image/svg+xml\") {\n// \t\t\t// Convert SVG to PNG for consistent dimension checking\n// \t\t\timage = image.png();\n// \t\t}\n\n// \t\tconst metadata = await image.metadata();\n\n// \t\tif (metadata.width === undefined || metadata.height === undefined) {\n// \t\t\treturn ErrorImageDimensionsUndefined;\n// \t\t}\n// \t\t// Check if the image is a square\n// \t\tif (metadata.width !== metadata.height) {\n// \t\t\treturn ErrorIconProportions;\n// \t\t}\n// \t\t// ensure the image is <= 400x400\n// \t\tif (metadata.width > 400 || metadata.height > 400) {\n// \t\t\treturn ErrorOversizedIcon;\n// \t\t}\n\n// \t\treturn null;\n// \t} catch (error) {\n// \t\treturn ErrorInvalidIconData;\n// \t}\n// };\n\nimport Jimp from \"jimp\";\nimport type { IconInscription, ImageContentType } from \"../types\";\n\nexport const ErrorOversizedIcon = new Error(\n\t\"Image must be a square image with dimensions <= 400x400\",\n);\nexport const ErrorIconProportions = new Error(\"Image must be a square image\");\nexport const ErrorInvalidIconData = new Error(\"Error processing image\");\nexport const ErrorImageDimensionsUndefined = new Error(\n\t\"Image dimensions are undefined\",\n);\n\nconst isImageContentType = (value: string): value is ImageContentType => {\n\treturn (value as ImageContentType) === value;\n};\n\nexport const validIconData = async (\n\ticon: IconInscription,\n): Promise<Error | null> => {\n\tconst { dataB64, contentType } = icon;\n\n\tif (contentType === \"image/svg+xml\") {\n\t\treturn validateSvg(dataB64);\n\t}\n\n\t// make sure the contentType is one of ImageContentType\n\tif (!isImageContentType(contentType)) {\n\t\treturn ErrorInvalidIconData;\n\t}\n\n\ttry {\n\t\tconst buffer = Buffer.from(dataB64, \"base64\");\n\t\tconst image = await Jimp.read(buffer);\n\n\t\tconst width = image.getWidth();\n\t\tconst height = image.getHeight();\n\n\t\tif (width === undefined || height === undefined) {\n\t\t\treturn ErrorImageDimensionsUndefined;\n\t\t}\n\t\tif (width !== height) {\n\t\t\treturn ErrorIconProportions;\n\t\t}\n\t\tif (width > 400 || height > 400) {\n\t\t\treturn ErrorOversizedIcon;\n\t\t}\n\n\t\treturn null;\n\t} catch (error) {\n\t\treturn ErrorInvalidIconData;\n\t}\n};\n\nconst validateSvg = (svgBase64: string): Error | null => {\n  const svgString = Buffer.from(svgBase64, \"base64\").toString(\"utf-8\");\n  const widthMatch = svgString.match(/<svg[^>]*\\s+width=\"([^\"]+)\"/);\n  const heightMatch = svgString.match(/<svg[^>]*\\s+height=\"([^\"]+)\"/);\n  console.log({widthMatch, heightMatch})\n  if (!widthMatch || !heightMatch) {\n    return ErrorImageDimensionsUndefined;\n  }\n\n\tconst width = Number.parseInt(widthMatch[1], 10);\n\tconst height = Number.parseInt(heightMatch[1], 10);\n\n\tif (Number.isNaN(width) || Number.isNaN(height)) {\n\t\treturn ErrorImageDimensionsUndefined;\n\t}\n\n\tif (width !== height) {\n\t\treturn ErrorIconProportions;\n\t}\n\tif (width > 400 || height > 400) {\n\t\treturn ErrorOversizedIcon;\n\t}\n\n\treturn null;\n}\n\nexport const validIconFormat = (icon: string): boolean => {\n\tif (!icon.includes(\"_\") || icon.endsWith(\"_\")) {\n\t\treturn false;\n\t}\n\n\t// use parseint to validate the vout\n\tconst iconVout = Number.parseInt(icon.split(\"_\")[1]);\n\tif (Number.isNaN(iconVout)) {\n\t\treturn false;\n\t}\n\n\tif (!icon.startsWith(\"_\") && icon.split(\"_\")[0].length !== 64) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","import {\n\tTransaction,\n\tP2PKH,\n\tSatoshisPerKilobyte,\n\ttype TransactionOutput,\n\tUtils,\n\tScript,\n} from \"@bsv/sdk\";\nimport type {\n\tDeployBsv21TokenConfig,\n\tDeployBsv21TokenResult,\n\tDeployMintTokenInscription,\n\tInscription,\n\tUtxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { validIconData, validIconFormat } from \"./utils/icon\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\n\n/**\n * Deploys & Mints a BSV21 token to the given destination address\n * @param {DeployBsv21TokenConfig} config - Configuration object for deploying BSV21 token\n * @param {string} config.symbol - Token ticker symbol\n * @param {number} config.decimals - Number of decimal places to display\n * @param {string | IconInscription} config.icon - outpoint (format: txid_vout) or Inscription. If Inscription, must be a valid image type\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {Distribution} config.initialDistribution - Initial distribution with addresses and total supply (not adjusted for decimals, library will add zeros)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {string} config.destinationAddress - Address to deploy token to.\n * @param {string} config.changeAddress - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<DeployBsv21TokenResult>} Transaction to deploy BSV 2.1 token\n */\nexport const deployBsv21Token = async (\n\tconfig: DeployBsv21TokenConfig,\n): Promise<DeployBsv21TokenResult> => {\n\tconst {\n\t\tsymbol,\n\t\ticon,\n    decimals,\n\t\tutxos,\n\t\tinitialDistribution,\n\t\tpaymentPk,\n\t\tdestinationAddress,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\tlet iconValue: string;\n\tif (typeof icon === \"string\") {\n\t\ticonValue = icon;\n\t} else {\n\t\tconst iconError = await validIconData(icon);\n\t\tif (iconError) {\n\t\t\tthrow iconError;\n\t\t}\n\t\t// add icon inscription to the transaction\n\t\tconst iconScript = new OrdP2PKH().lock(destinationAddress, icon);\n\t\tconst iconOut = {\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: iconScript,\n\t\t};\n\t\ttx.addOutput(iconOut);\n\t\t// relative output index of the icon\n\t\ticonValue = \"_0\";\n\t}\n\n\t// Ensure the icon format\n\tif (!validIconFormat(iconValue)) {\n\t\tthrow new Error(\n\t\t\t\"Invalid icon format. Must be either outpoint (format: txid_vout) or relative output index of the icon (format _vout). examples: ecb483eda58f26da1b1f8f15b782b1186abdf9c6399a1c3e63e0d429d5092a41_0 or _1\",\n\t\t);\n\t}\n  \n\t// Outputs\n  const amt = decimals ? BigInt(initialDistribution.amt) * 10n ** BigInt(decimals) : BigInt(initialDistribution.amt);\n\tconst fileData: DeployMintTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"deploy+mint\",\n\t\tsym: symbol,\n\t\ticon: iconValue,\n\t\tamt: amt.toString(),\n\t};\n\n  if (decimals) {\n    fileData.dec = decimals.toString();\n  }\n\n\tconst b64File = Buffer.from(JSON.stringify(fileData)).toString(\"base64\");\n\tconst sendTxOut = {\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(destinationAddress, {\n\t\t\tdataB64: b64File,\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t} as Inscription),\n\t};\n\ttx.addOutput(sendTxOut);\n\n\t// Additional payments\n\tfor (const payment of additionalPayments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new P2PKH().lock(payment.to),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to deploy token. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n","import type { CollectionItemSubTypeData, CollectionSubTypeData } from \"./types\";\n\n/**\n * Validates sub type data\n * @param {string} subType - Sub type of the ordinals token\n * @param {string} subTypeData - Sub type data of the ordinals token\n * @returns {Error | undefined} Error if validation fails, undefined if validation passes\n */\nexport const validateSubTypeData = (\n  subType: \"collection\" | \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData | CollectionSubTypeData,\n): Error | undefined => {\n  try {\n    if (subType === \"collection\") {\n      const collectionData = subTypeData as CollectionSubTypeData;\n      if (!collectionData.description) {\n        return new Error(\"Collection description is required\");\n      }\n      if (!collectionData.quantity) {\n        return new Error(\"Collection quantity is required\");\n      }\n      if (collectionData.rarityLabels) {\n        if (!Array.isArray(collectionData.rarityLabels)) {\n          return new Error(\"Rarity labels must be an array\");\n        }\n        // make sure keys and values are strings\n        if (!collectionData.rarityLabels.every((label) => {\n          return Object.values(label).every(value => typeof value === 'string');\n        })) {\n          return new Error(`Invalid rarity labels ${collectionData.rarityLabels}`);\n        }\n      }\n      if (collectionData.traits ) {\n        if (typeof collectionData.traits !== \"object\") {\n        return new Error(\"Collection traits must be an object\");\n        }\n        if (collectionData.traits && !Object.keys(collectionData.traits).every(key => typeof key === 'string' && typeof collectionData.traits[key] === 'object')) {\n          return new Error(\"Collection traits must be a valid CollectionTraits object\");\n        }\n      }\n    }\n    if (subType === \"collectionItem\") {\n      const itemData = subTypeData as CollectionItemSubTypeData;\n      if (!itemData.collectionId) {\n        return new Error(\"Collection id is required\");\n      }\n      if (!itemData.collectionId.includes(\"_\")) {\n        return new Error(\"Collection id must be a valid outpoint\");\n      }\n      if (itemData.collectionId.split(\"_\")[0].length !== 64) {\n        return new Error(\"Collection id must contain a valid txid\");\n      }\n      if (Number.isNaN(Number.parseInt(itemData.collectionId.split(\"_\")[1]))) {\n        return new Error(\"Collection id must contain a valid vout\");\n      }\n\n      if (itemData.mintNumber && typeof itemData.mintNumber !== \"number\") {\n        return new Error(\"Mint number must be a number\");\n      }\n      if (itemData.rank && typeof itemData.rank !== \"number\") {\n        return new Error(\"Rank must be a number\");\n      }\n      if (itemData.rarityLabel && typeof itemData.rarityLabel !== \"string\") {\n        return new Error(\"Rarity label must be a string\");\n      }\n      if (itemData.traits && typeof itemData.traits !== \"object\") {\n        return new Error(\"Traits must be an object\");\n      }\n      if (itemData.attachments && !Array.isArray(itemData.attachments)) {\n        return new Error(\"Attachments must be an array\");\n      }\n    }\n    return undefined;\n  } catch (error) {\n    return new Error(\"Invalid JSON data\");\n  }\n};"],"names":["TokenType","RoytaltyType","toHex","utf8Str","Buffer","from","toString","DEFAULT_SAT_PER_KB","API_HOST","OrdP2PKH","_P2PKH","apply","arguments","_inheritsLoose","prototype","lock","address","inscription","metaData","ordAsm","undefined","dataB64","contentType","ordHex","fileHex","trim","Error","fileMediaType","inscriptionAsm","P2PKH","toASM","app","type","_i","_Object$entries","Object","entries","length","_Object$entries$_i","key","value","LockingScript","fromASM","MAX_TOKEN_SUPPLY","Math","pow","fromBase58Check","Utils","inputFromB64Utxo","utxo","unlockScriptTemplate","fromUtxo","_extends","script","signData","tx","signer","_exit","_temp2","_result","idKey","keyHost","_sigma$sign","Sigma","sign","Promise","resolve","signedTx","_temp","authToken","sigma","remoteSign","then","_ref","_catch","e","console","log","reject","stringifyMetaData","result","Array","isArray","JSON","stringify","String","pact","state","s","_Pact","o","bind","v","_settle","observer","onFulfilled","this","_this","onRejected","_isSettledPact","thenable","_iteratorSymbol","Symbol","iterator","OrdLock","_proto","ordAddress","payAddress","price","cancelPkh","data","payPkh","Script","writeScript","fromHex","writeBin","buildOutput","toBinary","cancelListing","privateKey","signOutputs","anyoneCanPay","sourceSatoshis","lockingScript","p2pkh","unlock","inputIndex","_p2pkh$sign","writeOpCode","OP","OP_1","estimateLength","purchaseListing","purchase","_input$sourceTransact","outputs","UnlockingScript","satoshis","_step","writer","Writer","_iterator","_createForOfIteratorHelperLoose","slice","done","output","write","toArray","OP_0","input","inputs","sourceSats","sourceTransaction","sourceOutputIndex","_input$sourceTransact2","sourceTXID","id","subscript","preimage","TransactionSignature","format","transactionVersion","version","otherInputs","inputSequence","sequence","lockTime","scope","SIGHASH_ALL","SIGHASH_ANYONECANPAY","SIGHASH_FORKID","_purchase$sign","writeUInt64LEBn","BigNumber","writeVarIntNum","callback","target","body","check","step","_cycle","return","_fixup","TypeError","values","i","push","array","_forTo","_forOf","next","client","PaymailClient","ErrorOversizedIcon","ErrorIconProportions","ErrorInvalidIconData","ErrorImageDimensionsUndefined","config","_interrupt","totalSatsIn","totalSatsOut","BigInt","fee","modelOrFee","payChangeOutIdx","findIndex","change","changeOutput","payChange","txid","vout","spentOutpoints","map","utxos","listingUtxos","ordPk","paymentPk","changeAddress","_config$additionalPay","additionalPayments","_config$satsPerKb","satsPerKb","warn","SatoshisPerKilobyte","Transaction","listingUtxo","addInput","fromBinary","addOutput","toAddress","_step2","_iterator2","p","amount","to","changeScript","reduce","total","out","computeFee","_modelOrFee$computeFe","_interrupt2","_temp4","tokenChange","amt","totalAmtIn","tokenID","protocol","_config$satsPerKb2","every","token","_step3","_iterator3","Number","parseInt","transferInscription","op","BSV20","tick","BSV21","destination","_iterator4","_step4","_temp3","_modelOrFee$computeFe2","listings","listing","inputScriptBinary","inputScript","_config$additionalPay2","tokenChangeAddress","inputTokens","decimals","changeAmt","totalAmtOut","bigAmt","_step5","_iterator5","destinations","_Object$keys","keys","pop","_signData","iconValue","icon","includes","endsWith","iconVout","split","isNaN","startsWith","validIconFormat","initialDistribution","fileData","sym","symbol","dec","b64File","sendTxOut","destinationAddress","payment","svgBase64","svgString","widthMatch","match","heightMatch","width","height","validateSvg","buffer","Jimp","read","image","getWidth","getHeight","validIconData","iconError","iconScript","collectionId","limit","offset","scriptEncoding","url","subTypeData","fetch","res","ok","json","nftUtxos","outpoints","filter","u","_u$data","list","method","headers","concat","nftRes","nfts","nftUtxo","origin","outpoint","payUrl","payRes","payUtxos","pubKeyHash","p2pkhScript","tokenId","tokenUtxos","_temp6","_result2","_config$royalties","royalties","reader","Reader","payout","readUInt64LEBn","toNumber","scriptLength","readVarIntNum","scriptBin","_temp5","r","royaltySats","floor","percentage","_switch","Paymail","paymailAddress","amtToReceive","getP2pPaymentDestination","destinationTx","resolvePaymail","_resolvePaymail","Address","_temp8","_interrupt3","_temp7","enforceUniformSend","ordinals","ordUtxo","_destination$inscript","_destination$inscript2","paymentUtxos","changeOut","payments","_config$changeAddress","distributions","_config$burn","burn","dest","subType","collectionData","description","quantity","rarityLabels","label","traits","itemData","mintNumber","rank","rarityLabel","attachments","error"],"mappings":"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"}