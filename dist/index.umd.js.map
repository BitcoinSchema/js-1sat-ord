{"version":3,"file":"index.umd.js","sources":["../src/utils/strings.ts","../src/index.ts"],"sourcesContent":["const toHex = (asciiStr: string) => {\r\n  var arr1: string[] = [];\r\n  for (var n = 0, l = asciiStr.length; n < l; n++) {\r\n    var hex = Number(asciiStr.charCodeAt(n)).toString(16);\r\n    arr1.push(hex);\r\n  }\r\n  return arr1.join(\"\");\r\n};\r\n\r\nconst toAscii = (hexStr: string) => {\r\n  var hex, i;\r\n\r\n  var result = \"\";\r\n  for (i = 0; i < hexStr.length; i++) {\r\n    hex = hexStr.charCodeAt(i).toString(16);\r\n    result += (\"000\" + hex).slice(-4);\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nexport { toHex, toAscii };\r\n","import { MAP } from \"bmapjs/types/protocols/map\";\r\nimport {\r\n  P2PKHAddress,\r\n  PrivateKey,\r\n  Script,\r\n  SigHash,\r\n  Transaction,\r\n  TxIn,\r\n  TxOut,\r\n} from \"bsv-wasm-web\";\r\nimport { Buffer } from \"buffer\";\r\nimport * as dotenv from \"dotenv\";\r\nimport { toHex } from \"./utils/strings\";\r\n\r\ndotenv.config();\r\n\r\nexport type Utxo = {\r\n  satoshis: number;\r\n  txid: string;\r\n  vout: number;\r\n  script: string;\r\n};\r\n\r\nexport type Inscription = {\r\n  dataB64: string;\r\n  contentType: string;\r\n};\r\n\r\nconst MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\r\n\r\nconst buildInscription = (\r\n  destinationAddress: P2PKHAddress,\r\n  b64File: string,\r\n  mediaType: string,\r\n  metaData?: MAP\r\n): Script => {\r\n  const ordHex = toHex(\"ord\");\r\n  const fsBuffer = Buffer.from(b64File, \"base64\");\r\n  const fireShardHex = fsBuffer.toString(\"hex\");\r\n  const fireShardMediaType = toHex(mediaType);\r\n\r\n  // Create ordinal output and inscription in a single output\r\n  let inscriptionAsm = `${destinationAddress\r\n    .get_locking_script()\r\n    .to_asm_string()} OP_0 OP_IF ${ordHex} OP_1 ${fireShardMediaType} OP_0 ${fireShardHex} OP_ENDIF`;\r\n\r\n  // MAP.app and MAP.type keys are required\r\n  if (metaData && metaData?.app && metaData?.type) {\r\n    const mapPrefixHex = toHex(MAP_PREFIX);\r\n    const mapCmdValue = toHex(\"SET\");\r\n    inscriptionAsm = `${inscriptionAsm} OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\r\n\r\n    for (const [key, value] of Object.entries(metaData)) {\r\n      if (key !== \"cmd\") {\r\n        inscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\r\n          value as string\r\n        )}`;\r\n      }\r\n    }\r\n  }\r\n\r\n  return Script.from_asm_string(inscriptionAsm);\r\n};\r\n\r\nconst createOrdinal = async (\r\n  utxo: Utxo,\r\n  destinationAddress: string,\r\n  paymentPk: PrivateKey,\r\n  changeAddress: string,\r\n  satPerByteFee: number,\r\n  inscription: Inscription,\r\n  metaData?: MAP\r\n): Promise<Transaction> => {\r\n  let tx = new Transaction(1, 0);\r\n\r\n  // Inputs\r\n  let utxoIn = new TxIn(\r\n    Buffer.from(utxo.txid, \"hex\"),\r\n    utxo.vout,\r\n    Script.from_asm_string(\"\")\r\n  );\r\n\r\n  tx.add_input(utxoIn);\r\n\r\n  // Outputs\r\n  const inscriptionScript = buildInscription(\r\n    P2PKHAddress.from_string(destinationAddress),\r\n    inscription.dataB64,\r\n    inscription.contentType,\r\n    metaData\r\n  );\r\n\r\n  let satOut = new TxOut(BigInt(1), inscriptionScript);\r\n  tx.add_output(satOut);\r\n\r\n  // add change\r\n  const changeaddr = P2PKHAddress.from_string(changeAddress);\r\n  const changeScript = changeaddr.get_locking_script();\r\n  let emptyOut = new TxOut(BigInt(1), changeScript);\r\n  const fee = Math.ceil(\r\n    satPerByteFee * (tx.get_size() + emptyOut.to_bytes().byteLength)\r\n  );\r\n  const change = utxo.satoshis - 1 - fee;\r\n  if (change < 0) throw new Error(\"Inadequate satoshis for fee\");\r\n  if (change > 0) {\r\n    let changeOut = new TxOut(BigInt(change), changeScript);\r\n    tx.add_output(changeOut);\r\n  }\r\n  const sig = tx.sign(\r\n    paymentPk,\r\n    SigHash.ALL | SigHash.FORKID,\r\n    0,\r\n    Script.from_asm_string(utxo.script),\r\n    BigInt(utxo.satoshis)\r\n  );\r\n\r\n  utxoIn.set_unlocking_script(\r\n    Script.from_asm_string(\r\n      `${sig.to_hex()} ${paymentPk.to_public_key().to_hex()}`\r\n    )\r\n  );\r\n\r\n  tx.set_input(0, utxoIn);\r\n\r\n  return tx;\r\n};\r\n\r\nconst sendOrdinal = async (\r\n  paymentUtxo: Utxo,\r\n  ordinal: Utxo,\r\n  paymentPk: PrivateKey,\r\n  changeAddress: string,\r\n  satPerByteFee: number,\r\n  ordPk: PrivateKey,\r\n  ordDestinationAddress: string,\r\n  reinscription?: Inscription,\r\n  metaData?: MAP\r\n): Promise<Transaction> => {\r\n  let tx = new Transaction(1, 0);\r\n\r\n  let ordIn = new TxIn(\r\n    Buffer.from(ordinal.txid, \"hex\"),\r\n    ordinal.vout,\r\n    Script.from_asm_string(\"\")\r\n  );\r\n  tx.add_input(ordIn);\r\n\r\n  // Inputs\r\n  let utxoIn = new TxIn(\r\n    Buffer.from(paymentUtxo.txid, \"hex\"),\r\n    paymentUtxo.vout,\r\n    Script.from_asm_string(\"\")\r\n  );\r\n\r\n  tx.add_input(utxoIn);\r\n\r\n  let s: Script;\r\n  const destinationAddress = P2PKHAddress.from_string(ordDestinationAddress);\r\n  if (reinscription?.dataB64 && reinscription?.contentType) {\r\n    s = buildInscription(\r\n      destinationAddress,\r\n      reinscription.dataB64,\r\n      reinscription.contentType,\r\n      metaData\r\n    );\r\n  } else {\r\n    s = destinationAddress.get_locking_script();\r\n  }\r\n  let satOut = new TxOut(BigInt(1), s);\r\n  tx.add_output(satOut);\r\n\r\n  // add change\r\n  const changeaddr = P2PKHAddress.from_string(changeAddress);\r\n  const changeScript = changeaddr.get_locking_script();\r\n  let emptyOut = new TxOut(BigInt(1), changeScript);\r\n  const fee = Math.ceil(\r\n    satPerByteFee * (tx.get_size() + emptyOut.to_bytes().byteLength)\r\n  );\r\n  const change = paymentUtxo.satoshis - fee;\r\n  let changeOut = new TxOut(BigInt(change), changeScript);\r\n\r\n  tx.add_output(changeOut);\r\n\r\n  // sign ordinal\r\n  const sig = tx.sign(\r\n    ordPk,\r\n    SigHash.InputOutput,\r\n    0,\r\n    Script.from_asm_string(ordinal.script),\r\n    BigInt(ordinal.satoshis)\r\n  );\r\n\r\n  ordIn.set_unlocking_script(\r\n    Script.from_asm_string(`${sig.to_hex()} ${ordPk.to_public_key().to_hex()}`)\r\n  );\r\n\r\n  tx.set_input(0, ordIn);\r\n\r\n  // sign fee payment\r\n  const sig2 = tx.sign(\r\n    paymentPk,\r\n    SigHash.InputOutput,\r\n    1,\r\n    Script.from_asm_string(paymentUtxo.script),\r\n    BigInt(paymentUtxo.satoshis)\r\n  );\r\n\r\n  utxoIn.set_unlocking_script(\r\n    Script.from_asm_string(\r\n      `${sig2.to_hex()} ${paymentPk.to_public_key().to_hex()}`\r\n    )\r\n  );\r\n\r\n  tx.set_input(1, utxoIn);\r\n\r\n  return tx;\r\n};\r\n\r\n// sendUtxos sends p2pkh utxos to the given destinationAddress\r\nconst sendUtxos = async (\r\n  utxos: Utxo[],\r\n  paymentPk: PrivateKey,\r\n  address: P2PKHAddress,\r\n  feeSats: number\r\n): Promise<Transaction> => {\r\n  const tx = new Transaction(1, 0);\r\n\r\n  // Outputs\r\n  let inputValue = 0;\r\n  for (let u of utxos || []) {\r\n    inputValue += u.satoshis;\r\n  }\r\n  const satsIn = inputValue;\r\n  const satsOut = satsIn - feeSats;\r\n  console.log({ feeSats, satsIn, satsOut });\r\n  tx.add_output(new TxOut(BigInt(satsOut), address.get_locking_script()));\r\n\r\n  // build txins from our UTXOs\r\n  let idx = 0;\r\n  for (let u of utxos || []) {\r\n    console.log({ u });\r\n    const inx = new TxIn(\r\n      Buffer.from(u.txid, \"hex\"),\r\n      u.vout,\r\n      Script.from_asm_string(\"\")\r\n    );\r\n    console.log({ inx });\r\n    inx.set_satoshis(BigInt(u.satoshis));\r\n    tx.add_input(inx);\r\n\r\n    const sig = tx.sign(\r\n      paymentPk,\r\n      SigHash.InputOutputs,\r\n      idx,\r\n      Script.from_asm_string(u.script),\r\n      BigInt(u.satoshis)\r\n    );\r\n\r\n    inx.set_unlocking_script(\r\n      Script.from_asm_string(\r\n        `${sig.to_hex()} ${paymentPk.to_public_key().to_hex()}`\r\n      )\r\n    );\r\n\r\n    tx.set_input(idx, inx);\r\n    idx++;\r\n  }\r\n  return tx;\r\n};\r\n\r\nexport { buildInscription, createOrdinal, sendOrdinal, sendUtxos };\r\n"],"names":["toHex","asciiStr","arr1","n","l","length","hex","Number","charCodeAt","toString","push","join","config","buildInscription","destinationAddress","b64File","mediaType","metaData","ordHex","fireShardHex","Buffer","from","fireShardMediaType","inscriptionAsm","get_locking_script","to_asm_string","app","type","_i","_Object$entries","Object","entries","_Object$entries$_i","key","value","Script","from_asm_string","utxo","paymentPk","changeAddress","satPerByteFee","inscription","tx","Transaction","utxoIn","TxIn","txid","vout","add_input","inscriptionScript","P2PKHAddress","from_string","dataB64","contentType","satOut","TxOut","BigInt","add_output","changeScript","emptyOut","fee","Math","ceil","get_size","to_bytes","byteLength","change","satoshis","Error","changeOut","sig","sign","SigHash","ALL","FORKID","script","set_unlocking_script","to_hex","to_public_key","set_input","Promise","resolve","e","reject","paymentUtxo","ordinal","ordPk","ordDestinationAddress","reinscription","ordIn","s","InputOutput","sig2","utxos","address","feeSats","_step","inputValue","_iterator","_createForOfIteratorHelperLoose","done","satsOut","console","log","satsIn","_step2","idx","_iterator2","u","inx","set_satoshis","InputOutputs"],"mappings":"46CAAA,IAAMA,EAAQ,SAACC,GAEb,IADA,IAAIC,EAAiB,GACZC,EAAI,EAAGC,EAAIH,EAASI,OAAQF,EAAIC,EAAGD,IAAK,CAC/C,IAAIG,EAAMC,OAAON,EAASO,WAAWL,IAAIM,SAAS,IAClDP,EAAKQ,KAAKJ,EACX,CACD,OAAOJ,EAAKS,KAAK,GACnB,oBCOOC,SAcP,IAEMC,EAAmB,SACvBC,EACAC,EACAC,EACAC,GAEA,IAAMC,EAASlB,EAAM,OAEfmB,EADWC,EAAMA,OAACC,KAAKN,EAAS,UACRN,SAAS,OACjCa,EAAqBtB,EAAMgB,GAG7BO,EAAoBT,EACrBU,qBACAC,gBAA8BP,eAAAA,EAAeI,SAAAA,WAA2BH,EAAY,YAGvF,GAAIF,GAAYA,MAAAA,GAAAA,EAAUS,KAAe,MAART,GAAAA,EAAUU,KAAM,CAG/CJ,EAAoBA,gBAFCvB,EApBN,sCAsB6C,IADxCA,EAAM,OAG1B,QAAA4B,EAAA,EAAAC,EAA2BC,OAAOC,QAAQd,GAASW,EAAAC,EAAAxB,OAAAuB,IAAE,CAAhD,IAAAI,EAAAH,EAAAD,GAAOK,EAAGD,EAAEE,GAAAA,EAAKF,KACR,QAARC,IACFV,EAAoBA,MAAkBvB,EAAMiC,OAAQjC,EAClDkC,GAGL,CACF,CAED,OAAOC,EAAAA,OAAOC,gBAAgBb,EAChC,uCAEM,SACJc,EACAvB,EACAwB,EACAC,EACAC,EACAC,EACAxB,GAAc,IAEd,IAAIyB,EAAK,IAAIC,EAAWA,YAAC,EAAG,GAGxBC,EAAS,IAAIC,EAAAA,KACfzB,EAAAA,OAAOC,KAAKgB,EAAKS,KAAM,OACvBT,EAAKU,KACLZ,EAAAA,OAAOC,gBAAgB,KAGzBM,EAAGM,UAAUJ,GAGb,IAAMK,EAAoBpC,EACxBqC,EAAAA,aAAaC,YAAYrC,GACzB2B,EAAYW,QACZX,EAAYY,YACZpC,GAGEqC,EAAS,IAAIC,EAAKA,MAACC,OAAO,GAAIP,GAClCP,EAAGe,WAAWH,GAGd,IACMI,EADaR,EAAAA,aAAaC,YAAYZ,GACZf,qBAC5BmC,EAAW,IAAIJ,EAAKA,MAACC,OAAO,GAAIE,GAC9BE,EAAMC,KAAKC,KACftB,GAAiBE,EAAGqB,WAAaJ,EAASK,WAAWC,aAEjDC,EAAS7B,EAAK8B,SAAW,EAAIP,EACnC,GAAIM,EAAS,EAAG,MAAM,IAAIE,MAAM,+BAChC,GAAIF,EAAS,EAAG,CACd,IAAIG,EAAY,IAAId,EAAKA,MAACC,OAAOU,GAASR,GAC1ChB,EAAGe,WAAWY,EACf,CACD,IAAMC,EAAM5B,EAAG6B,KACbjC,EACAkC,EAAAA,QAAQC,IAAMD,EAAOA,QAACE,OACtB,EACAvC,EAAAA,OAAOC,gBAAgBC,EAAKsC,QAC5BnB,OAAOnB,EAAK8B,WAWd,OARAvB,EAAOgC,qBACLzC,EAAMA,OAACC,gBACFkC,EAAIO,SAAYvC,IAAAA,EAAUwC,gBAAgBD,WAIjDnC,EAAGqC,UAAU,EAAGnC,GAEhBoC,QAAAC,QAAOvC,EACT,CAAC,MAAAwC,GAAAF,OAAAA,QAAAG,OAAAD,EAAA,CAAA,gBAEK,SACJE,EACAC,EACA/C,EACAC,EACAC,EACA8C,EACAC,EACAC,EACAvE,GACwB,IACxB,IAAIyB,EAAK,IAAIC,EAAWA,YAAC,EAAG,GAExB8C,EAAQ,IAAI5C,EAAAA,KACdzB,EAAMA,OAACC,KAAKgE,EAAQvC,KAAM,OAC1BuC,EAAQtC,KACRZ,EAAMA,OAACC,gBAAgB,KAEzBM,EAAGM,UAAUyC,GAGb,IAQIC,EARA9C,EAAS,IAAIC,OACfzB,EAAAA,OAAOC,KAAK+D,EAAYtC,KAAM,OAC9BsC,EAAYrC,KACZZ,EAAAA,OAAOC,gBAAgB,KAGzBM,EAAGM,UAAUJ,GAGb,IAAM9B,EAAqBoC,EAAAA,aAAaC,YAAYoC,GAElDG,EADe,MAAbF,GAAAA,EAAepC,SAAWoC,MAAAA,GAAAA,EAAenC,YACvCxC,EACFC,EACA0E,EAAcpC,QACdoC,EAAcnC,YACdpC,GAGEH,EAAmBU,qBAEzB,IAAI8B,EAAS,IAAIC,EAAAA,MAAMC,OAAO,GAAIkC,GAClChD,EAAGe,WAAWH,GAGd,IACMI,EADaR,eAAaC,YAAYZ,GACZf,qBAC5BmC,EAAW,IAAIJ,EAAAA,MAAMC,OAAO,GAAIE,GAC9BE,EAAMC,KAAKC,KACftB,GAAiBE,EAAGqB,WAAaJ,EAASK,WAAWC,aAGnDI,EAAY,IAAId,QAAMC,OADX4B,EAAYjB,SAAWP,GACIF,GAE1ChB,EAAGe,WAAWY,GAGd,IAAMC,EAAM5B,EAAG6B,KACbe,EACAd,EAAAA,QAAQmB,YACR,EACAxD,EAAMA,OAACC,gBAAgBiD,EAAQV,QAC/BnB,OAAO6B,EAAQlB,WAGjBsB,EAAMb,qBACJzC,EAAAA,OAAOC,gBAAmBkC,EAAIO,SAAQ,IAAIS,EAAMR,gBAAgBD,WAGlEnC,EAAGqC,UAAU,EAAGU,GAGhB,IAAMG,EAAOlD,EAAG6B,KACdjC,EACAkC,EAAOA,QAACmB,YACR,EACAxD,EAAAA,OAAOC,gBAAgBgD,EAAYT,QACnCnB,OAAO4B,EAAYjB,WAWrB,OARAvB,EAAOgC,qBACLzC,SAAOC,gBACFwD,EAAKf,SAAQ,IAAIvC,EAAUwC,gBAAgBD,WAIlDnC,EAAGqC,UAAU,EAAGnC,GAEhBoC,QAAAC,QAAOvC,EACT,CAAC,MAAAwC,GAAAF,OAAAA,QAAAG,OAAAD,EAAA,CAAA,cAGK,SACJW,EACAvD,EACAwD,EACAC,GAAe,IAMf,IAJA,IAIyBC,EAJnBtD,EAAK,IAAIC,EAAWA,YAAC,EAAG,GAG1BsD,EAAa,EACjBC,EAAAC,EAAcN,GAAS,MAAEG,EAAAE,KAAAE,MACvBH,GADQD,EAAA9D,MACQiC,SAElB,IACMkC,EADSJ,EACUF,EACzBO,QAAQC,IAAI,CAAER,QAAAA,EAASS,OAFRP,EAEgBI,QAAAA,IAC/B3D,EAAGe,WAAW,IAAIF,EAAKA,MAACC,OAAO6C,GAAUP,EAAQtE,uBAIjD,IADA,IACyBiF,EADrBC,EAAM,EACVC,EAAAR,EAAcN,GAAS,MAAEY,EAAAE,KAAAP,MAAE,CAAlB,IAAAQ,EAACH,EAAAvE,MACRoE,QAAQC,IAAI,CAAEK,EAAAA,IACd,IAAMC,EAAM,IAAIhE,EAAIA,KAClBzB,SAAOC,KAAKuF,EAAE9D,KAAM,OACpB8D,EAAE7D,KACFZ,SAAOC,gBAAgB,KAEzBkE,QAAQC,IAAI,CAAEM,IAAAA,IACdA,EAAIC,aAAatD,OAAOoD,EAAEzC,WAC1BzB,EAAGM,UAAU6D,GAEb,IAAMvC,EAAM5B,EAAG6B,KACbjC,EACAkC,EAAAA,QAAQuC,aACRL,EACAvE,EAAMA,OAACC,gBAAgBwE,EAAEjC,QACzBnB,OAAOoD,EAAEzC,WAGX0C,EAAIjC,qBACFzC,EAAAA,OAAOC,gBACFkC,EAAIO,SAAYvC,IAAAA,EAAUwC,gBAAgBD,WAIjDnC,EAAGqC,UAAU2B,EAAKG,GAClBH,GACD,CACD,OAAA1B,QAAAC,QAAOvC,EACT,CAAC,MAAAwC,GAAAF,OAAAA,QAAAG,OAAAD,EAAA,CAAA"}