{"version":3,"file":"index.umd.js","sources":["../src/utils/strings.ts","../src/templates/ordP2pkh.ts","../src/constants.ts","../src/utils/utxo.ts","../src/signData.ts","../src/sendOrdinals.ts","../src/sendUtxos.ts","../src/types.ts","../src/createOrdinals.ts","../src/transferOrdinals.ts"],"sourcesContent":["/**\n * Converts a string to its hexadecimal representation\n *\n * @param {string} utf8Str - The string to convert\n * @returns {string} The hexadecimal representation of the input string\n */\nconst toHex = (utf8Str: string): string => {\n  return Buffer.from(utf8Str).toString(\"hex\");\n};\n\nexport { toHex };\n","import {\n\tLockingScript,\n\tP2PKH,\n\ttype Script,\n} from \"@bsv/sdk\";\nimport type { MAP } from \"../types\";\nimport { toHex } from \"../utils/strings\";\nimport { MAP_PREFIX } from \"../constants\";\n\n/**\n * OrdP2PKH (1Sat Ordinal + Pay To Public Key Hash) class implementing ScriptTemplate.\n *\n * This class provides methods to create an Ordinal with Pay To Public Key Hash locking and unlocking scripts. \n * It extends the standard P2PKH script template and provides a custom lock method.\n */\nexport default class OrdP2PKH extends P2PKH {\n\t/**\n\t * Creates a 1Sat Ordinal + P2PKH locking script for a given address string\n\t *\n\t * @param {string} address - An destination address for the Ordinal.\n\t * @param {string} [b64File] - Base64 encoded file data.\n\t * @param {string} [mediaType] - Media type of the file.\n\t * @param {MAP} [metaData] - (optional) MAP Metadata to be included in OP_RETURN.\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\t// unlock method inherits from p2pkh\n\tlock(\n\t\taddress: string,\n\t\tb64File?: string | undefined,\n\t\tmediaType?: string | undefined,\n\t\tmetaData?: MAP | undefined,\n\t): Script {\n\t\tlet ordAsm = \"\";\n\t\t// This can be omitted for reinscriptions that just update metadata\n\t\tif (b64File !== undefined && mediaType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(b64File, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(mediaType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`;\n\t\t}\n\n\t\t// Create ordinal output and inscription in a single output\n\t\tconst lockingScript = new P2PKH().lock(address);\n\t\tlet inscriptionAsm = `${ordAsm ? `${ordAsm} ` : \"\"}${lockingScript.toASM()}`;\n\n\t\t// MAP.app and MAP.type keys are required\n\t\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t\t}\n\n\t\tif (metaData?.app && metaData?.type) {\n\t\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\t\tconst mapCmdValue = toHex(\"SET\");\n\t\t\tinscriptionAsm = `${inscriptionAsm} OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\t\tif (key !== \"cmd\") {\n\t\t\t\t\tinscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\n\t\t\t\t\t\tvalue as string,\n\t\t\t\t\t)}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn LockingScript.fromASM(inscriptionAsm);\n\t}\n}\n","export const MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\nexport const DEFAULT_SAT_PER_KB = 10;\nexport const API_HOST = \"https://ordinals.gorillapool.io/api\";","import { type Transaction, type UnlockingScript, fromUtxo, type TransactionInput, Utils, P2PKH } from \"@bsv/sdk\";\nimport type { Utxo } from \"../types\";\nimport { API_HOST } from \"../constants\";\n\nconst { fromBase58Check } = Utils;\n\n/**\n * Converts a Utxo object with a base64 encoded script to a Utxo object with a hex encoded script\n * @param {Utxo} utxo - Utxo object with base64 encoded script\n * @param {Object} unlockScriptTemplate - Object with sign and estimateLength functions\n * @returns {TransactionInput} Utxo object with hex encoded script\n */\nexport const inputFromB64Utxo = (\n\tutxo: Utxo,\n\tunlockScriptTemplate: {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>;\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>;\n\t},\n): TransactionInput => {\n\tconst input = fromUtxo(\n\t\t{\n\t\t\t...utxo,\n\t\t\tscript: Buffer.from(utxo.script, \"base64\").toString(\"hex\"),\n\t\t},\n\t\tunlockScriptTemplate,\n\t);\n\tinput.sourceTXID = utxo.txid;\n\treturn input;\n};\n\nexport const fetchPayUtxos = async (address: string) => {\n  const payUrl = `${API_HOST}/txos/address/${address}/unspent?bsv20=false`;\n  console.log({ payUrl });\n  const payRes = await fetch(payUrl);\n  if (!payRes.ok) {\n    console.error(\"Error fetching pay utxos:\", payRes.statusText);\n    return;\n  }\n  let payUtxos = await payRes.json();\n  // exclude all 1 satoshi utxos\n  payUtxos = payUtxos.filter((u: { satoshis: number }) => u.satoshis !== 1)\n\n  // Get pubkey hash from address\n  const pubKeyHash = fromBase58Check(address)\n  const p2pkhScript = new P2PKH().lock(pubKeyHash.data)\n  payUtxos = payUtxos.map((utxo: {\n\t\ttxid: string;\n\t\tvout: number;\n\t\tsatoshis: number;\n\t}) => ({\n      txid: utxo.txid,\n      vout: utxo.vout,\n      satoshis: utxo.satoshis,\n      script: Buffer.from(p2pkhScript.toBinary()).toString(\"base64\"),\n  }))\n  return payUtxos\n}","import type { Transaction } from \"@bsv/sdk\";\nimport { Sigma } from \"sigma-protocol\";\nimport type { LocalSigner, RemoteSigner } from \"./types\";\n\n/**\n * Signs data in the transaction with Sigma protocol\n * @param {Transaction} tx - Transaction to sign\n * @param {LocalSigner | RemoteSigner} signer - Local or remote signer (used for data signature)\n * @returns {Transaction} Transaction with signed data\n */\nexport const signData = async (\n\ttx: Transaction,\n\tsigner: LocalSigner | RemoteSigner,\n): Promise<Transaction> => {\n\t// Sign tx if idKey or remote signer like starfish/tokenpass\n\tconst idKey = (signer as LocalSigner)?.idKey;\n\tconst keyHost = (signer as RemoteSigner)?.keyHost;\n\n\tif (idKey) {\n\t\tconst sigma = new Sigma(tx);\n\t\tconst { signedTx } = sigma.sign(idKey);\n\t\treturn signedTx;\n\t}\n\tif (keyHost) {\n\t\tconst authToken = (signer as RemoteSigner)?.authToken;\n\t\tconst sigma = new Sigma(tx);\n\t\ttry {\n\t\t\tconst { signedTx } = await sigma.remoteSign(keyHost, authToken);\n\t\t\treturn signedTx;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthrow new Error(`Remote signing to ${keyHost} failed`);\n\t\t}\n\t}\n\tthrow new Error(\"Signer must be a LocalSigner or RemoteSigner\");\n};\n","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype Script,\n\ttype TransactionOutput,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n\tSendOrdinalsResult,\n\tSendOrdinalsConfig,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\n\n/**\n * Sends ordinals to the given destinations\n * @param {SendOrdinalsConfig} config - Configuration object for sending ordinals\n * @param {Utxo[]} config.paymentUtxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.ordinals - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {string} config.changeAddress - Optional. Address to send change to, if any. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {MAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @param {boolean} config.enforceUniformSend - Optional. Default: true. Enforce that the number of destinations matches the number of ordinals being sent. Sending ordinals requires a 1:1 mapping of destinations to ordinals. This is only used for sub-protocols like BSV21 that manage tokens without sending the inscriptions directly.\n * @returns {Promise<SendOrdinalsResult>} Transaction, spent outpoints, and change vout\n */\nexport const sendOrdinals = async (config: SendOrdinalsConfig): Promise<SendOrdinalsResult> => {\n\tif (!config.satsPerKb) {\n\t\tconfig.satsPerKb = DEFAULT_SAT_PER_KB;\n\t}\n\tif (!config.additionalPayments) {\n\t\tconfig.additionalPayments = [];\n\t}\n\tif (config.enforceUniformSend === undefined) {\n\t\tconfig.enforceUniformSend = true;\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(config.satsPerKb);\n\tlet tx = new Transaction();\n\tconst spentOutpoints: string[] = [];\n\tlet payChangeVout: number | undefined;\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of config.ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(ordUtxo, new OrdP2PKH().unlock(config.ordPk));\n\t\tspentOutpoints.push(`${ordUtxo.txid}_${ordUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// check that ordinals coming in matches ordinals going out if supplied\n\tif (config.enforceUniformSend && config.destinations.length !== config.ordinals.length) {\n\t\tthrow new Error(\n\t\t\t\"Number of destinations must match number of ordinals being sent\",\n\t\t);\n\t}\n\n\t// Add ordinal outputs\n\tfor (const destination of config.destinations) {\n\t\tlet s: Script;\n\t\tif (\n\t\t\tdestination.inscription?.dataB64 &&\n\t\t\tdestination.inscription?.contentType\n\t\t) {\n\t\t\ts = new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription.dataB64,\n\t\t\t\tdestination.inscription.contentType,\n\t\t\t\tconfig.metaData,\n\t\t\t);\n\t\t} else {\n\t\t\ts = new P2PKH().lock(destination.address);\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: s,\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of config.additionalPayments) {\n\t\tconsole.log(\"Additional payment\", p);\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Add payment inputs\n\tfor (const paymentUtxo of config.paymentUtxos) {\n\t\tconst input = inputFromB64Utxo(paymentUtxo, new P2PKH().unlock(config.paymentPk));\n\t\tspentOutpoints.push(`${paymentUtxo.txid}_${paymentUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Add change output if needed\n\tconst fee = await modelOrFee.computeFee(tx);\n\tconst totalSatsIn = config.paymentUtxos.reduce(\n\t\t(total, utxo) => total + BigInt(utxo.satoshis),\n\t\t0n,\n\t);\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + (out.satoshis || 0),\n\t\t0,\n\t);\n\n\tif (totalSatsIn < totalSatsOut) {\n\t\tthrow new Error(\"Not enough ordinals to send\");\n\t}\n\t\n\tif (totalSatsIn > totalSatsOut + fee) {\n\t\tconst changeScript = new P2PKH().lock(\n\t\t\tconfig.changeAddress || config.paymentPk.toAddress().toString(),\n\t\t);\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChangeVout = tx.outputs.length;\n\t\ttx.addOutput(changeOut);\n\t}\n\n\tif (config.signer) {\n\t\ttx = await signData(tx, config.signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChangeVout,\n\t};\n};","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype TransactionOutput,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type { SendUtxosConfig, SendUtxosResult } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Sends utxos to the given destination\n * @param {SendUtxosConfig} config - Configuration object for sending utxos\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {Payment[]} config.payments - Array of payments with addresses and amounts\n * @param {number} [config.satsPerKb] - Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {string} [config.changeAddress] - Address to send change to. If not provided, defaults to paymentPk address\n * @returns {Promise<SendUtxosResult>} Transaction with utxo outputs\n */\nexport const sendUtxos = async (\n\tconfig: SendUtxosConfig,\n): Promise<SendUtxosResult> => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tpayments,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tchangeAddress = paymentPk.toAddress().toString(),\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\t// Outputs\n\tfor (const payment of payments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new P2PKH().lock(payment.to),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + (out.satoshis || 0),\n\t\t0,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + fee) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + fee) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to send. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChangeVout: number | undefined;\n\tif (totalSatsIn > totalSatsOut + fee) {\n\t\t// Change\n\t\tconst changeScript = new P2PKH().lock(changeAddress);\n\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChangeVout = tx.outputs.length;\n\t\ttx.addOutput(changeOut);\n\t} else if (totalSatsIn < totalSatsOut + fee) {\n\t\tconsole.log(\"No change needed\");\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// we dont want -1 we want undefined in that case\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChangeVout,\n\t};\n};\n","import type { PrivateKey, Transaction } from \"@bsv/sdk\";\nimport type { AuthToken } from \"sigma-protocol\";\n\n// biome-ignore lint/complexity/noBannedTypes: Reserved for future use\ntype Signer = {};\n\nexport interface LocalSigner extends Signer {\n\tidKey: PrivateKey;\n}\n\nexport interface RemoteSigner extends Signer {\n\tkeyHost: string;\n\tauthToken?: AuthToken;\n}\n\nexport type Destination = {\n\taddress: string;\n\tinscription?: Inscription;\n};\n\n/**\n * @typedef {Object} Distribution\n * @property {string} address - Destination address. Must be a Ordinals address (BSV address for recieving 1Sat ordinals tokens).\n * @property {string} amt - Number of tokens as a string, considering decimals. Not display format. Ex. 100000000 for 1 token with 8 decimal places.\n */\nexport type Distribution = {\n\taddress: string;\n\tamt: string;\n};\n\n/**\n * @typedef {Object} Utxo\n * @property {number} satoshis - Amount in satoshis\n * @property {string} txid - Transaction id\n * @property {number} vout - Output index\n * @property {string} script - Base64 encoded locking script\n */\nexport type Utxo = {\n\tsatoshis: number;\n\ttxid: string;\n\tvout: number;\n\tscript: string;\n};\n\n/**\n * @typedef {Object} TokenUtxo\n * @property {string} amt - Number of tokens as a string\n * @property {string} id - Token id -  either tick or id depending on protocol\n * @property {string} satoshis - Always 1\n */\nexport interface TokenUtxo extends Utxo {\n\tamt: string;\n\tid: string;\n\tsatoshis: 1;\n}\n\nexport type Inscription = {\n\tdataB64: string;\n\tcontentType: string;\n};\n\nexport type ImageContentType =\n\t| \"image/png\"\n\t| \"image/jpeg\"\n\t| \"image/gif\"\n\t| \"image/svg+xml\"\n\t| \"image/webp\";\n\n/**\n * @typedef {Object} IconInscription\n * @property {string} dataB64 - Base64 encoded image data. Must be a square image.\n * @property {ImageContentType} contentType - Media type of the image\n */\nexport type IconInscription = {\n\tdataB64: string;\n\tcontentType: ImageContentType;\n};\n\nexport type MAP = {\n\tapp: string;\n\ttype: string;\n\t[prop: string]: string;\n};\n\nexport type Payment = {\n\tto: string;\n\tamount: number;\n};\n\nexport type TokenInscription = {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\" | \"mint\" | \"deploy+mint\";\n};\n\nexport interface MintTokenInscription extends TokenInscription {\n\top: \"mint\";\n}\n\nexport interface DeployMintTokenInscription extends TokenInscription {\n\top: \"deploy+mint\";\n\tsym: string;\n\ticon: string;\n}\n\nexport interface TransferTokenInscription extends TokenInscription {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\";\n}\n\nexport interface TransferBSV20Inscription extends TransferTokenInscription {\n\ttick: string;\n}\n\nexport interface TransferBSV21Inscription extends TransferTokenInscription {\n\tid: string;\n}\n\nexport enum TokenType {\n\tBSV20 = \"bsv20\",\n\tBSV21 = \"bsv21\",\n}\n\n\nexport type CreateOrdinalsResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChangeVout?: number;\n};\n\nexport type CreateOrdinalsConfig = {\n\tutxos: Utxo[];\n\tdestinations: Destination[];\n\tpaymentPk: PrivateKey;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: MAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n};\n\nexport type SendOrdinalsResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChangeVout?: number;\n};\n\nexport type SendOrdinalsConfig = {\n\tpaymentUtxos: Utxo[];\n\tordinals: Utxo[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tdestinations: Destination[];\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: MAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n\tenforceUniformSend?: boolean;\n}\n\nexport type DeployBsv21TokenResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChangeVout: number;\n};\n\nexport type DeployBsv21TokenConfig = {\n\tsymbol: string;\n\ticon: string | IconInscription;\n\tutxos: Utxo[];\n\tinitialDistribution: Distribution;\n\tpaymentPk: PrivateKey;\n\tdestinationAddress: string;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[];\n};\n\nexport type SendUtxosResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChangeVout?: number;\n};\n\nexport type SendUtxosConfig = {\n\tutxos: Utxo[];\n\tpaymentPk: PrivateKey;\n\tpayments: Payment[];\n\tsatsPerKb?: number;\n\tchangeAddress?: string;\n};\n\nexport interface TransferOrdTokensResult extends SendOrdinalsResult {\n\ttokenChangeVout?: number;\n}\n\nexport type TransferOrdTokensConfig = {\n\tprotocol: TokenType;\n\ttokenID: string;\n\tutxos: Utxo[];\n\tinputTokens: TokenUtxo[];\n\tdistributions: Distribution[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tchangeAddress?: string;\n\ttokenChangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: MAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n}","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n} from \"@bsv/sdk\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n\tUtxo,\n\tDestination,\n\tMAP,\n\tLocalSigner,\n\tRemoteSigner,\n\tPayment,\n\tCreateOrdinalsConfig,\n\tCreateOrdinalsResult,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { signData } from \"./signData\";\n\n/**\n * Creates a transaction with inscription outputs\n * @param {CreateOrdinalsConfig} config - Configuration object for creating ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {string} config.changeAddress - Optional. Address to send change to. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {MAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Local or remote signer (used for data signature)\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<CreateOrdinalsResult>} Transaction with inscription outputs\n */\nexport const createOrdinals = async (\n\tconfig: CreateOrdinalsConfig\n): Promise<CreateOrdinalsResult> => {\n\tconst {\n\t\tutxos,\n\t\tdestinations,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Inputs\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\t}\n\n\t// Warn if creating many inscriptions at once\n\tif (destinations.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Outputs\n\t// Add inscription outputs\n\tfor (const destination of destinations) {\n\t\tif (!destination.inscription) {\n\t\t\tthrow new Error(\"Inscription is required for all destinations\");\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription.dataB64,\n\t\t\t\tdestination.inscription.contentType,\n\t\t\t\tmetaData,\n\t\t\t),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\tlet payChangeVout: number | undefined;\n\t\n\t// Calculate total input and output amounts\n\tconst totalInput = utxos.reduce((sum, utxo) => sum + BigInt(utxo.satoshis), 0n);\n\tconst totalOutput = tx.outputs.reduce((sum, output) => sum + BigInt(output.satoshis || 0), 0n);\n\t\n\t// Estimate fee\n\tconst estimatedFee = await modelOrFee.computeFee(tx);\n\t\n\t// Check if change is needed\n\tif (totalInput > totalOutput + BigInt(estimatedFee)) {\n\t\t// Add change output\n\t\ttx.addOutput({\n\t\t\tlockingScript: new P2PKH().lock(\n\t\t\t\tchangeAddress || paymentPk.toAddress().toString(),\n\t\t\t),\n\t\t\tchange: true,\n\t\t});\n\t\tpayChangeVout = tx.outputs.length - 1;\n\t}\n\t\n\tif (signer) {\n\t\ttx = await signData(tx, signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChangeVout,\n\t};\n};","import {\n\ttype Destination,\n\tTokenType,\n\ttype TransferBSV20Inscription,\n\ttype TransferTokenInscription,\n  type TransferBSV21Inscription,\n\ttype TransferOrdTokensConfig,\n\ttype TransferOrdTokensResult,\n\ttype SendOrdinalsConfig,\n} from \"./types\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { sendOrdinals } from \"./sendOrdinals\";\n\n\n/**\n * Transfer tokens to a destination\n * @param {TransferOrdTokensConfig} config - Configuration object for transferring tokens\n * @param {TokenType} config.protocol - Token protocol. Must be TokenType.BSV20 or TokenType.BSV21\n * @param {string} config.tokenID - Token ID. Either the tick or id value depending on the protocol\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {TokenUtxo[]} config.inputTokens - Token utxos to spend\n * @param {Distribution[]} config.distributions - Array of destinations with addresses and amounts\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {string} config.changeAddress - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {string} config.tokenChangeAddress - Optional. Address to send token change to, if any. If not provided, defaults to ordPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {MAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<TransferOrdTokensResult>} Transaction with token transfer outputs\n */\nexport const transferOrdTokens = async (config: TransferOrdTokensConfig): Promise<TransferOrdTokensResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tinputTokens,\n\t\tdistributions,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tchangeAddress,\n\t\ttokenChangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\t// calculate change amount\n\tlet changeAmt = 0n;\n\tlet totalAmtIn = 0n;\n\tlet totalAmtOut = 0n;\n\n  // Ensure these inputs are for the expected token\n\tif(!inputTokens.every(\n\t\t(token) => token.id === tokenID,\n\t)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n\tfor (const token of inputTokens) {\n\t\ttotalAmtIn += BigInt(token.amt);\n\t}\n\n\tfor (const dest of distributions) {\n\t\ttotalAmtOut += BigInt(dest.amt);\n\t}\n\n\t// check that you have enough tokens to send\n\tif (totalAmtIn < totalAmtOut) {\n\t\tthrow new Error(\"Not enough tokens to send\");\n\t}\n\n\tchangeAmt = totalAmtIn - totalAmtOut;\n\n\t// add change to distributions\n\tif (changeAmt > 0n) {\n\t\tconst changeDistribution = {\n\t\t\taddress: tokenChangeAddress || ordPk.toAddress().toString(),\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t\tdistributions.push(changeDistribution);\n\t}\n\n\t// build destination inscriptions\n\tconst destinations: Destination[] = distributions.map((dest) => {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: \"transfer\",\n\t\t\tamt: dest.amt,\n\t\t}\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n\t\treturn {\n\t\t\taddress: dest.address,\n\t\t\tinscription: {\n\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\t\tcontentType: \"application/bsv-20\",\n\t\t\t},\n\t\t};\n\t});\n\n\tconst sendOrdinalsConfig: SendOrdinalsConfig = {\n\t\tpaymentUtxos: utxos,\n\t\tordinals: inputTokens,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tdestinations,\n\t\tchangeAddress: changeAddress || paymentPk.toAddress().toString(),\n\t\tsatsPerKb,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments,\n\t\tenforceUniformSend: false\n\t};\n\n\tconst { tx, spentOutpoints, payChangeVout } = await sendOrdinals(sendOrdinalsConfig);\n\t\n\t// find the tokenChangeVout by looking for the destination with the tokenChangeAddress\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChangeVout,\n\t\ttokenChangeVout: destinations.findIndex(\n\t\t\t(d) => d.address === (tokenChangeAddress || ordPk.toAddress().toString())\n\t\t),\n\t}\n};"],"names":["toHex","utf8Str","Buffer","from","toString","OrdP2PKH","_P2PKH","apply","this","arguments","prototype","lock","address","b64File","mediaType","metaData","ordAsm","undefined","ordHex","fileHex","trim","Error","fileMediaType","inscriptionAsm","P2PKH","toASM","app","type","mapCmdValue","_i","_Object$entries","Object","entries","length","_Object$entries$_i","key","value","LockingScript","fromASM","fromBase58Check","Utils","inputFromB64Utxo","utxo","unlockScriptTemplate","input","fromUtxo","_extends","script","sourceTXID","txid","signData","tx","signer","_exit","_temp2","_result","idKey","keyHost","_sigma$sign","Sigma","sign","Promise","resolve","signedTx","_temp","authToken","sigma","remoteSign","then","_ref","_catch","e","console","log","reject","sendOrdinals","config","satsPerKb","additionalPayments","enforceUniformSend","payChangeVout","_step","modelOrFee","SatoshisPerKilobyte","Transaction","spentOutpoints","_iterator","_createForOfIteratorHelperLoose","ordinals","done","ordUtxo","satoshis","unlock","ordPk","push","vout","addInput","destinations","_iterator2","_step2","_destination$inscript","_destination$inscript2","s","destination","inscription","dataB64","contentType","addOutput","lockingScript","_step3","_iterator3","p","amount","to","_iterator4","_step4","paymentUtxos","paymentUtxo","paymentPk","computeFee","fee","totalSatsIn","reduce","total","BigInt","totalSatsOut","outputs","out","changeScript","changeAddress","toAddress","change","_signData","_settle","pact","state","_Pact","o","v","bind","observer","TokenType","onFulfilled","onRejected","result","_this","_isSettledPact","thenable","utxos","_config$satsPerKb","_config$additionalPay","warn","totalInput","sum","totalOutput","output","estimatedFee","map","payUrl","API_HOST","fetch","payRes","ok","json","payUtxos","filter","u","pubKeyHash","p2pkhScript","data","toBinary","error","statusText","_interrupt","payments","_config$changeAddress","payment","sendTxOut","_forOf","_modelOrFee$computeFe","protocol","tokenID","inputTokens","distributions","tokenChangeAddress","changeAmt","totalAmtIn","totalAmtOut","every","token","id","amt","changeDistribution","dest","transferInscription","op","BSV20","tick","BSV21","JSON","stringify","sendOrdinalsConfig","tokenChangeVout","findIndex","d"],"mappings":"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"}