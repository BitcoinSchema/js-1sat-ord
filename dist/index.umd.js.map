{"version":3,"file":"index.umd.js","sources":["../src/utils/strings.ts","../src/types.ts","../src/constants.ts","../src/templates/ordP2pkh.ts","../src/utils/utxo.ts","../src/signData.ts","../src/utils/subtypeData.ts","../src/createOrdinals.ts","../src/sendOrdinals.ts","../src/sendUtxos.ts","../src/transferOrdinals.ts","../src/templates/ordLock.ts","../src/createListings.ts","../src/cancelListings.ts","../src/purchaseOrdListing.ts","../src/utils/icon.ts","../src/deployBsv21.ts","../src/burnOrdinals.ts","../src/utils/paymail.ts","../src/validate.ts"],"sourcesContent":["/**\n * Converts a string to its hexadecimal representation\n *\n * @param {string} utf8Str - The string to convert\n * @returns {string} The hexadecimal representation of the input string\n */\nconst toHex = (utf8Str: string): string => {\n  return Buffer.from(utf8Str).toString(\"hex\");\n};\n\nexport { toHex };\n","import type { PrivateKey, Transaction } from \"@bsv/sdk\";\nimport type { AuthToken } from \"sigma-protocol\";\n\n// biome-ignore lint/complexity/noBannedTypes: Reserved for future use\ntype Signer = {};\n\nexport interface LocalSigner extends Signer {\n  idKey: PrivateKey;\n}\n\nexport interface RemoteSigner extends Signer {\n  keyHost: string;\n  authToken?: AuthToken;\n}\n\nexport type Destination = {\n  address: string;\n  inscription?: Inscription;\n};\n\n/**\n * @typedef {Object} Listing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n * @property {Utxo} listingUtxo - Utxo of the listing\n */\nexport type NewListing = {\n  payAddress: string;\n  price: number;\n  ordAddress: string;\n  listingUtxo: Utxo;\n}\n\n/**\n * @typedef {Object} ExistingListing\n * @property {string} payout - Payment output script base64 encoded\n * @property {Utxo} listingUtxo - Utxo of the listing\n */\nexport type ExistingListing = {\n  payout: string;\n  listingUtxo: Utxo;\n}\n\n/**\n * @typedef {Object} NewTokenListing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n * @property {number} amt - Number of tokens as a number. Not adjusted for decimals (library will add zeros according to dec value).\n */\nexport type NewTokenListing = {\n  payAddress: string;\n  price: number;\n  amt: number;\n  ordAddress: string;\n}\n\n/**\n * @typedef {Object} Distribution\n * @property {string} address - Destination address. Must be a Ordinals address (BSV address for recieving 1Sat ordinals tokens).\n * @property {number} amt - Number of tokens as a string, considering decimals. Not display format. Ex. 100000000 for 1 token with 8 decimal places.\n */\nexport type Distribution = {\n  address: string;\n  amt: number;\n};\n\n/**\n * @typedef {Object} Utxo\n * @property {number} satoshis - Amount in satoshis\n * @property {string} txid - Transaction id\n * @property {number} vout - Output index\n * @property {string} script - Base64 encoded locking script\n */\nexport type Utxo = {\n  satoshis: number;\n  txid: string;\n  vout: number;\n  script: string;\n};\n\n/**\n * @typedef {Object} NftUtxo\n * @property {string} collectionId - Optional. Collection id of the NFT\n * @property {string} contentType - Media type of the NFT\n * @property {string} creatorBapId - Optional. Creator BAP id of the NFT\n * @property {string} origin - Origin address of the NFT\n * @property {number} satoshis - Always 1\n */\nexport interface NftUtxo extends Utxo {\n  collectionId?: string;\n  contentType: string;\n  creatorBapId?: string;\n  origin: string;\n  satoshis: 1;\n}\n\n/**\n * @typedef {Object} TokenUtxo\n * @property {string} amt - Number of tokens as a string, adjusted for decimals. Ex. 100000000 for 1 token with 8 decimal places.\n * @property {string} id - Token id -  either tick or id depending on protocol\n * @property {string} satoshis - Always 1\n * @property {string} [payout] - Optional. Payment output script base64 encoded\n * @property {number} [price] - Optional. Listing price in satoshis\n * @property {boolean} [isListing] - Optional. True if the token is a listing\n */\nexport interface TokenUtxo extends Utxo {\n  amt: string;\n  id: string;\n  satoshis: 1;\n  payout?: string;\n  price?: number;\n  isListing?: boolean;\n}\n\nexport type Inscription = {\n  dataB64: string;\n  contentType: string;\n};\n\nexport type ImageContentType =\n  | \"image/png\"\n  | \"image/jpeg\"\n  | \"image/gif\"\n  | \"image/svg+xml\"\n  | \"image/webp\";\n\n/**\n * @typedef {Object} IconInscription\n * @property {string} dataB64 - Base64 encoded image data. Must be a square image.\n * @property {ImageContentType} contentType - Media type of the image\n */\nexport type IconInscription = {\n  dataB64: string;\n  contentType: ImageContentType;\n};\n\nexport type Payment = {\n  to: string;\n  amount: number;\n};\n\nexport type TokenInscription = {\n  p: \"bsv-20\";\n  amt: string;\n  op: \"transfer\" | \"mint\" | \"deploy+mint\" | \"burn\";\n  dec?: string;\n};\n\nexport interface MintTokenInscription extends TokenInscription {\n  op: \"mint\";\n}\n\nexport interface DeployMintTokenInscription extends TokenInscription {\n  op: \"deploy+mint\";\n  sym: string;\n  icon: string;\n}\n\nexport interface TransferTokenInscription extends TokenInscription {\n  p: \"bsv-20\";\n  amt: string;\n  op: \"transfer\" | \"burn\";\n}\n\nexport interface TransferBSV20Inscription extends TransferTokenInscription {\n  tick: string;\n}\n\nexport interface TransferBSV21Inscription extends TransferTokenInscription {\n  id: string;\n}\n\nexport enum TokenType {\n  BSV20 = \"bsv20\",\n  BSV21 = \"bsv21\",\n}\n\nexport type BaseResult = {\n  tx: Transaction;\n  spentOutpoints: string[];\n};\n\nexport interface ChangeResult extends BaseResult {\n  payChange?: Utxo;\n};\n\n/**\n * MAP (Magic Attribute Protocol) metadata object with stringified values for writing to the blockchain\n * @typedef {Object} MAP\n * @property {string} app - Application identifier\n * @property {string} type - Metadata type\n * @property {string} [prop] - Optional. Additional metadata properties\n */\nexport type MAP = {\n  app: string;\n  type: string;\n  [prop: string]: string;\n};\n\nexport type PreMAP = {\n  app: string;\n  type: string;\n  [prop: string]: unknown;\n  royalties?: Royalty[];\n  subTypeData?: CollectionSubTypeData | CollectionItemSubTypeData;\n};\n\nexport type CreateOrdinalsConfig = {\n  utxos: Utxo[];\n  destinations: Destination[];\n  paymentPk: PrivateKey;\n  changeAddress?: string;\n  satsPerKb?: number;\n  metaData?: PreMAP;\n  signer?: LocalSigner | RemoteSigner;\n  additionalPayments?: Payment[];\n};\n\nexport enum RoytaltyType {\n  Paymail = \"paymail\",\n  Address = \"address\",\n  Script = \"script\",\n}\n\n/**\n * Royalty object\n * @typedef {Object} Royalty\n * @property {RoytaltyType} type - Royalty type, string, one of \"paymail\", \"address\", \"script\"\n * @property {string} destination - Royalty destination\n * @property {string} percentage - Royalty percentage as a string float 0-1 (0.01 = 1%)\n */\nexport type Royalty = {\n  type: RoytaltyType;\n  destination: string;\n  percentage: string; // string float 0-1\n};\n\nexport interface CreateOrdinalsMetadata extends PreMAP {\n  type: \"ord\",\n  name: string,\n  previewUrl?: string,\n}\n\nexport interface CreateOrdinalsCollectionMetadata extends CreateOrdinalsMetadata {\n  subType: \"collection\",\n  subTypeData: CollectionSubTypeData, // JSON stringified CollectionSubTypeData\n  royalties?: Royalty[],\n};\n\nexport interface CreateOrdinalsCollectionItemMetadata extends CreateOrdinalsMetadata {\n  subType: \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n};\n\n/**\n * Configuration object for creating an ordinals collection\n * @typedef {Object} CreateOrdinalsCollectionConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collection\"\n * @property metaData.name - Collection name\n * @property metaData.subTypeData - JSON stringified CollectionSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionConfig extends CreateOrdinalsConfig {\n  metaData: CreateOrdinalsCollectionMetadata\n}\n\nexport type CollectionTraits = {\n  [trait: string]: CollectionTrait;\n};\n\nexport type CollectionTrait = {\n  values: string[];\n  occurancePercentages: string[];\n};\n\nexport type Rarity = {\n  [key: string]: string;\n}\n\nexport type RarityLabels = Rarity[]\nexport interface CollectionSubTypeData {\n  description: string;\n  quantity: number;\n  rarityLabels: RarityLabels;\n  traits: CollectionTraits;\n}\n\nexport interface CreateOrdinalsCollectionItemMetadata extends PreMAP {\n  type: \"ord\",\n  name: string,\n  subType: \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n  royalties?: Royalty[],\n  previewUrl?: string,\n}\n\n/**\n * Configuration object for creating an ordinals collection item\n * @typedef {Object} CreateOrdinalsCollectionItemConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection item\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collectionItem\"\n * @property metaData.name - Collection item name\n * @property metaData.subTypeData - JSON stringified CollectionItemSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionItemConfig extends CreateOrdinalsConfig {\n  metaData: CreateOrdinalsCollectionItemMetadata\n}\n\n/**\n * Subtype data for an ordinals collection item\n * @typedef {Object} CollectionItemSubTypeData\n * @property {string} collectionId - Collection id\n * @property {number} mintNumner - Mint number\n * @property {number} rank - Rank\n * @property {string} rarityLabel - Rarity label\n * @property {string} traits - traits object\n * @property {string} attachments - array of attachment objects\n */\nexport interface CollectionItemSubTypeData {\n  collectionId: string;\n  mintNumber?: number;\n  rank?: number;\n  rarityLabel?: RarityLabels;\n  traits?: CollectionItemTrait[];\n  attachments?: CollectionItemAttachment[];\n}\n\nexport type CollectionItemTrait = {\n  name: string;\n  value: string;\n  rarityLabel?: string;\n  occurancePercentrage?: string;\n};\n\nexport type CollectionItemAttachment = {\n  name: string;\n  description?: string;\n  \"content-type\": string;\n  url: string;\n}\n\nexport interface BurnMAP extends MAP {\n  type: \"ord\";\n  op: \"burn\";\n}\n\nexport type BurnOrdinalsConfig = {\n  ordPk: PrivateKey;\n  ordinals: Utxo[];\n  metaData?: BurnMAP;\n}\n\nexport type SendOrdinalsConfig = {\n  paymentUtxos: Utxo[];\n  ordinals: Utxo[];\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  destinations: Destination[];\n  changeAddress?: string;\n  satsPerKb?: number;\n  metaData?: PreMAP;\n  signer?: LocalSigner | RemoteSigner;\n  additionalPayments?: Payment[];\n  enforceUniformSend?: boolean;\n}\n\nexport type DeployBsv21TokenConfig = {\n  symbol: string;\n  decimals?: number;\n  icon: string | IconInscription;\n  utxos: Utxo[];\n  initialDistribution: Distribution;\n  paymentPk: PrivateKey;\n  destinationAddress: string;\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[];\n};\n\nexport type SendUtxosConfig = {\n  utxos: Utxo[];\n  paymentPk: PrivateKey;\n  payments: Payment[];\n  satsPerKb?: number;\n  changeAddress?: string;\n  metaData?: MAP;\n};\n\nexport interface TokenChangeResult extends ChangeResult {\n  tokenChange?: TokenUtxo;\n}\n\nexport type TransferOrdTokensConfig = {\n  protocol: TokenType;\n  tokenID: string;\n  decimals: number;\n  utxos: Utxo[];\n  inputTokens: TokenUtxo[];\n  distributions: Distribution[];\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  changeAddress?: string;\n  tokenChangeAddress?: string;\n  satsPerKb?: number;\n  metaData?: PreMAP;\n  signer?: LocalSigner | RemoteSigner;\n  additionalPayments?: Payment[];\n  burn?: boolean;\n}\n\nexport type CreateOrdListingsConfig = {\n  utxos: Utxo[];\n  listings: NewListing[];\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey,\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[];\n}\n\nexport type PurchaseOrdListingConfig = {\n  utxos: Utxo[];\n  paymentPk: PrivateKey;\n  listing: ExistingListing;\n  ordAddress: string;\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[],\n  royalties?: Royalty[],\n}\n\nexport type PurchaseOrdTokenListingConfig = {\n  protocol: TokenType;\n  tokenID: string;\n  utxos: Utxo[];\n  paymentPk: PrivateKey;\n  listingUtxo: TokenUtxo;\n  ordAddress: string;\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[],\n}\n\nexport type CancelOrdListingsConfig = {\n  utxos: Utxo[],\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  listingUtxos: Utxo[];\n  additionalPayments?: Payment[];\n  changeAddress?: string;\n  satsPerKb?: number;\n}\n\nexport interface CancelOrdTokenListingsConfig extends CancelOrdListingsConfig {\n  utxos: Utxo[],\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  listingUtxos: TokenUtxo[];\n  additionalPayments: Payment[];\n  changeAddress?: string;\n  satsPerKb?: number;\n  protocol: TokenType,\n  tokenID: string;\n  ordAddress?: string;\n}\n\n/**\n * Configuration object for creating a token listing\n * @typedef {Object} CreateOrdTokenListingsConfig\n * @property {Utxo[]} utxos - Array of payment Utxos\n * @property {TokenUtxo[]} inputTokens - Array of TokenUtxos to be listed\n * @property {NewTokenListing[]} listings - Array of NewTokenListings\n * @property {PrivateKey} paymentPk - Private key of the payment address\n * @property {PrivateKey} ordPk - Private key of the ord address\n * @property {string} tokenChangeAddress - Address to send the token change\n * @property {number} [satsPerKb] - Optional. Satoshis per kilobyte\n * @property {Payment[]} [additionalPayments] - Optional. Array of additional payments\n * @property {TokenType} protocol - Token protocol\n * @property {string} tokenID - Token id\n * @property {number} decimals - Number of decimal places for this token.\n */\nexport interface CreateOrdTokenListingsConfig {\n  utxos: Utxo[];\n  listings: NewTokenListing[];\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey,\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[];\n  protocol: TokenType;\n  tokenID: string;\n  decimals: number;\n  inputTokens: TokenUtxo[];\n  tokenChangeAddress: string;\n}\n\nexport const MAX_TOKEN_SUPPLY = 2n ** 64n - 1n;","export const MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\nexport const DEFAULT_SAT_PER_KB = 10;\nexport const API_HOST = \"https://ordinals.gorillapool.io/api\";","import {\n\tLockingScript,\n\tP2PKH,\n\ttype Script,\n} from \"@bsv/sdk\";\nimport type { Inscription, MAP } from \"../types\";\nimport { toHex } from \"../utils/strings\";\nimport { MAP_PREFIX } from \"../constants\";\n\n/**\n * OrdP2PKH (1Sat Ordinal + Pay To Public Key Hash) class implementing ScriptTemplate.\n *\n * This class provides methods to create an Ordinal with Pay To Public Key Hash locking and unlocking scripts. \n * It extends the standard P2PKH script template and provides a custom lock method.\n */\nexport default class OrdP2PKH extends P2PKH {\n\t/**\n\t * Creates a 1Sat Ordinal + P2PKH locking script for a given address string\n\t *\n\t * @param {string} address - An destination address for the Ordinal.\n\t * @param {Object} [inscription] - Base64 encoded file data and Content type of the file.\n\t * @param {MAP} [metaData] - (optional) MAP Metadata to be included in OP_RETURN.\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\t// unlock method inherits from p2pkh\n\tlock(\n\t\taddress: string,\n    inscription?: Inscription,\n\t\tmetaData?: MAP | undefined,\n\t): Script {\n\t\tlet ordAsm = \"\";\n\t\t// This can be omitted for reinscriptions that just update metadata\n\t\tif (inscription?.dataB64 !== undefined && inscription?.contentType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(inscription.dataB64, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(inscription.contentType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`;\n\t\t}\n\n\t\t// Create ordinal output and inscription in a single output\n\t\tconst lockingScript = new P2PKH().lock(address);\n\t\tlet inscriptionAsm = `${ordAsm ? `${ordAsm} ` : \"\"}${lockingScript.toASM()}`;\n\n\t\t// MAP.app and MAP.type keys are required\n\t\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t\t}\n\n\t\tif (metaData?.app && metaData?.type) {\n\t\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\t\tconst mapCmdValue = toHex(\"SET\");\n\t\t\tinscriptionAsm = `${inscriptionAsm ? `${inscriptionAsm} `: \"\"}OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\t\tif (key !== \"cmd\") {\n\t\t\t\t\tinscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\n\t\t\t\t\t\tvalue as string,\n\t\t\t\t\t)}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn LockingScript.fromASM(inscriptionAsm);\n\t}\n}\n","import {\n\ttype Transaction,\n\ttype UnlockingScript,\n\tfromUtxo,\n\ttype TransactionInput,\n\tUtils,\n\tP2PKH,\n  Script,\n} from \"@bsv/sdk\";\nimport { type NftUtxo, TokenType, type TokenUtxo, type Utxo } from \"../types\";\nimport { API_HOST } from \"../constants\";\n\nconst { fromBase58Check } = Utils;\n\n/**\n * Converts a Utxo object with a base64 encoded script to a Utxo object with a hex encoded script\n * @param {Utxo} utxo - Utxo object with base64 encoded script\n * @param {Object} unlockScriptTemplate - Object with sign and estimateLength functions\n * @returns {TransactionInput} Utxo object with hex encoded script\n */\nexport const inputFromB64Utxo = (\n\tutxo: Utxo,\n\tunlockScriptTemplate: {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>;\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>;\n\t},\n): TransactionInput => {\n\tconst input = fromUtxo(\n\t\t{\n\t\t\t...utxo,\n\t\t\tscript: Buffer.from(utxo.script, \"base64\").toString(\"hex\"),\n\t\t},\n\t\tunlockScriptTemplate,\n\t);\n\treturn input;\n};\n\n/**\n * Fetches pay utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<Utxo[]>} Array of pay utxos\n */\nexport const fetchPayUtxos = async (address: string, scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\"): Promise<Utxo[]> => {\n\tconst payUrl = `${API_HOST}/txos/address/${address}/unspent?bsv20=false`;\n\tconsole.log({ payUrl });\n\tconst payRes = await fetch(payUrl);\n\tif (!payRes.ok) {\n\t\tthrow new Error(\"Error fetching pay utxos\");\n\t}\n\tlet payUtxos = await payRes.json();\n\t// exclude all 1 satoshi utxos\n\tpayUtxos = payUtxos.filter((u: { satoshis: number }) => u.satoshis !== 1);\n\n\t// Get pubkey hash from address\n\tconst pubKeyHash = fromBase58Check(address);\n\tconst p2pkhScript = new P2PKH().lock(pubKeyHash.data);\n\tpayUtxos = payUtxos.map((utxo: Partial<Utxo>) => ({\n\t\ttxid: utxo.txid,\n\t\tvout: utxo.vout,\n\t\tsatoshis: utxo.satoshis,\n\t\tscript: scriptEncoding === \"hex\" || scriptEncoding === \"base64\" ? Buffer.from(p2pkhScript.toBinary()).toString(scriptEncoding) : p2pkhScript.toASM(),\n\t}));\n\treturn payUtxos as Utxo[];\n};\n\n/**\n * Fetches NFT utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @param {string} [collectionId] - Optional. Collection id (collection insciprtion origin)\n * @param {number} [limit=10] - Optional. Number of utxos to fetch. Default is 10\n * @param {number} [offset=0] - Optional. Offset for fetching utxos. Default is 0\n * @param {string} [scriptEncoding=\"base64\"] - Optional. Encoding for the script. Default is base64. Options are hex, base64, or asm.\n * @returns {Promise<Utxo[]>} Array of NFT utxos\n */\nexport const fetchNftUtxos = async (\n\taddress: string,\n\tcollectionId?: string,\n\tlimit = 10,\n\toffset = 0,\n  scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\",\n): Promise<NftUtxo[]> => {\n\tlet url = `${API_HOST}/txos/address/${address}/unspent?limit=${limit}&offset=${offset}&`;\n\n\tif (collectionId) {\n\t\tconst query = {\n\t\t\tmap: {\n\t\t\t\tsubTypeData: { collectionId },\n\t\t\t},\n\t\t};\n\t\tconst b64Query = Buffer.from(JSON.stringify(query)).toString(\"base64\");\n\t\turl += `q=${b64Query}`;\n\t}\n\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching NFT utxos for ${address}`);\n\t}\n\n\t// Returns a BSV20Txo but we only need a few fields\n\tlet nftUtxos = await res.json();\n\n\t// Only include 1 satoshi outputs, non listings\n\tnftUtxos = nftUtxos.filter(\n\t\t(u: {\n\t\t\tsatoshis: number;\n\t\t\tdata: { list: { price: number; payout: string } | undefined } | null;\n\t\t}) => u.satoshis === 1 && !u.data?.list,\n\t);\n\n\tconst outpoints = nftUtxos.map(\n\t\t(utxo: { txid: string; vout: number }) => `${utxo.txid}_${utxo.vout}`,\n\t);\n\t// Fetch the scripts up to the limit\n\tconst nftRes = await fetch(`${API_HOST}/txos/outpoints?script=true`, {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t\tbody: JSON.stringify([...outpoints]),\n\t});\n\n\tif (!nftRes.ok) {\n\t\tthrow new Error(`Error fetching NFT scripts for ${address}`);\n\t}\n\n\tconst nfts = (await nftRes.json() || [])\n\n\tnftUtxos = nfts.map(\n\t\t(utxo: {\n\t\t\torigin: { outpoint: string };\n\t\t\tscript: string;\n\t\t\tvout: number;\n\t\t\ttxid: string;\n\t\t}) => {\n      let script = utxo.script;\n      if (scriptEncoding === \"hex\") {\n        script = Buffer.from(script, \"base64\").toString(\"hex\");\n      } else if (scriptEncoding === \"asm\") {\n        script = Script.fromHex(Buffer.from(script, \"base64\").toString(\"hex\")).toASM();\n      }\n\t\t\tconst nftUtxo = {\n\t\t\t\torigin: utxo.origin.outpoint,\n\t\t\t\tscript,\n\t\t\t\tvout: utxo.vout,\n\t\t\t\ttxid: utxo.txid,\n\t\t\t\tsatoshis: 1,\n\t\t\t} as NftUtxo;\n\t\t\tif (collectionId) {\n\t\t\t\tnftUtxo.collectionId = collectionId;\n\t\t\t}\n\t\t\treturn nftUtxo;\n\t\t},\n\t);\n\n\treturn nftUtxos as NftUtxo[];\n};\n\n/**\n * Fetches token utxos from the API\n * @param {TokenType} protocol - Token protocol. Either BSV20 or BSV21\n * @param {string} tokenId - Token id. Ticker for BSV20 and id (mint+deploy inscription origin) for BSV21\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<TokenUtxo[]>} Array of token utxos\n */\nexport const fetchTokenUtxos = async (\n\tprotocol: TokenType,\n\ttokenId: string,\n\taddress: string,\n): Promise<TokenUtxo[]> => {\n\tconst url = `${API_HOST}/bsv20/${address}/${protocol === TokenType.BSV20 ? \"tick\" : \"id\"}/${tokenId}?bsv20=true&listing=false`;\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching ${protocol} utxos`);\n\t}\n\n\t// returns a BSV20Txo but we only need a few fields\n\tlet tokenUtxos = await res.json();\n\n\ttokenUtxos = tokenUtxos.map((utxo: Partial<TokenUtxo>) => ({\n\t\tamt: utxo.amt,\n\t\tscript: utxo.script,\n\t\tvout: utxo.vout,\n\t\ttxid: utxo.txid,\n\t\tid: tokenId,\n\t\tsatoshis: 1,\n\t}));\n\n\treturn tokenUtxos as TokenUtxo[];\n};\n","import type { Transaction } from \"@bsv/sdk\";\nimport { Sigma } from \"sigma-protocol\";\nimport type { LocalSigner, RemoteSigner } from \"./types\";\n\n/**\n * Signs data in the transaction with Sigma protocol\n * @param {Transaction} tx - Transaction to sign\n * @param {LocalSigner | RemoteSigner} signer - Local or remote signer (used for data signature)\n * @returns {Transaction} Transaction with signed data\n */\nexport const signData = async (\n\ttx: Transaction,\n\tsigner: LocalSigner | RemoteSigner,\n): Promise<Transaction> => {\n\t// Sign tx if idKey or remote signer like starfish/tokenpass\n\tconst idKey = (signer as LocalSigner)?.idKey;\n\tconst keyHost = (signer as RemoteSigner)?.keyHost;\n\n\tif (idKey) {\n\t\tconst sigma = new Sigma(tx);\n\t\tconst { signedTx } = sigma.sign(idKey);\n\t\treturn signedTx;\n\t}\n\tif (keyHost) {\n\t\tconst authToken = (signer as RemoteSigner)?.authToken;\n\t\tconst sigma = new Sigma(tx);\n\t\ttry {\n\t\t\tconst { signedTx } = await sigma.remoteSign(keyHost, authToken);\n\t\t\treturn signedTx;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthrow new Error(`Remote signing to ${keyHost} failed`);\n\t\t}\n\t}\n\tthrow new Error(\"Signer must be a LocalSigner or RemoteSigner\");\n};\n","import type { MAP, PreMAP } from \"../types\";\n\nconst stringifyMetaData = (metaData?: PreMAP): MAP | undefined => {\n  if (!metaData) return undefined;\n\tconst result: MAP = {\n\t\tapp: metaData.app,\n\t\ttype: metaData.type,\n\t};\n\n\tfor (const [key, value] of Object.entries(metaData)) {\n\t\tif (value !== undefined) {\n\t\t\tif (typeof value === \"string\") {\n\t\t\t\tresult[key] = value;\n\t\t\t} else if (Array.isArray(value) || typeof value === \"object\") {\n\t\t\t\tresult[key] = JSON.stringify(value);\n\t\t\t} else {\n\t\t\t\tresult[key] = String(value);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\nexport default stringifyMetaData;\n","import { Transaction, SatoshisPerKilobyte, P2PKH, Script, Utils } from \"@bsv/sdk\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n\tUtxo,\n\tCreateOrdinalsConfig,\n\tCreateOrdinalsCollectionConfig,\n\tCreateOrdinalsCollectionItemConfig,\n  ChangeResult,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Creates a transaction with inscription outputs\n * @param {CreateOrdinalsConfig | CreateOrdinalsCollectionConfig | CreateOrdinalsCollectionItemConfig} config - Configuration object for creating ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {string} config.changeAddress - Optional. Address to send change to. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Local or remote signer (used for data signature)\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<ChangeResult>} Transaction with inscription outputs\n */\nexport const createOrdinals = async (\n\tconfig:\n\t\t| CreateOrdinalsConfig\n\t\t| CreateOrdinalsCollectionConfig\n\t\t| CreateOrdinalsCollectionItemConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tutxos,\n\t\tdestinations,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t} = config;\n\t\n\t// Warn if creating many inscriptions at once\n\tif (destinations.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Outputs\n\t// Add inscription outputs\n\tfor (const destination of destinations) {\n\t\tif (!destination.inscription) {\n\t\t\tthrow new Error(\"Inscription is required for all destinations\");\n\t\t}\n\n\t\t// remove any undefined fields from metadata\n\t\tif (metaData) {\n\t\t\tfor(const key of Object.keys(metaData)) {\n\t\t\t\tif (metaData[key] === undefined) {\n\t\t\t\t\tdelete metaData[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription,\n\t\t\t\tstringifyMetaData(metaData),\n\t\t\t),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\tlet payChange: Utxo | undefined;\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\n\tif(signer) {\n\t\tconst utxo = utxos.pop() as Utxo\n\t\ttx.addInput(inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t)));\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\ttx = await signData(tx, signer);\n\t}\n\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to create ordinals. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\tScript,\n\ttype TransactionOutput,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type { SendOrdinalsConfig, Utxo, ChangeResult } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Sends ordinals to the given destinations\n * @param {SendOrdinalsConfig} config - Configuration object for sending ordinals\n * @param {Utxo[]} config.paymentUtxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.ordinals - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {string} [config.changeAddress] - Optional. Address to send change to, if any. If not provided, defaults to paymentPk address\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} [config.signer] - Optional. Signer object to sign the transaction\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to include in the transaction\n * @param {boolean} [config.enforceUniformSend] - Optional. Default: true. Enforce that the number of destinations matches the number of ordinals being sent. Sending ordinals requires a 1:1 mapping of destinations to ordinals. This is only used for sub-protocols like BSV21 that manage tokens without sending the inscriptions directly.\n * @returns {Promise<ChangeResult>} Transaction, spent outpoints, and change utxo\n */\nexport const sendOrdinals = async (\n\tconfig: SendOrdinalsConfig,\n): Promise<ChangeResult> => {\n\tif (!config.satsPerKb) {\n\t\tconfig.satsPerKb = DEFAULT_SAT_PER_KB;\n\t}\n\tif (!config.additionalPayments) {\n\t\tconfig.additionalPayments = [];\n\t}\n\tif (config.enforceUniformSend === undefined) {\n\t\tconfig.enforceUniformSend = true;\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(config.satsPerKb);\n\tlet tx = new Transaction();\n\tconst spentOutpoints: string[] = [];\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of config.ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(\n\t\t\tordUtxo,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tconfig.ordPk, \n\t\t\t\t\"all\",\n\t\t\t\ttrue, \n\t\t\t\tordUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(ordUtxo.script, 'base64'))\n\t\t\t),\n\t\t);\n\t\tspentOutpoints.push(`${ordUtxo.txid}_${ordUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// check that ordinals coming in matches ordinals going out if supplied\n\tif (\n\t\tconfig.enforceUniformSend &&\n\t\tconfig.destinations.length !== config.ordinals.length\n\t) {\n\t\tthrow new Error(\n\t\t\t\"Number of destinations must match number of ordinals being sent\",\n\t\t);\n\t}\n\n\t// Add ordinal outputs\n\tfor (const destination of config.destinations) {\n\t\tlet s: Script;\n\t\tif (\n\t\t\tdestination.inscription?.dataB64 &&\n\t\t\tdestination.inscription?.contentType\n\t\t) {\n\t\t\ts = new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription,\n\t\t\t\tstringifyMetaData(config.metaData),\n\t\t\t);\n\t\t} else {\n\t\t\ts = new P2PKH().lock(destination.address);\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: s,\n\t\t});\n\t}\n\n  \n\t// Add additional payments if any\n\tfor (const p of config.additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n  // add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = config.changeAddress || config.paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of config.paymentUtxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tconfig.paymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\tspentOutpoints.push(`${utxo.txid}_${utxo.vout}`);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (totalSatsIn < totalSatsOut) {\n\t\tthrow new Error(\"Not enough ordinals to send\");\n\t}\n\n\tif (config.signer) {\n\t\ttx = await signData(tx, config.signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChange,\n\t};\n};\n","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype TransactionOutput,\n\tUtils,\n\tScript,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type { ChangeResult, SendUtxosConfig, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\n\n/**\n * Sends utxos to the given destination\n * @param {SendUtxosConfig} config - Configuration object for sending utxos\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {Payment[]} config.payments - Array of payments with addresses and amounts\n * @param {number} [config.satsPerKb] - (Optional) Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {string} [config.changeAddress] - (Optional) Address to send change to. If not provided, defaults to paymentPk address\n * @param {string} [config.metaData] - (Optional) Metadata to include in OP_RETURN of the payment output\n * @returns {Promise<ChangeResult>} Transaction with utxo outputs\n */\nexport const sendUtxos = async (\n\tconfig: SendUtxosConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tpayments,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tchangeAddress = paymentPk.toAddress().toString(),\n    metaData,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\t// Outputs\n\tfor (const payment of payments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new OrdP2PKH().lock(payment.to, undefined, metaData),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + (out.satoshis || 0),\n\t\t0,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\ttx.addInput(input);\n\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + fee) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + fee) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to send. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChange: Utxo | undefined;\n\tif (totalSatsIn > totalSatsOut + fee) {\n\t\t// Change\n\t\tconst changeScript = new P2PKH().lock(changeAddress);\n\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t} else if (totalSatsIn < totalSatsOut + fee) {\n\t\tconsole.log(\"No change needed\");\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\t\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import { P2PKH, SatoshisPerKilobyte, Script, Transaction, Utils } from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport {\n  TokenType,\n  type TokenUtxo,\n  type TransferBSV20Inscription,\n  type TransferBSV21Inscription,\n  type TransferOrdTokensConfig,\n  type TokenChangeResult,\n  type TransferTokenInscription,\n  type Utxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Transfer tokens to a destination\n * @param {TransferOrdTokensConfig} config - Configuration object for transferring tokens\n * @param {TokenType} config.protocol - Token protocol. Must be TokenType.BSV20 or TokenType.BSV21\n * @param {string} config.tokenID - Token ID. Either the tick or id value depending on the protocol\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {TokenUtxo[]} config.inputTokens - Token utxos to spend\n * @param {Distribution[]} config.distributions - Array of destinations with addresses and amounts\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {decimals} config.decimals - Number of decimal places for the token\n * @param {string} [config.changeAddress] - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {string} [config.tokenChangeAddress] - Optional. Address to send token change to, if any. If not provided, defaults to ordPk address\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} [config.signer] - Optional. Signer object to sign the transaction\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to include in the transaction\n * @param {burn} [config.burn] - Optional. Set to true to burn the tokens.\n * @returns {Promise<TokenChangeResult>} Transaction with token transfer outputs\n */\nexport const transferOrdTokens = async (config: TransferOrdTokensConfig): Promise<TokenChangeResult> => {\n  const {\n    protocol,\n    tokenID,\n    utxos,\n    inputTokens,\n    distributions,\n    paymentPk,\n    ordPk,\n    changeAddress,\n    tokenChangeAddress,\n    satsPerKb = DEFAULT_SAT_PER_KB,\n    metaData,\n    signer,\n    decimals,\n    additionalPayments = [],\n    burn = false\n  } = config;\n\n  // calculate change amount\n  let changeAmt = 0n;\n  let totalAmtIn = 0n;\n  let totalAmtOut = 0n;\n\n  // Ensure these inputs are for the expected token\n  if (!inputTokens.every((token) => token.id === tokenID)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n  for (const token of inputTokens) {\n    const inputScriptBinary = Utils.toArray(token.script, \"base64\");\n    const inputScript = Script.fromBinary(inputScriptBinary);\n    tx.addInput(inputFromB64Utxo(\n      token,\n      new OrdP2PKH().unlock(\n        ordPk,\n        \"all\",\n        true,\n        token.satoshis,\n        inputScript,\n      ),\n    ));\n\n    totalAmtIn += BigInt(token.amt);\n  }\n\n  // build destination inscriptions\n  for (const dest of distributions) {\n    const bigAmt = BigInt(dest.amt * 10 ** decimals);\n    const transferInscription: TransferTokenInscription = {\n      p: \"bsv-20\",\n      op: burn ? \"burn\" : \"transfer\",\n      amt: bigAmt.toString(),\n    }\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n    if (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n    } else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n    tx.addOutput({\n      satoshis: 1,\n      lockingScript: new OrdP2PKH().lock(\n        dest.address,\n        {\n          dataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n          contentType: \"application/bsv-20\",\n        },\n      ),\n    });\n    totalAmtOut += bigAmt;\n  };\n  changeAmt = totalAmtIn - totalAmtOut;\n\n  let tokenChange: TokenUtxo | undefined;\n  // check that you have enough tokens to send and return change\n  if (changeAmt < 0n) {\n    throw new Error(\"Not enough tokens to send\");\n  }\n  if (changeAmt > 0n) {\n    const transferInscription: TransferTokenInscription = {\n      p: \"bsv-20\",\n      op: \"transfer\",\n      amt: changeAmt.toString(),\n    };\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n    if (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n    } else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n    // remove any undefined fields from metadata\n\t\tif (metaData) {\n\t\t\tfor(const key of Object.keys(metaData)) {\n\t\t\t\tif (metaData[key] === undefined) {\n\t\t\t\t\tdelete metaData[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst lockingScript = new OrdP2PKH().lock(\n\t\t\ttokenChangeAddress || ordPk.toAddress().toString(), \n\t\t\t{\n\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString('base64'),\n\t\t\t\tcontentType: \"application/bsv-20\",\n\t\t\t},\n      stringifyMetaData(metaData)\n\t\t);\n    \n\t\tconst vout = tx.outputs.length;\n\t\ttx.addOutput({ lockingScript, satoshis: 1 });\n\t\ttokenChange = {\n\t\t\tid: tokenID,\n\t\t\tsatoshis: 1,\n\t\t\tscript: Buffer.from(lockingScript.toBinary()).toString(\"base64\"),\n\t\t\ttxid: \"\",\n\t\t\tvout,\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t}\n\n  // Add additional payments if any\n  for (const p of additionalPayments) {\n    tx.addOutput({\n      satoshis: p.amount,\n      lockingScript: new P2PKH().lock(p.to),\n    });\n  }\n\n  // add change to the outputs\n  let payChange: Utxo | undefined;\n\n  const change = changeAddress || paymentPk.toAddress().toString();\n  const changeScript = new P2PKH().lock(change);\n  const changeOut = {\n    lockingScript: changeScript,\n    change: true,\n  };\n  tx.addOutput(changeOut);\n\n  let totalSatsIn = 0n;\n  const totalSatsOut = tx.outputs.reduce(\n    (total, out) => total + BigInt(out.satoshis || 0),\n    0n,\n  );\n  let fee = 0;\n  for (const utxo of utxos) {\n    const input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n      paymentPk,\n      \"all\",\n      true,\n      utxo.satoshis,\n      Script.fromBinary(Utils.toArray(utxo.script, 'base64'))\n    ));\n\n    tx.addInput(input);\n    // stop adding inputs if the total amount is enough\n    totalSatsIn += BigInt(utxo.satoshis);\n    fee = await modelOrFee.computeFee(tx);\n\n    if (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n      break;\n    }\n  }\n\n  // make sure we have enough\n  if (totalSatsIn < totalSatsOut + BigInt(fee)) {\n    throw new Error(\n      `Not enough funds to transfer tokens. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n    );\n  }\n\n  if (config.signer) {\n\t\ttx = await signData(tx, config.signer);\n\t}\n  \n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n  // Sign the transaction\n  await tx.sign();\n\n  const txid = tx.id(\"hex\") as string;\n  if (tokenChange) {\n    tokenChange.txid = txid;\n  }\n  // check for change\n  const payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n  if (payChangeOutIdx !== -1) {\n    const changeOutput = tx.outputs[payChangeOutIdx];\n    payChange = {\n      satoshis: changeOutput.satoshis as number,\n      txid,\n      vout: payChangeOutIdx,\n      script: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n        \"base64\",\n      ),\n    };\n  }\n\n  if (payChange) {\n    const changeOutput = tx.outputs[tx.outputs.length - 1];\n    payChange.satoshis = changeOutput.satoshis as number;\n    payChange.txid = tx.id(\"hex\") as string;\n  }\n\n  return {\n    tx,\n    spentOutpoints: tx.inputs.map(\n      (i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n    ),\n    payChange,\n    tokenChange,\n  };\n};","import {\n\tBigNumber,\n\ttype LockingScript,\n\tOP,\n\tP2PKH,\n\ttype PrivateKey,\n\tScript,\n\ttype Transaction,\n\tTransactionSignature,\n\tUnlockingScript,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { toHex } from \"../utils/strings\";\nimport type { Inscription } from \"../types\";\n\nexport const oLockPrefix =\n\t\"2097dfd76851bf465e8f715593b217714858bbe9570ff3bd5e33840a34e20ff0262102ba79df5f8ae7604a9830f03c7933028186aede0675a16f025dc4f8be8eec0382201008ce7480da41702918d1ec8e6849ba32b4d65b1e40dc669c31a1e6306b266c0000\";\nexport const oLockSuffix =\n\t\"615179547a75537a537a537a0079537a75527a527a7575615579008763567901c161517957795779210ac407f0e4bd44bfc207355a778b046225a7068fc59ee7eda43ad905aadbffc800206c266b30e6a1319c66dc401e5bd6b432ba49688eecd118297041da8074ce081059795679615679aa0079610079517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01007e81517a75615779567956795679567961537956795479577995939521414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff00517951796151795179970079009f63007952799367007968517a75517a75517a7561527a75517a517951795296a0630079527994527a75517a6853798277527982775379012080517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01205279947f7754537993527993013051797e527e54797e58797e527e53797e52797e57797e0079517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a756100795779ac517a75517a75517a75517a75517a75517a75517a75517a75517a7561517a75517a756169587951797e58797eaa577961007982775179517958947f7551790128947f77517a75517a75618777777777777777777767557951876351795779a9876957795779ac777777777777777767006868\";\n\n/**\n * OrdLock class implementing ScriptTemplate.\n *\n * This class provides methods for interacting with OrdinalLock contract \n */\nexport default class OrdLock {\n\t/**\n\t * Creates a 1Sat Ordinal Lock script\n\t *\n\t * @param {string} ordAddress - An address which can cancel listing.\n\t * @param {string} payAddress - Address which is paid on purchase\n\t * @param {number} price - Listing price in satoshis\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\tlock(\n\t\tordAddress: string,\n\t\tpayAddress: string,\n\t\tprice: number,\n\t\tinscription?: Inscription,\n\t): Script {\n\t\tconst cancelPkh = Utils.fromBase58Check(ordAddress).data as number[];\n\t\tconst payPkh = Utils.fromBase58Check(payAddress).data as number[];\n\n\t\tlet script = new Script()\n\t\tif (inscription?.dataB64 !== undefined && inscription?.contentType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(inscription.dataB64, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(inscription.contentType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tscript = Script.fromASM(`OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`);\n\t\t}\n\n\t\treturn script.writeScript(Script.fromHex(oLockPrefix))\n\t\t\t.writeBin(cancelPkh)\n\t\t\t.writeBin(OrdLock.buildOutput(price, new P2PKH().lock(payPkh).toBinary()))\n\t\t\t.writeScript(Script.fromHex(oLockSuffix))\n\t}\n\n\tcancelListing(\n\t\tprivateKey: PrivateKey,\n\t\tsignOutputs: 'all' | 'none' | 'single' = 'all',\n\t\tanyoneCanPay = false,\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: () => Promise<number>\n\t} {\n\t\tconst p2pkh = new P2PKH().unlock(privateKey, signOutputs, anyoneCanPay, sourceSatoshis, lockingScript)\n\t\treturn {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await p2pkh.sign(tx, inputIndex)).writeOpCode(OP.OP_1)\n\t\t\t},\n\t\t\testimateLength: async () => {\n\t\t\t\treturn 107\n\t\t\t}\n\t\t}\n\t}\n\n\tpurchaseListing(\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>\n\t} {\n\t\tconst purchase = {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\tif (tx.outputs.length < 2) {\n\t\t\t\t\tthrow new Error(\"Malformed transaction\")\n\t\t\t\t}\n\t\t\t\tconst script = new UnlockingScript()\n\t\t\t\t\t.writeBin(OrdLock.buildOutput(\n\t\t\t\t\t\ttx.outputs[0].satoshis || 0,\n\t\t\t\t\t\ttx.outputs[0].lockingScript.toBinary()\n\t\t\t\t\t))\n\t\t\t\tif (tx.outputs.length > 2) {\n\t\t\t\t\tconst writer = new Utils.Writer()\n\t\t\t\t\tfor (const output of tx.outputs.slice(2)) {\n\t\t\t\t\t\twriter.write(OrdLock.buildOutput(output.satoshis || 0, output.lockingScript.toBinary()))\n\t\t\t\t\t}\n\t\t\t\t\tscript.writeBin(writer.toArray())\n\t\t\t\t} else {\n\t\t\t\t\tscript.writeOpCode(OP.OP_0)\n\t\t\t\t}\n\n\t\t\t\tconst input = tx.inputs[inputIndex]\n\t\t\t\tlet sourceSats = sourceSatoshis as number\n\t\t\t\tif (!sourceSats && input.sourceTransaction) {\n\t\t\t\t\tsourceSats = input.sourceTransaction.outputs[input.sourceOutputIndex].satoshis as number\n\t\t\t\t} else if (!sourceSatoshis) {\n\t\t\t\t\tthrow new Error(\"sourceTransaction or sourceSatoshis is required\")\n\t\t\t\t}\n\n\t\t\t\tconst sourceTXID = (input.sourceTXID || input.sourceTransaction?.id('hex')) as string\n\t\t\t\tlet subscript = lockingScript as LockingScript\n\t\t\t\tif (!subscript) {\n\t\t\t\t\tsubscript = input.sourceTransaction?.outputs[input.sourceOutputIndex].lockingScript as LockingScript\n\t\t\t\t}\n\t\t\t\tconst preimage = TransactionSignature.format({\n\t\t\t\t\tsourceTXID,\n\t\t\t\t\tsourceOutputIndex: input.sourceOutputIndex,\n\t\t\t\t\tsourceSatoshis: sourceSats,\n\t\t\t\t\ttransactionVersion: tx.version,\n\t\t\t\t\totherInputs: [],\n\t\t\t\t\tinputIndex,\n\t\t\t\t\toutputs: tx.outputs,\n\t\t\t\t\tinputSequence: input.sequence,\n\t\t\t\t\tsubscript,\n\t\t\t\t\tlockTime: tx.lockTime,\n\t\t\t\t\tscope: TransactionSignature.SIGHASH_ALL |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_ANYONECANPAY |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_FORKID\n\t\t\t\t});\n\n\t\t\t\treturn script.writeBin(preimage).writeOpCode(OP.OP_0)\n\t\t\t},\n\t\t\testimateLength: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await purchase.sign(tx, inputIndex)).toBinary().length\n\t\t\t}\n\t\t}\n\t\treturn purchase\n\t}\n\n\tstatic buildOutput(satoshis: number, script: number[]): number[] {\n\t\tconst writer = new Utils.Writer()\n\t\twriter.writeUInt64LEBn(new BigNumber(satoshis))\n\t\twriter.writeVarIntNum(script.length)\n\t\twriter.write(script)\n\t\treturn writer.toArray()\n\t}\n}\n","import {\n  P2PKH,\n  SatoshisPerKilobyte,\n  Script,\n  Transaction,\n  Utils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport {\n  TokenType,\n  type CreateOrdListingsConfig,\n  type CreateOrdTokenListingsConfig,\n  type TokenUtxo,\n  type TransferBSV20Inscription,\n  type TransferBSV21Inscription,\n  type TransferTokenInscription,\n  type Utxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nconst { toArray } = Utils;\n\n// TODO: Handle royalty\nexport const createOrdListings = async (config: CreateOrdListingsConfig) => {\n  const {\n    utxos,\n    listings,\n    paymentPk,\n    ordPk,\n    changeAddress,\n    satsPerKb = DEFAULT_SAT_PER_KB,\n    additionalPayments = [],\n  } = config;\n\n  const modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n  const tx = new Transaction();\n\n  // Warn if creating many inscriptions at once\n  if (listings.length > 100) {\n    console.warn(\n      \"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n    );\n  }\n\n  // Outputs\n  // Add listing outputs\n  for (const listing of listings) {\n    tx.addOutput({\n      satoshis: 1,\n      lockingScript: new OrdLock().lock(\n        listing.ordAddress,\n        listing.payAddress,\n        listing.price,\n      ),\n    });\n    const inputScriptBinary = toArray(listing.listingUtxo.script, \"base64\");\n    const inputScript = Script.fromBinary(inputScriptBinary);\n    tx.addInput(inputFromB64Utxo(\n      listing.listingUtxo,\n      new OrdP2PKH().unlock(\n        ordPk,\n        \"all\",\n        true,\n        listing.listingUtxo.satoshis,\n        inputScript,\n      ),\n    ));\n  }\n\n  // Add additional payments if any\n  for (const p of additionalPayments) {\n    tx.addOutput({\n      satoshis: p.amount,\n      lockingScript: new P2PKH().lock(p.to),\n    });\n  }\n\n  // Check if change is needed\n  let payChange: Utxo | undefined;\n  const changeScript = new P2PKH().lock(\n    changeAddress || paymentPk.toAddress().toString(),\n  );\n  const changeOutput = {\n    lockingScript: changeScript,\n    change: true,\n  };\n  tx.addOutput(changeOutput);\n\n  let totalSatsIn = 0n;\n  const totalSatsOut = tx.outputs.reduce(\n    (total, out) => total + BigInt(out.satoshis || 0),\n    0n,\n  );\n  let fee = 0;\n  for (const utxo of utxos) {\n    const input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n      paymentPk,\n      \"all\",\n      true,\n      utxo.satoshis,\n      Script.fromBinary(Utils.toArray(utxo.script, 'base64'))\n    ));\n\n    tx.addInput(input);\n    // stop adding inputs if the total amount is enough\n    totalSatsIn += BigInt(utxo.satoshis);\n    fee = await modelOrFee.computeFee(tx);\n\n    if (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n      break;\n    }\n  }\n\n  // make sure we have enough\n  if (totalSatsIn < totalSatsOut + BigInt(fee)) {\n    throw new Error(\n      `Not enough funds to create ordinal listings. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n    );\n  }\n\n  // Calculate fee\n  await tx.fee(modelOrFee);\n\n  // Sign the transaction\n  await tx.sign();\n\n  // check for change\n  const payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n  if (payChangeOutIdx !== -1) {\n    const changeOutput = tx.outputs[payChangeOutIdx];\n    payChange = {\n      satoshis: changeOutput.satoshis as number,\n      txid: tx.id(\"hex\") as string,\n      vout: payChangeOutIdx,\n      script: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n        \"base64\",\n      ),\n    };\n  }\n\n  if (payChange) {\n    const changeOutput = tx.outputs[tx.outputs.length - 1];\n    payChange.satoshis = changeOutput.satoshis as number;\n    payChange.txid = tx.id(\"hex\") as string;\n  }\n\n  return {\n    tx,\n    spentOutpoints: tx.inputs.map(\n      (i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n    ),\n    payChange,\n  };\n};\n\nexport const createOrdTokenListings = async (\n  config: CreateOrdTokenListingsConfig,\n) => {\n  const {\n    utxos,\n    protocol,\n    tokenID,\n    ordPk,\n    paymentPk,\n    additionalPayments = [],\n    changeAddress,\n    tokenChangeAddress,\n    inputTokens,\n    listings,\n    decimals,\n    satsPerKb = DEFAULT_SAT_PER_KB,\n  } = config;\n\n\n  // Warn if creating many inscriptions at once\n  if (listings.length > 100) {\n    console.warn(\n      \"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n    );\n  }\n\n  // Ensure these inputs are for the expected token\n  if (!inputTokens.every((token) => token.id === tokenID)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n  // calculate change amount\n  let changeAmt = 0n;\n  let totalAmtIn = 0n;\n  let totalAmtOut = 0n;\n\n  // Ensure these inputs are for the expected token\n  if (!inputTokens.every((token) => token.id === tokenID)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n  const modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n  const tx = new Transaction();\n  // Outputs\n  // Add listing outputs\n  for (const listing of listings) {\n    // NewTokenListing is not adjusted for decimals\n    const bigAmt = BigInt(listing.amt * 10 ** decimals);\n    const transferInscription: TransferTokenInscription = {\n      p: \"bsv-20\",\n      op: \"transfer\",\n      amt: bigAmt.toString(),\n    };\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n    if (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n    } else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n    tx.addOutput({\n      satoshis: 1,\n      lockingScript: new OrdLock().lock(\n        listing.ordAddress,\n        listing.payAddress,\n        listing.price,\n        {\n          dataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n          contentType: \"application/bsv-20\",\n        },\n      ),\n    });\n    totalAmtOut += bigAmt;\n  }\n\n  // Input tokens are already adjusted for decimals\n  for (const token of inputTokens) {\n    tx.addInput(inputFromB64Utxo(\n      token,\n      new OrdP2PKH().unlock(\n        ordPk,\n        \"all\",\n        true,\n        token.satoshis,\n        Script.fromBinary(toArray(token.script, \"base64\")),\n      ),\n    ));\n\n    totalAmtIn += BigInt(token.amt);\n  }\n  changeAmt = totalAmtIn - totalAmtOut;\n\n  let tokenChange: TokenUtxo | undefined;\n  // check that you have enough tokens to send and return change\n  if (changeAmt < 0n) {\n    throw new Error(\"Not enough tokens to send\");\n  }\n  if (changeAmt > 0n) {\n    const transferInscription: TransferTokenInscription = {\n      p: \"bsv-20\",\n      op: \"transfer\",\n      amt: changeAmt.toString(),\n    };\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n    if (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n    } else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n    const lockingScript = new OrdP2PKH().lock(tokenChangeAddress, {\n      dataB64: Buffer.from(JSON.stringify(inscription)).toString('base64'),\n      contentType: \"application/bsv-20\",\n    });\n    const vout = tx.outputs.length;\n    tx.addOutput({ lockingScript, satoshis: 1 });\n    tokenChange = {\n      id: tokenID,\n      satoshis: 1,\n      script: Buffer.from(lockingScript.toBinary()).toString(\"base64\"),\n      txid: \"\",\n      vout,\n      amt: changeAmt.toString(),\n    };\n  }\n\n  // Add additional payments if any\n  for (const p of additionalPayments) {\n    tx.addOutput({\n      satoshis: p.amount,\n      lockingScript: new P2PKH().lock(p.to),\n    });\n  }\n\n  // add change to the outputs\n  let payChange: Utxo | undefined;\n\n  const change = changeAddress || paymentPk.toAddress().toString();\n  const changeScript = new P2PKH().lock(change);\n  const changeOut = {\n    lockingScript: changeScript,\n    change: true,\n  };\n  tx.addOutput(changeOut);\n\n  let totalSatsIn = 0n;\n  const totalSatsOut = tx.outputs.reduce(\n    (total, out) => total + BigInt(out.satoshis || 0),\n    0n,\n  );\n  let fee = 0;\n  for (const utxo of utxos) {\n    const input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n      paymentPk,\n      \"all\",\n      true,\n      utxo.satoshis,\n      Script.fromBinary(Utils.toArray(utxo.script, 'base64'))\n    ));\n\n    tx.addInput(input);\n    // stop adding inputs if the total amount is enough\n    totalSatsIn += BigInt(utxo.satoshis);\n    fee = await modelOrFee.computeFee(tx);\n\n    if (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n      break;\n    }\n  }\n\n  // make sure we have enough\n  if (totalSatsIn < totalSatsOut + BigInt(fee)) {\n    throw new Error(\n      `Not enough funds to create token listings. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n    );\n  }\n\n  // estimate the cost of the transaction and assign change value\n  await tx.fee(modelOrFee);\n\n  // Sign the transaction\n  await tx.sign();\n\n  const txid = tx.id(\"hex\") as string;\n  if (tokenChange) {\n    tokenChange.txid = txid;\n  }\n  // check for change\n  const payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n  if (payChangeOutIdx !== -1) {\n    const changeOutput = tx.outputs[payChangeOutIdx];\n    payChange = {\n      satoshis: changeOutput.satoshis as number,\n      txid,\n      vout: payChangeOutIdx,\n      script: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n        \"base64\",\n      ),\n    };\n  }\n\n  if (payChange) {\n    const changeOutput = tx.outputs[tx.outputs.length - 1];\n    payChange.satoshis = changeOutput.satoshis as number;\n    payChange.txid = tx.id(\"hex\") as string;\n  }\n\n  return {\n    tx,\n    spentOutpoints: tx.inputs.map(\n      (i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n    ),\n    payChange,\n    tokenChange,\n  };\n};\n","import { P2PKH, SatoshisPerKilobyte, Script, Transaction, Utils } from \"@bsv/sdk\";\nimport {\n\tTokenType,\n\ttype TokenUtxo,\n\ttype CancelOrdListingsConfig,\n\ttype CancelOrdTokenListingsConfig,\n\ttype Destination,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n  type ChangeResult,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\n\n/**\n * Cancel Ordinal Listings\n * @param {CancelOrdListingsConfig} config - Configuration object for cancelling ordinals\n * @param {PrivateKey} config.paymentPk - Private key to sign payment inputs\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.listingUtxos - Listing utxos to cancel (with base64 encoded scripts)\n * @param {string} [config.changeAddress] - Optional. Address to send change to\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to make\n * @returns {Promise<ChangeResult>} Transaction, spent outpoints, change utxo\n */\nexport const cancelOrdListings = async (config: CancelOrdListingsConfig): Promise<ChangeResult> => {\n\tconst {\n\t\tutxos,\n\t\tlistingUtxos,\n\t\tordPk,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tadditionalPayments = [],\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\n\t// Warn if creating many inscriptions at once\n\tif (listingUtxos.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\t\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinals we're cancelling\n\tfor (const listingUtxo of listingUtxos) {\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().cancelListing(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlistingUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, 'base64'))\n\t\t\t)\n\t\t));\n\t\t// Add cancel outputs returning listed ordinals\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new P2PKH().lock(ordPk.toAddress().toString()),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo, \n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpaymentPk, \n\t\t\t\t\"all\",\n\t\t\t\ttrue, \n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t\t)\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to cancel ordinal listings. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\nexport const cancelOrdTokenListings = async (\n\tconfig: CancelOrdTokenListingsConfig,\n) => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tadditionalPayments,\n\t\tlistingUtxos,\n\t\tutxos,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\t// calculate change amount\n\tlet totalAmtIn = 0;\n\n\tif (listingUtxos.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Ensure these inputs are for the expected token\n\tif (!listingUtxos.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinals we're cancelling\n\tfor (const listingUtxo of listingUtxos) {\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().cancelListing(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlistingUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, 'base64'))\n\t\t\t)\n\t\t));\n\t\ttotalAmtIn += Number.parseInt(listingUtxo.amt);\n\t}\n\n\tconst transferInscription: TransferTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"transfer\",\n\t\tamt: totalAmtIn.toString(),\n\t};\n\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\tif (protocol === TokenType.BSV20) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\ttick: tokenID,\n\t\t} as TransferBSV20Inscription;\n\t} else if (protocol === TokenType.BSV21) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\tid: tokenID,\n\t\t} as TransferBSV21Inscription;\n\t} else {\n\t\tthrow new Error(\"Invalid protocol\");\n\t}\n\n\tconst destination: Destination = {\n\t\taddress: ordAddress || ordPk.toAddress().toString(),\n\t\tinscription: {\n\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t},\n\t};\n\n  const lockingScript = new OrdP2PKH().lock(\n    destination.address,\n    destination.inscription\n  );\n\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript,\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to cancel token listings. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n  const tokenChange: TokenUtxo = {\n    amt: totalAmtIn.toString(),\n    script: Buffer.from(lockingScript.toHex(), 'hex').toString('base64'),\n    txid: tx.id(\"hex\") as string,\n    vout: 0,\n    id: tokenID,\n    satoshis: 1\n  };\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n    tokenChange\n\t};\n};","import {\n  LockingScript,\n  P2PKH,\n  SatoshisPerKilobyte,\n  Script,\n  Transaction,\n  Utils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport {\n  type ChangeResult,\n  RoytaltyType,\n  TokenType,\n  type PurchaseOrdListingConfig,\n  type PurchaseOrdTokenListingConfig,\n  type TransferBSV20Inscription,\n  type TransferBSV21Inscription,\n  type TransferTokenInscription,\n  type Utxo,\n} from \"./types\";\nimport { resolvePaymail } from \"./utils/paymail\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Purchase a listing\n * @param {PurchaseOrdListingConfig} config - Configuration object for purchasing a listing\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign payment inputs\n * @param {ExistingListing} config.listing - Listing to purchase\n * @param {string} config.ordAddress - Address to send the ordinal to\n * @param {string} [config.changeAddress] - Optional. Address to send change to\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to make\n * @param {Royalty[]} [config.royalties] - Optional. Royalties to pay\n * @returns {Promise<ChangeResult>} Transaction, spent outpoints, change utxo\n */\nexport const purchaseOrdListing = async (config: PurchaseOrdListingConfig): Promise<ChangeResult> => {\n  const {\n    utxos,\n    paymentPk,\n    listing,\n    ordAddress,\n    changeAddress,\n    additionalPayments = [],\n    satsPerKb = DEFAULT_SAT_PER_KB,\n    royalties = [],\n  } = config;\n\n  const modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n  const tx = new Transaction();\n\n  // Inputs\n  // Add the locked ordinal we're purchasing\n  tx.addInput(\n    inputFromB64Utxo(\n      listing.listingUtxo,\n      new OrdLock().purchaseListing(\n        1,\n        Script.fromBinary(Utils.toArray(listing.listingUtxo.script, \"base64\")),\n      ),\n    ),\n  );\n\n  // Outputs\n  // Add the purchased output\n  tx.addOutput({\n    satoshis: 1,\n    lockingScript: new P2PKH().lock(ordAddress),\n  });\n\n  // add the payment output\n  const reader = new Utils.Reader(Utils.toArray(listing.payout, \"base64\"));\n  const satoshis = reader.readUInt64LEBn().toNumber();\n  const scriptLength = reader.readVarIntNum();\n  const scriptBin = reader.read(scriptLength);\n  const lockingScript = LockingScript.fromBinary(scriptBin);\n  tx.addOutput({\n    satoshis,\n    lockingScript,\n  });\n\n  // Add additional payments if any\n  for (const p of additionalPayments) {\n    tx.addOutput({\n      satoshis: p.amount,\n      lockingScript: new P2PKH().lock(p.to),\n    });\n  }\n\n  // Add any royalties\n  for (const r of royalties) {\n    let lockingScript: LockingScript | undefined;\n    const royaltySats = Math.floor(Number(r.percentage) * satoshis);\n\n    switch (r.type as RoytaltyType) {\n      case RoytaltyType.Paymail:\n        // resolve paymail address\n        lockingScript = await resolvePaymail(r.destination, royaltySats);\n        break;\n      case RoytaltyType.Script:\n        lockingScript = Script.fromBinary(Utils.toArray(r.destination, \"base64\"));\n        break;\n      case RoytaltyType.Address:\n        lockingScript = new P2PKH().lock(r.destination);\n        break;\n      default:\n        throw new Error(\"Invalid royalty type\");\n    }\n    if (!lockingScript) {\n      throw new Error(\"Invalid royalty destination\");\n    }\n    tx.addOutput({\n      satoshis: royaltySats,\n      lockingScript,\n    });\n  }\n\n  // add change to the outputs\n  let payChange: Utxo | undefined;\n\n  const change = changeAddress || paymentPk.toAddress().toString();\n  const changeScript = new P2PKH().lock(change);\n  const changeOut = {\n    lockingScript: changeScript,\n    change: true,\n  };\n  tx.addOutput(changeOut);\n\n  let totalSatsIn = 0n;\n  const totalSatsOut = tx.outputs.reduce(\n    (total, out) => total + BigInt(out.satoshis || 0),\n    0n,\n  );\n  let fee = 0;\n  for (const utxo of utxos) {\n    const input = inputFromB64Utxo(\n      utxo,\n      new P2PKH().unlock(\n        paymentPk,\n        \"all\",\n        true,\n        utxo.satoshis,\n        Script.fromBinary(Utils.toArray(utxo.script, \"base64\")),\n      ),\n    );\n\n    tx.addInput(input);\n    // stop adding inputs if the total amount is enough\n    totalSatsIn += BigInt(utxo.satoshis);\n    fee = await modelOrFee.computeFee(tx);\n\n    if (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n      break;\n    }\n  }\n\n  // make sure we have enough\n  if (totalSatsIn < totalSatsOut + BigInt(fee)) {\n    throw new Error(\n      `Not enough funds to purchase ordinal listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n    );\n  }\n\n  // estimate the cost of the transaction and assign change value\n  await tx.fee(modelOrFee);\n\n  // Sign the transaction\n  await tx.sign();\n\n  // check for change\n  const payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n  if (payChangeOutIdx !== -1) {\n    const changeOutput = tx.outputs[payChangeOutIdx];\n    payChange = {\n      satoshis: changeOutput.satoshis as number,\n      txid: tx.id(\"hex\") as string,\n      vout: payChangeOutIdx,\n      script: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n        \"base64\",\n      ),\n    };\n  }\n\n  if (payChange) {\n    const changeOutput = tx.outputs[tx.outputs.length - 1];\n    payChange.satoshis = changeOutput.satoshis as number;\n    payChange.txid = tx.id(\"hex\") as string;\n  }\n\n  return {\n    tx,\n    spentOutpoints: tx.inputs.map(\n      (i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n    ),\n    payChange,\n  };\n};\n\nexport const purchaseOrdTokenListing = async (\n  config: PurchaseOrdTokenListingConfig,\n) => {\n  const {\n    protocol,\n    tokenID,\n    utxos,\n    paymentPk,\n    listingUtxo,\n    ordAddress,\n    changeAddress,\n    satsPerKb = DEFAULT_SAT_PER_KB,\n    additionalPayments = [],\n  } = config;\n\n  const modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n  const tx = new Transaction();\n\n  // Inputs\n  // Add the locked ordinal we're purchasing\n  tx.addInput(\n    inputFromB64Utxo(\n      listingUtxo,\n      new OrdLock().purchaseListing(\n        1,\n        Script.fromBinary(Utils.toArray(listingUtxo.script, \"base64\")),\n      ),\n    ),\n  );\n\n  // Outputs\n  const transferInscription: TransferTokenInscription = {\n    p: \"bsv-20\",\n    op: \"transfer\",\n    amt: listingUtxo.amt,\n  };\n  let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n  if (protocol === TokenType.BSV20) {\n    inscription = {\n      ...transferInscription,\n      tick: tokenID,\n    } as TransferBSV20Inscription;\n  } else if (protocol === TokenType.BSV21) {\n    inscription = {\n      ...transferInscription,\n      id: tokenID,\n    } as TransferBSV21Inscription;\n  } else {\n    throw new Error(\"Invalid protocol\");\n  }\n  const dataB64 = Buffer.from(JSON.stringify(inscription)).toString(\"base64\");\n\n  // Add the purchased output\n  tx.addOutput({\n    satoshis: 1,\n    lockingScript: new OrdP2PKH().lock(ordAddress, {\n      dataB64,\n      contentType: \"bsv-20\",\n    }),\n  });\n\n  if (!listingUtxo.payout) {\n    throw new Error(\"Listing UTXO does not have a payout script\");\n  }\n\n  // Add the payment output\n  const reader = new Utils.Reader(Utils.toArray(listingUtxo.payout, \"base64\"));\n  const satoshis = reader.readUInt64LEBn().toNumber();\n  const scriptLength = reader.readVarIntNum();\n  const scriptBin = reader.read(scriptLength);\n  const lockingScript = LockingScript.fromBinary(scriptBin);\n  tx.addOutput({\n    satoshis,\n    lockingScript,\n  });\n\n  // Add additional payments if any\n  for (const p of additionalPayments) {\n    tx.addOutput({\n      satoshis: p.amount,\n      lockingScript: new P2PKH().lock(p.to),\n    });\n  }\n\n  // add change to the outputs\n  let payChange: Utxo | undefined;\n\n  const change = changeAddress || paymentPk.toAddress().toString();\n  const changeScript = new P2PKH().lock(change);\n  const changeOut = {\n    lockingScript: changeScript,\n    change: true,\n  };\n  tx.addOutput(changeOut);\n\n  let totalSatsIn = 0n;\n  const totalSatsOut = tx.outputs.reduce(\n    (total, out) => total + BigInt(out.satoshis || 0),\n    0n,\n  );\n  let fee = 0;\n  for (const utxo of utxos) {\n    const input = inputFromB64Utxo(\n      utxo,\n      new P2PKH().unlock(\n        paymentPk,\n        \"all\",\n        true,\n        utxo.satoshis,\n        Script.fromBinary(Utils.toArray(utxo.script, \"base64\")),\n      ),\n    );\n\n    tx.addInput(input);\n    // stop adding inputs if the total amount is enough\n    totalSatsIn += BigInt(utxo.satoshis);\n    fee = await modelOrFee.computeFee(tx);\n\n    if (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n      break;\n    }\n  }\n\n  // make sure we have enough\n  if (totalSatsIn < totalSatsOut + BigInt(fee)) {\n    throw new Error(\n      `Not enough funds to purchase token listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n    );\n  }\n\n  // estimate the cost of the transaction and assign change value\n  await tx.fee(modelOrFee);\n\n  // Sign the transaction\n  await tx.sign();\n\n  const payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n  if (payChangeOutIdx !== -1) {\n    const changeOutput = tx.outputs[payChangeOutIdx];\n    payChange = {\n      satoshis: changeOutput.satoshis as number,\n      txid: tx.id(\"hex\") as string,\n      vout: payChangeOutIdx,\n      script: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n        \"base64\",\n      ),\n    };\n  }\n\n  if (payChange) {\n    const changeOutput = tx.outputs[tx.outputs.length - 1];\n    payChange.satoshis = changeOutput.satoshis as number;\n    payChange.txid = tx.id(\"hex\") as string;\n  }\n\n  return {\n    tx,\n    spentOutpoints: tx.inputs.map(\n      (i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n    ),\n    payChange,\n  };\n};\n","// import sharp from \"sharp\";\n// import type { IconInscription, ImageContentType } from \"../types\";\n\n// // export the errors for use in tests\n// export const ErrorOversizedIcon = new Error(\n// \t\"Image must be a square image with dimensions <= 400x400\",\n// );\n// export const ErrorIconProportions = new Error(\"Image must be a square image\");\n// export const ErrorInvalidIconData = new Error(\"Error processing image\");\n// export const ErrorImageDimensionsUndefined = new Error(\n// \t\"Image dimensions are undefined\",\n// );\n\n// export const validIconData = async (\n// \ticon: IconInscription,\n// ): Promise<Error | null> => {\n// \tconst { dataB64, contentType } = icon;\n// \ttry {\n// \t\tconst buffer = Buffer.from(dataB64, \"base64\");\n// \t\tlet image = sharp(buffer);\n\n// \t\t// Special handling for SVG\n// \t\tif (contentType === \"image/svg+xml\") {\n// \t\t\t// Convert SVG to PNG for consistent dimension checking\n// \t\t\timage = image.png();\n// \t\t}\n\n// \t\tconst metadata = await image.metadata();\n\n// \t\tif (metadata.width === undefined || metadata.height === undefined) {\n// \t\t\treturn ErrorImageDimensionsUndefined;\n// \t\t}\n// \t\t// Check if the image is a square\n// \t\tif (metadata.width !== metadata.height) {\n// \t\t\treturn ErrorIconProportions;\n// \t\t}\n// \t\t// ensure the image is <= 400x400\n// \t\tif (metadata.width > 400 || metadata.height > 400) {\n// \t\t\treturn ErrorOversizedIcon;\n// \t\t}\n\n// \t\treturn null;\n// \t} catch (error) {\n// \t\treturn ErrorInvalidIconData;\n// \t}\n// };\n\nimport type { Jimp as JimpType, JimpConstructors } from '@jimp/core';\nimport 'jimp';\n\ndeclare const Jimp: JimpType & JimpConstructors;\n\nimport type { IconInscription, ImageContentType } from \"../types\";\n\nexport const ErrorOversizedIcon = new Error(\n\t\"Image must be a square image with dimensions <= 400x400\",\n);\nexport const ErrorIconProportions = new Error(\"Image must be a square image\");\nexport const ErrorInvalidIconData = new Error(\"Error processing image\");\nexport const ErrorImageDimensionsUndefined = new Error(\n\t\"Image dimensions are undefined\",\n);\n\nconst isImageContentType = (value: string): value is ImageContentType => {\n  console.log({value})\n\treturn (value as ImageContentType) === value;\n};\n\nexport const validIconData = async (\n\ticon: IconInscription,\n): Promise<Error | null> => {\n\tconst { dataB64, contentType } = icon;\n\n\tif (contentType === \"image/svg+xml\") {\n\t\treturn validateSvg(dataB64);\n\t}\n\n\t// make sure the contentType is one of ImageContentType\n\tif (!isImageContentType(contentType)) {\n\t\treturn ErrorInvalidIconData;\n\t}\n\n\ttry {\n\t\tconst buffer = Buffer.from(dataB64, \"base64\");\n\t\tconst image = await Jimp.read(buffer);\n\n\t\tconst width = image.getWidth();\n\t\tconst height = image.getHeight();\n\n\t\tif (width === undefined || height === undefined) {\n\t\t\treturn ErrorImageDimensionsUndefined;\n\t\t}\n\t\tif (width !== height) {\n\t\t\treturn ErrorIconProportions;\n\t\t}\n\t\tif (width > 400 || height > 400) {\n\t\t\treturn ErrorOversizedIcon;\n\t\t}\n\n\t\treturn null;\n\t} catch (error) {\n\t\treturn ErrorInvalidIconData;\n\t}\n};\n\nconst validateSvg = (svgBase64: string): Error | null => {\n  const svgString = Buffer.from(svgBase64, \"base64\").toString(\"utf-8\");\n  const widthMatch = svgString.match(/<svg[^>]*\\s+width=\"([^\"]+)\"/);\n  const heightMatch = svgString.match(/<svg[^>]*\\s+height=\"([^\"]+)\"/);\n  console.log({widthMatch, heightMatch})\n  if (!widthMatch || !heightMatch) {\n    return ErrorImageDimensionsUndefined;\n  }\n\n\tconst width = Number.parseInt(widthMatch[1], 10);\n\tconst height = Number.parseInt(heightMatch[1], 10);\n\n\tif (Number.isNaN(width) || Number.isNaN(height)) {\n\t\treturn ErrorImageDimensionsUndefined;\n\t}\n\n\tif (width !== height) {\n\t\treturn ErrorIconProportions;\n\t}\n\tif (width > 400 || height > 400) {\n\t\treturn ErrorOversizedIcon;\n\t}\n\n\treturn null;\n}\n\nexport const validIconFormat = (icon: string): boolean => {\n\tif (!icon.includes(\"_\") || icon.endsWith(\"_\")) {\n\t\treturn false;\n\t}\n\n\t// use parseint to validate the vout\n\tconst iconVout = Number.parseInt(icon.split(\"_\")[1]);\n\tif (Number.isNaN(iconVout)) {\n\t\treturn false;\n\t}\n\n\tif (!icon.startsWith(\"_\") && icon.split(\"_\")[0].length !== 64) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","import {\n\tTransaction,\n\tP2PKH,\n\tSatoshisPerKilobyte,\n\ttype TransactionOutput,\n\tUtils,\n\tScript,\n} from \"@bsv/sdk\";\nimport type {\n  ChangeResult,\n\tDeployBsv21TokenConfig,\n\tDeployMintTokenInscription,\n\tInscription,\n\tUtxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { validIconData, validIconFormat } from \"./utils/icon\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\n\n/**\n * Deploys & Mints a BSV21 token to the given destination address\n * @param {DeployBsv21TokenConfig} config - Configuration object for deploying BSV21 token\n * @param {string} config.symbol - Token ticker symbol\n * @param {number} config.decimals - Number of decimal places to display\n * @param {string | IconInscription} config.icon - outpoint (format: txid_vout) or Inscription. If Inscription, must be a valid image type\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {Distribution} config.initialDistribution - Initial distribution with addresses and total supply (not adjusted for decimals, library will add zeros)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {string} config.destinationAddress - Address to deploy token to.\n * @param {string} [config.changeAddress] - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to include in the transaction\n * @returns {Promise<ChangeResult>} Transaction to deploy BSV 2.1 token\n */\nexport const deployBsv21Token = async (\n\tconfig: DeployBsv21TokenConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tsymbol,\n\t\ticon,\n    decimals,\n\t\tutxos,\n\t\tinitialDistribution,\n\t\tpaymentPk,\n\t\tdestinationAddress,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\tlet iconValue: string;\n\tif (typeof icon === \"string\") {\n\t\ticonValue = icon;\n\t} else {\n\t\tconst iconError = await validIconData(icon);\n\t\tif (iconError) {\n\t\t\tthrow iconError;\n\t\t}\n\t\t// add icon inscription to the transaction\n\t\tconst iconScript = new OrdP2PKH().lock(destinationAddress, icon);\n\t\tconst iconOut = {\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: iconScript,\n\t\t};\n\t\ttx.addOutput(iconOut);\n\t\t// relative output index of the icon\n\t\ticonValue = \"_0\";\n\t}\n\n\t// Ensure the icon format\n\tif (!validIconFormat(iconValue)) {\n\t\tthrow new Error(\n\t\t\t\"Invalid icon format. Must be either outpoint (format: txid_vout) or relative output index of the icon (format _vout). examples: ecb483eda58f26da1b1f8f15b782b1186abdf9c6399a1c3e63e0d429d5092a41_0 or _1\",\n\t\t);\n\t}\n  \n\t// Outputs\n  const amt = decimals ? BigInt(initialDistribution.amt) * 10n ** BigInt(decimals) : BigInt(initialDistribution.amt);\n\tconst fileData: DeployMintTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"deploy+mint\",\n\t\tsym: symbol,\n\t\ticon: iconValue,\n\t\tamt: amt.toString(),\n\t};\n\n  if (decimals) {\n    fileData.dec = decimals.toString();\n  }\n\n\tconst b64File = Buffer.from(JSON.stringify(fileData)).toString(\"base64\");\n\tconst sendTxOut = {\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(destinationAddress, {\n\t\t\tdataB64: b64File,\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t} as Inscription),\n\t};\n\ttx.addOutput(sendTxOut);\n\n\t// Additional payments\n\tfor (const payment of additionalPayments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new P2PKH().lock(payment.to),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to deploy token. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tScript,\n\tUtils,\n  PrivateKey,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB, MAP_PREFIX } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n  BaseResult,\n\tBurnOrdinalsConfig,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { toHex } from \"./utils/strings\";\n\n/**\n * Burn ordinals by consuming them as fees\n * @param {BurnOrdinalsConfig} config - Configuration object for sending ordinals\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Utxo} config.ordinals - 1Sat Ordinal Utxos to spend (with base64 encoded scripts)\n * @param {BurnMAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include in an unspendable output OP_FALSE OP_RETURN\n * @returns {Promise<BaseResult>} Transaction, spent outpoints\n */\nexport const burnOrdinals = async (\n\tconfig: BurnOrdinalsConfig,\n): Promise<BaseResult> => {\n\tconst tx = new Transaction();\n\tconst spentOutpoints: string[] = [];\n\tconst { ordinals, metaData } = config;\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(\n\t\t\tordUtxo,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tconfig.ordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tordUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(ordUtxo.script, \"base64\")),\n\t\t\t),\n\t\t);\n\t\tspentOutpoints.push(`${ordUtxo.txid}_${ordUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// Add metadata output\n\n\t// MAP.app and MAP.type keys are required\n\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t}\n\n\tlet metaAsm = \"\";\n\n\tif (metaData?.app && metaData?.type) {\n\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\tconst mapCmdValue = toHex(\"SET\");\n\t\tmetaAsm = `OP_FALSE OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\tif (key !== \"cmd\") {\n\t\t\t\tmetaAsm = `${metaAsm} ${toHex(key)} ${toHex(value as string)}`;\n\t\t\t}\n\t\t}\n\t}\n\n\ttx.addOutput({\n\t\tsatoshis: 0,\n\t\tlockingScript: Script.fromASM(metaAsm || \"OP_FALSE OP_RETURN\"),\n\t});\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t};\n};\n","// import { PaymailClient } from \"@bsv/paymail\";\nimport { LockingScript } from \"@bsv/sdk\";\n\n// const client = new PaymailClient();\n\nexport const resolvePaymail = async (paymailAddress: string, amtToReceive: number): Promise<LockingScript> => {\n  // const destinationTx = await client.getP2pPaymentDestination(paymailAddress, amtToReceive);\n  // // TODO: we are assuming only one output but in reality it can be many\n  // return destinationTx.outputs[0].script as LockingScript;\n  throw new Error(\"Not implemented\");\n}","import type { CollectionItemSubTypeData, CollectionSubTypeData } from \"./types\";\n\n/**\n * Validates sub type data\n * @param {string} subType - Sub type of the ordinals token\n * @param {string} subTypeData - Sub type data of the ordinals token\n * @returns {Error | undefined} Error if validation fails, undefined if validation passes\n */\nexport const validateSubTypeData = (\n  subType: \"collection\" | \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData | CollectionSubTypeData,\n): Error | undefined => {\n  try {\n    if (subType === \"collection\") {\n      const collectionData = subTypeData as CollectionSubTypeData;\n      if (!collectionData.description) {\n        return new Error(\"Collection description is required\");\n      }\n      if (!collectionData.quantity) {\n        return new Error(\"Collection quantity is required\");\n      }\n      if (collectionData.rarityLabels) {\n        if (!Array.isArray(collectionData.rarityLabels)) {\n          return new Error(\"Rarity labels must be an array\");\n        }\n        // make sure keys and values are strings\n        if (!collectionData.rarityLabels.every((label) => {\n          return Object.values(label).every(value => typeof value === 'string');\n        })) {\n          return new Error(`Invalid rarity labels ${collectionData.rarityLabels}`);\n        }\n      }\n      if (collectionData.traits ) {\n        if (typeof collectionData.traits !== \"object\") {\n        return new Error(\"Collection traits must be an object\");\n        }\n        if (collectionData.traits && !Object.keys(collectionData.traits).every(key => typeof key === 'string' && typeof collectionData.traits[key] === 'object')) {\n          return new Error(\"Collection traits must be a valid CollectionTraits object\");\n        }\n      }\n    }\n    if (subType === \"collectionItem\") {\n      const itemData = subTypeData as CollectionItemSubTypeData;\n      if (!itemData.collectionId) {\n        return new Error(\"Collection id is required\");\n      }\n      if (!itemData.collectionId.includes(\"_\")) {\n        return new Error(\"Collection id must be a valid outpoint\");\n      }\n      if (itemData.collectionId.split(\"_\")[0].length !== 64) {\n        return new Error(\"Collection id must contain a valid txid\");\n      }\n      if (Number.isNaN(Number.parseInt(itemData.collectionId.split(\"_\")[1]))) {\n        return new Error(\"Collection id must contain a valid vout\");\n      }\n\n      if (itemData.mintNumber && typeof itemData.mintNumber !== \"number\") {\n        return new Error(\"Mint number must be a number\");\n      }\n      if (itemData.rank && typeof itemData.rank !== \"number\") {\n        return new Error(\"Rank must be a number\");\n      }\n      if (itemData.rarityLabel && typeof itemData.rarityLabel !== \"string\") {\n        return new Error(\"Rarity label must be a string\");\n      }\n      if (itemData.traits && typeof itemData.traits !== \"object\") {\n        return new Error(\"Traits must be an object\");\n      }\n      if (itemData.attachments && !Array.isArray(itemData.attachments)) {\n        return new Error(\"Attachments must be an array\");\n      }\n    }\n    return undefined;\n  } catch (error) {\n    return new Error(\"Invalid JSON data\");\n  }\n};"],"names":["TokenType","RoytaltyType","toHex","utf8Str","Buffer","from","toString","MAP_PREFIX","DEFAULT_SAT_PER_KB","API_HOST","OrdP2PKH","_P2PKH","apply","arguments","_inheritsLoose","prototype","lock","address","inscription","metaData","ordAsm","undefined","dataB64","contentType","ordHex","fileHex","trim","Error","fileMediaType","inscriptionAsm","P2PKH","toASM","app","type","mapPrefixHex","_i","_Object$entries","Object","entries","length","_Object$entries$_i","key","value","LockingScript","fromASM","MAX_TOKEN_SUPPLY","Math","pow","fromBase58Check","Utils","inputFromB64Utxo","utxo","unlockScriptTemplate","fromUtxo","_extends","script","signData","tx","signer","_exit","_temp2","_result","idKey","keyHost","_sigma$sign","Sigma","sign","Promise","resolve","signedTx","_temp","authToken","sigma","remoteSign","then","_ref","_catch","e","console","log","reject","stringifyMetaData","result","Array","isArray","JSON","stringify","String","pact","state","s","_Pact","o","bind","v","_settle","observer","onFulfilled","this","_this","onRejected","_isSettledPact","thenable","_iteratorSymbol","Symbol","iterator","callback","OrdLock","_proto","ordAddress","payAddress","price","cancelPkh","data","payPkh","Script","writeScript","fromHex","writeBin","buildOutput","toBinary","cancelListing","privateKey","signOutputs","anyoneCanPay","sourceSatoshis","lockingScript","p2pkh","unlock","inputIndex","_p2pkh$sign","writeOpCode","OP","OP_1","estimateLength","purchaseListing","purchase","_input$sourceTransact","outputs","UnlockingScript","satoshis","_step","writer","Writer","_iterator","_createForOfIteratorHelperLoose","slice","done","output","write","toArray","OP_0","input","inputs","sourceSats","sourceTransaction","sourceOutputIndex","_input$sourceTransact2","sourceTXID","id","subscript","preimage","TransactionSignature","format","transactionVersion","version","otherInputs","inputSequence","sequence","lockTime","scope","SIGHASH_ALL","SIGHASH_ANYONECANPAY","SIGHASH_FORKID","_purchase$sign","writeUInt64LEBn","BigNumber","writeVarIntNum","target","body","check","step","_cycle","return","_fixup","TypeError","values","i","push","array","_forTo","_forOf","next","ErrorOversizedIcon","ErrorIconProportions","ErrorInvalidIconData","ErrorImageDimensionsUndefined","config","Transaction","spentOutpoints","ordinals","ordUtxo","ordPk","fromBinary","txid","vout","addInput","metaAsm","mapCmdValue","addOutput","_interrupt","totalSatsIn","totalSatsOut","BigInt","fee","modelOrFee","payChangeOutIdx","findIndex","change","changeOutput","payChange","map","utxos","listingUtxos","paymentPk","changeAddress","_config$additionalPay","additionalPayments","_config$satsPerKb","satsPerKb","warn","SatoshisPerKilobyte","listingUtxo","toAddress","_step2","_iterator2","p","amount","to","changeScript","reduce","total","out","computeFee","_modelOrFee$computeFe","_interrupt2","_temp4","tokenChange","amt","totalAmtIn","tokenID","protocol","_config$satsPerKb2","every","token","_step3","_iterator3","Number","parseInt","transferInscription","op","BSV20","tick","BSV21","destination","_iterator4","_step4","_temp3","_modelOrFee$computeFe2","listings","listing","inputScriptBinary","inputScript","_config$additionalPay2","tokenChangeAddress","inputTokens","decimals","changeAmt","totalAmtOut","bigAmt","_step5","_iterator5","destinations","_Object$keys","keys","pop","_signData","iconValue","icon","includes","endsWith","iconVout","split","isNaN","startsWith","validIconFormat","initialDistribution","fileData","sym","symbol","dec","b64File","sendTxOut","destinationAddress","payment","svgBase64","svgString","widthMatch","match","heightMatch","width","height","validateSvg","buffer","Jimp","read","image","getWidth","getHeight","validIconData","iconError","iconScript","collectionId","limit","offset","scriptEncoding","url","subTypeData","fetch","res","ok","json","nftUtxos","outpoints","filter","u","_u$data","list","method","headers","concat","nftRes","nfts","nftUtxo","origin","outpoint","payUrl","payRes","payUtxos","pubKeyHash","p2pkhScript","tokenId","tokenUtxos","_temp6","_result2","_config$royalties","royalties","reader","Reader","payout","readUInt64LEBn","toNumber","scriptLength","readVarIntNum","scriptBin","_temp5","r","royaltySats","floor","percentage","_switch","Paymail","resolvePaymail","_resolvePaymail","Address","_temp8","_interrupt3","_temp7","enforceUniformSend","_destination$inscript","_destination$inscript2","paymentUtxos","changeOut","payments","_config$changeAddress","distributions","_config$burn","burn","dest","subType","collectionData","description","quantity","rarityLabels","label","traits","itemData","mintNumber","rank","rarityLabel","attachments","error"],"mappings":"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"}