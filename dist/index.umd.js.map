{"version":3,"file":"index.umd.js","sources":["../src/utils/strings.ts","../src/types.ts","../src/constants.ts","../src/templates/ordP2pkh.ts","../src/utils/utxo.ts","../src/signData.ts","../src/utils/subtypeData.ts","../src/createOrdinals.ts","../src/sendOrdinals.ts","../src/sendUtxos.ts","../src/transferOrdinals.ts","../src/templates/ordLock.ts","../src/createListings.ts","../src/cancelListings.ts","../src/purchaseOrdListing.ts","../src/validate.ts"],"sourcesContent":["/**\n * Converts a string to its hexadecimal representation\n *\n * @param {string} utf8Str - The string to convert\n * @returns {string} The hexadecimal representation of the input string\n */\nconst toHex = (utf8Str: string): string => {\n  return Buffer.from(utf8Str).toString(\"hex\");\n};\n\nexport { toHex };\n","import type { PrivateKey, Script, Transaction } from \"@bsv/sdk\";\nimport type { AuthToken } from \"sigma-protocol\";\n\n// biome-ignore lint/complexity/noBannedTypes: Reserved for future use\ntype Signer = {};\n\nexport interface LocalSigner extends Signer {\n\tidKey: PrivateKey;\n}\n\nexport interface RemoteSigner extends Signer {\n\tkeyHost: string;\n\tauthToken?: AuthToken;\n}\n\nexport type Destination = {\n\taddress: string;\n\tinscription?: Inscription;\n};\n\n/**\n * @typedef {Object} Listing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n * @property {Utxo} listingUtxo - Utxo of the listing\n */\nexport type Listing = {\n\tpayAddress: string;\n\tprice: number;\n\tordAddress: string;\n\tlistingUtxo: Utxo;\n}\n\n/**\n * @typedef {Object} TokenListing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n * @property {TokenUtxo} listingUtxo - Utxo of the listing\n */\nexport type TokenListing = {\n\tpayAddress: string;\n\tprice: number;\n\tamt: bigint;\n\tordAddress: string;\n\tlistingUtxo: TokenUtxo;\n}\n\n/**\n * @typedef {Object} Distribution\n * @property {string} address - Destination address. Must be a Ordinals address (BSV address for recieving 1Sat ordinals tokens).\n * @property {string} amt - Number of tokens as a string, considering decimals. Not display format. Ex. 100000000 for 1 token with 8 decimal places.\n */\nexport type Distribution = {\n\taddress: string;\n\tamt: string;\n};\n\n/**\n * @typedef {Object} Utxo\n * @property {number} satoshis - Amount in satoshis\n * @property {string} txid - Transaction id\n * @property {number} vout - Output index\n * @property {string} script - Base64 encoded locking script\n */\nexport type Utxo = {\n\tsatoshis: number;\n\ttxid: string;\n\tvout: number;\n\tscript: string;\n};\n\n/**\n * @typedef {Object} NftUtxo\n * @property {string} collectionId - Optional. Collection id of the NFT\n * @property {string} contentType - Media type of the NFT\n * @property {string} creatorBapId - Optional. Creator BAP id of the NFT\n * @property {string} origin - Origin address of the NFT\n * @property {number} satoshis - Always 1\n */\nexport interface NftUtxo extends Utxo {\n\tcollectionId?: string;\n\tcontentType: string;\n\tcreatorBapId?: string;\n\torigin: string;\n\tsatoshis: 1;\n}\n\n/**\n * @typedef {Object} TokenUtxo\n * @property {string} amt - Number of tokens as a string\n * @property {string} id - Token id -  either tick or id depending on protocol\n * @property {string} satoshis - Always 1\n */\nexport interface TokenUtxo extends Utxo {\n\tamt: string;\n\tid: string;\n\tsatoshis: 1;\n}\n\nexport type Inscription = {\n\tdataB64: string;\n\tcontentType: string;\n};\n\nexport type ImageContentType =\n\t| \"image/png\"\n\t| \"image/jpeg\"\n\t| \"image/gif\"\n\t| \"image/svg+xml\"\n\t| \"image/webp\";\n\n/**\n * @typedef {Object} IconInscription\n * @property {string} dataB64 - Base64 encoded image data. Must be a square image.\n * @property {ImageContentType} contentType - Media type of the image\n */\nexport type IconInscription = {\n\tdataB64: string;\n\tcontentType: ImageContentType;\n};\n\nexport type Payment = {\n\tto: string;\n\tamount: number;\n};\n\nexport type TokenInscription = {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\" | \"mint\" | \"deploy+mint\" | \"burn\";\n};\n\nexport interface MintTokenInscription extends TokenInscription {\n\top: \"mint\";\n}\n\nexport interface DeployMintTokenInscription extends TokenInscription {\n\top: \"deploy+mint\";\n\tsym: string;\n\ticon: string;\n}\n\nexport interface TransferTokenInscription extends TokenInscription {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\" | \"burn\";\n}\n\nexport interface TransferBSV20Inscription extends TransferTokenInscription {\n\ttick: string;\n}\n\nexport interface TransferBSV21Inscription extends TransferTokenInscription {\n\tid: string;\n}\n\nexport enum TokenType {\n\tBSV20 = \"bsv20\",\n\tBSV21 = \"bsv21\",\n}\n\nexport type CreateOrdinalsResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\n/**\n * MAP (Magic Attribute Protocol) metadata object with stringified values for writing to the blockchain\n * @typedef {Object} MAP\n * @property {string} app - Application identifier\n * @property {string} type - Metadata type\n * @property {string} [prop] - Optional. Additional metadata properties\n */\nexport type MAP = {\n\tapp: string;\n\ttype: string;\n\t[prop: string]: string;\n};\n\nexport type PreMAP = {\n\tapp: string;\n\ttype: string;\n\t[prop: string]: unknown;\n\troyalties?: Royalty[];\n\tsubTypeData?: CollectionSubTypeData | CollectionItemSubTypeData;\n};\n\nexport type CreateOrdinalsConfig = {\n\tutxos: Utxo[];\n\tdestinations: Destination[];\n\tpaymentPk: PrivateKey;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: PreMAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n};\n\nexport enum RoytaltyType {\n\tPaymail = \"paymail\",\n\tAddress = \"address\",\n\tScript = \"script\",\n}\n\n/**\n * Royalty object\n * @typedef {Object} Royalty\n * @property {RoytaltyType} type - Royalty type, string, one of \"paymail\", \"address\", \"script\"\n * @property {string} destination - Royalty destination\n * @property {string} percentage - Royalty percentage as a string float 0-1\n */\nexport type Royalty = {\n\ttype: RoytaltyType;\n\tdestination: string;\n\tpercentage: string; // string float 0-1\n};\n\nexport interface CreateOrdinalsMetadata extends PreMAP {\n\ttype: \"ord\",\n\tname: string,\n\tpreviewUrl?: string,\n}\n\nexport interface CreateOrdinalsCollectionMetadata extends CreateOrdinalsMetadata {\n\tsubType: \"collection\",\n\tsubTypeData: CollectionSubTypeData, // JSON stringified CollectionSubTypeData\n\troyalties?: Royalty[],\n};\n\nexport interface CreateOrdinalsCollectionItemMetadata extends CreateOrdinalsMetadata {\n\tsubType: \"collectionItem\",\n\tsubTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n};\n\n/**\n * Configuration object for creating an ordinals collection\n * @typedef {Object} CreateOrdinalsCollectionConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collection\"\n * @property metaData.name - Collection name\n * @property metaData.subTypeData - JSON stringified CollectionSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionConfig extends CreateOrdinalsConfig {\n\tmetaData: CreateOrdinalsCollectionMetadata\n}\n\nexport type CollectionTraits = {\n\t[trait: string]: CollectionTrait;\n};\n\nexport type CollectionTrait = {\n\tvalues: string[];\n\toccurancePercentages: string[];\n};\n\nexport type Rarity = {\n\t[key: string]: string;\n}\n\nexport type RarityLabels = Rarity[]\nexport interface CollectionSubTypeData {\n\tdescription: string;\n\tquantity: number;\n\trarityLabels: RarityLabels;\n\ttraits: CollectionTraits;\n}\n\nexport interface CreateOrdinalsCollectionItemMetadata extends PreMAP {\n\ttype: \"ord\",\n\tname: string,\n\tsubType: \"collectionItem\",\n\tsubTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n\troyalties?: Royalty[],\n\tpreviewUrl?: string,\n}\n\n/**\n * Configuration object for creating an ordinals collection item\n * @typedef {Object} CreateOrdinalsCollectionItemConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection item\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collectionItem\"\n * @property metaData.name - Collection item name\n * @property metaData.subTypeData - JSON stringified CollectionItemSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionItemConfig extends CreateOrdinalsConfig {\n\tmetaData: CreateOrdinalsCollectionItemMetadata\n}\n\n/**\n * Subtype data for an ordinals collection item\n * @typedef {Object} CollectionItemSubTypeData\n * @property {string} collectionId - Collection id\n * @property {number} mintNumner - Mint number\n * @property {number} rank - Rank\n * @property {string} rarityLabel - Rarity label\n * @property {string} traits - traits object\n * @property {string} attachments - array of attachment objects\n */\nexport interface CollectionItemSubTypeData {\n\tcollectionId: string;\n\tmintNumber?: number;\n\trank?: number;\n\trarityLabel?: RarityLabels;\n\ttraits?: CollectionItemTraits;\n\tattachments?: CollectionItemAttachment[];\n}\n\nexport type CollectionItemTraits = {\n\tname: string;\n\tvalue: string;\n\trarityLabel?: string;\n\toccurancePercentrage?: string;\n};\n\nexport type CollectionItemAttachment = {\n\tname: string;\n\tdescription?: string;\n\t\"content-type\": string;\n\turl: string;\n}\n\nexport type SendOrdinalsResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type SendOrdinalsConfig = {\n\tpaymentUtxos: Utxo[];\n\tordinals: Utxo[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tdestinations: Destination[];\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: PreMAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n\tenforceUniformSend?: boolean;\n}\n\nexport type DeployBsv21TokenResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type DeployBsv21TokenConfig = {\n\tsymbol: string;\n\ticon: string | IconInscription;\n\tutxos: Utxo[];\n\tinitialDistribution: Distribution;\n\tpaymentPk: PrivateKey;\n\tdestinationAddress: string;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[];\n};\n\nexport type SendUtxosResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type SendUtxosConfig = {\n\tutxos: Utxo[];\n\tpaymentPk: PrivateKey;\n\tpayments: Payment[];\n\tsatsPerKb?: number;\n\tchangeAddress?: string;\n};\n\nexport interface TransferOrdTokensResult extends SendOrdinalsResult {\n\ttokenChange?: TokenUtxo;\n}\n\nexport type TransferOrdTokensConfig = {\n\tprotocol: TokenType;\n\ttokenID: string;\n\tutxos: Utxo[];\n\tinputTokens: TokenUtxo[];\n\tdistributions: Distribution[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tchangeAddress?: string;\n\ttokenChangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: PreMAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n\tburn?: boolean;\n}\n\nexport type CreateOrdListingsConfig = {\n\tutxos: Utxo[];\n\tlistings: Listing[];\n\troyalty: number;\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey,\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[];\n}\n\nexport type PurchaseOrdListingConfig = {\n\tutxos: Utxo[];\n\tpaymentPk: PrivateKey;\n\tlistingUtxo: Utxo;\n\tordAddress: string;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[],\n}\n\nexport type PurchaseOrdTokenListingConfig = {\n\tprotocol: TokenType;\n\ttokenID: string;\n\tutxos: Utxo[];\n\tpaymentPk: PrivateKey;\n\tlistingUtxo: TokenUtxo;\n\tordAddress: string;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[],\n}\n\nexport type CancelOrdListingsConfig = {\n\tutxos: Utxo[],\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tlistingUtxos: Utxo[];\n\tadditionalPayments?: Payment[];\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n}\n\nexport interface CancelOrdTokenListingsConfig extends CancelOrdListingsConfig {\n\tutxos: Utxo[],\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tlistingUtxos: TokenUtxo[];\n\tadditionalPayments: Payment[];\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tprotocol: TokenType,\n\ttokenID: string;\n\tordAddress?: string;\n}\n\nexport interface CreateOrdTokenListingsConfig {\n\tutxos: Utxo[];\n\tlistings: TokenListing[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey,\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[];\n\tprotocol: TokenType;\n\ttokenID: string;\n\tinputTokens: TokenUtxo[];\n\ttokenChangeAddress: string;\n}\n\n","export const MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\nexport const DEFAULT_SAT_PER_KB = 10;\nexport const API_HOST = \"https://ordinals.gorillapool.io/api\";","import {\n\tLockingScript,\n\tP2PKH,\n\ttype Script,\n} from \"@bsv/sdk\";\nimport type { Inscription, MAP } from \"../types\";\nimport { toHex } from \"../utils/strings\";\nimport { MAP_PREFIX } from \"../constants\";\n\n/**\n * OrdP2PKH (1Sat Ordinal + Pay To Public Key Hash) class implementing ScriptTemplate.\n *\n * This class provides methods to create an Ordinal with Pay To Public Key Hash locking and unlocking scripts. \n * It extends the standard P2PKH script template and provides a custom lock method.\n */\nexport default class OrdP2PKH extends P2PKH {\n\t/**\n\t * Creates a 1Sat Ordinal + P2PKH locking script for a given address string\n\t *\n\t * @param {string} address - An destination address for the Ordinal.\n\t * @param {Object} [inscription] - Base64 encoded file data and Content type of the file.\n\t * @param {MAP} [metaData] - (optional) MAP Metadata to be included in OP_RETURN.\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\t// unlock method inherits from p2pkh\n\tlock(\n\t\taddress: string,\n    inscription?: Inscription,\n\t\tmetaData?: MAP | undefined,\n\t): Script {\n\t\tlet ordAsm = \"\";\n\t\t// This can be omitted for reinscriptions that just update metadata\n\t\tif (inscription?.dataB64 !== undefined && inscription?.contentType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(inscription.dataB64, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(inscription.contentType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`;\n\t\t}\n\n\t\t// Create ordinal output and inscription in a single output\n\t\tconst lockingScript = new P2PKH().lock(address);\n\t\tlet inscriptionAsm = `${ordAsm ? `${ordAsm} ` : \"\"}${lockingScript.toASM()}`;\n\n\t\t// MAP.app and MAP.type keys are required\n\t\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t\t}\n\n\t\tif (metaData?.app && metaData?.type) {\n\t\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\t\tconst mapCmdValue = toHex(\"SET\");\n\t\t\tinscriptionAsm = `${inscriptionAsm} OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\t\tif (key !== \"cmd\") {\n\t\t\t\t\tinscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\n\t\t\t\t\t\tvalue as string,\n\t\t\t\t\t)}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn LockingScript.fromASM(inscriptionAsm);\n\t}\n}\n","import {\n\ttype Transaction,\n\ttype UnlockingScript,\n\tfromUtxo,\n\ttype TransactionInput,\n\tUtils,\n\tP2PKH,\n  Script,\n} from \"@bsv/sdk\";\nimport { type NftUtxo, TokenType, type TokenUtxo, type Utxo } from \"../types\";\nimport { API_HOST } from \"../constants\";\n\nconst { fromBase58Check } = Utils;\n\n/**\n * Converts a Utxo object with a base64 encoded script to a Utxo object with a hex encoded script\n * @param {Utxo} utxo - Utxo object with base64 encoded script\n * @param {Object} unlockScriptTemplate - Object with sign and estimateLength functions\n * @returns {TransactionInput} Utxo object with hex encoded script\n */\nexport const inputFromB64Utxo = (\n\tutxo: Utxo,\n\tunlockScriptTemplate: {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>;\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>;\n\t},\n): TransactionInput => {\n\tconst input = fromUtxo(\n\t\t{\n\t\t\t...utxo,\n\t\t\tscript: Buffer.from(utxo.script, \"base64\").toString(\"hex\"),\n\t\t},\n\t\tunlockScriptTemplate,\n\t);\n\treturn input;\n};\n\n/**\n * Fetches pay utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<Utxo[]>} Array of pay utxos\n */\nexport const fetchPayUtxos = async (address: string, scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\"): Promise<Utxo[]> => {\n\tconst payUrl = `${API_HOST}/txos/address/${address}/unspent?bsv20=false`;\n\tconsole.log({ payUrl });\n\tconst payRes = await fetch(payUrl);\n\tif (!payRes.ok) {\n\t\tthrow new Error(\"Error fetching pay utxos\");\n\t}\n\tlet payUtxos = await payRes.json();\n\t// exclude all 1 satoshi utxos\n\tpayUtxos = payUtxos.filter((u: { satoshis: number }) => u.satoshis !== 1);\n\n\t// Get pubkey hash from address\n\tconst pubKeyHash = fromBase58Check(address);\n\tconst p2pkhScript = new P2PKH().lock(pubKeyHash.data);\n\tpayUtxos = payUtxos.map((utxo: Partial<Utxo>) => ({\n\t\ttxid: utxo.txid,\n\t\tvout: utxo.vout,\n\t\tsatoshis: utxo.satoshis,\n\t\tscript: scriptEncoding === \"hex\" || scriptEncoding === \"base64\" ? Buffer.from(p2pkhScript.toBinary()).toString(scriptEncoding) : p2pkhScript.toASM(),\n\t}));\n\treturn payUtxos as Utxo[];\n};\n\n/**\n * Fetches NFT utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @param {string} [collectionId] - Optional. Collection id (collection insciprtion origin)\n * @param {number} [limit=10] - Optional. Number of utxos to fetch. Default is 10\n * @param {number} [offset=0] - Optional. Offset for fetching utxos. Default is 0\n * @param {string} [scriptEncoding=\"base64\"] - Optional. Encoding for the script. Default is base64. Options are hex, base64, or asm.\n * @returns {Promise<Utxo[]>} Array of NFT utxos\n */\nexport const fetchNftUtxos = async (\n\taddress: string,\n\tcollectionId?: string,\n\tlimit = 10,\n\toffset = 0,\n  scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\",\n): Promise<NftUtxo[]> => {\n\tlet url = `${API_HOST}/txos/address/${address}/unspent?limit=${limit}&offset=${offset}&`;\n\n\tif (collectionId) {\n\t\tconst query = {\n\t\t\tmap: {\n\t\t\t\tsubTypeData: { collectionId },\n\t\t\t},\n\t\t};\n\t\tconst b64Query = Buffer.from(JSON.stringify(query)).toString(\"base64\");\n\t\turl += `q=${b64Query}`;\n\t}\n\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching NFT utxos for ${address}`);\n\t}\n\n\t// Returns a BSV20Txo but we only need a few fields\n\tlet nftUtxos = await res.json();\n\n\t// Only include 1 satoshi outputs, non listings\n\tnftUtxos = nftUtxos.filter(\n\t\t(u: {\n\t\t\tsatoshis: number;\n\t\t\tdata: { list: { price: number; payout: string } | undefined } | null;\n\t\t}) => u.satoshis === 1 && !u.data?.list,\n\t);\n\n\tconst outpoints = nftUtxos.map(\n\t\t(utxo: { txid: string; vout: number }) => `${utxo.txid}_${utxo.vout}`,\n\t);\n\t// Fetch the scripts up to the limit\n\tconst nftRes = await fetch(`${API_HOST}/txos/outpoints?script=true`, {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t\tbody: JSON.stringify([...outpoints]),\n\t});\n\n\tif (!nftRes.ok) {\n\t\tthrow new Error(`Error fetching NFT scripts for ${address}`);\n\t}\n\n\tconst nfts = (await nftRes.json() || [])\n\n\tnftUtxos = nfts.map(\n\t\t(utxo: {\n\t\t\torigin: { outpoint: string };\n\t\t\tscript: string;\n\t\t\tvout: number;\n\t\t\ttxid: string;\n\t\t}) => {\n      let script = utxo.script;\n      if (scriptEncoding === \"hex\") {\n        script = Buffer.from(script, \"base64\").toString(\"hex\");\n      } else if (scriptEncoding === \"asm\") {\n        script = Script.fromHex(Buffer.from(script, \"base64\").toString(\"hex\")).toASM();\n      }\n\t\t\tconst nftUtxo = {\n\t\t\t\torigin: utxo.origin.outpoint,\n\t\t\t\tscript,\n\t\t\t\tvout: utxo.vout,\n\t\t\t\ttxid: utxo.txid,\n\t\t\t\tsatoshis: 1,\n\t\t\t} as NftUtxo;\n\t\t\tif (collectionId) {\n\t\t\t\tnftUtxo.collectionId = collectionId;\n\t\t\t}\n\t\t\treturn nftUtxo;\n\t\t},\n\t);\n\n\treturn nftUtxos as NftUtxo[];\n};\n\n/**\n * Fetches token utxos from the API\n * @param {TokenType} protocol - Token protocol. Either BSV20 or BSV21\n * @param {string} tokenId - Token id. Ticker for BSV20 and id (mint+deploy inscription origin) for BSV21\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<TokenUtxo[]>} Array of token utxos\n */\nexport const fetchTokenUtxos = async (\n\tprotocol: TokenType,\n\ttokenId: string,\n\taddress: string,\n): Promise<TokenUtxo[]> => {\n\tconst url = `${API_HOST}/bsv20/${address}/${protocol === TokenType.BSV20 ? \"tick\" : \"id\"}/${tokenId}?bsv20=true&listing=false`;\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching ${protocol} utxos`);\n\t}\n\n\t// returns a BSV20Txo but we only need a few fields\n\tlet tokenUtxos = await res.json();\n\n\ttokenUtxos = tokenUtxos.map((utxo: Partial<TokenUtxo>) => ({\n\t\tamt: utxo.amt,\n\t\tscript: utxo.script,\n\t\tvout: utxo.vout,\n\t\ttxid: utxo.txid,\n\t\tid: tokenId,\n\t\tsatoshis: 1,\n\t}));\n\n\treturn tokenUtxos as TokenUtxo[];\n};\n","import type { Transaction } from \"@bsv/sdk\";\nimport { Sigma } from \"sigma-protocol\";\nimport type { LocalSigner, RemoteSigner } from \"./types\";\n\n/**\n * Signs data in the transaction with Sigma protocol\n * @param {Transaction} tx - Transaction to sign\n * @param {LocalSigner | RemoteSigner} signer - Local or remote signer (used for data signature)\n * @returns {Transaction} Transaction with signed data\n */\nexport const signData = async (\n\ttx: Transaction,\n\tsigner: LocalSigner | RemoteSigner,\n): Promise<Transaction> => {\n\t// Sign tx if idKey or remote signer like starfish/tokenpass\n\tconst idKey = (signer as LocalSigner)?.idKey;\n\tconst keyHost = (signer as RemoteSigner)?.keyHost;\n\n\tif (idKey) {\n\t\tconst sigma = new Sigma(tx);\n\t\tconst { signedTx } = sigma.sign(idKey);\n\t\treturn signedTx;\n\t}\n\tif (keyHost) {\n\t\tconst authToken = (signer as RemoteSigner)?.authToken;\n\t\tconst sigma = new Sigma(tx);\n\t\ttry {\n\t\t\tconst { signedTx } = await sigma.remoteSign(keyHost, authToken);\n\t\t\treturn signedTx;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthrow new Error(`Remote signing to ${keyHost} failed`);\n\t\t}\n\t}\n\tthrow new Error(\"Signer must be a LocalSigner or RemoteSigner\");\n};\n","import type { MAP, PreMAP } from \"../types\";\n\nconst stringifyMetaData = (metaData?: PreMAP): MAP | undefined => {\n  if (!metaData) return undefined;\n\tconst result: MAP = {\n\t\tapp: metaData.app,\n\t\ttype: metaData.type,\n\t};\n\n\tfor (const [key, value] of Object.entries(metaData)) {\n\t\tif (value !== undefined) {\n\t\t\tif (typeof value === \"string\") {\n\t\t\t\tresult[key] = value;\n\t\t\t} else if (Array.isArray(value) || typeof value === \"object\") {\n\t\t\t\tresult[key] = JSON.stringify(value);\n\t\t\t} else {\n\t\t\t\tresult[key] = String(value);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\nexport default stringifyMetaData;\n","import { Transaction, SatoshisPerKilobyte, P2PKH, Script, Utils } from \"@bsv/sdk\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n\tUtxo,\n\tCreateOrdinalsConfig,\n\tCreateOrdinalsResult,\n\tCreateOrdinalsCollectionConfig,\n\tCreateOrdinalsCollectionItemConfig,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Creates a transaction with inscription outputs\n * @param {CreateOrdinalsConfig | CreateOrdinalsCollectionConfig | CreateOrdinalsCollectionItemConfig} config - Configuration object for creating ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {string} config.changeAddress - Optional. Address to send change to. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Local or remote signer (used for data signature)\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<CreateOrdinalsResult>} Transaction with inscription outputs\n */\nexport const createOrdinals = async (\n\tconfig:\n\t\t| CreateOrdinalsConfig\n\t\t| CreateOrdinalsCollectionConfig\n\t\t| CreateOrdinalsCollectionItemConfig,\n): Promise<CreateOrdinalsResult> => {\n\tconst {\n\t\tutxos,\n\t\tdestinations,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t} = config;\n\t\n\t// Warn if creating many inscriptions at once\n\tif (destinations.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Outputs\n\t// Add inscription outputs\n\tfor (const destination of destinations) {\n\t\tif (!destination.inscription) {\n\t\t\tthrow new Error(\"Inscription is required for all destinations\");\n\t\t}\n\n\t\t// remove any undefined fields from metadata\n\t\tif (metaData) {\n\t\t\tfor(const key of Object.keys(metaData)) {\n\t\t\t\tif (metaData[key] === undefined) {\n\t\t\t\t\tdelete metaData[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription,\n\t\t\t\tstringifyMetaData(metaData),\n\t\t\t),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\tlet payChange: Utxo | undefined;\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\n\tif(signer) {\n\t\tconst utxo = utxos.pop() as Utxo\n\t\ttx.addInput(inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t)));\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\ttx = await signData(tx, signer);\n\t}\n\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\tScript,\n\ttype TransactionOutput,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type { SendOrdinalsResult, SendOrdinalsConfig, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Sends ordinals to the given destinations\n * @param {SendOrdinalsConfig} config - Configuration object for sending ordinals\n * @param {Utxo[]} config.paymentUtxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.ordinals - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {string} config.changeAddress - Optional. Address to send change to, if any. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @param {boolean} config.enforceUniformSend - Optional. Default: true. Enforce that the number of destinations matches the number of ordinals being sent. Sending ordinals requires a 1:1 mapping of destinations to ordinals. This is only used for sub-protocols like BSV21 that manage tokens without sending the inscriptions directly.\n * @returns {Promise<SendOrdinalsResult>} Transaction, spent outpoints, and change vout\n */\nexport const sendOrdinals = async (\n\tconfig: SendOrdinalsConfig,\n): Promise<SendOrdinalsResult> => {\n\tif (!config.satsPerKb) {\n\t\tconfig.satsPerKb = DEFAULT_SAT_PER_KB;\n\t}\n\tif (!config.additionalPayments) {\n\t\tconfig.additionalPayments = [];\n\t}\n\tif (config.enforceUniformSend === undefined) {\n\t\tconfig.enforceUniformSend = true;\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(config.satsPerKb);\n\tlet tx = new Transaction();\n\tconst spentOutpoints: string[] = [];\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of config.ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(\n\t\t\tordUtxo,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tconfig.ordPk, \n\t\t\t\t\"all\",\n\t\t\t\ttrue, \n\t\t\t\tordUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(ordUtxo.script, 'base64'))\n\t\t\t),\n\t\t);\n\t\tspentOutpoints.push(`${ordUtxo.txid}_${ordUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// check that ordinals coming in matches ordinals going out if supplied\n\tif (\n\t\tconfig.enforceUniformSend &&\n\t\tconfig.destinations.length !== config.ordinals.length\n\t) {\n\t\tthrow new Error(\n\t\t\t\"Number of destinations must match number of ordinals being sent\",\n\t\t);\n\t}\n\n\t// Add ordinal outputs\n\tfor (const destination of config.destinations) {\n\t\tlet s: Script;\n\t\tif (\n\t\t\tdestination.inscription?.dataB64 &&\n\t\t\tdestination.inscription?.contentType\n\t\t) {\n\t\t\ts = new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription,\n\t\t\t\tstringifyMetaData(config.metaData),\n\t\t\t);\n\t\t} else {\n\t\t\ts = new P2PKH().lock(destination.address);\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: s,\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of config.additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of config.paymentUtxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tconfig.paymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\tspentOutpoints.push(`${utxo.txid}_${utxo.vout}`);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (totalSatsIn < totalSatsOut) {\n\t\tthrow new Error(\"Not enough ordinals to send\");\n\t}\n\n\tlet payChange: Utxo | undefined;\n\tif (totalSatsIn > totalSatsOut + BigInt(fee)) {\n\t\tconst changeScript = new P2PKH().lock(\n\t\t\tconfig.changeAddress || config.paymentPk.toAddress().toString(),\n\t\t);\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not available until the transaction is signed\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t}\n\n\tif (config.signer) {\n\t\ttx = await signData(tx, config.signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChange,\n\t};\n};\n","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype TransactionOutput,\n\tUtils,\n\tScript,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type { SendUtxosConfig, SendUtxosResult, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Sends utxos to the given destination\n * @param {SendUtxosConfig} config - Configuration object for sending utxos\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {Payment[]} config.payments - Array of payments with addresses and amounts\n * @param {number} [config.satsPerKb] - Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {string} [config.changeAddress] - Address to send change to. If not provided, defaults to paymentPk address\n * @returns {Promise<SendUtxosResult>} Transaction with utxo outputs\n */\nexport const sendUtxos = async (\n\tconfig: SendUtxosConfig,\n): Promise<SendUtxosResult> => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tpayments,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tchangeAddress = paymentPk.toAddress().toString(),\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\t// Outputs\n\tfor (const payment of payments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new P2PKH().lock(payment.to),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + (out.satoshis || 0),\n\t\t0,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\ttx.addInput(input);\n\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + fee) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + fee) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to send. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChange: Utxo | undefined;\n\tif (totalSatsIn > totalSatsOut + fee) {\n\t\t// Change\n\t\tconst changeScript = new P2PKH().lock(changeAddress);\n\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t} else if (totalSatsIn < totalSatsOut + fee) {\n\t\tconsole.log(\"No change needed\");\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\t\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTokenType,\n\ttype TransferBSV20Inscription,\n\ttype TransferTokenInscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferOrdTokensConfig,\n\ttype TransferOrdTokensResult,\n\ttype TokenUtxo,\n\ttype Utxo,\n} from \"./types\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { P2PKH, SatoshisPerKilobyte, Script, Transaction, Utils } from \"@bsv/sdk\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Transfer tokens to a destination\n * @param {TransferOrdTokensConfig} config - Configuration object for transferring tokens\n * @param {TokenType} config.protocol - Token protocol. Must be TokenType.BSV20 or TokenType.BSV21\n * @param {string} config.tokenID - Token ID. Either the tick or id value depending on the protocol\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {TokenUtxo[]} config.inputTokens - Token utxos to spend\n * @param {Distribution[]} config.distributions - Array of destinations with addresses and amounts\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {string} config.changeAddress - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {string} config.tokenChangeAddress - Optional. Address to send token change to, if any. If not provided, defaults to ordPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @param {burn} config.burn - Optional. Set to true to burn the tokens.\n * @returns {Promise<TransferOrdTokensResult>} Transaction with token transfer outputs\n */\nexport const transferOrdTokens = async (config: TransferOrdTokensConfig): Promise<TransferOrdTokensResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tinputTokens,\n\t\tdistributions,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tchangeAddress,\n\t\ttokenChangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t\tburn = false\n\t} = config;\n\n\t// calculate change amount\n\tlet changeAmt = 0n;\n\tlet totalAmtIn = 0n;\n\tlet totalAmtOut = 0n;\n\n\t// Ensure these inputs are for the expected token\n\tif (!inputTokens.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\tfor (const token of inputTokens) {\n\t\tconst inputScriptBinary = Utils.toArray(token.script, \"base64\");\n\t\tconst inputScript = Script.fromBinary(inputScriptBinary);\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\ttoken,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\ttoken.satoshis,\n\t\t\t\tinputScript,\n\t\t\t),\n\t\t));\n\t\n\t\ttotalAmtIn += BigInt(token.amt);\n\t}\n\n\t// build destination inscriptions\n\tfor (const dest of distributions) {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: burn ? \"burn\" : \"transfer\",\n\t\t\tamt: dest.amt,\n\t\t}\n\t\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\ttick: tokenID,\n\t\t\t} as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\tid: tokenID,\n\t\t\t} as TransferBSV21Inscription;\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid protocol\");\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdest.address,\n\t\t\t\t{\n\t\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\t\t\tcontentType: \"application/bsv20\",\n\t\t\t\t},\n\t\t\t),\n\t\t});\n\t\ttotalAmtOut += BigInt(dest.amt);\n\t};\n\tchangeAmt = totalAmtIn - totalAmtOut;\n\n\tlet tokenChange: TokenUtxo | undefined;\n\t// check that you have enough tokens to send and return change\n\tif (changeAmt < 0n) {\n\t\tthrow new Error(\"Not enough tokens to send\");\n\t}\n\tif (changeAmt > 0n) {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: \"transfer\",\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\ttick: tokenID,\n\t\t\t} as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\tid: tokenID,\n\t\t\t} as TransferBSV21Inscription;\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid protocol\");\n\t\t}\n\n\t\tconst lockingScript = new OrdP2PKH().lock(\n\t\t\ttokenChangeAddress || ordPk.toAddress().toString(), \n\t\t\t{\n\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString('base64'),\n\t\t\t\tcontentType: \"application/bsv-20\",\n\t\t\t}\n\t\t);\n\t\tconst vout = tx.outputs.length;\n\t\ttx.addOutput({ lockingScript, satoshis: 1 });\n\t\ttokenChange = {\n\t\t\tid: tokenID,\n\t\t\tsatoshis: 1,\n\t\t\tscript: Buffer.from(lockingScript.toBinary()).toString(\"base64\"),\n\t\t\ttxid: \"\",\n\t\t\tvout,\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst txid = tx.id(\"hex\") as string;\n\tif (tokenChange) {\n\t\ttokenChange.txid = txid;\n\t}\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t\ttokenChange,\n\t};\n};","import {\n\tBigNumber,\n\ttype LockingScript,\n\tOP,\n\tP2PKH,\n\ttype PrivateKey,\n\tScript,\n\ttype Transaction,\n\tTransactionSignature,\n\tUnlockingScript,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { toHex } from \"../utils/strings\";\nimport type { Inscription } from \"../types\";\n\nexport const oLockPrefix =\n\t\"2097dfd76851bf465e8f715593b217714858bbe9570ff3bd5e33840a34e20ff0262102ba79df5f8ae7604a9830f03c7933028186aede0675a16f025dc4f8be8eec0382201008ce7480da41702918d1ec8e6849ba32b4d65b1e40dc669c31a1e6306b266c0000\";\nexport const oLockSuffix =\n\t\"615179547a75537a537a537a0079537a75527a527a7575615579008763567901c161517957795779210ac407f0e4bd44bfc207355a778b046225a7068fc59ee7eda43ad905aadbffc800206c266b30e6a1319c66dc401e5bd6b432ba49688eecd118297041da8074ce081059795679615679aa0079610079517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01007e81517a75615779567956795679567961537956795479577995939521414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff00517951796151795179970079009f63007952799367007968517a75517a75517a7561527a75517a517951795296a0630079527994527a75517a6853798277527982775379012080517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01205279947f7754537993527993013051797e527e54797e58797e527e53797e52797e57797e0079517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a756100795779ac517a75517a75517a75517a75517a75517a75517a75517a75517a7561517a75517a756169587951797e58797eaa577961007982775179517958947f7551790128947f77517a75517a75618777777777777777777767557951876351795779a9876957795779ac777777777777777767006868\";\n\n/**\n * OrdLock class implementing ScriptTemplate.\n *\n * This class provides methods for interacting with OrdinalLock contract \n */\nexport default class OrdLock {\n\t/**\n\t * Creates a 1Sat Ordinal Lock script\n\t *\n\t * @param {string} ordAddress - An address which can cancel listing.\n\t * @param {string} payAddress - Address which is paid on purchase\n\t * @param {number} price - Listing price in satoshis\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\tlock(\n\t\tordAddress: string,\n\t\tpayAddress: string,\n\t\tprice: number,\n    inscription?: Inscription,\n\t): Script {\n\t\tconst cancelPkh = Utils.fromBase58Check(ordAddress).data as number[];\n\t\tconst payPkh = Utils.fromBase58Check(payAddress).data as number[];\n\n\t\tlet script = new Script()\n\t\tif (inscription?.dataB64 !== undefined && inscription?.contentType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(inscription.dataB64, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(inscription.contentType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tscript = Script.fromASM(`OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`);\n\t\t}\n\t\t\n\t\treturn script.writeScript(Script.fromHex(oLockPrefix))\n\t\t\t.writeBin(cancelPkh)\n\t\t\t.writeBin(OrdLock.buildOutput(price, new P2PKH().lock(payPkh).toBinary()))\n\t\t\t.writeScript(Script.fromHex(oLockSuffix))\n\t}\n\n\tcancelListing(\n\t\tprivateKey: PrivateKey,\n\t\tsignOutputs: 'all' | 'none' | 'single' = 'all',\n\t\tanyoneCanPay = false,\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: () => Promise<number>\n\t} {\n\t\tconst p2pkh = new P2PKH().unlock(privateKey, signOutputs, anyoneCanPay, sourceSatoshis, lockingScript)\n\t\treturn {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await p2pkh.sign(tx, inputIndex)).writeOpCode(OP.OP_1)\n\t\t\t},\n\t\t\testimateLength: async () => {\n\t\t\t\treturn 107\n\t\t\t}\n\t\t}\n\t}\n\n\tpurchaseListing(\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>\n\t} {\n\t\tconst purchase = {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\tif (tx.outputs.length < 2) {\n\t\t\t\t\tthrow new Error(\"Malformed transaction\")\n\t\t\t\t}\n\t\t\t\tconst script = new UnlockingScript()\n\t\t\t\t\t.writeBin(OrdLock.buildOutput(\n\t\t\t\t\t\ttx.outputs[0].satoshis || 0,\n\t\t\t\t\t\ttx.outputs[0].lockingScript.toBinary()\n\t\t\t\t\t))\n\t\t\t\tif(tx.outputs.length > 2) {\n\t\t\t\t\tconst writer = new Utils.Writer()\n\t\t\t\t\tfor(const output of tx.outputs.slice(2)) {\n\t\t\t\t\t\twriter.write(OrdLock.buildOutput(output.satoshis || 0, output.lockingScript.toBinary()))\n\t\t\t\t\t}\n\t\t\t\t\tscript.writeBin(writer.toArray())\n\t\t\t\t} else {\n\t\t\t\t\tscript.writeOpCode(OP.OP_0)\n\t\t\t\t}\n\n        const input = tx.inputs[inputIndex]\n        let sourceSats: number\n        if (!sourceSatoshis && input.sourceTransaction) {\n          sourceSats = input.sourceTransaction.outputs[input.sourceOutputIndex].satoshis as number\n        } else if (!sourceSatoshis) {\n          throw new Error(\"sourceTransaction or sourceSatoshis is required\")\n        }\n        sourceSats = sourceSatoshis as number\n        \n        const sourceTXID = (input.sourceTXID || input.sourceTransaction?.id('hex')) as string\n        let subscript = lockingScript as LockingScript\n        if (!lockingScript) {\n          subscript = input.sourceTransaction?.outputs[input.sourceOutputIndex].lockingScript as LockingScript\n        }\n\t\t\t\tconst preimage = TransactionSignature.format({\n\t\t\t\t\tsourceTXID,\n\t\t\t\t\tsourceOutputIndex: input.sourceOutputIndex,\n\t\t\t\t\tsourceSatoshis: sourceSats,\n\t\t\t\t\ttransactionVersion: tx.version,\n\t\t\t\t\totherInputs: [],\n\t\t\t\t\tinputIndex,\n\t\t\t\t\toutputs: tx.outputs,\n\t\t\t\t\tinputSequence: input.sequence,\n\t\t\t\t\tsubscript,\n\t\t\t\t\tlockTime: tx.lockTime,\n\t\t\t\t\tscope: TransactionSignature.SIGHASH_ALL |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_ANYONECANPAY |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_FORKID\n\t\t\t\t  });\n\n\t\t\t\treturn script.writeBin(preimage).writeOpCode(OP.OP_0)\n\t\t\t},\n\t\t\testimateLength: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await purchase.sign(tx, inputIndex)).toBinary().length\n\t\t\t}\n\t\t}\n\t\treturn purchase\n\t}\n\n\tstatic buildOutput(satoshis: number, script: number[]): number[] {\n\t\tconst writer = new Utils.Writer()\n\t\twriter.writeUInt64LEBn(new BigNumber(satoshis))\n\t\twriter.writeVarIntNum(script.length)\n\t\twriter.write(script)\n\t\treturn writer.toArray()\n\t}\n}\n","import {\n\tP2PKH,\n\tSatoshisPerKilobyte,\n\tScript,\n\tTransaction,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport {\n\ttype CreateOrdTokenListingsConfig,\n\ttype CreateOrdListingsConfig,\n\ttype Utxo,\n\ttype TransferTokenInscription,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\tTokenType,\n\ttype TokenUtxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nconst { toArray } = Utils;\n\n// TODO: Handle royalty\nexport const createOrdListings = async (config: CreateOrdListingsConfig) => {\n\tconst {\n\t\tutxos,\n\t\tlistings,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t\troyalty,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Warn if creating many inscriptions at once\n\tif (listings.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Outputs\n\t// Add listing outputs\n\tfor (const listing of listings) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdLock().lock(\n\t\t\t\tlisting.payAddress,\n\t\t\t\tlisting.ordAddress,\n\t\t\t\tlisting.price,\n\t\t\t),\n\t\t});\n\t\tconst inputScriptBinary = toArray(listing.listingUtxo.script, \"base64\");\n\t\tconst inputScript = Script.fromBinary(inputScriptBinary);\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\tlisting.listingUtxo,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlisting.listingUtxo.satoshis,\n\t\t\t\tinputScript,\n\t\t\t),\n\t\t));\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Check if change is needed\n\tlet payChange: Utxo | undefined;\n\tconst changeScript = new P2PKH().lock(\n\t\tchangeAddress || paymentPk.toAddress().toString(),\n\t);\n\tconst changeOutput = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOutput);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\nexport const createOrdTokenListings = async (\n\tconfig: CreateOrdTokenListingsConfig,\n) => {\n\tconst {\n\t\tutxos,\n\t\tprotocol,\n\t\ttokenID,\n\t\tordPk,\n\t\tpaymentPk,\n\t\tadditionalPayments = [],\n\t\tchangeAddress,\n\t\ttokenChangeAddress,\n\t\tinputTokens,\n\t\tlistings,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\n\t// Warn if creating many inscriptions at once\n\tif (listings.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Ensure these inputs are for the expected token\n\tif (!inputTokens.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\t// calculate change amount\n\tlet changeAmt = 0n;\n\tlet totalAmtIn = 0n;\n\tlet totalAmtOut = 0n;\n\n\t// Ensure these inputs are for the expected token\n\tif (!inputTokens.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\t// Outputs\n\t// Add listing outputs\n\tfor (const listing of listings) {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: \"transfer\",\n\t\t\tamt: listing.amt.toString(),\n\t\t};\n\t\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\ttick: tokenID,\n\t\t\t} as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\tid: tokenID,\n\t\t\t} as TransferBSV21Inscription;\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid protocol\");\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdLock().lock(\n\t\t\t\tlisting.payAddress,\n\t\t\t\tlisting.ordAddress,\n\t\t\t\tlisting.price,\n\t\t\t\t{\n\t\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\t\t\tcontentType: \"application/bsv20\",\n\t\t\t\t},\n\t\t\t),\n\t\t});\n\t\ttotalAmtOut += listing.amt;\n\t}\n\n\tfor (const token of inputTokens) {\n\t\tconst inputScriptBinary = toArray(token.script, \"base64\");\n\t\tconst inputScript = Script.fromBinary(inputScriptBinary);\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\ttoken,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\ttoken.satoshis,\n\t\t\t\tinputScript,\n\t\t\t),\n\t\t));\n\n\t\ttotalAmtIn += BigInt(token.amt);\n\t}\n\tchangeAmt = totalAmtIn - totalAmtOut;\n\n\tlet tokenChange: TokenUtxo | undefined;\n\t// check that you have enough tokens to send and return change\n\tif (changeAmt < 0n) {\n\t\tthrow new Error(\"Not enough tokens to send\");\n\t}\n\tif (changeAmt > 0n) {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: \"transfer\",\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\ttick: tokenID,\n\t\t\t} as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\tid: tokenID,\n\t\t\t} as TransferBSV21Inscription;\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid protocol\");\n\t\t}\n\n\t\tconst lockingScript = new OrdP2PKH().lock(tokenChangeAddress, {\n\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString('base64'),\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t});\n\t\tconst vout = tx.outputs.length;\n\t\ttx.addOutput({ lockingScript, satoshis: 1 });\n\t\ttokenChange = {\n\t\t\tid: tokenID,\n\t\t\tsatoshis: 1,\n\t\t\tscript: Buffer.from(lockingScript.toBinary()).toString(\"base64\"),\n\t\t\ttxid: \"\",\n\t\t\tvout,\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst txid = tx.id(\"hex\") as string;\n\tif (tokenChange) {\n\t\ttokenChange.txid = txid;\n\t}\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t\ttokenChange,\n\t};\n};\n","import { P2PKH, SatoshisPerKilobyte, Script, Transaction, Utils } from \"@bsv/sdk\";\nimport {\n\tTokenType,\n\ttype CancelOrdListingsConfig,\n\ttype CancelOrdTokenListingsConfig,\n\ttype Destination,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\n\nexport const cancelOrdListings = async (config: CancelOrdListingsConfig) => {\n\tconst {\n\t\tutxos,\n\t\tlistingUtxos,\n\t\tordPk,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tadditionalPayments = [],\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\n\t// Warn if creating many inscriptions at once\n\tif (listingUtxos.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\t\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinals we're cancelling\n\tfor (const listingUtxo of listingUtxos) {\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().cancelListing(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlistingUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, 'base64'))\n\t\t\t)\n\t\t));\n\t\t// Add cancel outputs returning listed ordinals\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new P2PKH().lock(ordPk.toAddress().toString()),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo, \n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpaymentPk, \n\t\t\t\t\"all\",\n\t\t\t\ttrue, \n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t\t)\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\nexport const cancelOrdTokenListings = async (\n\tconfig: CancelOrdTokenListingsConfig,\n) => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tadditionalPayments,\n\t\tlistingUtxos,\n\t\tutxos,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\t// calculate change amount\n\tlet totalAmtIn = 0;\n\n\tif (listingUtxos.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Ensure these inputs are for the expected token\n\tif (!listingUtxos.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinals we're cancelling\n\tfor (const listingUtxo of listingUtxos) {\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().cancelListing(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlistingUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, 'base64'))\n\t\t\t)\n\t\t));\n\t\ttotalAmtIn += Number.parseInt(listingUtxo.amt);\n\t}\n\n\tconst transferInscription: TransferTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"transfer\",\n\t\tamt: totalAmtIn.toString(),\n\t};\n\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\tif (protocol === TokenType.BSV20) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\ttick: tokenID,\n\t\t} as TransferBSV20Inscription;\n\t} else if (protocol === TokenType.BSV21) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\tid: tokenID,\n\t\t} as TransferBSV21Inscription;\n\t} else {\n\t\tthrow new Error(\"Invalid protocol\");\n\t}\n\n\tconst destination: Destination = {\n\t\taddress: ordAddress || ordPk.toAddress().toString(),\n\t\tinscription: {\n\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t},\n\t};\n\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\tdestination.address,\n\t\t\tdestination.inscription\n\t\t),\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};","import { P2PKH, SatoshisPerKilobyte, Script, Transaction, Utils } from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport {\n\tTokenType,\n\ttype Inscription,\n\ttype PurchaseOrdListingConfig,\n\ttype PurchaseOrdTokenListingConfig,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\n\nexport const purchaseOrdListing = async (config: PurchaseOrdListingConfig) => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tlistingUtxo,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tadditionalPayments = [],\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinal we're purchasing\n  tx.addInput({\n\t\tunlockingScriptTemplate: new OrdLock().purchaseListing(\n\t\t\t1,\n\t\t\tScript.fromHex(Buffer.from(listingUtxo.script, \"base64\").toString(\"hex\")),\n\t\t),\n\t\tsourceTXID: listingUtxo.txid,\n\t\tsourceOutputIndex: listingUtxo.vout,\n\t\tsequence: 0xffffffff,\n\t});\n\n\t// Outputs\n\t// Add the purchased output\n  tx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript: new P2PKH().lock(ordAddress),\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\nexport const purchaseOrdTokenListing = async (\n\tconfig: PurchaseOrdTokenListingConfig,\n) => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tpaymentPk,\n\t\tlistingUtxo,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinal we're purchasing\n\ttx.addInput(inputFromB64Utxo(\n\t\tlistingUtxo,\n\t\tnew OrdLock().purchaseListing(\n\t\t\t1,\n\t\t\tScript.fromHex(Buffer.from(listingUtxo.script, \"base64\").toString(\"hex\")),\n\t\t),\n\t));\n\n\t// Outputs\n\tconst transferInscription: TransferTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"transfer\",\n\t\tamt: listingUtxo.amt,\n\t};\n\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\tif (protocol === TokenType.BSV20) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\ttick: tokenID,\n\t\t} as TransferBSV20Inscription;\n\t} else if (protocol === TokenType.BSV21) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\tid: tokenID,\n\t\t} as TransferBSV21Inscription;\n\t} else {\n\t\tthrow new Error(\"Invalid protocol\");\n\t}\n\tconst dataB64 = Buffer.from(JSON.stringify(inscription)).toString(\"base64\");\n\n\t// Add the purchased output\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(ordAddress, {\n\t\t\tdataB64,\n\t\t\tcontentType: \"bsv-20\",\n\t\t}),\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase token listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n  return {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map((i) => `${i.sourceTXID}_${i.sourceOutputIndex}`),\n\t\tpayChange,\n\t};\n};\n","import type { CollectionItemSubTypeData, CollectionSubTypeData } from \"./types\";\n\n/**\n * Validates sub type data\n * @param {string} subType - Sub type of the ordinals token\n * @param {string} subTypeData - Sub type data of the ordinals token\n * @returns {Error | undefined} Error if validation fails, undefined if validation passes\n */\nexport const validateSubTypeData = (\n  subType: \"collection\" | \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData | CollectionSubTypeData,\n): Error | undefined => {\n  try {\n    if (subType === \"collection\") {\n      const collectionData = subTypeData as CollectionSubTypeData;\n      if (!collectionData.description) {\n        return new Error(\"Collection description is required\");\n      }\n      if (!collectionData.quantity) {\n        return new Error(\"Collection quantity is required\");\n      }\n      if (collectionData.rarityLabels) {\n        if (!Array.isArray(collectionData.rarityLabels)) {\n          return new Error(\"Rarity labels must be an array\");\n        }\n        // make sure keys and values are strings\n        if (!collectionData.rarityLabels.every((label) => {\n          return Object.values(label).every(value => typeof value === 'string');\n        })) {\n          return new Error(`Invalid rarity labels ${collectionData.rarityLabels}`);\n        }\n      }\n      if (collectionData.traits ) {\n        if (typeof collectionData.traits !== \"object\") {\n        return new Error(\"Collection traits must be an object\");\n        }\n        if (collectionData.traits && !Object.keys(collectionData.traits).every(key => typeof key === 'string' && typeof collectionData.traits[key] === 'object')) {\n          return new Error(\"Collection traits must be a valid CollectionTraits object\");\n        }\n      }\n    }\n    if (subType === \"collectionItem\") {\n      const itemData = subTypeData as CollectionItemSubTypeData;\n      if (!itemData.collectionId) {\n        return new Error(\"Collection id is required\");\n      }\n      if (!itemData.collectionId.includes(\"_\")) {\n        return new Error(\"Collection id must be a valid outpoint\");\n      }\n      if (itemData.collectionId.split(\"_\")[0].length !== 64) {\n        return new Error(\"Collection id must contain a valid txid\");\n      }\n      if (Number.isNaN(Number.parseInt(itemData.collectionId.split(\"_\")[1]))) {\n        return new Error(\"Collection id must contain a valid vout\");\n      }\n\n      if (itemData.mintNumber && typeof itemData.mintNumber !== \"number\") {\n        return new Error(\"Mint number must be a number\");\n      }\n      if (itemData.rank && typeof itemData.rank !== \"number\") {\n        return new Error(\"Rank must be a number\");\n      }\n      if (itemData.rarityLabel && typeof itemData.rarityLabel !== \"string\") {\n        return new Error(\"Rarity label must be a string\");\n      }\n      if (itemData.traits && typeof itemData.traits !== \"object\") {\n        return new Error(\"Traits must be an object\");\n      }\n      if (itemData.attachments && !Array.isArray(itemData.attachments)) {\n        return new Error(\"Attachments must be an array\");\n      }\n    }\n    return undefined;\n  } catch (error) {\n    return new Error(\"Invalid JSON data\");\n  }\n};"],"names":["TokenType","RoytaltyType","toHex","utf8Str","Buffer","from","toString","DEFAULT_SAT_PER_KB","API_HOST","OrdP2PKH","_P2PKH","apply","arguments","_inheritsLoose","prototype","lock","address","inscription","metaData","ordAsm","undefined","dataB64","contentType","ordHex","fileHex","trim","Error","fileMediaType","inscriptionAsm","P2PKH","toASM","app","type","_i","_Object$entries","Object","entries","length","_Object$entries$_i","key","value","LockingScript","fromASM","fromBase58Check","Utils","inputFromB64Utxo","utxo","unlockScriptTemplate","fromUtxo","_extends","script","signData","tx","signer","_exit","_temp2","_result","idKey","keyHost","_sigma$sign","Sigma","sign","Promise","resolve","signedTx","_temp","authToken","sigma","remoteSign","then","_ref","_catch","e","console","log","reject","stringifyMetaData","result","Array","isArray","JSON","stringify","String","pact","state","s","_Pact","o","bind","v","_settle","observer","onFulfilled","this","_this","onRejected","_isSettledPact","thenable","_iteratorSymbol","Symbol","iterator","OrdLock","_proto","ordAddress","payAddress","price","cancelPkh","data","payPkh","Script","writeScript","fromHex","writeBin","buildOutput","toBinary","cancelListing","privateKey","signOutputs","anyoneCanPay","sourceSatoshis","lockingScript","p2pkh","unlock","inputIndex","_p2pkh$sign","writeOpCode","OP","OP_1","estimateLength","purchaseListing","purchase","_input$sourceTransact","outputs","UnlockingScript","satoshis","_step","writer","Writer","_iterator","_createForOfIteratorHelperLoose","slice","done","output","write","toArray","OP_0","sourceSats","input","inputs","sourceTransaction","sourceOutputIndex","_input$sourceTransact2","sourceTXID","id","subscript","preimage","TransactionSignature","format","transactionVersion","version","otherInputs","inputSequence","sequence","lockTime","scope","SIGHASH_ALL","SIGHASH_ANYONECANPAY","SIGHASH_FORKID","_purchase$sign","writeUInt64LEBn","BigNumber","writeVarIntNum","callback","target","body","check","step","_cycle","next","return","_fixup","TypeError","i","push","array","_forTo","values","_forOf","config","_interrupt","totalSatsIn","totalSatsOut","BigInt","fee","modelOrFee","payChangeOutIdx","findIndex","change","changeOutput","payChange","txid","vout","spentOutpoints","map","utxos","listingUtxos","ordPk","paymentPk","changeAddress","_config$additionalPay","additionalPayments","_config$satsPerKb","satsPerKb","warn","SatoshisPerKilobyte","Transaction","listingUtxo","addInput","fromBinary","addOutput","toAddress","_iterator2","_step2","p","amount","to","changeScript","reduce","total","out","computeFee","_modelOrFee$computeFe","_interrupt2","_temp4","protocol","tokenID","_config$satsPerKb2","totalAmtIn","every","token","_step3","_iterator3","Number","parseInt","amt","transferInscription","op","BSV20","tick","BSV21","destination","_step4","_iterator4","_temp3","_modelOrFee$computeFe2","listings","listing","inputScriptBinary","inputScript","tokenChange","_config$additionalPay2","tokenChangeAddress","inputTokens","changeAmt","totalAmtOut","_step5","_iterator5","destinations","_Object$keys","keys","pop","_signData","collectionId","limit","offset","scriptEncoding","url","subTypeData","fetch","res","ok","json","nftUtxos","outpoints","filter","u","_u$data","list","method","headers","concat","nftRes","nfts","nftUtxo","origin","outpoint","payUrl","payRes","payUtxos","pubKeyHash","p2pkhScript","tokenId","tokenUtxos","unlockingScriptTemplate","changeOut","enforceUniformSend","ordinals","ordUtxo","_destination$inscript","_destination$inscript2","paymentUtxos","payments","_config$changeAddress","payment","sendTxOut","distributions","_config$burn","burn","dest","subType","collectionData","description","quantity","rarityLabels","label","traits","itemData","includes","split","isNaN","mintNumber","rank","rarityLabel","attachments","error"],"mappings":"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"}