{"version":3,"file":"index.module.js","sources":["../src/utils/strings.ts","../src/types.ts","../src/constants.ts","../src/templates/ordP2pkh.ts","../src/utils/utxo.ts","../src/signData.ts","../src/utils/subtypeData.ts","../src/createOrdinals.ts","../src/sendOrdinals.ts","../src/sendUtxos.ts","../src/transferOrdinals.ts","../src/validate.ts","../src/templates/ordLock.ts","../src/createListings.ts","../src/cancelListings.ts","../src/purchaseOrdListing.ts","../src/utils/paymail.ts","../src/utils/icon.ts","../src/deployBsv21.ts","../src/burnOrdinals.ts"],"sourcesContent":["/**\n * Converts a string to its hexadecimal representation\n *\n * @param {string} utf8Str - The string to convert\n * @returns {string} The hexadecimal representation of the input string\n */\nconst toHex = (utf8Str: string): string => {\n  return Buffer.from(utf8Str).toString(\"hex\");\n};\n\nexport { toHex };\n","import type { PrivateKey, Transaction } from \"@bsv/sdk\";\nimport type { AuthToken } from \"sigma-protocol\";\n\n// biome-ignore lint/complexity/noBannedTypes: Reserved for future use\ntype Signer = {};\n\nexport interface LocalSigner extends Signer {\n  idKey: PrivateKey;\n}\n\nexport interface RemoteSigner extends Signer {\n  keyHost: string;\n  authToken?: AuthToken;\n}\n\nexport type Destination = {\n  address: string;\n  inscription?: Inscription;\n};\n\n/**\n * @typedef {Object} Listing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n * @property {Utxo} listingUtxo - Utxo of the listing\n */\nexport type NewListing = {\n  payAddress: string;\n  price: number;\n  ordAddress: string;\n  listingUtxo: Utxo;\n}\n\n/**\n * @typedef {Object} ExistingListing\n * @property {string} payout - Payment output script base64 encoded\n * @property {Utxo} listingUtxo - Utxo of the listing\n */\nexport type ExistingListing = {\n  payout: string;\n  listingUtxo: Utxo;\n}\n\n/**\n * @typedef {Object} NewTokenListing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n * @property {number} amt - Number of tokens as a number. Not adjusted for decimals (library will add zeros according to dec value).\n */\nexport type NewTokenListing = {\n  payAddress: string;\n  price: number;\n  amt: number;\n  ordAddress: string;\n}\n\n/**\n * @typedef {Object} Distribution\n * @property {string} address - Destination address. Must be a Ordinals address (BSV address for recieving 1Sat ordinals tokens).\n * @property {number} amt - Number of tokens as a string, considering decimals. Not display format. Ex. 100000000 for 1 token with 8 decimal places.\n * @property {boolean} [omitMetaData] - Optional. Set to true to omit metadata from this distribution's output.\n */\nexport type Distribution = {\n  address: string;\n  amt: number;\n  omitMetaData?: boolean;\n};\n\n/**\n * @typedef {Object} Utxo\n * @property {number} satoshis - Amount in satoshis\n * @property {string} txid - Transaction id\n * @property {number} vout - Output index\n * @property {string} script - Base64 encoded locking script\n */\nexport type Utxo = {\n  satoshis: number;\n  txid: string;\n  vout: number;\n  script: string;\n};\n\n/**\n * @typedef {Object} NftUtxo\n * @property {string} collectionId - Optional. Collection id of the NFT\n * @property {string} contentType - Media type of the NFT\n * @property {string} creatorBapId - Optional. Creator BAP id of the NFT\n * @property {string} origin - Origin address of the NFT\n * @property {number} satoshis - Always 1\n */\nexport interface NftUtxo extends Utxo {\n  collectionId?: string;\n  contentType: string;\n  creatorBapId?: string;\n  origin: string;\n  satoshis: 1;\n}\n\n/**\n * @typedef {Object} TokenUtxo\n * @property {string} amt - Number of tokens as a string, adjusted for decimals. Ex. 100000000 for 1 token with 8 decimal places.\n * @property {string} id - Token id -  either tick or id depending on protocol\n * @property {string} satoshis - Always 1\n * @property {string} [payout] - Optional. Payment output script base64 encoded\n * @property {number} [price] - Optional. Listing price in satoshis\n * @property {boolean} [isListing] - Optional. True if the token is a listing\n */\nexport interface TokenUtxo extends Utxo {\n  amt: string;\n  id: string;\n  satoshis: 1;\n  payout?: string;\n  price?: number;\n  isListing?: boolean;\n}\n\nexport type Inscription = {\n  dataB64: string;\n  contentType: string;\n};\n\nexport type ImageContentType =\n  | \"image/png\"\n  | \"image/jpeg\"\n  | \"image/gif\"\n  | \"image/svg+xml\"\n  | \"image/webp\";\n\n/**\n * @typedef {Object} IconInscription\n * @property {string} dataB64 - Base64 encoded image data. Must be a square image.\n * @property {ImageContentType} contentType - Media type of the image\n */\nexport type IconInscription = {\n  dataB64: string;\n  contentType: ImageContentType;\n};\n\nexport type Payment = {\n  to: string;\n  amount: number;\n};\n\nexport type TokenInscription = {\n  p: \"bsv-20\";\n  amt: string;\n  op: \"transfer\" | \"mint\" | \"deploy+mint\" | \"burn\";\n  dec?: string;\n};\n\nexport interface MintTokenInscription extends TokenInscription {\n  op: \"mint\";\n}\n\nexport interface DeployMintTokenInscription extends TokenInscription {\n  op: \"deploy+mint\";\n  sym: string;\n  icon: string;\n}\n\nexport interface TransferTokenInscription extends TokenInscription {\n  p: \"bsv-20\";\n  amt: string;\n  op: \"transfer\" | \"burn\";\n}\n\nexport interface TransferBSV20Inscription extends TransferTokenInscription {\n  tick: string;\n}\n\nexport interface TransferBSV21Inscription extends TransferTokenInscription {\n  id: string;\n}\n\nexport enum TokenType {\n  BSV20 = \"bsv20\",\n  BSV21 = \"bsv21\",\n}\n\nexport type BaseResult = {\n  tx: Transaction;\n  spentOutpoints: string[];\n};\n\nexport interface ChangeResult extends BaseResult {\n  payChange?: Utxo;\n};\n\n/**\n * MAP (Magic Attribute Protocol) metadata object with stringified values for writing to the blockchain\n * @typedef {Object} MAP\n * @property {string} app - Application identifier\n * @property {string} type - Metadata type\n * @property {string} [prop] - Optional. Additional metadata properties\n */\nexport type MAP = {\n  app: string;\n  type: string;\n  [prop: string]: string;\n};\n\nexport type PreMAP = {\n  app: string;\n  type: string;\n  [prop: string]: unknown;\n  royalties?: Royalty[];\n  subTypeData?: CollectionSubTypeData | CollectionItemSubTypeData;\n};\n\nexport type CreateOrdinalsConfig = {\n  utxos: Utxo[];\n  destinations: Destination[];\n  paymentPk: PrivateKey;\n  changeAddress?: string;\n  satsPerKb?: number;\n  metaData?: PreMAP;\n  signer?: LocalSigner | RemoteSigner;\n  additionalPayments?: Payment[];\n};\n\nexport enum RoytaltyType {\n  Paymail = \"paymail\",\n  Address = \"address\",\n  Script = \"script\",\n}\n\n/**\n * Royalty object\n * @typedef {Object} Royalty\n * @property {RoytaltyType} type - Royalty type, string, one of \"paymail\", \"address\", \"script\"\n * @property {string} destination - Royalty destination\n * @property {string} percentage - Royalty percentage as a string float 0-1 (0.01 = 1%)\n */\nexport type Royalty = {\n  type: RoytaltyType;\n  destination: string;\n  percentage: string; // string float 0-1\n};\n\nexport interface CreateOrdinalsMetadata extends PreMAP {\n  type: \"ord\",\n  name: string,\n  previewUrl?: string,\n}\n\nexport interface CreateOrdinalsCollectionMetadata extends CreateOrdinalsMetadata {\n  subType: \"collection\",\n  subTypeData: CollectionSubTypeData, // JSON stringified CollectionSubTypeData\n  royalties?: Royalty[],\n};\n\nexport interface CreateOrdinalsCollectionItemMetadata extends CreateOrdinalsMetadata {\n  subType: \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n};\n\n/**\n * Configuration object for creating an ordinals collection\n * @typedef {Object} CreateOrdinalsCollectionConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collection\"\n * @property metaData.name - Collection name\n * @property metaData.subTypeData - JSON stringified CollectionSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionConfig extends CreateOrdinalsConfig {\n  metaData: CreateOrdinalsCollectionMetadata\n}\n\nexport type CollectionTraits = {\n  [trait: string]: CollectionTrait;\n};\n\nexport type CollectionTrait = {\n  values: string[];\n  occurancePercentages: string[];\n};\n\nexport type Rarity = {\n  [key: string]: string;\n}\n\nexport type RarityLabels = Rarity[]\nexport interface CollectionSubTypeData {\n  description: string;\n  quantity: number;\n  rarityLabels: RarityLabels;\n  traits: CollectionTraits;\n}\n\nexport interface CreateOrdinalsCollectionItemMetadata extends PreMAP {\n  type: \"ord\",\n  name: string,\n  subType: \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n  previewUrl?: string,\n}\n\n/**\n * Configuration object for creating an ordinals collection item\n * @typedef {Object} CreateOrdinalsCollectionItemConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection item\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collectionItem\"\n * @property metaData.name - Collection item name\n * @property metaData.subTypeData - JSON stringified CollectionItemSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionItemConfig extends CreateOrdinalsConfig {\n  metaData: CreateOrdinalsCollectionItemMetadata\n}\n\n/**\n * Subtype data for an ordinals collection item\n * @typedef {Object} CollectionItemSubTypeData\n * @property {string} collectionId - Collection id\n * @property {number} mintNumner - Mint number\n * @property {number} rank - Rank\n * @property {string} rarityLabel - Rarity label\n * @property {string} traits - traits object\n * @property {string} attachments - array of attachment objects\n */\nexport interface CollectionItemSubTypeData {\n  collectionId: string;\n  mintNumber?: number;\n  rank?: number;\n  rarityLabel?: RarityLabels;\n  traits?: CollectionItemTrait[];\n  attachments?: CollectionItemAttachment[];\n}\n\nexport type CollectionItemTrait = {\n  name: string;\n  value: string;\n  rarityLabel?: string;\n  occurancePercentrage?: string;\n};\n\nexport type CollectionItemAttachment = {\n  name: string;\n  description?: string;\n  \"content-type\": string;\n  url: string;\n}\n\nexport interface BurnMAP extends MAP {\n  type: \"ord\";\n  op: \"burn\";\n}\n\nexport type BurnOrdinalsConfig = {\n  ordPk: PrivateKey;\n  ordinals: Utxo[];\n  metaData?: BurnMAP;\n}\n\nexport type SendOrdinalsConfig = {\n  paymentUtxos: Utxo[];\n  ordinals: Utxo[];\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  destinations: Destination[];\n  changeAddress?: string;\n  satsPerKb?: number;\n  metaData?: PreMAP;\n  signer?: LocalSigner | RemoteSigner;\n  additionalPayments?: Payment[];\n  enforceUniformSend?: boolean;\n}\n\nexport type DeployBsv21TokenConfig = {\n  symbol: string;\n  decimals?: number;\n  icon: string | IconInscription;\n  utxos: Utxo[];\n  initialDistribution: Distribution;\n  paymentPk: PrivateKey;\n  destinationAddress: string;\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[];\n};\n\nexport type SendUtxosConfig = {\n  utxos: Utxo[];\n  paymentPk: PrivateKey;\n  payments: Payment[];\n  satsPerKb?: number;\n  changeAddress?: string;\n  metaData?: MAP;\n};\n\nexport interface TokenChangeResult extends ChangeResult {\n  tokenChange?: TokenUtxo[];\n}\n\n/**\n * Configuration object for token outputs\n * @typedef {Object} TokenSplitConfig\n * @property {number} outputs - Number of outputs to split the token into. Default is 1.\n * @property {number} threshold - This number of input tokens or less will trigger a splitting. Default is 0.\n * @property {boolean} omitMetaData - Set to true to omit metadata from the token change outputs\n **/\nexport type TokenSplitConfig = {\n  outputs: number;\n  threshold?: number;\n  omitMetaData?: boolean;\n}\n\nexport enum TokenInputMode {\n  All = \"all\",\n  Needed = \"needed\",\n}\n\nexport type TransferOrdTokensConfig = {\n  protocol: TokenType;\n  tokenID: string;\n  decimals: number;\n  utxos: Utxo[];\n  inputTokens: TokenUtxo[];\n  distributions: Distribution[];\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  inputMode?: TokenInputMode;\n  changeAddress?: string;\n  tokenChangeAddress?: string;\n  satsPerKb?: number;\n  metaData?: PreMAP;\n  signer?: LocalSigner | RemoteSigner;\n  additionalPayments?: Payment[];\n  burn?: boolean;\n  splitConfig?: TokenSplitConfig;\n  tokenInputMode?: TokenInputMode;\n}\n\nexport type CreateOrdListingsConfig = {\n  utxos: Utxo[];\n  listings: NewListing[];\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey,\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[];\n}\n\nexport type PurchaseOrdListingConfig = {\n  utxos: Utxo[];\n  paymentPk: PrivateKey;\n  listing: ExistingListing;\n  ordAddress: string;\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[],\n  royalties?: Royalty[],\n  metaData?: MAP,\n}\n\nexport type PurchaseOrdTokenListingConfig = {\n  protocol: TokenType;\n  tokenID: string;\n  utxos: Utxo[];\n  paymentPk: PrivateKey;\n  listingUtxo: TokenUtxo;\n  ordAddress: string;\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[],\n  metaData?: MAP,\n}\n\nexport type CancelOrdListingsConfig = {\n  utxos: Utxo[],\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  listingUtxos: Utxo[];\n  additionalPayments?: Payment[];\n  changeAddress?: string;\n  satsPerKb?: number;\n}\n\nexport interface CancelOrdTokenListingsConfig extends CancelOrdListingsConfig {\n  utxos: Utxo[],\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  listingUtxos: TokenUtxo[];\n  additionalPayments: Payment[];\n  changeAddress?: string;\n  satsPerKb?: number;\n  protocol: TokenType,\n  tokenID: string;\n  ordAddress?: string;\n}\n\n/**\n * Configuration object for creating a token listing\n * @typedef {Object} CreateOrdTokenListingsConfig\n * @property {Utxo[]} utxos - Array of payment Utxos\n * @property {TokenUtxo[]} inputTokens - Array of TokenUtxos to be listed\n * @property {NewTokenListing[]} listings - Array of NewTokenListings\n * @property {PrivateKey} paymentPk - Private key of the payment address\n * @property {PrivateKey} ordPk - Private key of the ord address\n * @property {string} tokenChangeAddress - Address to send the token change\n * @property {number} [satsPerKb] - Optional. Satoshis per kilobyte\n * @property {Payment[]} [additionalPayments] - Optional. Array of additional payments\n * @property {TokenType} protocol - Token protocol\n * @property {string} tokenID - Token id\n * @property {number} decimals - Number of decimal places for this token.\n */\nexport interface CreateOrdTokenListingsConfig {\n  utxos: Utxo[];\n  listings: NewTokenListing[];\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey,\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[];\n  protocol: TokenType;\n  tokenID: string;\n  decimals: number;\n  inputTokens: TokenUtxo[];\n  tokenChangeAddress: string;\n}\n\nexport const MAX_TOKEN_SUPPLY = 2n ** 64n - 1n;","export const MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\nexport const DEFAULT_SAT_PER_KB = 10;\nexport const API_HOST = \"https://ordinals.gorillapool.io/api\";","import {\n\tLockingScript,\n\tP2PKH,\n\ttype Script,\n} from \"@bsv/sdk\";\nimport type { Inscription, MAP } from \"../types\";\nimport { toHex } from \"../utils/strings\";\nimport { MAP_PREFIX } from \"../constants\";\n\n/**\n * OrdP2PKH (1Sat Ordinal + Pay To Public Key Hash) class implementing ScriptTemplate.\n *\n * This class provides methods to create an Ordinal with Pay To Public Key Hash locking and unlocking scripts. \n * It extends the standard P2PKH script template and provides a custom lock method.\n */\nexport default class OrdP2PKH extends P2PKH {\n\t/**\n\t * Creates a 1Sat Ordinal + P2PKH locking script for a given address string\n\t *\n\t * @param {string} address - An destination address for the Ordinal.\n\t * @param {Object} [inscription] - Base64 encoded file data and Content type of the file.\n\t * @param {MAP} [metaData] - (optional) MAP Metadata to be included in OP_RETURN.\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\t// unlock method inherits from p2pkh\n\tlock(\n\t\taddress: string,\n    inscription?: Inscription,\n\t\tmetaData?: MAP | undefined,\n\t): Script {\n\t\tlet ordAsm = \"\";\n\t\t// This can be omitted for reinscriptions that just update metadata\n\t\tif (inscription?.dataB64 !== undefined && inscription?.contentType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(inscription.dataB64, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(inscription.contentType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`;\n\t\t}\n\n\t\t// Create ordinal output and inscription in a single output\n\t\tconst lockingScript = new P2PKH().lock(address);\n\t\tlet inscriptionAsm = `${ordAsm ? `${ordAsm} ` : \"\"}${lockingScript.toASM()}`;\n\n\t\t// MAP.app and MAP.type keys are required\n\t\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t\t}\n\n\t\tif (metaData?.app && metaData?.type) {\n\t\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\t\tconst mapCmdValue = toHex(\"SET\");\n\t\t\tinscriptionAsm = `${inscriptionAsm ? `${inscriptionAsm} `: \"\"}OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\t\tif (key !== \"cmd\") {\n\t\t\t\t\tinscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\n\t\t\t\t\t\tvalue as string,\n\t\t\t\t\t)}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn LockingScript.fromASM(inscriptionAsm);\n\t}\n}\n","import {\n\ttype Transaction,\n\ttype UnlockingScript,\n\tfromUtxo,\n\ttype TransactionInput,\n\tUtils,\n\tP2PKH,\n  Script,\n} from \"@bsv/sdk\";\nimport { type NftUtxo, TokenType, type TokenUtxo, type Utxo } from \"../types\";\nimport { API_HOST } from \"../constants\";\n\nconst { fromBase58Check } = Utils;\n\n/**\n * Converts a Utxo object with a base64 encoded script to a Utxo object with a hex encoded script\n * @param {Utxo} utxo - Utxo object with base64 encoded script\n * @param {Object} unlockScriptTemplate - Object with sign and estimateLength functions\n * @returns {TransactionInput} Utxo object with hex encoded script\n */\nexport const inputFromB64Utxo = (\n\tutxo: Utxo,\n\tunlockScriptTemplate: {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>;\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>;\n\t},\n): TransactionInput => {\n\tconst input = fromUtxo(\n\t\t{\n\t\t\t...utxo,\n\t\t\tscript: Buffer.from(utxo.script, \"base64\").toString(\"hex\"),\n\t\t},\n\t\tunlockScriptTemplate,\n\t);\n\treturn input;\n};\n\n/**\n * Fetches pay utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<Utxo[]>} Array of pay utxos\n */\nexport const fetchPayUtxos = async (address: string, scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\"): Promise<Utxo[]> => {\n\tconst payUrl = `${API_HOST}/txos/address/${address}/unspent?bsv20=false`;\n\tconsole.log({ payUrl });\n\tconst payRes = await fetch(payUrl);\n\tif (!payRes.ok) {\n\t\tthrow new Error(\"Error fetching pay utxos\");\n\t}\n\tlet payUtxos = await payRes.json();\n\t// exclude all 1 satoshi utxos\n\tpayUtxos = payUtxos.filter((u: Utxo) => u.satoshis !== 1 && !isLock(u));\n\n\t// Get pubkey hash from address\n\tconst pubKeyHash = fromBase58Check(address);\n\tconst p2pkhScript = new P2PKH().lock(pubKeyHash.data);\n\tpayUtxos = payUtxos.map((utxo: Partial<Utxo>) => ({\n\t\ttxid: utxo.txid,\n\t\tvout: utxo.vout,\n\t\tsatoshis: utxo.satoshis,\n\t\tscript: scriptEncoding === \"hex\" || scriptEncoding === \"base64\" ? Buffer.from(p2pkhScript.toBinary()).toString(scriptEncoding) : p2pkhScript.toASM(),\n\t}));\n\treturn payUtxos as Utxo[];\n};\n\n/**\n * Fetches NFT utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @param {string} [collectionId] - Optional. Collection id (collection insciprtion origin)\n * @param {number} [limit=10] - Optional. Number of utxos to fetch. Default is 10\n * @param {number} [offset=0] - Optional. Offset for fetching utxos. Default is 0\n * @param {string} [scriptEncoding=\"base64\"] - Optional. Encoding for the script. Default is base64. Options are hex, base64, or asm.\n * @returns {Promise<Utxo[]>} Array of NFT utxos\n */\nexport const fetchNftUtxos = async (\n\taddress: string,\n\tcollectionId?: string,\n\tlimit = 10,\n\toffset = 0,\n  scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\",\n): Promise<NftUtxo[]> => {\n\tlet url = `${API_HOST}/txos/address/${address}/unspent?limit=${limit}&offset=${offset}&`;\n\n\tif (collectionId) {\n\t\tconst query = {\n\t\t\tmap: {\n\t\t\t\tsubTypeData: { collectionId },\n\t\t\t},\n\t\t};\n\t\tconst b64Query = Buffer.from(JSON.stringify(query)).toString(\"base64\");\n\t\turl += `q=${b64Query}`;\n\t}\n\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching NFT utxos for ${address}`);\n\t}\n\n\t// Returns a BSV20Txo but we only need a few fields\n\tlet nftUtxos = await res.json();\n\n\t// Only include 1 satoshi outputs, non listings\n\tnftUtxos = nftUtxos.filter(\n\t\t(u: {\n\t\t\tsatoshis: number;\n\t\t\tdata: { list: { price: number; payout: string } | undefined } | null;\n\t\t}) => u.satoshis === 1 && !u.data?.list,\n\t);\n\n\tconst outpoints = nftUtxos.map(\n\t\t(utxo: { txid: string; vout: number }) => `${utxo.txid}_${utxo.vout}`,\n\t);\n\t// Fetch the scripts up to the limit\n\tconst nftRes = await fetch(`${API_HOST}/txos/outpoints?script=true`, {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t\tbody: JSON.stringify([...outpoints]),\n\t});\n\n\tif (!nftRes.ok) {\n\t\tthrow new Error(`Error fetching NFT scripts for ${address}`);\n\t}\n\n\tconst nfts = (await nftRes.json() || [])\n\n\tnftUtxos = nfts.map(\n\t\t(utxo: {\n\t\t\torigin: { outpoint: string };\n\t\t\tscript: string;\n\t\t\tvout: number;\n\t\t\ttxid: string;\n\t\t}) => {\n      let script = utxo.script;\n      if (scriptEncoding === \"hex\") {\n        script = Buffer.from(script, \"base64\").toString(\"hex\");\n      } else if (scriptEncoding === \"asm\") {\n        script = Script.fromHex(Buffer.from(script, \"base64\").toString(\"hex\")).toASM();\n      }\n\t\t\tconst nftUtxo = {\n\t\t\t\torigin: utxo.origin.outpoint,\n\t\t\t\tscript,\n\t\t\t\tvout: utxo.vout,\n\t\t\t\ttxid: utxo.txid,\n\t\t\t\tsatoshis: 1,\n\t\t\t} as NftUtxo;\n\t\t\tif (collectionId) {\n\t\t\t\tnftUtxo.collectionId = collectionId;\n\t\t\t}\n\t\t\treturn nftUtxo;\n\t\t},\n\t);\n\n\treturn nftUtxos as NftUtxo[];\n};\n\n/**\n * Fetches token utxos from the API\n * @param {TokenType} protocol - Token protocol. Either BSV20 or BSV21\n * @param {string} tokenId - Token id. Ticker for BSV20 and id (mint+deploy inscription origin) for BSV21\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<TokenUtxo[]>} Array of token utxos\n */\nexport const fetchTokenUtxos = async (\n\tprotocol: TokenType,\n\ttokenId: string,\n\taddress: string,\n): Promise<TokenUtxo[]> => {\n\tconst url = `${API_HOST}/bsv20/${address}/${protocol === TokenType.BSV20 ? \"tick\" : \"id\"}/${tokenId}?bsv20=true&listing=false`;\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching ${protocol} utxos`);\n\t}\n\n\t// returns a BSV20Txo but we only need a few fields\n\tlet tokenUtxos = await res.json();\n\n\ttokenUtxos = tokenUtxos.map((utxo: Partial<TokenUtxo>) => ({\n\t\tamt: utxo.amt,\n\t\tscript: utxo.script,\n\t\tvout: utxo.vout,\n\t\ttxid: utxo.txid,\n\t\tid: tokenId,\n\t\tsatoshis: 1,\n\t}));\n\n\treturn tokenUtxos as TokenUtxo[];\n};\n\nconst isLock = (utxo: Utxo) => {\n  return !!(utxo as unknown as { lock: { address: string, until: number } }).lock;\n}","import type { Transaction } from \"@bsv/sdk\";\nimport { Sigma } from \"sigma-protocol\";\nimport type { LocalSigner, RemoteSigner } from \"./types\";\n\n/**\n * Signs data in the transaction with Sigma protocol\n * @param {Transaction} tx - Transaction to sign\n * @param {LocalSigner | RemoteSigner} signer - Local or remote signer (used for data signature)\n * @returns {Transaction} Transaction with signed data\n */\nexport const signData = async (\n\ttx: Transaction,\n\tsigner: LocalSigner | RemoteSigner,\n): Promise<Transaction> => {\n\t// Sign tx if idKey or remote signer like starfish/tokenpass\n\tconst idKey = (signer as LocalSigner)?.idKey;\n\tconst keyHost = (signer as RemoteSigner)?.keyHost;\n\n\tif (idKey) {\n\t\tconst sigma = new Sigma(tx);\n\t\tconst { signedTx } = sigma.sign(idKey);\n\t\treturn signedTx;\n\t}\n\tif (keyHost) {\n\t\tconst authToken = (signer as RemoteSigner)?.authToken;\n\t\tconst sigma = new Sigma(tx);\n\t\ttry {\n\t\t\tconst { signedTx } = await sigma.remoteSign(keyHost, authToken);\n\t\t\treturn signedTx;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthrow new Error(`Remote signing to ${keyHost} failed`);\n\t\t}\n\t}\n\tthrow new Error(\"Signer must be a LocalSigner or RemoteSigner\");\n};\n","import type { MAP, PreMAP } from \"../types\";\n\nconst stringifyMetaData = (metaData?: PreMAP): MAP | undefined => {\n  if (!metaData) return undefined;\n\tconst result: MAP = {\n\t\tapp: metaData.app,\n\t\ttype: metaData.type,\n\t};\n\n\tfor (const [key, value] of Object.entries(metaData)) {\n\t\tif (value !== undefined) {\n\t\t\tif (typeof value === \"string\") {\n\t\t\t\tresult[key] = value;\n\t\t\t} else if (Array.isArray(value) || typeof value === \"object\") {\n\t\t\t\tresult[key] = JSON.stringify(value);\n\t\t\t} else {\n\t\t\t\tresult[key] = String(value);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\nexport default stringifyMetaData;\n","import { Transaction, SatoshisPerKilobyte, P2PKH, Script, Utils } from \"@bsv/sdk\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n\tUtxo,\n\tCreateOrdinalsConfig,\n\tCreateOrdinalsCollectionConfig,\n\tCreateOrdinalsCollectionItemConfig,\n  ChangeResult,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Creates a transaction with inscription outputs\n * @param {CreateOrdinalsConfig | CreateOrdinalsCollectionConfig | CreateOrdinalsCollectionItemConfig} config - Configuration object for creating ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {string} config.changeAddress - Optional. Address to send change to. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Local or remote signer (used for data signature)\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<ChangeResult>} Transaction with inscription outputs\n */\nexport const createOrdinals = async (\n\tconfig:\n\t\t| CreateOrdinalsConfig\n\t\t| CreateOrdinalsCollectionConfig\n\t\t| CreateOrdinalsCollectionItemConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tutxos,\n\t\tdestinations,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t} = config;\n\t\n\t// Warn if creating many inscriptions at once\n\tif (destinations.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Outputs\n\t// Add inscription outputs\n\tfor (const destination of destinations) {\n\t\tif (!destination.inscription) {\n\t\t\tthrow new Error(\"Inscription is required for all destinations\");\n\t\t}\n\n\t\t// remove any undefined fields from metadata\n\t\tif (metaData) {\n\t\t\tfor(const key of Object.keys(metaData)) {\n\t\t\t\tif (metaData[key] === undefined) {\n\t\t\t\t\tdelete metaData[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription,\n\t\t\t\tstringifyMetaData(metaData),\n\t\t\t),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\tlet payChange: Utxo | undefined;\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\n\tif(signer) {\n\t\tconst utxo = utxos.pop() as Utxo\n\t\ttx.addInput(inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t)));\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\ttx = await signData(tx, signer);\n\t}\n\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to create ordinals. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\tScript,\n\ttype TransactionOutput,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type { SendOrdinalsConfig, Utxo, ChangeResult } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Sends ordinals to the given destinations\n * @param {SendOrdinalsConfig} config - Configuration object for sending ordinals\n * @param {Utxo[]} config.paymentUtxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.ordinals - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {string} [config.changeAddress] - Optional. Address to send change to, if any. If not provided, defaults to paymentPk address\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} [config.signer] - Optional. Signer object to sign the transaction\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to include in the transaction\n * @param {boolean} [config.enforceUniformSend] - Optional. Default: true. Enforce that the number of destinations matches the number of ordinals being sent. Sending ordinals requires a 1:1 mapping of destinations to ordinals. This is only used for sub-protocols like BSV21 that manage tokens without sending the inscriptions directly.\n * @returns {Promise<ChangeResult>} Transaction, spent outpoints, and change utxo\n */\nexport const sendOrdinals = async (\n\tconfig: SendOrdinalsConfig,\n): Promise<ChangeResult> => {\n\tif (!config.satsPerKb) {\n\t\tconfig.satsPerKb = DEFAULT_SAT_PER_KB;\n\t}\n\tif (!config.additionalPayments) {\n\t\tconfig.additionalPayments = [];\n\t}\n\tif (config.enforceUniformSend === undefined) {\n\t\tconfig.enforceUniformSend = true;\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(config.satsPerKb);\n\tlet tx = new Transaction();\n\tconst spentOutpoints: string[] = [];\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of config.ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(\n\t\t\tordUtxo,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tconfig.ordPk, \n\t\t\t\t\"all\",\n\t\t\t\ttrue, \n\t\t\t\tordUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(ordUtxo.script, 'base64'))\n\t\t\t),\n\t\t);\n\t\tspentOutpoints.push(`${ordUtxo.txid}_${ordUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// check that ordinals coming in matches ordinals going out if supplied\n\tif (\n\t\tconfig.enforceUniformSend &&\n\t\tconfig.destinations.length !== config.ordinals.length\n\t) {\n\t\tthrow new Error(\n\t\t\t\"Number of destinations must match number of ordinals being sent\",\n\t\t);\n\t}\n\n\t// Add ordinal outputs\n\tfor (const destination of config.destinations) {\n\t\tlet s: Script;\n\t\tif (\n\t\t\tdestination.inscription?.dataB64 &&\n\t\t\tdestination.inscription?.contentType\n\t\t) {\n\t\t\ts = new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription,\n\t\t\t\tstringifyMetaData(config.metaData),\n\t\t\t);\n\t\t} else {\n\t\t\ts = new P2PKH().lock(destination.address);\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: s,\n\t\t});\n\t}\n\n  \n\t// Add additional payments if any\n\tfor (const p of config.additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n  // add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = config.changeAddress || config.paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of config.paymentUtxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tconfig.paymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\tspentOutpoints.push(`${utxo.txid}_${utxo.vout}`);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (totalSatsIn < totalSatsOut) {\n\t\tthrow new Error(\"Not enough ordinals to send\");\n\t}\n\n\tif (config.signer) {\n\t\ttx = await signData(tx, config.signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChange,\n\t};\n};\n","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype TransactionOutput,\n\tUtils,\n\tScript,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type { ChangeResult, SendUtxosConfig, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\n\n/**\n * Sends utxos to the given destination\n * @param {SendUtxosConfig} config - Configuration object for sending utxos\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {Payment[]} config.payments - Array of payments with addresses and amounts\n * @param {number} [config.satsPerKb] - (Optional) Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {string} [config.changeAddress] - (Optional) Address to send change to. If not provided, defaults to paymentPk address\n * @param {string} [config.metaData] - (Optional) Metadata to include in OP_RETURN of the payment output\n * @returns {Promise<ChangeResult>} Transaction with utxo outputs\n */\nexport const sendUtxos = async (\n\tconfig: SendUtxosConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tpayments,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tchangeAddress = paymentPk.toAddress().toString(),\n    metaData,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\t// Outputs\n\tfor (const payment of payments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new OrdP2PKH().lock(payment.to, undefined, metaData),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + (out.satoshis || 0),\n\t\t0,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\ttx.addInput(input);\n\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + fee) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + fee) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to send. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChange: Utxo | undefined;\n\tif (totalSatsIn > totalSatsOut + fee) {\n\t\t// Change\n\t\tconst changeScript = new P2PKH().lock(changeAddress);\n\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t} else if (totalSatsIn < totalSatsOut + fee) {\n\t\tconsole.log(\"No change needed\");\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\t\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\tP2PKH,\n\ttype PrivateKey,\n\tSatoshisPerKilobyte,\n\tScript,\n\tTransaction,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport {\n\tTokenType,\n\ttype TokenUtxo,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferOrdTokensConfig,\n\ttype TokenChangeResult,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n\tTokenInputMode,\n  type TokenSplitConfig,\n  type PreMAP,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Transfer tokens to a destination\n * @param {TransferOrdTokensConfig} config - Configuration object for transferring tokens\n * @param {TokenType} config.protocol - Token protocol. Must be TokenType.BSV20 or TokenType.BSV21\n * @param {string} config.tokenID - Token ID. Either the tick or id value depending on the protocol\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {TokenUtxo[]} config.inputTokens - Token utxos to spend\n * @param {Distribution[]} config.distributions - Array of destinations with addresses and amounts\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {decimals} config.decimals - Number of decimal places for the token\n * @param {string} [config.changeAddress] - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {string} [config.tokenChangeAddress] - Optional. Address to send token change to, if any. If not provided, defaults to ordPk address\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} [config.signer] - Optional. Signer object to sign the transaction\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to include in the transaction\n * @param {TokenInputMode} [config.tokenInputMode] - Optional. \"all\" or \"needed\". Default is \"needed\"\n * @param {TokenSplitConfig} [config.tokenSplitConfig] - Optional. Configuration object for splitting token change\n * @param {burn} [config.burn] - Optional. Set to true to burn the tokens.\n * @returns {Promise<TokenChangeResult>} Transaction with token transfer outputs\n */\nexport const transferOrdTokens = async (\n\tconfig: TransferOrdTokensConfig,\n): Promise<TokenChangeResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tinputTokens,\n\t\tdistributions,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tchangeAddress,\n\t\ttokenChangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tdecimals,\n\t\tadditionalPayments = [],\n\t\tburn = false,\n\t\ttokenInputMode = TokenInputMode.Needed,\n\t\tsplitConfig = {\n\t\t\toutputs: 1,\n      omitMetaData: false,\n\t\t},\n\t} = config;\n\n  \t// Ensure these inputs are for the expected token\n\tif (!inputTokens.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\n\t// calculate change amount\n\tlet changeAmt = 0n;\n\tlet totalAmtIn = 0n;\n\tlet totalAmtOut = 0n;\n\tconst totalAmtNeeded = distributions.reduce(\n\t\t(acc, dist) => acc + BigInt(dist.amt * 10 ** decimals),\n\t\t0n,\n\t);\n\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Handle token inputs based on tokenInputMode\n\tlet tokensToUse: TokenUtxo[];\n\tif (tokenInputMode === TokenInputMode.All) {\n\t\ttokensToUse = inputTokens;\n    totalAmtIn = inputTokens.reduce(\n      (acc, token) => acc + BigInt(token.amt),\n      0n,\n    );\n\t} else {\n\t\ttokensToUse = [];\n\t\tfor (const token of inputTokens) {\n\t\t\ttokensToUse.push(token);\n\t\t\ttotalAmtIn += BigInt(token.amt);\n\t\t\tif (totalAmtIn >= totalAmtNeeded) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (totalAmtIn < totalAmtNeeded) {\n\t\t\tthrow new Error(\"Not enough tokens to satisfy the transfer amount\");\n\t\t}\n\t}\n\n\tfor (const token of tokensToUse) {\n\t\tconst inputScriptBinary = Utils.toArray(token.script, \"base64\");\n\t\tconst inputScript = Script.fromBinary(inputScriptBinary);\n\t\ttx.addInput(\n\t\t\tinputFromB64Utxo(\n\t\t\t\ttoken,\n\t\t\t\tnew OrdP2PKH().unlock(ordPk, \"all\", true, token.satoshis, inputScript),\n\t\t\t),\n\t\t);\n\t}\n\n  // remove any undefined fields from metadata\n  if (metaData) {\n    for (const key of Object.keys(metaData)) {\n      if (metaData[key] === undefined) {\n        delete metaData[key];\n      }\n    }\n  }\n\n\t// build destination inscriptions\n\tfor (const dest of distributions) {\n\t\tconst bigAmt = BigInt(dest.amt * 10 ** decimals);\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: burn ? \"burn\" : \"transfer\",\n\t\t\tamt: bigAmt.toString(),\n\t\t};\n\t\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\ttick: tokenID,\n\t\t\t} as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\tid: tokenID,\n\t\t\t} as TransferBSV21Inscription;\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid protocol\");\n\t\t}\n    \n\t\ttx.addOutput({\n      satoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(dest.address, {\n        dataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\t\tcontentType: \"application/bsv-20\",\n\t\t\t}, \n      // when present, include metadata on each distribution if omit is not specified\n\t\t\tdest.omitMetaData ? undefined : stringifyMetaData(metaData)),\n\t\t});\n\t\ttotalAmtOut += bigAmt;\n\t}\n\n\tchangeAmt = totalAmtIn - totalAmtOut;\nconsole.log({changeAmt, totalAmtIn, totalAmtOut});\n\t// check that you have enough tokens to send and return change\n\tif (changeAmt < 0n) {\n\t\tthrow new Error(\"Not enough tokens to send\");\n\t}\n\n  let tokenChange: TokenUtxo[] = [];\n  if (changeAmt > 0n) {\n    tokenChange = splitChangeOutputs(\n      tx,\n      inputTokens.length,\n      changeAmt,\n      protocol,\n      tokenID,\n      tokenChangeAddress || ordPk.toAddress().toString(),\n      ordPk,\n      metaData,\n      splitConfig,\n    );\n  }\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo,\n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpaymentPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, \"base64\")),\n\t\t\t),\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to transfer tokens. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\tif (signer) {\n\t\ttx = await signData(tx, signer);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n  // assign txid to tokenChange outputs\n\tconst txid = tx.id(\"hex\") as string;\n  for (const change of tokenChange) {\n    change.txid = txid;\n  }\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t\ttokenChange,\n\t};\n};\n\nconst splitChangeOutputs = (\n  tx: Transaction,\n  numTokenInputs: number,\n  changeAmt: bigint,\n  protocol: TokenType,\n  tokenID: string,\n  tokenChangeAddress: string,\n  ordPk: PrivateKey,\n  metaData: PreMAP | undefined,\n  splitConfig: TokenSplitConfig\n): TokenUtxo[] => {\n  const tokenChanges: TokenUtxo[] = [];\n  const shouldSplit = splitConfig.threshold === undefined || numTokenInputs <= BigInt(splitConfig.threshold);\n  const splitOutputs = shouldSplit ? splitConfig.outputs : 1;\n  const baseChangeAmount = changeAmt / BigInt(splitOutputs);\n  let remainder = changeAmt % BigInt(splitOutputs);\n\n  for (let i = 0; i < splitOutputs; i++) {\n    let splitAmount = baseChangeAmount;\n    if (remainder > 0n) {\n      splitAmount += 1n;\n      remainder -= 1n;\n    }\n\n    const transferInscription: TransferTokenInscription = {\n      p: \"bsv-20\",\n      op: \"transfer\",\n      amt: splitAmount.toString(),\n    };\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n    if (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n    } else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n    const lockingScript = new OrdP2PKH().lock(\n      tokenChangeAddress || ordPk.toAddress().toString(),\n      {\n        dataB64: Buffer.from(JSON.stringify(inscription)).toString('base64'),\n        contentType: \"application/bsv-20\",\n      },\n      splitConfig.omitMetaData ? undefined : stringifyMetaData(metaData)\n    );\n\n    const vout = tx.outputs.length;\n    tx.addOutput({ lockingScript, satoshis: 1 });\n    tokenChanges.push({\n      id: tokenID,\n      satoshis: 1,\n      script: Buffer.from(lockingScript.toBinary()).toString(\"base64\"),\n      txid: \"\",\n      vout,\n      amt: splitAmount.toString(),\n    });\n  }\n\n  return tokenChanges;\n}","import type { CollectionItemSubTypeData, CollectionSubTypeData } from \"./types\";\n\n/**\n * Validates sub type data\n * @param {string} subType - Sub type of the ordinals token\n * @param {string} subTypeData - Sub type data of the ordinals token\n * @returns {Error | undefined} Error if validation fails, undefined if validation passes\n */\nexport const validateSubTypeData = (\n  subType: \"collection\" | \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData | CollectionSubTypeData,\n): Error | undefined => {\n  try {\n    if (subType === \"collection\") {\n      const collectionData = subTypeData as CollectionSubTypeData;\n      if (!collectionData.description) {\n        return new Error(\"Collection description is required\");\n      }\n      if (!collectionData.quantity) {\n        return new Error(\"Collection quantity is required\");\n      }\n      if (collectionData.rarityLabels) {\n        if (!Array.isArray(collectionData.rarityLabels)) {\n          return new Error(\"Rarity labels must be an array\");\n        }\n        // make sure keys and values are strings\n        if (!collectionData.rarityLabels.every((label) => {\n          return Object.values(label).every(value => typeof value === 'string');\n        })) {\n          return new Error(`Invalid rarity labels ${collectionData.rarityLabels}`);\n        }\n      }\n      if (collectionData.traits ) {\n        if (typeof collectionData.traits !== \"object\") {\n        return new Error(\"Collection traits must be an object\");\n        }\n        if (collectionData.traits && !Object.keys(collectionData.traits).every(key => typeof key === 'string' && typeof collectionData.traits[key] === 'object')) {\n          return new Error(\"Collection traits must be a valid CollectionTraits object\");\n        }\n      }\n    }\n    if (subType === \"collectionItem\") {\n      const itemData = subTypeData as CollectionItemSubTypeData;\n      if (!itemData.collectionId) {\n        return new Error(\"Collection id is required\");\n      }\n      if (!itemData.collectionId.includes(\"_\")) {\n        return new Error(\"Collection id must be a valid outpoint\");\n      }\n      if (itemData.collectionId.split(\"_\")[0].length !== 64) {\n        return new Error(\"Collection id must contain a valid txid\");\n      }\n      if (Number.isNaN(Number.parseInt(itemData.collectionId.split(\"_\")[1]))) {\n        return new Error(\"Collection id must contain a valid vout\");\n      }\n\n      if (itemData.mintNumber && typeof itemData.mintNumber !== \"number\") {\n        return new Error(\"Mint number must be a number\");\n      }\n      if (itemData.rank && typeof itemData.rank !== \"number\") {\n        return new Error(\"Rank must be a number\");\n      }\n      if (itemData.rarityLabel && typeof itemData.rarityLabel !== \"string\") {\n        return new Error(\"Rarity label must be a string\");\n      }\n      if (itemData.traits && typeof itemData.traits !== \"object\") {\n        return new Error(\"Traits must be an object\");\n      }\n      if (itemData.attachments && !Array.isArray(itemData.attachments)) {\n        return new Error(\"Attachments must be an array\");\n      }\n    }\n    return undefined;\n  } catch (error) {\n    return new Error(\"Invalid JSON data\");\n  }\n};","import {\n\tBigNumber,\n\ttype LockingScript,\n\tOP,\n\tP2PKH,\n\ttype PrivateKey,\n\tScript,\n\ttype Transaction,\n\tTransactionSignature,\n\tUnlockingScript,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { toHex } from \"../utils/strings\";\nimport type { Inscription } from \"../types\";\n\nexport const oLockPrefix =\n\t\"2097dfd76851bf465e8f715593b217714858bbe9570ff3bd5e33840a34e20ff0262102ba79df5f8ae7604a9830f03c7933028186aede0675a16f025dc4f8be8eec0382201008ce7480da41702918d1ec8e6849ba32b4d65b1e40dc669c31a1e6306b266c0000\";\nexport const oLockSuffix =\n\t\"615179547a75537a537a537a0079537a75527a527a7575615579008763567901c161517957795779210ac407f0e4bd44bfc207355a778b046225a7068fc59ee7eda43ad905aadbffc800206c266b30e6a1319c66dc401e5bd6b432ba49688eecd118297041da8074ce081059795679615679aa0079610079517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01007e81517a75615779567956795679567961537956795479577995939521414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff00517951796151795179970079009f63007952799367007968517a75517a75517a7561527a75517a517951795296a0630079527994527a75517a6853798277527982775379012080517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01205279947f7754537993527993013051797e527e54797e58797e527e53797e52797e57797e0079517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a756100795779ac517a75517a75517a75517a75517a75517a75517a75517a75517a7561517a75517a756169587951797e58797eaa577961007982775179517958947f7551790128947f77517a75517a75618777777777777777777767557951876351795779a9876957795779ac777777777777777767006868\";\n\n/**\n * OrdLock class implementing ScriptTemplate.\n *\n * This class provides methods for interacting with OrdinalLock contract \n */\nexport default class OrdLock {\n\t/**\n\t * Creates a 1Sat Ordinal Lock script\n\t *\n\t * @param {string} ordAddress - An address which can cancel listing.\n\t * @param {string} payAddress - Address which is paid on purchase\n\t * @param {number} price - Listing price in satoshis\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\tlock(\n\t\tordAddress: string,\n\t\tpayAddress: string,\n\t\tprice: number,\n\t\tinscription?: Inscription,\n\t): Script {\n\t\tconst cancelPkh = Utils.fromBase58Check(ordAddress).data as number[];\n\t\tconst payPkh = Utils.fromBase58Check(payAddress).data as number[];\n\n\t\tlet script = new Script()\n\t\tif (inscription?.dataB64 !== undefined && inscription?.contentType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(inscription.dataB64, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(inscription.contentType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tscript = Script.fromASM(`OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`);\n\t\t}\n\n\t\treturn script.writeScript(Script.fromHex(oLockPrefix))\n\t\t\t.writeBin(cancelPkh)\n\t\t\t.writeBin(OrdLock.buildOutput(price, new P2PKH().lock(payPkh).toBinary()))\n\t\t\t.writeScript(Script.fromHex(oLockSuffix))\n\t}\n\n\tcancelListing(\n\t\tprivateKey: PrivateKey,\n\t\tsignOutputs: 'all' | 'none' | 'single' = 'all',\n\t\tanyoneCanPay = false,\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: () => Promise<number>\n\t} {\n\t\tconst p2pkh = new P2PKH().unlock(privateKey, signOutputs, anyoneCanPay, sourceSatoshis, lockingScript)\n\t\treturn {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await p2pkh.sign(tx, inputIndex)).writeOpCode(OP.OP_1)\n\t\t\t},\n\t\t\testimateLength: async () => {\n\t\t\t\treturn 107\n\t\t\t}\n\t\t}\n\t}\n\n\tpurchaseListing(\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>\n\t} {\n\t\tconst purchase = {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\tif (tx.outputs.length < 2) {\n\t\t\t\t\tthrow new Error(\"Malformed transaction\")\n\t\t\t\t}\n\t\t\t\tconst script = new UnlockingScript()\n\t\t\t\t\t.writeBin(OrdLock.buildOutput(\n\t\t\t\t\t\ttx.outputs[0].satoshis || 0,\n\t\t\t\t\t\ttx.outputs[0].lockingScript.toBinary()\n\t\t\t\t\t))\n\t\t\t\tif (tx.outputs.length > 2) {\n\t\t\t\t\tconst writer = new Utils.Writer()\n\t\t\t\t\tfor (const output of tx.outputs.slice(2)) {\n\t\t\t\t\t\twriter.write(OrdLock.buildOutput(output.satoshis || 0, output.lockingScript.toBinary()))\n\t\t\t\t\t}\n\t\t\t\t\tscript.writeBin(writer.toArray())\n\t\t\t\t} else {\n\t\t\t\t\tscript.writeOpCode(OP.OP_0)\n\t\t\t\t}\n\n\t\t\t\tconst input = tx.inputs[inputIndex]\n\t\t\t\tlet sourceSats = sourceSatoshis as number\n\t\t\t\tif (!sourceSats && input.sourceTransaction) {\n\t\t\t\t\tsourceSats = input.sourceTransaction.outputs[input.sourceOutputIndex].satoshis as number\n\t\t\t\t} else if (!sourceSatoshis) {\n\t\t\t\t\tthrow new Error(\"sourceTransaction or sourceSatoshis is required\")\n\t\t\t\t}\n\n\t\t\t\tconst sourceTXID = (input.sourceTXID || input.sourceTransaction?.id('hex')) as string\n\t\t\t\tlet subscript = lockingScript as LockingScript\n\t\t\t\tif (!subscript) {\n\t\t\t\t\tsubscript = input.sourceTransaction?.outputs[input.sourceOutputIndex].lockingScript as LockingScript\n\t\t\t\t}\n\t\t\t\tconst preimage = TransactionSignature.format({\n\t\t\t\t\tsourceTXID,\n\t\t\t\t\tsourceOutputIndex: input.sourceOutputIndex,\n\t\t\t\t\tsourceSatoshis: sourceSats,\n\t\t\t\t\ttransactionVersion: tx.version,\n\t\t\t\t\totherInputs: [],\n\t\t\t\t\tinputIndex,\n\t\t\t\t\toutputs: tx.outputs,\n\t\t\t\t\tinputSequence: input.sequence,\n\t\t\t\t\tsubscript,\n\t\t\t\t\tlockTime: tx.lockTime,\n\t\t\t\t\tscope: TransactionSignature.SIGHASH_ALL |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_ANYONECANPAY |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_FORKID\n\t\t\t\t});\n\n\t\t\t\treturn script.writeBin(preimage).writeOpCode(OP.OP_0)\n\t\t\t},\n\t\t\testimateLength: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await purchase.sign(tx, inputIndex)).toBinary().length\n\t\t\t}\n\t\t}\n\t\treturn purchase\n\t}\n\n\tstatic buildOutput(satoshis: number, script: number[]): number[] {\n\t\tconst writer = new Utils.Writer()\n\t\twriter.writeUInt64LEBn(new BigNumber(satoshis))\n\t\twriter.writeVarIntNum(script.length)\n\t\twriter.write(script)\n\t\treturn writer.toArray()\n\t}\n}\n","import {\n  P2PKH,\n  SatoshisPerKilobyte,\n  Script,\n  Transaction,\n  Utils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport {\n  type TokenChangeResult,\n  TokenType,\n  type CreateOrdListingsConfig,\n  type CreateOrdTokenListingsConfig,\n  type TokenUtxo,\n  type TransferBSV20Inscription,\n  type TransferBSV21Inscription,\n  type TransferTokenInscription,\n  type Utxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nconst { toArray } = Utils;\n\n// TODO: Handle royalty\nexport const createOrdListings = async (config: CreateOrdListingsConfig) => {\n  const {\n    utxos,\n    listings,\n    paymentPk,\n    ordPk,\n    changeAddress,\n    satsPerKb = DEFAULT_SAT_PER_KB,\n    additionalPayments = [],\n  } = config;\n\n  const modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n  const tx = new Transaction();\n\n  // Warn if creating many inscriptions at once\n  if (listings.length > 100) {\n    console.warn(\n      \"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n    );\n  }\n\n  // Outputs\n  // Add listing outputs\n  for (const listing of listings) {\n    tx.addOutput({\n      satoshis: 1,\n      lockingScript: new OrdLock().lock(\n        listing.ordAddress,\n        listing.payAddress,\n        listing.price,\n      ),\n    });\n    const inputScriptBinary = toArray(listing.listingUtxo.script, \"base64\");\n    const inputScript = Script.fromBinary(inputScriptBinary);\n    tx.addInput(inputFromB64Utxo(\n      listing.listingUtxo,\n      new OrdP2PKH().unlock(\n        ordPk,\n        \"all\",\n        true,\n        listing.listingUtxo.satoshis,\n        inputScript,\n      ),\n    ));\n  }\n\n  // Add additional payments if any\n  for (const p of additionalPayments) {\n    tx.addOutput({\n      satoshis: p.amount,\n      lockingScript: new P2PKH().lock(p.to),\n    });\n  }\n\n  // Check if change is needed\n  let payChange: Utxo | undefined;\n  const changeScript = new P2PKH().lock(\n    changeAddress || paymentPk.toAddress().toString(),\n  );\n  const changeOutput = {\n    lockingScript: changeScript,\n    change: true,\n  };\n  tx.addOutput(changeOutput);\n\n  let totalSatsIn = 0n;\n  const totalSatsOut = tx.outputs.reduce(\n    (total, out) => total + BigInt(out.satoshis || 0),\n    0n,\n  );\n  let fee = 0;\n  for (const utxo of utxos) {\n    const input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n      paymentPk,\n      \"all\",\n      true,\n      utxo.satoshis,\n      Script.fromBinary(Utils.toArray(utxo.script, 'base64'))\n    ));\n\n    tx.addInput(input);\n    // stop adding inputs if the total amount is enough\n    totalSatsIn += BigInt(utxo.satoshis);\n    fee = await modelOrFee.computeFee(tx);\n\n    if (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n      break;\n    }\n  }\n\n  // make sure we have enough\n  if (totalSatsIn < totalSatsOut + BigInt(fee)) {\n    throw new Error(\n      `Not enough funds to create ordinal listings. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n    );\n  }\n\n  // Calculate fee\n  await tx.fee(modelOrFee);\n\n  // Sign the transaction\n  await tx.sign();\n\n  // check for change\n  const payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n  if (payChangeOutIdx !== -1) {\n    const changeOutput = tx.outputs[payChangeOutIdx];\n    payChange = {\n      satoshis: changeOutput.satoshis as number,\n      txid: tx.id(\"hex\") as string,\n      vout: payChangeOutIdx,\n      script: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n        \"base64\",\n      ),\n    };\n  }\n\n  if (payChange) {\n    const changeOutput = tx.outputs[tx.outputs.length - 1];\n    payChange.satoshis = changeOutput.satoshis as number;\n    payChange.txid = tx.id(\"hex\") as string;\n  }\n\n  return {\n    tx,\n    spentOutpoints: tx.inputs.map(\n      (i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n    ),\n    payChange,\n  };\n};\n\nexport const createOrdTokenListings = async (\n  config: CreateOrdTokenListingsConfig,\n): Promise<TokenChangeResult> => {\n  const {\n    utxos,\n    protocol,\n    tokenID,\n    ordPk,\n    paymentPk,\n    additionalPayments = [],\n    changeAddress,\n    tokenChangeAddress,\n    inputTokens,\n    listings,\n    decimals,\n    satsPerKb = DEFAULT_SAT_PER_KB,\n  } = config;\n\n\n  // Warn if creating many inscriptions at once\n  if (listings.length > 100) {\n    console.warn(\n      \"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n    );\n  }\n\n  // Ensure these inputs are for the expected token\n  if (!inputTokens.every((token) => token.id === tokenID)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n  // calculate change amount\n  let changeAmt = 0n;\n  let totalAmtIn = 0n;\n  let totalAmtOut = 0n;\n\n  // Ensure these inputs are for the expected token\n  if (!inputTokens.every((token) => token.id === tokenID)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n  const modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n  const tx = new Transaction();\n  // Outputs\n  // Add listing outputs\n  for (const listing of listings) {\n    // NewTokenListing is not adjusted for decimals\n    const bigAmt = BigInt(listing.amt * 10 ** decimals);\n    const transferInscription: TransferTokenInscription = {\n      p: \"bsv-20\",\n      op: \"transfer\",\n      amt: bigAmt.toString(),\n    };\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n    if (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n    } else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n    tx.addOutput({\n      satoshis: 1,\n      lockingScript: new OrdLock().lock(\n        listing.ordAddress,\n        listing.payAddress,\n        listing.price,\n        {\n          dataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n          contentType: \"application/bsv-20\",\n        },\n      ),\n    });\n    totalAmtOut += bigAmt;\n  }\n\n  // Input tokens are already adjusted for decimals\n  for (const token of inputTokens) {\n    tx.addInput(inputFromB64Utxo(\n      token,\n      new OrdP2PKH().unlock(\n        ordPk,\n        \"all\",\n        true,\n        token.satoshis,\n        Script.fromBinary(toArray(token.script, \"base64\")),\n      ),\n    ));\n\n    totalAmtIn += BigInt(token.amt);\n  }\n  changeAmt = totalAmtIn - totalAmtOut;\n\n  let tokenChange: TokenUtxo[] | undefined;\n  // check that you have enough tokens to send and return change\n  if (changeAmt < 0n) {\n    throw new Error(\"Not enough tokens to send\");\n  }\n  if (changeAmt > 0n) {\n    const transferInscription: TransferTokenInscription = {\n      p: \"bsv-20\",\n      op: \"transfer\",\n      amt: changeAmt.toString(),\n    };\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n    if (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n    } else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n    const lockingScript = new OrdP2PKH().lock(tokenChangeAddress, {\n      dataB64: Buffer.from(JSON.stringify(inscription)).toString('base64'),\n      contentType: \"application/bsv-20\",\n    });\n    const vout = tx.outputs.length;\n    tx.addOutput({ lockingScript, satoshis: 1 });\n    tokenChange = [{\n      id: tokenID,\n      satoshis: 1,\n      script: Buffer.from(lockingScript.toBinary()).toString(\"base64\"),\n      txid: \"\",\n      vout,\n      amt: changeAmt.toString(),\n    }];\n  }\n\n  // Add additional payments if any\n  for (const p of additionalPayments) {\n    tx.addOutput({\n      satoshis: p.amount,\n      lockingScript: new P2PKH().lock(p.to),\n    });\n  }\n\n  // add change to the outputs\n  let payChange: Utxo | undefined;\n\n  const change = changeAddress || paymentPk.toAddress().toString();\n  const changeScript = new P2PKH().lock(change);\n  const changeOut = {\n    lockingScript: changeScript,\n    change: true,\n  };\n  tx.addOutput(changeOut);\n\n  let totalSatsIn = 0n;\n  const totalSatsOut = tx.outputs.reduce(\n    (total, out) => total + BigInt(out.satoshis || 0),\n    0n,\n  );\n  let fee = 0;\n  for (const utxo of utxos) {\n    const input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n      paymentPk,\n      \"all\",\n      true,\n      utxo.satoshis,\n      Script.fromBinary(Utils.toArray(utxo.script, 'base64'))\n    ));\n\n    tx.addInput(input);\n    // stop adding inputs if the total amount is enough\n    totalSatsIn += BigInt(utxo.satoshis);\n    fee = await modelOrFee.computeFee(tx);\n\n    if (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n      break;\n    }\n  }\n\n  // make sure we have enough\n  if (totalSatsIn < totalSatsOut + BigInt(fee)) {\n    throw new Error(\n      `Not enough funds to create token listings. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n    );\n  }\n\n  // estimate the cost of the transaction and assign change value\n  await tx.fee(modelOrFee);\n\n  // Sign the transaction\n  await tx.sign();\n\n  const txid = tx.id(\"hex\") as string;\n  if (tokenChange) {\n    tokenChange = tokenChange.map((tc) => ({ ...tc, txid }));\n  }\n  // check for change\n  const payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n  if (payChangeOutIdx !== -1) {\n    const changeOutput = tx.outputs[payChangeOutIdx];\n    payChange = {\n      satoshis: changeOutput.satoshis as number,\n      txid,\n      vout: payChangeOutIdx,\n      script: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n        \"base64\",\n      ),\n    };\n  }\n\n  if (payChange) {\n    const changeOutput = tx.outputs[tx.outputs.length - 1];\n    payChange.satoshis = changeOutput.satoshis as number;\n    payChange.txid = tx.id(\"hex\") as string;\n  }\n\n  return {\n    tx,\n    spentOutpoints: tx.inputs.map(\n      (i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n    ),\n    payChange,\n    tokenChange,\n  };\n};\n","import { P2PKH, SatoshisPerKilobyte, Script, Transaction, Utils } from \"@bsv/sdk\";\nimport {\n\tTokenType,\n\ttype TokenUtxo,\n\ttype CancelOrdListingsConfig,\n\ttype CancelOrdTokenListingsConfig,\n\ttype Destination,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n  type ChangeResult,\n  type TokenChangeResult,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\n\n/**\n * Cancel Ordinal Listings\n * @param {CancelOrdListingsConfig} config - Configuration object for cancelling ordinals\n * @param {PrivateKey} config.paymentPk - Private key to sign payment inputs\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.listingUtxos - Listing utxos to cancel (with base64 encoded scripts)\n * @param {string} [config.changeAddress] - Optional. Address to send change to\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to make\n * @returns {Promise<ChangeResult>} Transaction, spent outpoints, change utxo\n */\nexport const cancelOrdListings = async (config: CancelOrdListingsConfig): Promise<ChangeResult> => {\n\tconst {\n\t\tutxos,\n\t\tlistingUtxos,\n\t\tordPk,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tadditionalPayments = [],\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\n\t// Warn if creating many inscriptions at once\n\tif (listingUtxos.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\t\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinals we're cancelling\n\tfor (const listingUtxo of listingUtxos) {\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().cancelListing(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlistingUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, 'base64'))\n\t\t\t)\n\t\t));\n\t\t// Add cancel outputs returning listed ordinals\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new P2PKH().lock(ordPk.toAddress().toString()),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo, \n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpaymentPk, \n\t\t\t\t\"all\",\n\t\t\t\ttrue, \n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t\t)\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to cancel ordinal listings. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\n/**\n * Cancel Ordinal Token Listings\n * @param {CancelOrdTokenListingsConfig} config - Configuration object for cancelling token ordinals\n * @param {PrivateKey} config.paymentPk - Private key to sign payment inputs\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.listingUtxos - Listing utxos to cancel (with base64 encoded scripts)\n * @param {string} config.tokenID - Token ID of the token to cancel listings for\n * @param {string} config.ordAddress - Address to send the cancelled token to\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to make\n * @returns {Promise<TokenChangeResult>} Transaction, spent outpoints, change utxo, token change utxos\n */\nexport const cancelOrdTokenListings = async (\n\tconfig: CancelOrdTokenListingsConfig,\n): Promise<TokenChangeResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tadditionalPayments,\n\t\tlistingUtxos,\n\t\tutxos,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\t// calculate change amount\n\tlet totalAmtIn = 0;\n\n\tif (listingUtxos.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Ensure these inputs are for the expected token\n\tif (!listingUtxos.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinals we're cancelling\n\tfor (const listingUtxo of listingUtxos) {\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().cancelListing(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlistingUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, 'base64'))\n\t\t\t)\n\t\t));\n\t\ttotalAmtIn += Number.parseInt(listingUtxo.amt);\n\t}\n\n\tconst transferInscription: TransferTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"transfer\",\n\t\tamt: totalAmtIn.toString(),\n\t};\n\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\tif (protocol === TokenType.BSV20) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\ttick: tokenID,\n\t\t} as TransferBSV20Inscription;\n\t} else if (protocol === TokenType.BSV21) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\tid: tokenID,\n\t\t} as TransferBSV21Inscription;\n\t} else {\n\t\tthrow new Error(\"Invalid protocol\");\n\t}\n\n\tconst destination: Destination = {\n\t\taddress: ordAddress || ordPk.toAddress().toString(),\n\t\tinscription: {\n\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t},\n\t};\n\n  const lockingScript = new OrdP2PKH().lock(\n    destination.address,\n    destination.inscription\n  );\n\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript,\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to cancel token listings. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n  const tokenChange: TokenUtxo[] = [{\n    amt: totalAmtIn.toString(),\n    script: Buffer.from(lockingScript.toHex(), 'hex').toString('base64'),\n    txid: tx.id(\"hex\") as string,\n    vout: 0,\n    id: tokenID,\n    satoshis: 1\n  }];\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n    tokenChange,\n\t};\n};","import {\n\tLockingScript,\n\tP2PKH,\n\tSatoshisPerKilobyte,\n\tScript,\n\tTransaction,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport {\n\ttype ChangeResult,\n\tRoytaltyType,\n\tTokenType,\n\ttype PurchaseOrdListingConfig,\n\ttype PurchaseOrdTokenListingConfig,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n\tMAP,\n} from \"./types\";\nimport { resolvePaymail } from \"./utils/paymail\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Purchase a listing\n * @param {PurchaseOrdListingConfig} config - Configuration object for purchasing a listing\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign payment inputs\n * @param {ExistingListing} config.listing - Listing to purchase\n * @param {string} config.ordAddress - Address to send the ordinal to\n * @param {string} [config.changeAddress] - Optional. Address to send change to\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to make\n * @param {Royalty[]} [config.royalties] - Optional. Royalties to pay\n * @param {MAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include on purchased output\n * @returns {Promise<ChangeResult>} Transaction, spent outpoints, change utxo\n */\nexport const purchaseOrdListing = async (\n\tconfig: PurchaseOrdListingConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tlisting,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tadditionalPayments = [],\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\troyalties = [],\n\t\tmetaData,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinal we're purchasing\n\ttx.addInput(\n\t\tinputFromB64Utxo(\n\t\t\tlisting.listingUtxo,\n\t\t\tnew OrdLock().purchaseListing(\n\t\t\t\t1,\n\t\t\t\tScript.fromBinary(Utils.toArray(listing.listingUtxo.script, \"base64\")),\n\t\t\t),\n\t\t),\n\t);\n\n\t// Outputs\n\t// Add the purchased output\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(ordAddress, undefined, metaData),\n\t});\n\n\t// add the payment output\n\tconst reader = new Utils.Reader(Utils.toArray(listing.payout, \"base64\"));\n\tconst satoshis = reader.readUInt64LEBn().toNumber();\n\tconst scriptLength = reader.readVarIntNum();\n\tconst scriptBin = reader.read(scriptLength);\n\tconst lockingScript = LockingScript.fromBinary(scriptBin);\n\ttx.addOutput({\n\t\tsatoshis,\n\t\tlockingScript,\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Add any royalties\n\tfor (const r of royalties) {\n\t\tlet lockingScript: LockingScript | undefined;\n\t\tconst royaltySats = Math.floor(Number(r.percentage) * satoshis);\n\n\t\tswitch (r.type as RoytaltyType) {\n\t\t\tcase RoytaltyType.Paymail:\n\t\t\t\t// resolve paymail address\n\t\t\t\tlockingScript = await resolvePaymail(r.destination, royaltySats);\n\t\t\t\tbreak;\n\t\t\tcase RoytaltyType.Script:\n\t\t\t\tlockingScript = Script.fromBinary(\n\t\t\t\t\tUtils.toArray(r.destination, \"base64\"),\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase RoytaltyType.Address:\n\t\t\t\tlockingScript = new P2PKH().lock(r.destination);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"Invalid royalty type\");\n\t\t}\n\t\tif (!lockingScript) {\n\t\t\tthrow new Error(\"Invalid royalty destination\");\n\t\t}\n\t\ttx.addOutput({\n\t\t\tsatoshis: royaltySats,\n\t\t\tlockingScript,\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo,\n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpaymentPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, \"base64\")),\n\t\t\t),\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase ordinal listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\n/**\n *\n * @param {PurchaseOrdTokenListingConfig} config  - Configuration object for purchasing a token listing\n * @param {TokenType} config.protocol - Token protocol\n * @param {string} config.tokenID - Token ID\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign payment inputs\n * @param {Utxo} config.listingUtxo - Listing UTXO\n * @param {string} config.ordAddress - Address to send the ordinal to\n * @param {string} [config.changeAddress] - Optional. Address to send change to\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to make\n * @param {MAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include on the purchased transfer inscription output\n * @returns {Promise<ChangeResult>} Transaction, spent outpoints, change utxo\n */\nexport const purchaseOrdTokenListing = async (\n\tconfig: PurchaseOrdTokenListingConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tpaymentPk,\n\t\tlistingUtxo,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t\tmetaData,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinal we're purchasing\n\ttx.addInput(\n\t\tinputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().purchaseListing(\n\t\t\t\t1,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, \"base64\")),\n\t\t\t),\n\t\t),\n\t);\n\n\t// Outputs\n\tconst transferInscription: TransferTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"transfer\",\n\t\tamt: listingUtxo.amt,\n\t};\n\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\tif (protocol === TokenType.BSV20) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\ttick: tokenID,\n\t\t} as TransferBSV20Inscription;\n\t} else if (protocol === TokenType.BSV21) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\tid: tokenID,\n\t\t} as TransferBSV21Inscription;\n\t} else {\n\t\tthrow new Error(\"Invalid protocol\");\n\t}\n\tconst dataB64 = Buffer.from(JSON.stringify(inscription)).toString(\"base64\");\n\n\t// Add the purchased output\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\tordAddress,\n\t\t\t{\n\t\t\t\tdataB64,\n\t\t\t\tcontentType: \"application/bsv-20\",\n\t\t\t},\n\t\t\tmetaData,\n\t\t),\n\t});\n\n\tif (!listingUtxo.payout) {\n\t\tthrow new Error(\"Listing UTXO does not have a payout script\");\n\t}\n\n\t// Add the payment output\n\tconst reader = new Utils.Reader(Utils.toArray(listingUtxo.payout, \"base64\"));\n\tconst satoshis = reader.readUInt64LEBn().toNumber();\n\tconst scriptLength = reader.readVarIntNum();\n\tconst scriptBin = reader.read(scriptLength);\n\tconst lockingScript = LockingScript.fromBinary(scriptBin);\n\ttx.addOutput({\n\t\tsatoshis,\n\t\tlockingScript,\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo,\n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpaymentPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, \"base64\")),\n\t\t\t),\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase token listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n","// import { PaymailClient } from \"@bsv/paymail\";\nimport { LockingScript } from \"@bsv/sdk\";\n\n// const client = new PaymailClient();\n\nexport const resolvePaymail = async (paymailAddress: string, amtToReceive: number): Promise<LockingScript> => {\n  // const destinationTx = await client.getP2pPaymentDestination(paymailAddress, amtToReceive);\n  // // TODO: we are assuming only one output but in reality it can be many\n  // return destinationTx.outputs[0].script as LockingScript;\n  throw new Error(\"Not implemented\");\n}","import sizeOf from 'image-size';\nimport type { IconInscription, ImageContentType } from \"../types\";\n\nexport const ErrorOversizedIcon = new Error(\n    \"Image must be a square image with dimensions <= 400x400\",\n);\nexport const ErrorIconProportions = new Error(\"Image must be a square image\");\nexport const ErrorInvalidIconData = new Error(\"Error processing image\");\nexport const ErrorImageDimensionsUndefined = new Error(\n    \"Image dimensions are undefined\",\n);\n\nconst isImageContentType = (value: string): value is ImageContentType => {\n    return (value as ImageContentType) === value;\n};\n\nexport const validIconData = async (\n    icon: IconInscription,\n): Promise<Error | null> => {\n    const { dataB64, contentType } = icon;\n\n    if (contentType === \"image/svg+xml\") {\n        return validateSvg(dataB64);\n    }\n\n    if (!isImageContentType(contentType)) {\n        return ErrorInvalidIconData;\n    }\n\n    try {\n        const buffer = Buffer.from(dataB64, \"base64\");\n        const dimensions = sizeOf(buffer);\n\n        if (dimensions.width === undefined || dimensions.height === undefined) {\n            return ErrorImageDimensionsUndefined;\n        }\n        if (dimensions.width !== dimensions.height) {\n            return ErrorIconProportions;\n        }\n        if (dimensions.width > 400 || dimensions.height > 400) {\n            return ErrorOversizedIcon;\n        }\n\n        return null;\n    } catch (error) {\n        return ErrorInvalidIconData;\n    }\n};\n\nconst validateSvg = (svgBase64: string): Error | null => {\n    const svgString = Buffer.from(svgBase64, \"base64\").toString(\"utf-8\");\n    const widthMatch = svgString.match(/<svg[^>]*\\s+width=\"([^\"]+)\"/);\n    const heightMatch = svgString.match(/<svg[^>]*\\s+height=\"([^\"]+)\"/);\n    \n    if (!widthMatch || !heightMatch) {\n        return ErrorImageDimensionsUndefined;\n    }\n\n    const width = Number.parseInt(widthMatch[1], 10);\n    const height = Number.parseInt(heightMatch[1], 10);\n\n    if (Number.isNaN(width) || Number.isNaN(height)) {\n        return ErrorImageDimensionsUndefined;\n    }\n\n    if (width !== height) {\n        return ErrorIconProportions;\n    }\n    if (width > 400 || height > 400) {\n        return ErrorOversizedIcon;\n    }\n\n    return null;\n}\n\nexport const validIconFormat = (icon: string): boolean => {\n    if (!icon.includes(\"_\") || icon.endsWith(\"_\")) {\n        return false;\n    }\n\n    const iconVout = Number.parseInt(icon.split(\"_\")[1]);\n    if (Number.isNaN(iconVout)) {\n        return false;\n    }\n\n    if (!icon.startsWith(\"_\") && icon.split(\"_\")[0].length !== 64) {\n        return false;\n    }\n\n    return true;\n};","import {\n\tTransaction,\n\tP2PKH,\n\tSatoshisPerKilobyte,\n\ttype TransactionOutput,\n\tUtils,\n\tScript,\n} from \"@bsv/sdk\";\nimport type {\n  ChangeResult,\n\tDeployBsv21TokenConfig,\n\tDeployMintTokenInscription,\n\tInscription,\n\tUtxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { validIconData, validIconFormat } from \"./utils/icon\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\n\n/**\n * Deploys & Mints a BSV21 token to the given destination address\n * @param {DeployBsv21TokenConfig} config - Configuration object for deploying BSV21 token\n * @param {string} config.symbol - Token ticker symbol\n * @param {number} config.decimals - Number of decimal places to display\n * @param {string | IconInscription} config.icon - outpoint (format: txid_vout) or Inscription. If Inscription, must be a valid image type\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {Distribution} config.initialDistribution - Initial distribution with addresses and total supply (not adjusted for decimals, library will add zeros)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {string} config.destinationAddress - Address to deploy token to.\n * @param {string} [config.changeAddress] - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to include in the transaction\n * @returns {Promise<ChangeResult>} Transaction to deploy BSV 2.1 token\n */\nexport const deployBsv21Token = async (\n\tconfig: DeployBsv21TokenConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tsymbol,\n\t\ticon,\n    decimals,\n\t\tutxos,\n\t\tinitialDistribution,\n\t\tpaymentPk,\n\t\tdestinationAddress,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\tlet iconValue: string;\n\tif (typeof icon === \"string\") {\n\t\ticonValue = icon;\n\t} else {\n\t\tconst iconError = await validIconData(icon);\n\t\tif (iconError) {\n\t\t\tthrow iconError;\n\t\t}\n\t\t// add icon inscription to the transaction\n\t\tconst iconScript = new OrdP2PKH().lock(destinationAddress, icon);\n\t\tconst iconOut = {\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: iconScript,\n\t\t};\n\t\ttx.addOutput(iconOut);\n\t\t// relative output index of the icon\n\t\ticonValue = \"_0\";\n\t}\n\n\t// Ensure the icon format\n\tif (!validIconFormat(iconValue)) {\n\t\tthrow new Error(\n\t\t\t\"Invalid icon format. Must be either outpoint (format: txid_vout) or relative output index of the icon (format _vout). examples: ecb483eda58f26da1b1f8f15b782b1186abdf9c6399a1c3e63e0d429d5092a41_0 or _1\",\n\t\t);\n\t}\n  \n\t// Outputs\n  const amt = decimals ? BigInt(initialDistribution.amt) * 10n ** BigInt(decimals) : BigInt(initialDistribution.amt);\n\tconst fileData: DeployMintTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"deploy+mint\",\n\t\tsym: symbol,\n\t\ticon: iconValue,\n\t\tamt: amt.toString(),\n\t};\n\n  if (decimals) {\n    fileData.dec = decimals.toString();\n  }\n\n\tconst b64File = Buffer.from(JSON.stringify(fileData)).toString(\"base64\");\n\tconst sendTxOut = {\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(destinationAddress, {\n\t\t\tdataB64: b64File,\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t} as Inscription),\n\t};\n\ttx.addOutput(sendTxOut);\n\n\t// Additional payments\n\tfor (const payment of additionalPayments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new P2PKH().lock(payment.to),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to deploy token. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tScript,\n\tUtils,\n  PrivateKey,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB, MAP_PREFIX } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n  BaseResult,\n\tBurnOrdinalsConfig,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { toHex } from \"./utils/strings\";\n\n/**\n * Burn ordinals by consuming them as fees\n * @param {BurnOrdinalsConfig} config - Configuration object for sending ordinals\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Utxo} config.ordinals - 1Sat Ordinal Utxos to spend (with base64 encoded scripts)\n * @param {BurnMAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include in an unspendable output OP_FALSE OP_RETURN\n * @returns {Promise<BaseResult>} Transaction, spent outpoints\n */\nexport const burnOrdinals = async (\n\tconfig: BurnOrdinalsConfig,\n): Promise<BaseResult> => {\n\tconst tx = new Transaction();\n\tconst spentOutpoints: string[] = [];\n\tconst { ordinals, metaData } = config;\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(\n\t\t\tordUtxo,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tconfig.ordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tordUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(ordUtxo.script, \"base64\")),\n\t\t\t),\n\t\t);\n\t\tspentOutpoints.push(`${ordUtxo.txid}_${ordUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// Add metadata output\n\n\t// MAP.app and MAP.type keys are required\n\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t}\n\n\tlet metaAsm = \"\";\n\n\tif (metaData?.app && metaData?.type) {\n\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\tconst mapCmdValue = toHex(\"SET\");\n\t\tmetaAsm = `OP_FALSE OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\tif (key !== \"cmd\") {\n\t\t\t\tmetaAsm = `${metaAsm} ${toHex(key)} ${toHex(value as string)}`;\n\t\t\t}\n\t\t}\n\t}\n\n\ttx.addOutput({\n\t\tsatoshis: 0,\n\t\tlockingScript: Script.fromASM(metaAsm || \"OP_FALSE OP_RETURN\"),\n\t});\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t};\n};\n"],"names":["TokenType","RoytaltyType","TokenInputMode","toHex","utf8Str","Buffer","from","toString","MAP_PREFIX","DEFAULT_SAT_PER_KB","API_HOST","OrdP2PKH","_P2PKH","apply","arguments","_inheritsLoose","prototype","lock","address","inscription","metaData","ordAsm","undefined","dataB64","contentType","ordHex","fileHex","trim","Error","fileMediaType","inscriptionAsm","P2PKH","toASM","app","type","mapPrefixHex","_i","_Object$entries","Object","entries","length","_Object$entries$_i","key","value","LockingScript","fromASM","MAX_TOKEN_SUPPLY","Math","pow","fromBase58Check","Utils","inputFromB64Utxo","utxo","unlockScriptTemplate","fromUtxo","_extends","script","fetchPayUtxos","scriptEncoding","payUrl","console","log","Promise","resolve","fetch","then","payRes","ok","json","payUtxos","filter","u","satoshis","isLock","pubKeyHash","p2pkhScript","data","map","txid","vout","toBinary","e","reject","fetchNftUtxos","collectionId","limit","offset","url","JSON","stringify","subTypeData","res","nftUtxos","outpoints","_u$data","list","method","headers","body","concat","nftRes","nfts","Script","fromHex","nftUtxo","origin","outpoint","fetchTokenUtxos","protocol","tokenId","BSV20","tokenUtxos","amt","id","signData","tx","signer","_exit","_temp2","_result","idKey","keyHost","_sigma$sign","Sigma","sign","signedTx","_temp","authToken","sigma","remoteSign","_ref","_catch","stringifyMetaData","result","Array","isArray","String","pact","state","s","_Pact","o","bind","v","_settle","observer","onFulfilled","this","_this","onRejected","_isSettledPact","thenable","createOrdinals","config","_temp4","_interrupt","totalSatsIn","totalSatsOut","BigInt","fee","modelOrFee","payChangeOutIdx","outputs","findIndex","change","changeOutput","payChange","lockingScript","spentOutpoints","utxos","_forOf","input","unlock","paymentPk","fromBinary","toArray","addInput","computeFee","_modelOrFee$computeFe","destinations","changeAddress","_config$satsPerKb","satsPerKb","_config$additionalPay","additionalPayments","warn","_step","SatoshisPerKilobyte","Transaction","_iterator","_createForOfIteratorHelperLoose","done","destination","_Object$keys","keys","addOutput","_step2","_iterator2","p","amount","to","toAddress","changeScript","reduce","total","out","_temp3","pop","_signData","sendOrdinals","enforceUniformSend","ordinals","ordUtxo","ordPk","push","_destination$inscript","_destination$inscript2","_step3","_iterator3","array","_cycle","i","check","paymentUtxos","sendUtxos","changeOut","payments","_config$changeAddress","payment","sendTxOut","_iteratorSymbol","Symbol","iterator","callback","transferOrdTokens","tokenChange","inputs","sourceTXID","sourceOutputIndex","tokenID","inputTokens","distributions","tokenChangeAddress","decimals","_config$burn","burn","_config$tokenInputMod","tokenInputMode","Needed","_config$splitConfig","splitConfig","omitMetaData","every","token","changeAmt","tokensToUse","totalAmtIn","totalAmtOut","totalAmtNeeded","acc","dist","All","inputScriptBinary","inputScript","_step4","_iterator4","dest","bigAmt","transferInscription","op","tick","BSV21","splitChangeOutputs","_step5","_iterator5","target","step","next","_fixup","TypeError","_forTo","values","numTokenInputs","tokenChanges","splitOutputs","threshold","baseChangeAmount","remainder","splitAmount","validateSubTypeData","subType","collectionData","description","quantity","rarityLabels","label","traits","itemData","includes","split","Number","isNaN","parseInt","mintNumber","rank","rarityLabel","attachments","error","OrdLock","_proto","ordAddress","payAddress","price","cancelPkh","payPkh","writeScript","writeBin","buildOutput","cancelListing","privateKey","signOutputs","anyoneCanPay","sourceSatoshis","p2pkh","inputIndex","_p2pkh$sign","writeOpCode","OP","OP_1","estimateLength","purchaseListing","purchase","_input$sourceTransact","UnlockingScript","writer","Writer","slice","output","write","OP_0","sourceSats","sourceTransaction","_input$sourceTransact2","subscript","preimage","TransactionSignature","format","transactionVersion","version","otherInputs","inputSequence","sequence","lockTime","scope","SIGHASH_ALL","SIGHASH_ANYONECANPAY","SIGHASH_FORKID","_purchase$sign","writeUInt64LEBn","BigNumber","writeVarIntNum","return","createOrdListings","listings","listing","listingUtxo","createOrdTokenListings","_interrupt2","tc","_config$additionalPay2","_config$satsPerKb2","_modelOrFee$computeFe2","cancelOrdListings","listingUtxos","cancelOrdTokenListings","purchaseOrdListing","_temp6","_result2","_config$royalties","royalties","reader","Reader","payout","readUInt64LEBn","toNumber","scriptLength","readVarIntNum","scriptBin","read","_temp5","r","royaltySats","floor","percentage","_switch","Paymail","resolvePaymail","_resolvePaymail","Address","purchaseOrdTokenListing","_temp8","_interrupt3","_temp7","ErrorOversizedIcon","ErrorIconProportions","ErrorInvalidIconData","ErrorImageDimensionsUndefined","deployBsv21Token","iconValue","icon","endsWith","iconVout","startsWith","validIconFormat","initialDistribution","fileData","sym","symbol","dec","b64File","destinationAddress","svgBase64","svgString","widthMatch","match","heightMatch","width","height","validateSvg","buffer","dimensions","sizeOf","validIconData","iconError","iconScript","burnOrdinals","metaAsm","mapCmdValue"],"mappings":"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"}