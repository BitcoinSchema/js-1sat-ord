{"version":3,"file":"index.module.js","sources":["../src/utils/strings.ts","../src/types.ts","../src/constants.ts","../src/templates/ordP2pkh.ts","../src/utils/utxo.ts","../src/signData.ts","../src/utils/subtypeData.ts","../src/createOrdinals.ts","../src/sendOrdinals.ts","../src/sendUtxos.ts","../src/transferOrdinals.ts","../src/validate.ts","../src/templates/ordLock.ts","../src/createListings.ts","../src/cancelListing.ts","../src/purchaseOrdListing.ts"],"sourcesContent":["/**\n * Converts a string to its hexadecimal representation\n *\n * @param {string} utf8Str - The string to convert\n * @returns {string} The hexadecimal representation of the input string\n */\nconst toHex = (utf8Str: string): string => {\n  return Buffer.from(utf8Str).toString(\"hex\");\n};\n\nexport { toHex };\n","import type { PrivateKey, Script, Transaction } from \"@bsv/sdk\";\nimport type { AuthToken } from \"sigma-protocol\";\n\n// biome-ignore lint/complexity/noBannedTypes: Reserved for future use\ntype Signer = {};\n\nexport interface LocalSigner extends Signer {\n\tidKey: PrivateKey;\n}\n\nexport interface RemoteSigner extends Signer {\n\tkeyHost: string;\n\tauthToken?: AuthToken;\n}\n\nexport type Destination = {\n\taddress: string;\n\tinscription?: Inscription;\n};\n\n//jsdoc\n/**\n * @typedef {Object} Listing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n */\nexport type Listing = {\n  payAddress: string;\n  price: number;\n  ordAddress: string;\n}\n\n/**\n * @typedef {Object} Distribution\n * @property {string} address - Destination address. Must be a Ordinals address (BSV address for recieving 1Sat ordinals tokens).\n * @property {string} amt - Number of tokens as a string, considering decimals. Not display format. Ex. 100000000 for 1 token with 8 decimal places.\n */\nexport type Distribution = {\n\taddress: string;\n\tamt: string;\n};\n\n/**\n * @typedef {Object} Utxo\n * @property {number} satoshis - Amount in satoshis\n * @property {string} txid - Transaction id\n * @property {number} vout - Output index\n * @property {string} script - Base64 encoded locking script\n */\nexport type Utxo = {\n\tsatoshis: number;\n\ttxid: string;\n\tvout: number;\n\tscript: string;\n};\n\n/**\n * @typedef {Object} NftUtxo\n * @property {string} collectionId - Optional. Collection id of the NFT\n * @property {string} contentType - Media type of the NFT\n * @property {string} creatorBapId - Optional. Creator BAP id of the NFT\n * @property {string} origin - Origin address of the NFT\n * @property {number} satoshis - Always 1\n */\nexport interface NftUtxo extends Utxo {\n\tcollectionId?: string;\n\tcontentType: string;\n\tcreatorBapId?: string;\n\torigin: string;\n\tsatoshis: 1;\n}\n\n/**\n * @typedef {Object} TokenUtxo\n * @property {string} amt - Number of tokens as a string\n * @property {string} id - Token id -  either tick or id depending on protocol\n * @property {string} satoshis - Always 1\n */\nexport interface TokenUtxo extends Utxo {\n\tamt: string;\n\tid: string;\n\tsatoshis: 1;\n}\n\nexport type Inscription = {\n\tdataB64: string;\n\tcontentType: string;\n};\n\nexport type ImageContentType =\n\t| \"image/png\"\n\t| \"image/jpeg\"\n\t| \"image/gif\"\n\t| \"image/svg+xml\"\n\t| \"image/webp\";\n\n/**\n * @typedef {Object} IconInscription\n * @property {string} dataB64 - Base64 encoded image data. Must be a square image.\n * @property {ImageContentType} contentType - Media type of the image\n */\nexport type IconInscription = {\n\tdataB64: string;\n\tcontentType: ImageContentType;\n};\n\nexport type Payment = {\n\tto: string;\n\tamount: number;\n};\n\nexport type TokenInscription = {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\" | \"mint\" | \"deploy+mint\" | \"burn\";\n};\n\nexport interface MintTokenInscription extends TokenInscription {\n\top: \"mint\";\n}\n\nexport interface DeployMintTokenInscription extends TokenInscription {\n\top: \"deploy+mint\";\n\tsym: string;\n\ticon: string;\n}\n\nexport interface TransferTokenInscription extends TokenInscription {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\" | \"burn\";\n}\n\nexport interface TransferBSV20Inscription extends TransferTokenInscription {\n\ttick: string;\n}\n\nexport interface TransferBSV21Inscription extends TransferTokenInscription {\n\tid: string;\n}\n\nexport enum TokenType {\n\tBSV20 = \"bsv20\",\n\tBSV21 = \"bsv21\",\n}\n\nexport type CreateOrdinalsResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\n/**\n * MAP (Magic Attribute Protocol) metadata object with stringified values for writing to the blockchain\n * @typedef {Object} MAP\n * @property {string} app - Application identifier\n * @property {string} type - Metadata type\n * @property {string} [prop] - Optional. Additional metadata properties\n */\nexport type MAP = {\n\tapp: string;\n\ttype: string;\n\t[prop: string]: string;\n};\n\nexport type PreMAP = {\n\tapp: string;\n\ttype: string;\n\t[prop: string]: unknown;\n\troyalties?: Royalty[];\n\tsubTypeData?: CollectionSubTypeData | CollectionItemSubTypeData;\n};\n\nexport type CreateOrdinalsConfig = {\n\tutxos: Utxo[];\n\tdestinations: Destination[];\n\tpaymentPk: PrivateKey;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: PreMAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n};\n\nexport enum RoytaltyType {\n\tPaymail = \"paymail\",\n\tAddress = \"address\",\n\tScript = \"script\",\n}\n\n/**\n * Royalty object\n * @typedef {Object} Royalty\n * @property {RoytaltyType} type - Royalty type, string, one of \"paymail\", \"address\", \"script\"\n * @property {string} destination - Royalty destination\n * @property {string} percentage - Royalty percentage as a string float 0-1\n */\nexport type Royalty = {\n\ttype: RoytaltyType;\n\tdestination: string;\n\tpercentage: string; // string float 0-1\n};\n\nexport interface CreateOrdinalsMetadata extends PreMAP {\n\ttype: \"ord\",\n\tname: string,\n\tpreviewUrl?: string,\n}\n\nexport interface CreateOrdinalsCollectionMetadata extends CreateOrdinalsMetadata {\n\tsubType: \"collection\",\n\tsubTypeData: CollectionSubTypeData, // JSON stringified CollectionSubTypeData\n\troyalties?: Royalty[],\n};\n\nexport interface CreateOrdinalsCollectionItemMetadata extends CreateOrdinalsMetadata {\n\tsubType: \"collectionItem\",\n\tsubTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n};\n\n/**\n * Configuration object for creating an ordinals collection\n * @typedef {Object} CreateOrdinalsCollectionConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collection\"\n * @property metaData.name - Collection name\n * @property metaData.subTypeData - JSON stringified CollectionSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface  CreateOrdinalsCollectionConfig extends CreateOrdinalsConfig {\n\tmetaData: CreateOrdinalsCollectionMetadata\n}\n\nexport type CollectionTraits = {\n\t[trait: string]: CollectionTrait;\n};\n\nexport type CollectionTrait = {\n\tvalues: string[];\n\toccurancePercentages: string[];\n};\n\nexport type Rarity = {\n  [key:string]: string;\n}\n\nexport type RarityLabels = Rarity[]\nexport interface CollectionSubTypeData {\n\tdescription: string;\n\tquantity: number;\n\trarityLabels: RarityLabels;\n\ttraits: CollectionTraits;\n}\n\nexport interface CreateOrdinalsCollectionItemMetadata extends PreMAP {\n\t\ttype: \"ord\",\n\t\tname: string,\n\t\tsubType: \"collectionItem\",\n\t\tsubTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n\t\troyalties?: Royalty[],\n\t\tpreviewUrl?: string,\t\n}\n\n/**\n * Configuration object for creating an ordinals collection item\n * @typedef {Object} CreateOrdinalsCollectionItemConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection item\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collectionItem\"\n * @property metaData.name - Collection item name\n * @property metaData.subTypeData - JSON stringified CollectionItemSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionItemConfig extends CreateOrdinalsConfig {\n\tmetaData: CreateOrdinalsCollectionItemMetadata\n}\n\n/**\n * Subtype data for an ordinals collection item\n * @typedef {Object} CollectionItemSubTypeData\n * @property {string} collectionId - Collection id\n * @property {number} mintNumner - Mint number\n * @property {number} rank - Rank\n * @property {string} rarityLabel - Rarity label\n * @property {string} traits - traits object\n * @property {string} attachments - array of attachment objects\n */\nexport interface CollectionItemSubTypeData {\n\tcollectionId: string;\n\tmintNumber?: number;\n\trank?: number;\n\trarityLabel?: RarityLabels;\n\ttraits?: CollectionItemTraits;\n\tattachments?: CollectionItemAttachment[];\n}\n\nexport type CollectionItemTraits = {\n\tname: string;\n\tvalue: string;\n\trarityLabel?: string;\n\toccurancePercentrage?: string;\n};\n\nexport type CollectionItemAttachment \t= {\n\tname: string;\n\tdescription?: string;\n\t\"content-type\": string;\n\turl: string;\n}\n\nexport type SendOrdinalsResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type SendOrdinalsConfig = {\n\tpaymentUtxos: Utxo[];\n\tordinals: Utxo[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tdestinations: Destination[];\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: PreMAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n\tenforceUniformSend?: boolean;\n}\n\nexport type DeployBsv21TokenResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type DeployBsv21TokenConfig = {\n\tsymbol: string;\n\ticon: string | IconInscription;\n\tutxos: Utxo[];\n\tinitialDistribution: Distribution;\n\tpaymentPk: PrivateKey;\n\tdestinationAddress: string;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[];\n};\n\nexport type SendUtxosResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type SendUtxosConfig = {\n\tutxos: Utxo[];\n\tpaymentPk: PrivateKey;\n\tpayments: Payment[];\n\tsatsPerKb?: number;\n\tchangeAddress?: string;\n};\n\nexport interface TransferOrdTokensResult extends SendOrdinalsResult {\n\ttokenChange?: TokenUtxo;\n}\n\nexport type TransferOrdTokensConfig = {\n\tprotocol: TokenType;\n\ttokenID: string;\n\tutxos: Utxo[];\n\tinputTokens: TokenUtxo[];\n\tdistributions: Distribution[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tchangeAddress?: string;\n\ttokenChangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: PreMAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n  burn?: boolean;\n}\n\nexport type CreateOrdListingsConfig = {\n\tutxos: Utxo[];\n\tlistings: Listing[];\n  royalty: number;\n\tpaymentPk: PrivateKey;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[];\n}\n\nexport type PurchaseOrdListingConfig = {\n  utxos: Utxo[];\n  paymentPk: PrivateKey;\n  listingUtxo: Utxo;\n  ordAddress: string;\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[],\n}\n\nexport type CancelOrdListingsConfig = {\n  utxos: Utxo[],\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  listingUtxos: Utxo[];\n  changeAddress?: string;\n  satsPerKb?: number;\n}\n\nexport type CraeteOrdTokenListingsConfig = {\n  protocol: TokenType;\n  tokenID: string;\n  utxos: Utxo[];\n  inputTokens: TokenUtxo[];\n  distributions: Distribution[];\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  changeAddress?: string;\n  tokenChangeAddress: string;\n  satsPerKb?: number;\n  additionalPayments: Payment[];\n}","export const MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\nexport const DEFAULT_SAT_PER_KB = 10;\nexport const API_HOST = \"https://ordinals.gorillapool.io/api\";","import {\n\tLockingScript,\n\tP2PKH,\n\ttype Script,\n} from \"@bsv/sdk\";\nimport type { MAP } from \"../types\";\nimport { toHex } from \"../utils/strings\";\nimport { MAP_PREFIX } from \"../constants\";\n\n/**\n * OrdP2PKH (1Sat Ordinal + Pay To Public Key Hash) class implementing ScriptTemplate.\n *\n * This class provides methods to create an Ordinal with Pay To Public Key Hash locking and unlocking scripts. \n * It extends the standard P2PKH script template and provides a custom lock method.\n */\nexport default class OrdP2PKH extends P2PKH {\n\t/**\n\t * Creates a 1Sat Ordinal + P2PKH locking script for a given address string\n\t *\n\t * @param {string} address - An destination address for the Ordinal.\n\t * @param {string} [b64File] - Base64 encoded file data.\n\t * @param {string} [mediaType] - Media type of the file.\n\t * @param {MAP} [metaData] - (optional) MAP Metadata to be included in OP_RETURN.\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\t// unlock method inherits from p2pkh\n\tlock(\n\t\taddress: string,\n\t\tb64File?: string | undefined,\n\t\tmediaType?: string | undefined,\n\t\tmetaData?: MAP | undefined,\n\t): Script {\n\t\tlet ordAsm = \"\";\n\t\t// This can be omitted for reinscriptions that just update metadata\n\t\tif (b64File !== undefined && mediaType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(b64File, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(mediaType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`;\n\t\t}\n\n\t\t// Create ordinal output and inscription in a single output\n\t\tconst lockingScript = new P2PKH().lock(address);\n\t\tlet inscriptionAsm = `${ordAsm ? `${ordAsm} ` : \"\"}${lockingScript.toASM()}`;\n\n\t\t// MAP.app and MAP.type keys are required\n\t\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t\t}\n\n\t\tif (metaData?.app && metaData?.type) {\n\t\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\t\tconst mapCmdValue = toHex(\"SET\");\n\t\t\tinscriptionAsm = `${inscriptionAsm} OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\t\tif (key !== \"cmd\") {\n\t\t\t\t\tinscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\n\t\t\t\t\t\tvalue as string,\n\t\t\t\t\t)}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn LockingScript.fromASM(inscriptionAsm);\n\t}\n}\n","import {\n\ttype Transaction,\n\ttype UnlockingScript,\n\tfromUtxo,\n\ttype TransactionInput,\n\tUtils,\n\tP2PKH,\n  Script,\n} from \"@bsv/sdk\";\nimport { type NftUtxo, TokenType, type TokenUtxo, type Utxo } from \"../types\";\nimport { API_HOST } from \"../constants\";\n\nconst { fromBase58Check } = Utils;\n\n/**\n * Converts a Utxo object with a base64 encoded script to a Utxo object with a hex encoded script\n * @param {Utxo} utxo - Utxo object with base64 encoded script\n * @param {Object} unlockScriptTemplate - Object with sign and estimateLength functions\n * @returns {TransactionInput} Utxo object with hex encoded script\n */\nexport const inputFromB64Utxo = (\n\tutxo: Utxo,\n\tunlockScriptTemplate: {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>;\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>;\n\t},\n): TransactionInput => {\n\tconst input = fromUtxo(\n\t\t{\n\t\t\t...utxo,\n\t\t\tscript: Buffer.from(utxo.script, \"base64\").toString(\"hex\"),\n\t\t},\n\t\tunlockScriptTemplate,\n\t);\n\tinput.sourceTXID = utxo.txid;\n\treturn input;\n};\n\n/**\n * Fetches pay utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<Utxo[]>} Array of pay utxos\n */\nexport const fetchPayUtxos = async (address: string, scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\"): Promise<Utxo[]> => {\n\tconst payUrl = `${API_HOST}/txos/address/${address}/unspent?bsv20=false`;\n\tconsole.log({ payUrl });\n\tconst payRes = await fetch(payUrl);\n\tif (!payRes.ok) {\n\t\tthrow new Error(\"Error fetching pay utxos\");\n\t}\n\tlet payUtxos = await payRes.json();\n\t// exclude all 1 satoshi utxos\n\tpayUtxos = payUtxos.filter((u: { satoshis: number }) => u.satoshis !== 1);\n\n\t// Get pubkey hash from address\n\tconst pubKeyHash = fromBase58Check(address);\n\tconst p2pkhScript = new P2PKH().lock(pubKeyHash.data);\n\tpayUtxos = payUtxos.map((utxo: Partial<Utxo>) => ({\n\t\ttxid: utxo.txid,\n\t\tvout: utxo.vout,\n\t\tsatoshis: utxo.satoshis,\n\t\tscript: scriptEncoding === \"hex\" || scriptEncoding === \"base64\" ? Buffer.from(p2pkhScript.toBinary()).toString(scriptEncoding) : p2pkhScript.toASM(),\n\t}));\n\treturn payUtxos as Utxo[];\n};\n\n/**\n * Fetches NFT utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @param {string} [collectionId] - Optional. Collection id (collection insciprtion origin)\n * @param {number} [limit=10] - Optional. Number of utxos to fetch. Default is 10\n * @param {number} [offset=0] - Optional. Offset for fetching utxos. Default is 0\n * @param {string} [scriptEncoding=\"base64\"] - Optional. Encoding for the script. Default is base64. Options are hex, base64, or asm.\n * @returns {Promise<Utxo[]>} Array of NFT utxos\n */\nexport const fetchNftUtxos = async (\n\taddress: string,\n\tcollectionId?: string,\n\tlimit = 10,\n\toffset = 0,\n  scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\",\n): Promise<NftUtxo[]> => {\n\tlet url = `${API_HOST}/txos/address/${address}/unspent?limit=${limit}&offset=${offset}&`;\n\n\tif (collectionId) {\n\t\tconst query = {\n\t\t\tmap: {\n\t\t\t\tsubTypeData: { collectionId },\n\t\t\t},\n\t\t};\n\t\tconst b64Query = Buffer.from(JSON.stringify(query)).toString(\"base64\");\n\t\turl += `q=${b64Query}`;\n\t}\n\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching NFT utxos for ${address}`);\n\t}\n\n\t// Returns a BSV20Txo but we only need a few fields\n\tlet nftUtxos = await res.json();\n\n\t// Only include 1 satoshi outputs, non listings\n\tnftUtxos = nftUtxos.filter(\n\t\t(u: {\n\t\t\tsatoshis: number;\n\t\t\tdata: { list: { price: number; payout: string } | undefined } | null;\n\t\t}) => u.satoshis === 1 && !u.data?.list,\n\t);\n\n\tconst outpoints = nftUtxos.map(\n\t\t(utxo: { txid: string; vout: number }) => `${utxo.txid}_${utxo.vout}`,\n\t);\n\t// Fetch the scripts up to the limit\n\tconst nftRes = await fetch(`${API_HOST}/txos/outpoints?script=true`, {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t\tbody: JSON.stringify([...outpoints]),\n\t});\n\n\tif (!nftRes.ok) {\n\t\tthrow new Error(`Error fetching NFT scripts for ${address}`);\n\t}\n\n\tconst nfts = (await nftRes.json() || [])\n\n\tnftUtxos = nfts.map(\n\t\t(utxo: {\n\t\t\torigin: { outpoint: string };\n\t\t\tscript: string;\n\t\t\tvout: number;\n\t\t\ttxid: string;\n\t\t}) => {\n      let script = utxo.script;\n      if (scriptEncoding === \"hex\") {\n        script = Buffer.from(script, \"base64\").toString(\"hex\");\n      } else if (scriptEncoding === \"asm\") {\n        script = Script.fromHex(Buffer.from(script, \"base64\").toString(\"hex\")).toASM();\n      }\n\t\t\tconst nftUtxo = {\n\t\t\t\torigin: utxo.origin.outpoint,\n\t\t\t\tscript,\n\t\t\t\tvout: utxo.vout,\n\t\t\t\ttxid: utxo.txid,\n\t\t\t\tsatoshis: 1,\n\t\t\t} as NftUtxo;\n\t\t\tif (collectionId) {\n\t\t\t\tnftUtxo.collectionId = collectionId;\n\t\t\t}\n\t\t\treturn nftUtxo;\n\t\t},\n\t);\n\n\treturn nftUtxos as NftUtxo[];\n};\n\n/**\n * Fetches token utxos from the API\n * @param {TokenType} protocol - Token protocol. Either BSV20 or BSV21\n * @param {string} tokenId - Token id. Ticker for BSV20 and id (mint+deploy inscription origin) for BSV21\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<TokenUtxo[]>} Array of token utxos\n */\nexport const fetchTokenUtxos = async (\n\tprotocol: TokenType,\n\ttokenId: string,\n\taddress: string,\n): Promise<TokenUtxo[]> => {\n\tconst url = `${API_HOST}/bsv20/${address}/${protocol === TokenType.BSV20 ? \"tick\" : \"id\"}/${tokenId}?bsv20=true&listing=false`;\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching ${protocol} utxos`);\n\t}\n\n\t// returns a BSV20Txo but we only need a few fields\n\tlet tokenUtxos = await res.json();\n\n\ttokenUtxos = tokenUtxos.map((utxo: Partial<TokenUtxo>) => ({\n\t\tamt: utxo.amt,\n\t\tscript: utxo.script,\n\t\tvout: utxo.vout,\n\t\ttxid: utxo.txid,\n\t\tid: tokenId,\n\t\tsatoshis: 1,\n\t}));\n\n\treturn tokenUtxos as TokenUtxo[];\n};\n","import type { Transaction } from \"@bsv/sdk\";\nimport { Sigma } from \"sigma-protocol\";\nimport type { LocalSigner, RemoteSigner } from \"./types\";\n\n/**\n * Signs data in the transaction with Sigma protocol\n * @param {Transaction} tx - Transaction to sign\n * @param {LocalSigner | RemoteSigner} signer - Local or remote signer (used for data signature)\n * @returns {Transaction} Transaction with signed data\n */\nexport const signData = async (\n\ttx: Transaction,\n\tsigner: LocalSigner | RemoteSigner,\n): Promise<Transaction> => {\n\t// Sign tx if idKey or remote signer like starfish/tokenpass\n\tconst idKey = (signer as LocalSigner)?.idKey;\n\tconst keyHost = (signer as RemoteSigner)?.keyHost;\n\n\tif (idKey) {\n\t\tconst sigma = new Sigma(tx);\n\t\tconst { signedTx } = sigma.sign(idKey);\n\t\treturn signedTx;\n\t}\n\tif (keyHost) {\n\t\tconst authToken = (signer as RemoteSigner)?.authToken;\n\t\tconst sigma = new Sigma(tx);\n\t\ttry {\n\t\t\tconst { signedTx } = await sigma.remoteSign(keyHost, authToken);\n\t\t\treturn signedTx;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthrow new Error(`Remote signing to ${keyHost} failed`);\n\t\t}\n\t}\n\tthrow new Error(\"Signer must be a LocalSigner or RemoteSigner\");\n};\n","import type { MAP, PreMAP } from \"../types\";\n\nconst stringifyMetaData = (metaData?: PreMAP): MAP | undefined => {\n  if (!metaData) return undefined;\n\tconst result: MAP = {\n\t\tapp: metaData.app,\n\t\ttype: metaData.type,\n\t};\n\n\tfor (const [key, value] of Object.entries(metaData)) {\n\t\tif (value !== undefined) {\n\t\t\tif (typeof value === \"string\") {\n\t\t\t\tresult[key] = value;\n\t\t\t} else if (Array.isArray(value) || typeof value === \"object\") {\n\t\t\t\tresult[key] = JSON.stringify(value);\n\t\t\t} else {\n\t\t\t\tresult[key] = String(value);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\nexport default stringifyMetaData;\n","import { Transaction, SatoshisPerKilobyte, P2PKH } from \"@bsv/sdk\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n\tUtxo,\n\tCreateOrdinalsConfig,\n\tCreateOrdinalsResult,\n\tCreateOrdinalsCollectionConfig,\n\tCreateOrdinalsCollectionItemConfig,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Creates a transaction with inscription outputs\n * @param {CreateOrdinalsConfig | CreateOrdinalsCollectionConfig | CreateOrdinalsCollectionItemConfig} config - Configuration object for creating ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {string} config.changeAddress - Optional. Address to send change to. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Local or remote signer (used for data signature)\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<CreateOrdinalsResult>} Transaction with inscription outputs\n */\nexport const createOrdinals = async (\n\tconfig:\n\t\t| CreateOrdinalsConfig\n\t\t| CreateOrdinalsCollectionConfig\n\t\t| CreateOrdinalsCollectionItemConfig,\n): Promise<CreateOrdinalsResult> => {\n\tconst {\n\t\tutxos,\n\t\tdestinations,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Inputs\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\t}\n\n\t// Warn if creating many inscriptions at once\n\tif (destinations.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Outputs\n\t// Add inscription outputs\n\tfor (const destination of destinations) {\n\t\tif (!destination.inscription) {\n\t\t\tthrow new Error(\"Inscription is required for all destinations\");\n\t\t}\n\n\t\t// remove any undefined fields from metadata\n\t\tif (metaData) {\n\t\t\tfor(const key of Object.keys(metaData)) {\n\t\t\t\tif (metaData[key] === undefined) {\n\t\t\t\t\tdelete metaData[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription.dataB64,\n\t\t\t\tdestination.inscription.contentType,\n\t\t\t\tstringifyMetaData(metaData),\n\t\t\t),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Calculate total input and output amounts\n\tconst totalInput = utxos.reduce(\n\t\t(sum, utxo) => sum + BigInt(utxo.satoshis),\n\t\t0n,\n\t);\n\tconst totalOutput = tx.outputs.reduce(\n\t\t(sum, output) => sum + BigInt(output.satoshis || 0),\n\t\t0n,\n\t);\n\n\t// Estimate fee\n\tconst estimatedFee = await modelOrFee.computeFee(tx);\n\n\t// Check if change is needed\n\tlet payChange: Utxo | undefined;\n\tif (totalInput > totalOutput + BigInt(estimatedFee)) {\n\t\tconst changeScript = new P2PKH().lock(\n\t\t\tchangeAddress || paymentPk.toAddress().toString(),\n\t\t);\n\t\tconst changeOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\t// Add change output\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet,\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\n\t\ttx.addOutput(changeOutput);\n\t}\n\n\tif (signer) {\n\t\ttx = await signData(tx, signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype Script,\n\ttype TransactionOutput,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type { SendOrdinalsResult, SendOrdinalsConfig, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Sends ordinals to the given destinations\n * @param {SendOrdinalsConfig} config - Configuration object for sending ordinals\n * @param {Utxo[]} config.paymentUtxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.ordinals - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {string} config.changeAddress - Optional. Address to send change to, if any. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @param {boolean} config.enforceUniformSend - Optional. Default: true. Enforce that the number of destinations matches the number of ordinals being sent. Sending ordinals requires a 1:1 mapping of destinations to ordinals. This is only used for sub-protocols like BSV21 that manage tokens without sending the inscriptions directly.\n * @returns {Promise<SendOrdinalsResult>} Transaction, spent outpoints, and change vout\n */\nexport const sendOrdinals = async (\n\tconfig: SendOrdinalsConfig,\n): Promise<SendOrdinalsResult> => {\n\tif (!config.satsPerKb) {\n\t\tconfig.satsPerKb = DEFAULT_SAT_PER_KB;\n\t}\n\tif (!config.additionalPayments) {\n\t\tconfig.additionalPayments = [];\n\t}\n\tif (config.enforceUniformSend === undefined) {\n\t\tconfig.enforceUniformSend = true;\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(config.satsPerKb);\n\tlet tx = new Transaction();\n\tconst spentOutpoints: string[] = [];\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of config.ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(\n\t\t\tordUtxo,\n\t\t\tnew OrdP2PKH().unlock(config.ordPk),\n\t\t);\n\t\tspentOutpoints.push(`${ordUtxo.txid}_${ordUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// check that ordinals coming in matches ordinals going out if supplied\n\tif (\n\t\tconfig.enforceUniformSend &&\n\t\tconfig.destinations.length !== config.ordinals.length\n\t) {\n\t\tthrow new Error(\n\t\t\t\"Number of destinations must match number of ordinals being sent\",\n\t\t);\n\t}\n\n\t// Add ordinal outputs\n\tfor (const destination of config.destinations) {\n\t\tlet s: Script;\n\t\tif (\n\t\t\tdestination.inscription?.dataB64 &&\n\t\t\tdestination.inscription?.contentType\n\t\t) {\n\t\t\ts = new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription.dataB64,\n\t\t\t\tdestination.inscription.contentType,\n\t\t\t\tstringifyMetaData(config.metaData),\n\t\t\t);\n\t\t} else {\n\t\t\ts = new P2PKH().lock(destination.address);\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: s,\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of config.additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of config.paymentUtxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(config.paymentPk));\n\t\tspentOutpoints.push(`${utxo.txid}_${utxo.vout}`);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (totalSatsIn < totalSatsOut) {\n\t\tthrow new Error(\"Not enough ordinals to send\");\n\t}\n\n\tlet payChange: Utxo | undefined;\n\tif (totalSatsIn > totalSatsOut + BigInt(fee)) {\n\t\tconst changeScript = new P2PKH().lock(\n\t\t\tconfig.changeAddress || config.paymentPk.toAddress().toString(),\n\t\t);\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not available until the transaction is signed\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t}\n\n\tif (config.signer) {\n\t\ttx = await signData(tx, config.signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChange,\n\t};\n};\n","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype TransactionOutput,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type { SendUtxosConfig, SendUtxosResult, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Sends utxos to the given destination\n * @param {SendUtxosConfig} config - Configuration object for sending utxos\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {Payment[]} config.payments - Array of payments with addresses and amounts\n * @param {number} [config.satsPerKb] - Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {string} [config.changeAddress] - Address to send change to. If not provided, defaults to paymentPk address\n * @returns {Promise<SendUtxosResult>} Transaction with utxo outputs\n */\nexport const sendUtxos = async (\n\tconfig: SendUtxosConfig,\n): Promise<SendUtxosResult> => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tpayments,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tchangeAddress = paymentPk.toAddress().toString(),\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\t// Outputs\n\tfor (const payment of payments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new P2PKH().lock(payment.to),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + (out.satoshis || 0),\n\t\t0,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + fee) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + fee) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to send. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChange: Utxo | undefined;\n\tif (totalSatsIn > totalSatsOut + fee) {\n\t\t// Change\n\t\tconst changeScript = new P2PKH().lock(changeAddress);\n\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t} else if (totalSatsIn < totalSatsOut + fee) {\n\t\tconsole.log(\"No change needed\");\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\ttype Destination,\n\tTokenType,\n\ttype TransferBSV20Inscription,\n\ttype TransferTokenInscription,\n  type TransferBSV21Inscription,\n\ttype TransferOrdTokensConfig,\n\ttype TransferOrdTokensResult,\n\ttype SendOrdinalsConfig,\n\ttype TokenUtxo,\n} from \"./types\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { sendOrdinals } from \"./sendOrdinals\";\n\n/**\n * Transfer tokens to a destination\n * @param {TransferOrdTokensConfig} config - Configuration object for transferring tokens\n * @param {TokenType} config.protocol - Token protocol. Must be TokenType.BSV20 or TokenType.BSV21\n * @param {string} config.tokenID - Token ID. Either the tick or id value depending on the protocol\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {TokenUtxo[]} config.inputTokens - Token utxos to spend\n * @param {Distribution[]} config.distributions - Array of destinations with addresses and amounts\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {string} config.changeAddress - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {string} config.tokenChangeAddress - Optional. Address to send token change to, if any. If not provided, defaults to ordPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @param {burn} config.burn - Optional. Set to true to burn the tokens.\n * @returns {Promise<TransferOrdTokensResult>} Transaction with token transfer outputs\n */\nexport const transferOrdTokens = async (config: TransferOrdTokensConfig): Promise<TransferOrdTokensResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tinputTokens,\n\t\tdistributions,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tchangeAddress,\n\t\ttokenChangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n    burn = false\n\t} = config;\n\n\t// calculate change amount\n\tlet changeAmt = 0n;\n\tlet totalAmtIn = 0n;\n\tlet totalAmtOut = 0n;\n\n  // Ensure these inputs are for the expected token\n\tif(!inputTokens.every(\n\t\t(token) => token.id === tokenID,\n\t)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n\tfor (const token of inputTokens) {\n\t\ttotalAmtIn += BigInt(token.amt);\n\t}\n\n\tfor (const dest of distributions) {\n\t\ttotalAmtOut += BigInt(dest.amt);\n\t}\n\n\t// check that you have enough tokens to send\n\tif (totalAmtIn < totalAmtOut) {\n\t\tthrow new Error(\"Not enough tokens to send\");\n\t}\n\n\tchangeAmt = totalAmtIn - totalAmtOut;\n\n\t// add change to distributions\n\tif (changeAmt > 0n) {\n\t\tconst changeDistribution = {\n\t\t\taddress: tokenChangeAddress || ordPk.toAddress().toString(),\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t\tdistributions.push(changeDistribution);\n\t}\n\n\t// build destination inscriptions\n\tconst destinations: Destination[] = distributions.map((dest) => {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: burn ? \"burn\" : \"transfer\",\n\t\t\tamt: dest.amt,\n\t\t}\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n\t\treturn {\n\t\t\taddress: dest.address,\n\t\t\tinscription: {\n\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\t\tcontentType: \"application/bsv-20\",\n\t\t\t},\n\t\t};\n\t});\n\n\tconst sendOrdinalsConfig: SendOrdinalsConfig = {\n\t\tpaymentUtxos: utxos,\n\t\tordinals: inputTokens,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tdestinations,\n\t\tchangeAddress: changeAddress || paymentPk.toAddress().toString(),\n\t\tsatsPerKb,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments,\n\t\tenforceUniformSend: false\n\t};\n\n\tconst { tx, spentOutpoints, payChange } = await sendOrdinals(sendOrdinalsConfig);\n\t\n\t// find the tokenChangeVout by looking for the destination with the tokenChangeAddress\n\tconst tokenChangeVout = destinations.findIndex(\n\t\t(d) => d.address === (tokenChangeAddress || ordPk.toAddress().toString())\n\t);\n\t\n\tlet tokenChange: TokenUtxo | undefined;\n\tif (tokenChangeVout !== -1) {\n\t\ttokenChange = {\n\t\t\tid: tokenID,\n\t\t\tamt: changeAmt.toString(),\n\t\t\tsatoshis: 1,\n\t\t\ttxid: tx.id(\"hex\"),\n\t\t\tvout: tokenChangeVout,\n\t\t\tscript: Buffer.from(tx.outputs[tokenChangeVout].lockingScript.toHex(), \"hex\").toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChange,\n\t\ttokenChange,\n\t}\n};","import type { CollectionItemSubTypeData, CollectionSubTypeData } from \"./types\";\n\n/**\n * Validates sub type data\n * @param {string} subType - Sub type of the ordinals token\n * @param {string} subTypeData - Sub type data of the ordinals token\n * @returns {Error | undefined} Error if validation fails, undefined if validation passes\n */\nexport const validateSubTypeData = (\n  subType: \"collection\" | \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData | CollectionSubTypeData,\n): Error | undefined => {\n  try {\n    if (subType === \"collection\") {\n      const collectionData = subTypeData as CollectionSubTypeData;\n      if (!collectionData.description) {\n        return new Error(\"Collection description is required\");\n      }\n      if (!collectionData.quantity) {\n        return new Error(\"Collection quantity is required\");\n      }\n      if (collectionData.rarityLabels) {\n        if (!Array.isArray(collectionData.rarityLabels)) {\n          return new Error(\"Rarity labels must be an array\");\n        }\n        // make sure keys and values are strings\n        if (!collectionData.rarityLabels.every((label) => {\n          return Object.values(label).every(value => typeof value === 'string');\n        })) {\n          return new Error(`Invalid rarity labels ${collectionData.rarityLabels}`);\n        }\n      }\n      if (collectionData.traits ) {\n        if (typeof collectionData.traits !== \"object\") {\n        return new Error(\"Collection traits must be an object\");\n        }\n        if (collectionData.traits && !Object.keys(collectionData.traits).every(key => typeof key === 'string' && typeof collectionData.traits[key] === 'object')) {\n          return new Error(\"Collection traits must be a valid CollectionTraits object\");\n        }\n      }\n    }\n    if (subType === \"collectionItem\") {\n      const itemData = subTypeData as CollectionItemSubTypeData;\n      if (!itemData.collectionId) {\n        return new Error(\"Collection id is required\");\n      }\n      if (!itemData.collectionId.includes(\"_\")) {\n        return new Error(\"Collection id must be a valid outpoint\");\n      }\n      if (itemData.collectionId.split(\"_\")[0].length !== 64) {\n        return new Error(\"Collection id must contain a valid txid\");\n      }\n      if (Number.isNaN(Number.parseInt(itemData.collectionId.split(\"_\")[1]))) {\n        return new Error(\"Collection id must contain a valid vout\");\n      }\n\n      if (itemData.mintNumber && typeof itemData.mintNumber !== \"number\") {\n        return new Error(\"Mint number must be a number\");\n      }\n      if (itemData.rank && typeof itemData.rank !== \"number\") {\n        return new Error(\"Rank must be a number\");\n      }\n      if (itemData.rarityLabel && typeof itemData.rarityLabel !== \"string\") {\n        return new Error(\"Rarity label must be a string\");\n      }\n      if (itemData.traits && typeof itemData.traits !== \"object\") {\n        return new Error(\"Traits must be an object\");\n      }\n      if (itemData.attachments && !Array.isArray(itemData.attachments)) {\n        return new Error(\"Attachments must be an array\");\n      }\n    }\n    return undefined;\n  } catch (error) {\n    return new Error(\"Invalid JSON data\");\n  }\n};","import {\n\tBigNumber,\n\tLockingScript,\n\tOP,\n\tP2PKH,\n\tPrivateKey,\n\tScript,\n\tTransaction,\n\tTransactionSignature,\n\tUnlockingScript,\n\tUtils,\n} from \"@bsv/sdk\";\n\nexport const oLockPrefix =\n\t\"2097dfd76851bf465e8f715593b217714858bbe9570ff3bd5e33840a34e20ff0262102ba79df5f8ae7604a9830f03c7933028186aede0675a16f025dc4f8be8eec0382201008ce7480da41702918d1ec8e6849ba32b4d65b1e40dc669c31a1e6306b266c0000\";\nexport const oLockSuffix =\n\t\"615179547a75537a537a537a0079537a75527a527a7575615579008763567901c161517957795779210ac407f0e4bd44bfc207355a778b046225a7068fc59ee7eda43ad905aadbffc800206c266b30e6a1319c66dc401e5bd6b432ba49688eecd118297041da8074ce081059795679615679aa0079610079517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01007e81517a75615779567956795679567961537956795479577995939521414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff00517951796151795179970079009f63007952799367007968517a75517a75517a7561527a75517a517951795296a0630079527994527a75517a6853798277527982775379012080517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01205279947f7754537993527993013051797e527e54797e58797e527e53797e52797e57797e0079517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a756100795779ac517a75517a75517a75517a75517a75517a75517a75517a75517a7561517a75517a756169587951797e58797eaa577961007982775179517958947f7551790128947f77517a75517a75618777777777777777777767557951876351795779a9876957795779ac777777777777777767006868\";\n\n/**\n * OrdLock class implementing ScriptTemplate.\n *\n * This class provides methods for interacting with OrdinalLock contract \n */\nexport default class OrdLock {\n\t/**\n\t * Creates a 1Sat Ordinal Lock script\n\t *\n\t * @param {string} ordAddress - An address which can cancel listing.\n\t * @param {string} payAddress - Address which is paid on purchase\n\t * @param {number} price - Listing price in satoshis\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\tlock(\n\t\tordAddress: string,\n\t\tpayAddress: string,\n\t\tprice: number,\n\t): Script {\n\t\tconst cancelPkh = Utils.fromBase58Check(ordAddress).data as number[];\n\t\tconst payPkh = Utils.fromBase58Check(payAddress).data as number[];\n\n\t\treturn Script.fromHex(oLockPrefix)\n\t\t\t.writeBin(cancelPkh)\n\t\t\t.writeBin(OrdLock.buildOutput(price, new P2PKH().lock(payPkh).toBinary()))\n\t\t\t.writeScript(Script.fromHex(oLockSuffix))\n\t}\n\n\tcancelListing(\n\t\tprivateKey: PrivateKey,\n\t\tsignOutputs: 'all' | 'none' | 'single' = 'all',\n\t\tanyoneCanPay: boolean = false,\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: () => Promise<number>\n\t} {\n\t\tconst p2pkh = new P2PKH().unlock(privateKey, signOutputs, anyoneCanPay, sourceSatoshis, lockingScript)\n\t\treturn {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await p2pkh.sign(tx, inputIndex)).writeOpCode(OP.OP_1)\n\t\t\t},\n\t\t\testimateLength: async () => {\n\t\t\t\treturn 107\n\t\t\t}\n\t\t}\n\t}\n\n\tpurchaseListing(\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>\n\t} {\n\t\tconst purchase = {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\tif (tx.outputs.length < 2) {\n\t\t\t\t\tthrow new Error(\"Malformed transaction\")\n\t\t\t\t}\n\t\t\t\tconst script = new UnlockingScript()\n\t\t\t\t\t.writeBin(OrdLock.buildOutput(\n\t\t\t\t\t\ttx.outputs[0].satoshis || 0,\n\t\t\t\t\t\ttx.outputs[0].lockingScript.toBinary()\n\t\t\t\t\t))\n\t\t\t\tif(tx.outputs.length > 2) {\n\t\t\t\t\tconst writer = new Utils.Writer()\n\t\t\t\t\tfor(const output of tx.outputs.slice(2)) {\n\t\t\t\t\t\twriter.write(OrdLock.buildOutput(output.satoshis || 0, output.lockingScript.toBinary()))\n\t\t\t\t\t}\n\t\t\t\t\tscript.writeBin(writer.toArray())\n\t\t\t\t} else {\n\t\t\t\t\tscript.writeOpCode(OP.OP_0)\n\t\t\t\t}\n\n\t\t\t\tconst input = tx.inputs[inputIndex]\n\t\t\t\tconst preimage = TransactionSignature.format({\n\t\t\t\t\tsourceTXID: input.sourceTXID || input.sourceTransaction!.id('hex'),\n\t\t\t\t\tsourceOutputIndex: input.sourceOutputIndex,\n\t\t\t\t\tsourceSatoshis: sourceSatoshis || \n\t\t\t\t\tinput.sourceTransaction!.outputs[input.sourceOutputIndex].satoshis!,\n\t\t\t\t\ttransactionVersion: tx.version,\n\t\t\t\t\totherInputs: [],\n\t\t\t\t\tinputIndex,\n\t\t\t\t\toutputs: tx.outputs,\n\t\t\t\t\tinputSequence: input.sequence,\n\t\t\t\t\tsubscript: lockingScript || input.sourceTransaction!.outputs[input.sourceOutputIndex].lockingScript,\n\t\t\t\t\tlockTime: tx.lockTime,\n\t\t\t\t\tscope: TransactionSignature.SIGHASH_ALL |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_ANYONECANPAY |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_FORKID\n\t\t\t\t  });\n\n\t\t\t\treturn script.writeBin(preimage).writeOpCode(OP.OP_0)\n\t\t\t},\n\t\t\testimateLength: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await purchase.sign(tx, inputIndex)).toBinary().length\n\t\t\t}\n\t\t}\n\t\treturn purchase\n\t}\n\n\tstatic buildOutput(satoshis: number, script: number[]): number[] {\n\t\tconst writer = new Utils.Writer()\n\t\twriter.writeUInt64LEBn(new BigNumber(satoshis))\n\t\twriter.writeVarIntNum(script.length)\n\t\twriter.write(script)\n\t\treturn writer.toArray()\n\t}\n}\n","// TODO: Create listing for NFT and FT\n\nimport { P2PKH, SatoshisPerKilobyte, Transaction } from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type { CraeteOrdTokenListingsConfig, CreateOrdListingsConfig, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport OrdLock from \"./templates/ordLock\";\n\n\nexport const createOrdListings = async (config: CreateOrdListingsConfig) => {\n\tconst {\n\t\tutxos,\n\t\tlistings,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t} = config;\n\n  const modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n  \n  \t// Inputs\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\t}\n\n  \t// Warn if creating many inscriptions at once\n\tif (listings.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n  // Outputs\n  // Add listing outputs\n  for (const listing of listings) {\n    tx.addOutput({\n      satoshis: 1,\n      lockingScript: new OrdLock().lock(listing.payAddress, listing.ordAddress, listing.price)\n    })\n  }\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Calculate total input and output amounts\n\tconst totalInput = utxos.reduce(\n\t\t(sum, utxo) => sum + BigInt(utxo.satoshis),\n\t\t0n,\n\t);\n\tconst totalOutput = tx.outputs.reduce(\n\t\t(sum, output) => sum + BigInt(output.satoshis || 0),\n\t\t0n,\n\t);\n\n\t// Estimate fee\n\tconst estimatedFee = await modelOrFee.computeFee(tx);\n\n\t// Check if change is needed\n\tlet payChange: Utxo | undefined;\n\tif (totalInput > totalOutput + BigInt(estimatedFee)) {\n\t\tconst changeScript = new P2PKH().lock(\n\t\t\tchangeAddress || paymentPk.toAddress().toString(),\n\t\t);\n\t\tconst changeOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\t// Add change output\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet,\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\n    \n\t\ttx.addOutput(changeOutput);\n\t}\n\n  \t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n  return {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n\n}\n\nexport const createOrdTokenListings = async (config: CraeteOrdTokenListingsConfig) => {\n  \n}\n\n// const listOrdinal = useCallback(\n//   async (\n//     paymentUtxo: Utxo,\n//     ordinal: OrdUtxo,\n//     paymentPk: PrivateKey,\n//     changeAddress: string,\n//     ordPk: PrivateKey,\n//     ordAddress: string,\n//     payoutAddress: string,\n//     satoshisPayout: number\n//   ): Promise<PendingTransaction> => {\n//     const tx = new Transaction(1, 0);\n//     const t = ordinal.txid;\n//     const txBuf = Buffer.from(t, \"hex\");\n//     const ordIn = new TxIn(\n//       txBuf,\n//       ordinal.vout,\n//       Script.from_asm_string(\"\")\n//     );\n//     tx.add_input(ordIn);\n//     const spentOutpoints = [`${ordinal.txid}_${ordinal.vout}`]\n\n//     // Inputs\n//     let utxoIn = new TxIn(\n//       Buffer.from(paymentUtxo.txid, \"hex\"),\n//       paymentUtxo.vout,\n//       Script.from_asm_string(\"\")\n//     );\n\n//     tx.add_input(utxoIn);\n//     spentOutpoints.push(`${paymentUtxo.txid}_${paymentUtxo.vout}`)\n\n//     const payoutDestinationAddress =\n//       P2PKHAddress.from_string(payoutAddress);\n//     const payOutput = new TxOut(\n//       BigInt(satoshisPayout),\n//       payoutDestinationAddress.get_locking_script()\n//     );\n\n//     const destinationAddress = P2PKHAddress.from_string(ordAddress);\n//     const addressHex = destinationAddress\n//       .get_locking_script()\n//       .to_asm_string()\n//       .split(\" \")[2];\n\n//     const ordLockScript = `${Script.from_hex(\n//       oLockPrefix\n//     ).to_asm_string()} ${addressHex} ${payOutput.to_hex()} ${Script.from_hex(\n//       oLockSuffix\n//     ).to_asm_string()}`;\n\n//     const satOut = new TxOut(\n//       BigInt(1),\n//       Script.from_asm_string(ordLockScript)\n//     );\n//     tx.add_output(satOut);\n\n//     const changeOut = createChangeOutput(\n//       tx,\n//       changeAddress,\n//       paymentUtxo.satoshis\n//     );\n//     tx.add_output(changeOut);\n\n//     // if (!ordinal.script) {\n//     // \tconst ordRawTx = await getRawTxById(ordinal.txid);\n//     // \tconst tx = Transaction.from_hex(ordRawTx);\n//     // \tconsole.log({ num: tx.get_noutputs() });\n//     // \tconst out = tx.get_output(ordinal.vout);\n//     // \tordinal.satoshis = Number(out?.get_satoshis());\n\n//     // \tconst script = out?.get_script_pub_key();\n//     // \tif (script) {\n//     // \t\tordinal.script = script.to_asm_string();\n//     // \t}\n//     // }\n\n//     // sign ordinal\n//     const sig = tx.sign(\n//       ordPk,\n//       SigHash.ALL | SigHash.FORKID,\n//       0,\n//       Script.from_bytes(Buffer.from(ordinal.script, \"base64\")),\n//       BigInt(ordinal.satoshis)\n//     );\n\n//     ordIn.set_unlocking_script(\n//       Script.from_asm_string(\n//         `${sig.to_hex()} ${ordPk.to_public_key().to_hex()}`\n//       )\n//     );\n\n//     tx.set_input(0, ordIn);\n\n//     utxoIn = signPayment(tx, paymentPk, 1, paymentUtxo, utxoIn);\n//     tx.set_input(1, utxoIn);\n\n//     return {\n//       rawTx: tx.to_hex(),\n//       size: tx.get_size(),\n//       fee: paymentUtxo.satoshis - Number(tx.satoshis_out()),\n//       numInputs: tx.get_ninputs(),\n//       numOutputs: tx.get_noutputs(),\n//       txid: tx.get_id_hex(),\n//       spentOutpoints,\n//       marketFee: 0,\n//     };\n//   },\n//   []\n// );\n","// TODO: Cancel listing for NFT and FT\n\nimport { P2PKH, SatoshisPerKilobyte, Script, Transaction } from \"@bsv/sdk\";\nimport type { CancelOrdListingsConfig, Utxo } from \"./types\"\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\n\nexport const cancelOrdListings = async (config: CancelOrdListingsConfig) => {\nconst { utxos, listingUtxos, ordPk, paymentPk, changeAddress, satsPerKb = DEFAULT_SAT_PER_KB } = config\n\nconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\nconst tx = new Transaction();\n\n  // Inputs\n  // Add the locked ordinals we're cancelling\nfor (const listingUtxo of listingUtxos) {\n\n  tx.addInput({\n    unlockingScript: Script.fromHex(Buffer.from(listingUtxo.script, 'base64').toString('hex')),\n    unlockingScriptTemplate: new OrdLock().cancelListing(ordPk),\n    sourceOutputIndex: listingUtxo.vout,\n    sequence: 0xffffffff,\n  })\n}\n\n  for (const utxo of utxos) {\n    const input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n    tx.addInput(input);\n  }\n\n  // Warn if creating many inscriptions at once\n  if (listingUtxos.length > 100) {\n    console.warn(\n      \"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n    );\n  }\n\n  // Outputs\n  // Add cancel outputs returning listed ordinals\n  for (const _ of listingUtxos) {\n    tx.addOutput({\n      satoshis: 1,\n      lockingScript: new P2PKH().lock(ordPk.toAddress().toString()),\n    });\n  }\n\n\n\t// Calculate total input and output amounts\n\tconst totalInput = utxos.reduce(\n\t\t(sum, utxo) => sum + BigInt(utxo.satoshis),\n\t\t0n,\n\t);\n\tconst totalOutput = tx.outputs.reduce(\n\t\t(sum, output) => sum + BigInt(output.satoshis || 0),\n\t\t0n,\n\t);\n\n\t// Estimate fee\n\tconst estimatedFee = await modelOrFee.computeFee(tx);\n\n\t// Check if change is needed\n\tlet payChange: Utxo | undefined;\n\tif (totalInput > totalOutput + BigInt(estimatedFee)) {\n\t\tconst changeScript = new P2PKH().lock(\n\t\t\tchangeAddress || paymentPk.toAddress().toString(),\n\t\t);\n\t\tconst changeOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\t// Add change output\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet,\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\n    \n\t\ttx.addOutput(changeOutput);\n\t}\n\n  \t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n  return {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n}\n\n// const cancelTx = new Transaction(1, 0);\n\n// if (listing.id || listing.tick) {\n//   cancelling.value = false;\n//   throw new Error(\"BSV20 listing!\");\n// }\n\n// const cancelInput = new TxIn(\n//   Buffer.from(listing.txid, \"hex\"),\n//   listing.vout,\n//   Script.from_asm_string(\"\")\n// );\n// cancelTx.add_input(cancelInput);\n// const ordinalsAddress = P2PKHAddress.from_string(ordAddress.value);\n\n// const satOutScript = ordinalsAddress.get_locking_script();\n// const transferOut = new TxOut(BigInt(1), satOutScript);\n\n// cancelTx.add_output(transferOut);\n\n// const changeAddress = P2PKHAddress.from_string(fundingAddress.value);\n\n// // dummy outputs - change\n// const dummyChangeOutput = new TxOut(\n//   BigInt(0),\n//   changeAddress.get_locking_script()\n// );\n// cancelTx.add_output(dummyChangeOutput);\n\n// // Calculate the network fee\n// // account for funding input and market output (not added to tx yet)\n// const paymentUtxos: Utxo[] = [];\n// let satsCollected = 0;\n// // initialize fee and satsNeeded (updated with each added payment utxo)\n// let fee = calculateFee(1, cancelTx);\n// let satsNeeded = fee;\n// // collect the required utxos\n// const sortedFundingUtxos = utxos.value.sort((a, b) =>\n//   a.satoshis > b.satoshis ? -1 : 1\n// );\n// for (const utxo of sortedFundingUtxos) {\n//   if (satsCollected < satsNeeded) {\n//     satsCollected += utxo.satoshis;\n//     paymentUtxos.push(utxo);\n\n//     // if we had to add additional\n//     fee = calculateFee(paymentUtxos.length, cancelTx);\n//     satsNeeded = fee + BigInt(indexerBuyFee);\n//   }\n// }\n\n// // add payment utxos to the tx\n// for (const u of paymentUtxos) {\n//   const inx = new TxIn(\n//     Buffer.from(u.txid, \"hex\"),\n//     u.vout,\n//     Script.from_asm_string(\"\")\n//   );\n//   inx.set_satoshis(BigInt(u.satoshis));\n//   cancelTx.add_input(inx);\n// }\n\n// // Replace dummy change output\n// const changeAmt = BigInt(satsCollected) - satsNeeded;\n\n// const changeOutput = new TxOut(\n//   BigInt(changeAmt),\n//   changeAddress.get_locking_script()\n// );\n\n// cancelTx.set_output(1, changeOutput);\n\n// // sign the cancel input\n// const sig = cancelTx.sign(\n//   PrivateKey.from_wif(ordPk.value),\n//   SigHash.InputOutputs,\n//   0,\n//   Script.from_bytes(Buffer.from(listing.script, \"base64\")),\n//   BigInt(1)\n// );\n\n// cancelInput.set_unlocking_script(\n//   Script.from_asm_string(\n//     `${sig.to_hex()} ${PrivateKey.from_wif(ordPk.value)\n//       .to_public_key()\n//       .to_hex()} OP_1`\n//   )\n// );\n\n// cancelTx.set_input(0, cancelInput);\n\n// // sign the funding inputs\n// let idx = 1;\n// for (const u of paymentUtxos) {\n//   const inx = cancelTx.get_input(idx);\n\n//   if (!inx) {\n//     cancelling.value = false;\n//     return;\n//   }\n\n//   const sig = cancelTx.sign(\n//     PrivateKey.from_wif(payPk.value),\n//     SigHash.InputOutputs,\n//     idx,\n//     Script.from_asm_string(u.script),\n//     BigInt(u.satoshis)\n//   );\n\n//   inx.set_unlocking_script(\n//     Script.from_asm_string(\n//       `${sig.to_hex()} ${PrivateKey.from_wif(payPk.value)\n//         .to_public_key()\n//         .to_hex()}`\n//     )\n//   );\n\n//   cancelTx.set_input(idx, inx);\n//   idx++;\n// }","// TODO: Purchase listing\n\nimport { P2PKH, SatoshisPerKilobyte, Script, Transaction } from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\"\nimport type { PurchaseOrdListingConfig, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport OrdLock from \"./templates/ordLock\";\n\nexport const purchaseOrdListings = async (config: PurchaseOrdListingConfig) => {\nconst { utxos, \n  paymentPk, \n  listingUtxo, \n  ordAddress,\n  changeAddress,\n  additionalPayments = [],\n  satsPerKb = DEFAULT_SAT_PER_KB } = config;\n\n  const modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n  \n  // Inputs\n  // Add the locked ordinal we're purchasing\n  tx.addInput({\n    unlockingScript: Script.fromHex(Buffer.from(listingUtxo.script, 'base64').toString('hex')),\n    unlockingScriptTemplate: new OrdLock().purchaseListing(),\n    sourceOutputIndex: listingUtxo.vout,\n    sequence: 0xffffffff,\n  });\n\t\n  // Add payments\n  for (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\t}\n\n  // Outputs\n  // Add the purchased output\n  tx.addOutput({\n    satoshis: 1,\n    lockingScript: new P2PKH().lock(ordAddress),\n  });\n\n  \t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n  \n\n\t// Calculate total input and output amounts\n\tconst totalInput = utxos.reduce(\n\t\t(sum, utxo) => sum + BigInt(utxo.satoshis),\n\t\t0n,\n\t);\n\tconst totalOutput = tx.outputs.reduce(\n\t\t(sum, output) => sum + BigInt(output.satoshis || 0),\n\t\t0n,\n\t);\n\n\t// Estimate fee\n\tconst estimatedFee = await modelOrFee.computeFee(tx);\n\n  // Check if change is needed\n\tlet payChange: Utxo | undefined;\n\tif (totalInput > totalOutput + BigInt(estimatedFee)) {\n\t\tconst changeScript = new P2PKH().lock(\n\t\t\tchangeAddress || paymentPk.toAddress().toString(),\n\t\t);\n\t\tconst changeOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\t// Add change output\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet,\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\n    \n\t\ttx.addOutput(changeOutput);\n\t}\n\n  \t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n  // Sign the transaction\n\tawait tx.sign();\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n  return {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n\n}\n  // create a transaction that will purchase the artifact, once funded\n  // const purchaseTx = new Transaction(1, 0);\n\n  // const listingInput = new TxIn(\n  //   Buffer.from(listing.txid, \"hex\"),\n  //   listing.vout,\n  //   Script.from_asm_string(\"\")\n  // );\n  // purchaseTx.add_input(listingInput);\n  // const spentOutpoints = [listing.outpoint];\n\n  // // output 0 - purchasing the ordinal\n  // const buyerOutput = new TxOut(\n  //   BigInt(1),\n  //   P2PKHAddress.from_string(ordAddress.value!).get_locking_script()\n  // );\n  // purchaseTx.add_output(buyerOutput);\n\n  // const ordPayout = (listing as OrdUtxo).data?.list?.payout;\n  // const listingPayout = (listing as Listing).payout;\n  // const listingScript = (listing as Listing).script;\n  // if (!listing.script) {\n  //   const results = await getOutpoints([listing.outpoint], true);\n  //   if (results?.[0]) {\n  //     listing.script = results[0].script;\n  //   }\n  // }\n  // const ordScript = (listing as OrdUtxo).script;\n\n  // // output 1\n  // const payOutput = TxOut.from_hex(\n  //   Buffer.from(listingPayout || ordPayout!, \"base64\").toString(\n  //     \"hex\"\n  //   )\n  // );\n  // purchaseTx.add_output(payOutput);\n\n  // const changeAddress = P2PKHAddress.from_string(\n  //   fundingAddress.value!\n  // );\n  // // const ordinalsAddress = P2PKHAddress.from_string(ordAddress.value!);\n\n  // // const isBsv20Listing = (listing as Listing).tick !== undefined;\n\n  // // dummy outputs - change\n  // const dummyChangeOutput = new TxOut(\n  //   BigInt(0),\n  //   changeAddress.get_locking_script()\n  // );\n  // purchaseTx.add_output(dummyChangeOutput);\n\n  // // output 3 - marketFee\n  // const dummyMarketFeeOutput = new TxOut(\n  //   BigInt(0),\n  //   P2PKHAddress.from_string(marketAddress).get_locking_script()\n  // );\n  // purchaseTx.add_output(dummyMarketFeeOutput);\n\n  // // this has to be \"InputOutput\" and then second time is InputOutputs\n  // let preimage = purchaseTx.sighash_preimage(\n  //   SigHash.InputOutput,\n  //   0,\n  //   Script.from_bytes(\n  //     Buffer.from(listingScript || ordScript, \"base64\")\n  //   ),\n  //   BigInt(1) //TODO: use amount from listing\n  // );\n  // listingInput.set_unlocking_script(\n  //   Script.from_asm_string(\n  //     `${purchaseTx.get_output(0)!.to_hex()} ${purchaseTx\n  //       .get_output(2)!\n  //       .to_hex()}${purchaseTx\n  //         .get_output(3)!\n  //         .to_hex()} ${Buffer.from(preimage).toString(\n  //           \"hex\"\n  //         )} OP_0`\n  //   )\n  // );\n  // purchaseTx.set_input(0, listingInput);\n  // // calculate market fee\n  // let marketFee = Number(price) * marketRate;\n  // if (marketFee === 0) {\n  //   marketFee = minimumMarketFee;\n  // }\n  // const marketFeeOutput = new TxOut(\n  //   BigInt(Math.ceil(marketFee)),\n  //   P2PKHAddress.from_string(marketAddress).get_locking_script()\n  // );\n  // purchaseTx.set_output(3, marketFeeOutput);\n\n  // // Calculate the network fee\n  // // account for funding input and market output (not added to tx yet)\n  // const paymentUtxos: Utxo[] = [];\n  // let satsCollected = 0n;\n  // // initialize fee and satsNeeded (updated with each added payment utxo)\n  // let fee = calculateFee(1, purchaseTx);\n  // let satsNeeded = BigInt(fee) + price + BigInt(marketFee);\n  // // collect the required utxos\n  // const sortedFundingUtxos = utxos.value!.sort((a, b) =>\n  //   a.satoshis > b.satoshis ? -1 : 1\n  // );\n  // for (const utxo of sortedFundingUtxos) {\n  //   if (satsCollected < satsNeeded) {\n  //     satsCollected += BigInt(utxo.satoshis);\n  //     paymentUtxos.push(utxo);\n\n  //     // if we had to add additional\n  //     fee = calculateFee(paymentUtxos.length, purchaseTx);\n  //     satsNeeded = BigInt(fee) + price + BigInt(marketFee);\n  //   } else {\n  //     break;\n  //   }\n  // }\n\n  // // if you still dont have enough\n  // if (satsCollected < satsNeeded) {\n  //   toast.error(\"Insufficient funds\", toastErrorProps);\n  //   return;\n  // }\n\n  // // Replace dummy change output\n  // const changeAmt = satsCollected - satsNeeded;\n\n  // const changeOutput = new TxOut(\n  //   changeAmt,\n  //   changeAddress.get_locking_script()\n  // );\n\n  // purchaseTx.set_output(2, changeOutput);\n\n  // preimage = purchaseTx.sighash_preimage(\n  //   SigHash.InputOutputs,\n  //   0,\n  //   Script.from_bytes(\n  //     Buffer.from(listingScript || ordScript, \"base64\")\n  //   ),\n  //   BigInt(1)\n  // );\n\n  // listingInput.set_unlocking_script(\n  //   Script.from_asm_string(\n  //     `${purchaseTx.get_output(0)!.to_hex()} ${purchaseTx\n  //       .get_output(2)!\n  //       .to_hex()}${purchaseTx\n  //         .get_output(3)!\n  //         .to_hex()} ${Buffer.from(preimage).toString(\n  //           \"hex\"\n  //         )} OP_0`\n  //   )\n  // );\n  // purchaseTx.set_input(0, listingInput);\n\n  // // create and sign inputs (payment)\n  // const paymentPk = PrivateKey.from_wif(payPk.value!);\n\n  // paymentUtxos.forEach((utxo, idx) => {\n  //   const fundingInput = new TxIn(\n  //     Buffer.from(utxo.txid, \"hex\"),\n  //     utxo.vout,\n  //     Script.from_asm_string(utxo.script)\n  //   );\n  //   purchaseTx.add_input(fundingInput);\n  //   spentOutpoints.push(`${utxo.txid}_${utxo.vout}`);\n    \n  //   const sig = purchaseTx.sign(\n  //     paymentPk,\n  //     SigHash.InputOutputs,\n  //     1 + idx,\n  //     Script.from_asm_string(utxo.script),\n  //     BigInt(utxo.satoshis)\n  //   );\n\n  //   fundingInput.set_unlocking_script(\n  //     Script.from_asm_string(\n  //       `${sig.to_hex()} ${paymentPk.to_public_key().to_hex()}`\n  //     )\n  //   );\n\n  //   purchaseTx.set_input(1 + idx, fundingInput);\n  // });"],"names":["TokenType","RoytaltyType","toHex","utf8Str","Buffer","from","toString","DEFAULT_SAT_PER_KB","API_HOST","OrdP2PKH","_P2PKH","apply","this","arguments","prototype","lock","address","b64File","mediaType","metaData","ordAsm","undefined","ordHex","fileHex","trim","Error","fileMediaType","inscriptionAsm","P2PKH","toASM","app","type","mapCmdValue","_i","_Object$entries","Object","entries","length","_Object$entries$_i","key","value","LockingScript","fromASM","fromBase58Check","Utils","inputFromB64Utxo","utxo","unlockScriptTemplate","input","fromUtxo","_extends","script","sourceTXID","txid","fetchPayUtxos","scriptEncoding","payUrl","console","log","Promise","resolve","fetch","then","payRes","ok","json","payUtxos","filter","u","satoshis","pubKeyHash","p2pkhScript","data","map","vout","toBinary","e","reject","fetchNftUtxos","collectionId","limit","offset","url","b64Query","JSON","stringify","subTypeData","res","nftUtxos","outpoints","_u$data","list","method","headers","body","concat","nftRes","nfts","Script","fromHex","nftUtxo","origin","outpoint","fetchTokenUtxos","protocol","tokenId","BSV20","tokenUtxos","amt","id","signData","tx","signer","_exit","_temp2","_result","idKey","keyHost","_sigma$sign","Sigma","sign","signedTx","_temp","authToken","sigma","remoteSign","_ref","_catch","stringifyMetaData","result","Array","isArray","String","createOrdinals","config","_step","utxos","destinations","paymentPk","changeAddress","_config$satsPerKb","satsPerKb","_config$additionalPay","additionalPayments","modelOrFee","SatoshisPerKilobyte","Transaction","_iterator","_createForOfIteratorHelperLoose","done","unlock","addInput","warn","_step2","_iterator2","destination","inscription","_Object$keys","keys","addOutput","lockingScript","dataB64","contentType","_step3","_iterator3","p","amount","to","totalInput","reduce","sum","BigInt","totalOutput","outputs","output","computeFee","estimatedFee","fee","payChange","spentOutpoints","changeScript","toAddress","changeOutput","change","_signData","_settle","pact","state","s","_Pact","o","bind","v","onFulfilled","_this","onRejected","_isSettledPact","thenable","sendOrdinals","_temp4","_interrupt","totalSatsIn","totalSatsOut","changeOut","enforceUniformSend","ordinals","ordUtxo","ordPk","push","_destination$inscript","_destination$inscript2","total","out","_temp3","array","i","_cycle","check","_forOf","paymentUtxos","_modelOrFee$computeFe","observer","sendUtxos","payments","_config$changeAddress","payment","sendTxOut","transferOrdTokens","tokenID","inputTokens","distributions","tokenChangeAddress","_config$burn","burn","changeAmt","totalAmtIn","totalAmtOut","every","token","changeDistribution","dest","transferInscription","op","tick","BSV21","sendOrdinalsConfig","tokenChange","tokenChangeVout","findIndex","d","validateSubTypeData","subType","collectionData","description","quantity","rarityLabels","label","values","traits","itemData","includes","split","Number","isNaN","parseInt","mintNumber","rank","rarityLabel","attachments","error","OrdLock","_proto","ordAddress","payAddress","price","cancelPkh","payPkh","writeBin","buildOutput","writeScript","cancelListing","privateKey","signOutputs","anyoneCanPay","sourceSatoshis","p2pkh","inputIndex","_p2pkh$sign","writeOpCode","OP","OP_1","estimateLength","purchaseListing","purchase","UnlockingScript","writer","Writer","slice","write","toArray","OP_0","inputs","preimage","TransactionSignature","format","sourceTransaction","sourceOutputIndex","transactionVersion","version","otherInputs","inputSequence","sequence","subscript","lockTime","scope","SIGHASH_ALL","SIGHASH_ANYONECANPAY","SIGHASH_FORKID","_purchase$sign","writeUInt64LEBn","BigNumber","writeVarIntNum","createOrdListings","listings","listing","cancelOrdListings","listingUtxos","listingUtxo","unlockingScript","unlockingScriptTemplate","purchaseOrdListings"],"mappings":"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"}