{"version":3,"file":"index.module.js","sources":["../src/utils/strings.ts","../src/types.ts","../src/constants.ts","../src/templates/ordP2pkh.ts","../src/utils/utxo.ts","../src/signData.ts","../src/createOrdinals.ts","../src/sendOrdinals.ts","../src/sendUtxos.ts","../src/transferOrdinals.ts"],"sourcesContent":["/**\n * Converts a string to its hexadecimal representation\n *\n * @param {string} utf8Str - The string to convert\n * @returns {string} The hexadecimal representation of the input string\n */\nconst toHex = (utf8Str: string): string => {\n  return Buffer.from(utf8Str).toString(\"hex\");\n};\n\nexport { toHex };\n","import type { PrivateKey, Transaction } from \"@bsv/sdk\";\nimport type { AuthToken } from \"sigma-protocol\";\n\n// biome-ignore lint/complexity/noBannedTypes: Reserved for future use\ntype Signer = {};\n\nexport interface LocalSigner extends Signer {\n\tidKey: PrivateKey;\n}\n\nexport interface RemoteSigner extends Signer {\n\tkeyHost: string;\n\tauthToken?: AuthToken;\n}\n\nexport type Destination = {\n\taddress: string;\n\tinscription?: Inscription;\n};\n\n/**\n * @typedef {Object} Distribution\n * @property {string} address - Destination address. Must be a Ordinals address (BSV address for recieving 1Sat ordinals tokens).\n * @property {string} amt - Number of tokens as a string, considering decimals. Not display format. Ex. 100000000 for 1 token with 8 decimal places.\n */\nexport type Distribution = {\n\taddress: string;\n\tamt: string;\n};\n\n/**\n * @typedef {Object} Utxo\n * @property {number} satoshis - Amount in satoshis\n * @property {string} txid - Transaction id\n * @property {number} vout - Output index\n * @property {string} script - Base64 encoded locking script\n */\nexport type Utxo = {\n\tsatoshis: number;\n\ttxid: string;\n\tvout: number;\n\tscript: string;\n};\n\n/**\n * @typedef {Object} NftUtxo\n * @property {string} collectionId - Optional. Collection id of the NFT\n * @property {string} contentType - Media type of the NFT\n * @property {string} creatorBapId - Optional. Creator BAP id of the NFT\n * @property {string} origin - Origin address of the NFT\n * @property {number} satoshis - Always 1\n */\nexport interface NftUtxo extends Utxo {\n\tcollectionId?: string;\n\tcontentType: string;\n\tcreatorBapId?: string;\n\torigin: string;\n\tsatoshis: 1;\n}\n\n/**\n * @typedef {Object} TokenUtxo\n * @property {string} amt - Number of tokens as a string\n * @property {string} id - Token id -  either tick or id depending on protocol\n * @property {string} satoshis - Always 1\n */\nexport interface TokenUtxo extends Utxo {\n\tamt: string;\n\tid: string;\n\tsatoshis: 1;\n}\n\nexport type Inscription = {\n\tdataB64: string;\n\tcontentType: string;\n};\n\nexport type ImageContentType =\n\t| \"image/png\"\n\t| \"image/jpeg\"\n\t| \"image/gif\"\n\t| \"image/svg+xml\"\n\t| \"image/webp\";\n\n/**\n * @typedef {Object} IconInscription\n * @property {string} dataB64 - Base64 encoded image data. Must be a square image.\n * @property {ImageContentType} contentType - Media type of the image\n */\nexport type IconInscription = {\n\tdataB64: string;\n\tcontentType: ImageContentType;\n};\n\nexport type MAP = {\n\tapp: string;\n\ttype: string;\n\t[prop: string]: string;\n};\n\nexport type Payment = {\n\tto: string;\n\tamount: number;\n};\n\nexport type TokenInscription = {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\" | \"mint\" | \"deploy+mint\";\n};\n\nexport interface MintTokenInscription extends TokenInscription {\n\top: \"mint\";\n}\n\nexport interface DeployMintTokenInscription extends TokenInscription {\n\top: \"deploy+mint\";\n\tsym: string;\n\ticon: string;\n}\n\nexport interface TransferTokenInscription extends TokenInscription {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\";\n}\n\nexport interface TransferBSV20Inscription extends TransferTokenInscription {\n\ttick: string;\n}\n\nexport interface TransferBSV21Inscription extends TransferTokenInscription {\n\tid: string;\n}\n\nexport enum TokenType {\n\tBSV20 = \"bsv20\",\n\tBSV21 = \"bsv21\",\n}\n\n\nexport type CreateOrdinalsResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type CreateOrdinalsConfig = {\n\tutxos: Utxo[];\n\tdestinations: Destination[];\n\tpaymentPk: PrivateKey;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: MAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n};\n\nexport type SendOrdinalsResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type SendOrdinalsConfig = {\n\tpaymentUtxos: Utxo[];\n\tordinals: Utxo[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tdestinations: Destination[];\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: MAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n\tenforceUniformSend?: boolean;\n}\n\nexport type DeployBsv21TokenResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type DeployBsv21TokenConfig = {\n\tsymbol: string;\n\ticon: string | IconInscription;\n\tutxos: Utxo[];\n\tinitialDistribution: Distribution;\n\tpaymentPk: PrivateKey;\n\tdestinationAddress: string;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[];\n};\n\nexport type SendUtxosResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type SendUtxosConfig = {\n\tutxos: Utxo[];\n\tpaymentPk: PrivateKey;\n\tpayments: Payment[];\n\tsatsPerKb?: number;\n\tchangeAddress?: string;\n};\n\nexport interface TransferOrdTokensResult extends SendOrdinalsResult {\n\ttokenChange?: TokenUtxo;\n}\n\nexport type TransferOrdTokensConfig = {\n\tprotocol: TokenType;\n\ttokenID: string;\n\tutxos: Utxo[];\n\tinputTokens: TokenUtxo[];\n\tdistributions: Distribution[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tchangeAddress?: string;\n\ttokenChangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: MAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n}","export const MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\nexport const DEFAULT_SAT_PER_KB = 10;\nexport const API_HOST = \"https://ordinals.gorillapool.io/api\";","import {\n\tLockingScript,\n\tP2PKH,\n\ttype Script,\n} from \"@bsv/sdk\";\nimport type { MAP } from \"../types\";\nimport { toHex } from \"../utils/strings\";\nimport { MAP_PREFIX } from \"../constants\";\n\n/**\n * OrdP2PKH (1Sat Ordinal + Pay To Public Key Hash) class implementing ScriptTemplate.\n *\n * This class provides methods to create an Ordinal with Pay To Public Key Hash locking and unlocking scripts. \n * It extends the standard P2PKH script template and provides a custom lock method.\n */\nexport default class OrdP2PKH extends P2PKH {\n\t/**\n\t * Creates a 1Sat Ordinal + P2PKH locking script for a given address string\n\t *\n\t * @param {string} address - An destination address for the Ordinal.\n\t * @param {string} [b64File] - Base64 encoded file data.\n\t * @param {string} [mediaType] - Media type of the file.\n\t * @param {MAP} [metaData] - (optional) MAP Metadata to be included in OP_RETURN.\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\t// unlock method inherits from p2pkh\n\tlock(\n\t\taddress: string,\n\t\tb64File?: string | undefined,\n\t\tmediaType?: string | undefined,\n\t\tmetaData?: MAP | undefined,\n\t): Script {\n\t\tlet ordAsm = \"\";\n\t\t// This can be omitted for reinscriptions that just update metadata\n\t\tif (b64File !== undefined && mediaType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(b64File, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(mediaType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`;\n\t\t}\n\n\t\t// Create ordinal output and inscription in a single output\n\t\tconst lockingScript = new P2PKH().lock(address);\n\t\tlet inscriptionAsm = `${ordAsm ? `${ordAsm} ` : \"\"}${lockingScript.toASM()}`;\n\n\t\t// MAP.app and MAP.type keys are required\n\t\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t\t}\n\n\t\tif (metaData?.app && metaData?.type) {\n\t\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\t\tconst mapCmdValue = toHex(\"SET\");\n\t\t\tinscriptionAsm = `${inscriptionAsm} OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\t\tif (key !== \"cmd\") {\n\t\t\t\t\tinscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\n\t\t\t\t\t\tvalue as string,\n\t\t\t\t\t)}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn LockingScript.fromASM(inscriptionAsm);\n\t}\n}\n","import {\n\ttype Transaction,\n\ttype UnlockingScript,\n\tfromUtxo,\n\ttype TransactionInput,\n\tUtils,\n\tP2PKH,\n} from \"@bsv/sdk\";\nimport { type NftUtxo, TokenType, type TokenUtxo, type Utxo } from \"../types\";\nimport { API_HOST } from \"../constants\";\n\nconst { fromBase58Check } = Utils;\n\n/**\n * Converts a Utxo object with a base64 encoded script to a Utxo object with a hex encoded script\n * @param {Utxo} utxo - Utxo object with base64 encoded script\n * @param {Object} unlockScriptTemplate - Object with sign and estimateLength functions\n * @returns {TransactionInput} Utxo object with hex encoded script\n */\nexport const inputFromB64Utxo = (\n\tutxo: Utxo,\n\tunlockScriptTemplate: {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>;\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>;\n\t},\n): TransactionInput => {\n\tconst input = fromUtxo(\n\t\t{\n\t\t\t...utxo,\n\t\t\tscript: Buffer.from(utxo.script, \"base64\").toString(\"hex\"),\n\t\t},\n\t\tunlockScriptTemplate,\n\t);\n\tinput.sourceTXID = utxo.txid;\n\treturn input;\n};\n\n/**\n * Fetches pay utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<Utxo[]>} Array of pay utxos\n */\nexport const fetchPayUtxos = async (address: string): Promise<Utxo[]> => {\n\tconst payUrl = `${API_HOST}/txos/address/${address}/unspent?bsv20=false`;\n\tconsole.log({ payUrl });\n\tconst payRes = await fetch(payUrl);\n\tif (!payRes.ok) {\n\t\tthrow new Error(\"Error fetching pay utxos\");\n\t}\n\tlet payUtxos = await payRes.json();\n\t// exclude all 1 satoshi utxos\n\tpayUtxos = payUtxos.filter((u: { satoshis: number }) => u.satoshis !== 1);\n\n\t// Get pubkey hash from address\n\tconst pubKeyHash = fromBase58Check(address);\n\tconst p2pkhScript = new P2PKH().lock(pubKeyHash.data);\n\tpayUtxos = payUtxos.map((utxo: Partial<Utxo>) => ({\n\t\ttxid: utxo.txid,\n\t\tvout: utxo.vout,\n\t\tsatoshis: utxo.satoshis,\n\t\tscript: Buffer.from(p2pkhScript.toBinary()).toString(\"base64\"),\n\t}));\n\treturn payUtxos as Utxo[];\n};\n\n/**\n * Fetches NFT utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @param {string} [collectionId] - Optional. Collection id (collection insciprtion origin)\n * @param {number} [limit=10] - Optional. Number of utxos to fetch. Default is 10\n * @param {number} [offset=0] - Optional. Offset for fetching utxos. Default is 0\n * @returns {Promise<Utxo[]>} Array of NFT utxos\n */\nexport const fetchNftUtxos = async (\n\taddress: string,\n\tcollectionId?: string,\n\tlimit = 10,\n\toffset = 0,\n): Promise<NftUtxo[]> => {\n\tlet url = `${API_HOST}/txos/address/${address}/unspent?limit=${limit}&offset=${offset}&`;\n\n\tif (collectionId) {\n\t\tconst query = {\n\t\t\tmap: {\n\t\t\t\tsubTypeData: { collectionId },\n\t\t\t},\n\t\t};\n\t\tconst b64Query = Buffer.from(JSON.stringify(query)).toString(\"base64\");\n\t\turl += `q=${b64Query}`;\n\t}\n\n\tconsole.log({ url });\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching NFT utxos for ${address}`);\n\t}\n\n\t// Returns a BSV20Txo but we only need a few fields\n\tlet nftUtxos = await res.json();\n\n\t// Only include 1 satoshi outputs, non listings\n\tnftUtxos = nftUtxos.filter(\n\t\t(u: {\n\t\t\tsatoshis: number;\n\t\t\tdata: { list: { price: number; payout: string } | undefined } | null;\n\t\t}) => u.satoshis === 1 && !u.data?.list,\n\t);\n\n\tconst outpoints = nftUtxos.map(\n\t\t(utxo: { txid: string; vout: number }) => `${utxo.txid}_${utxo.vout}`,\n\t);\n\t// Fetch the scripts up to the limit\n\tconst nftRes = await fetch(`${API_HOST}/txos/outpoints`, {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t\tbody: JSON.stringify([...outpoints]),\n\t});\n\n\tif (!nftRes.ok) {\n\t\tthrow new Error(`Error fetching NFT scripts for ${address}`);\n\t}\n\n\tconst nfts = (await nftRes.json() || [])\n\n\tnftUtxos = nfts.map(\n\t\t(utxo: {\n\t\t\torigin: { outpoint: string };\n\t\t\tscript: string;\n\t\t\tvout: number;\n\t\t\ttxid: string;\n\t\t}) => {\n\t\t\tconst nftUtxo = {\n\t\t\t\torigin: utxo.origin.outpoint,\n\t\t\t\tscript: utxo.script,\n\t\t\t\tvout: utxo.vout,\n\t\t\t\ttxid: utxo.txid,\n\t\t\t\tsatoshis: 1,\n\t\t\t} as NftUtxo;\n\t\t\tif (collectionId) {\n\t\t\t\tnftUtxo.collectionId = collectionId;\n\t\t\t}\n\t\t\treturn nftUtxo;\n\t\t},\n\t);\n\n\treturn nftUtxos as NftUtxo[];\n};\n\n/**\n * Fetches token utxos from the API\n * @param {TokenType} protocol - Token protocol. Either BSV20 or BSV21\n * @param {string} tokenId - Token id. Ticker for BSV20 and id (mint+deploy inscription origin) for BSV21\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<TokenUtxo[]>} Array of token utxos\n */\nexport const fetchTokenUtxos = async (\n\tprotocol: TokenType,\n\ttokenId: string,\n\taddress: string,\n): Promise<TokenUtxo[]> => {\n\tconst url = `${API_HOST}/bsv20/${address}/${protocol === TokenType.BSV20 ? \"tick\" : \"id\"}/${tokenId}?bsv20=true&listing=false`;\n\tconsole.log({ url });\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching ${protocol} utxos`);\n\t}\n\n\t// returns a BSV20Txo but we only need a few fields\n\tlet tokenUtxos = await res.json();\n\n\ttokenUtxos = tokenUtxos.map((utxo: Partial<TokenUtxo>) => ({\n\t\tamt: utxo.amt,\n\t\tscript: utxo.script,\n\t\tvout: utxo.vout,\n\t\ttxid: utxo.txid,\n\t\tid: tokenId,\n\t\tsatoshis: 1,\n\t}));\n\n\treturn tokenUtxos as TokenUtxo[];\n};\n","import type { Transaction } from \"@bsv/sdk\";\nimport { Sigma } from \"sigma-protocol\";\nimport type { LocalSigner, RemoteSigner } from \"./types\";\n\n/**\n * Signs data in the transaction with Sigma protocol\n * @param {Transaction} tx - Transaction to sign\n * @param {LocalSigner | RemoteSigner} signer - Local or remote signer (used for data signature)\n * @returns {Transaction} Transaction with signed data\n */\nexport const signData = async (\n\ttx: Transaction,\n\tsigner: LocalSigner | RemoteSigner,\n): Promise<Transaction> => {\n\t// Sign tx if idKey or remote signer like starfish/tokenpass\n\tconst idKey = (signer as LocalSigner)?.idKey;\n\tconst keyHost = (signer as RemoteSigner)?.keyHost;\n\n\tif (idKey) {\n\t\tconst sigma = new Sigma(tx);\n\t\tconst { signedTx } = sigma.sign(idKey);\n\t\treturn signedTx;\n\t}\n\tif (keyHost) {\n\t\tconst authToken = (signer as RemoteSigner)?.authToken;\n\t\tconst sigma = new Sigma(tx);\n\t\ttry {\n\t\t\tconst { signedTx } = await sigma.remoteSign(keyHost, authToken);\n\t\t\treturn signedTx;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthrow new Error(`Remote signing to ${keyHost} failed`);\n\t\t}\n\t}\n\tthrow new Error(\"Signer must be a LocalSigner or RemoteSigner\");\n};\n","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n} from \"@bsv/sdk\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n\tUtxo,\n\tDestination,\n\tMAP,\n\tLocalSigner,\n\tRemoteSigner,\n\tPayment,\n\tCreateOrdinalsConfig,\n\tCreateOrdinalsResult,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { signData } from \"./signData\";\n\n/**\n * Creates a transaction with inscription outputs\n * @param {CreateOrdinalsConfig} config - Configuration object for creating ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {string} config.changeAddress - Optional. Address to send change to. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {MAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Local or remote signer (used for data signature)\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<CreateOrdinalsResult>} Transaction with inscription outputs\n */\nexport const createOrdinals = async (\n\tconfig: CreateOrdinalsConfig,\n): Promise<CreateOrdinalsResult> => {\n\tconst {\n\t\tutxos,\n\t\tdestinations,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Inputs\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\t}\n\n\t// Warn if creating many inscriptions at once\n\tif (destinations.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Outputs\n\t// Add inscription outputs\n\tfor (const destination of destinations) {\n\t\tif (!destination.inscription) {\n\t\t\tthrow new Error(\"Inscription is required for all destinations\");\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription.dataB64,\n\t\t\t\tdestination.inscription.contentType,\n\t\t\t\tmetaData,\n\t\t\t),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\tlet payChangeVout: number | undefined;\n\n\t// Calculate total input and output amounts\n\tconst totalInput = utxos.reduce(\n\t\t(sum, utxo) => sum + BigInt(utxo.satoshis),\n\t\t0n,\n\t);\n\tconst totalOutput = tx.outputs.reduce(\n\t\t(sum, output) => sum + BigInt(output.satoshis || 0),\n\t\t0n,\n\t);\n\n\t// Estimate fee\n\tconst estimatedFee = await modelOrFee.computeFee(tx);\n\n\t// Check if change is needed\n\tlet payChange: Utxo | undefined;\n\tif (totalInput > totalOutput + BigInt(estimatedFee)) {\n\t\tconst changeScript = new P2PKH().lock(\n\t\t\tchangeAddress || paymentPk.toAddress().toString(),\n\t\t);\n\t\tconst changeOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\t// Add change output\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet,\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\n\t\ttx.addOutput(changeOutput);\n\t}\n\n\tif (signer) {\n\t\ttx = await signData(tx, signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype Script,\n\ttype TransactionOutput,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type { SendOrdinalsResult, SendOrdinalsConfig, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\n\n/**\n * Sends ordinals to the given destinations\n * @param {SendOrdinalsConfig} config - Configuration object for sending ordinals\n * @param {Utxo[]} config.paymentUtxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.ordinals - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {string} config.changeAddress - Optional. Address to send change to, if any. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {MAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @param {boolean} config.enforceUniformSend - Optional. Default: true. Enforce that the number of destinations matches the number of ordinals being sent. Sending ordinals requires a 1:1 mapping of destinations to ordinals. This is only used for sub-protocols like BSV21 that manage tokens without sending the inscriptions directly.\n * @returns {Promise<SendOrdinalsResult>} Transaction, spent outpoints, and change vout\n */\nexport const sendOrdinals = async (\n\tconfig: SendOrdinalsConfig,\n): Promise<SendOrdinalsResult> => {\n\tif (!config.satsPerKb) {\n\t\tconfig.satsPerKb = DEFAULT_SAT_PER_KB;\n\t}\n\tif (!config.additionalPayments) {\n\t\tconfig.additionalPayments = [];\n\t}\n\tif (config.enforceUniformSend === undefined) {\n\t\tconfig.enforceUniformSend = true;\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(config.satsPerKb);\n\tlet tx = new Transaction();\n\tconst spentOutpoints: string[] = [];\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of config.ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(\n\t\t\tordUtxo,\n\t\t\tnew OrdP2PKH().unlock(config.ordPk),\n\t\t);\n\t\tspentOutpoints.push(`${ordUtxo.txid}_${ordUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// check that ordinals coming in matches ordinals going out if supplied\n\tif (\n\t\tconfig.enforceUniformSend &&\n\t\tconfig.destinations.length !== config.ordinals.length\n\t) {\n\t\tthrow new Error(\n\t\t\t\"Number of destinations must match number of ordinals being sent\",\n\t\t);\n\t}\n\n\t// Add ordinal outputs\n\tfor (const destination of config.destinations) {\n\t\tlet s: Script;\n\t\tif (\n\t\t\tdestination.inscription?.dataB64 &&\n\t\t\tdestination.inscription?.contentType\n\t\t) {\n\t\t\ts = new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription.dataB64,\n\t\t\t\tdestination.inscription.contentType,\n\t\t\t\tconfig.metaData,\n\t\t\t);\n\t\t} else {\n\t\t\ts = new P2PKH().lock(destination.address);\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: s,\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of config.additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of config.paymentUtxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(config.paymentPk));\n\t\tspentOutpoints.push(`${utxo.txid}_${utxo.vout}`);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (totalSatsIn < totalSatsOut) {\n\t\tthrow new Error(\"Not enough ordinals to send\");\n\t}\n\n\tlet payChange: Utxo | undefined;\n\tif (totalSatsIn > totalSatsOut + BigInt(fee)) {\n\t\tconst changeScript = new P2PKH().lock(\n\t\t\tconfig.changeAddress || config.paymentPk.toAddress().toString(),\n\t\t);\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not available until the transaction is signed\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t}\n\n\tif (config.signer) {\n\t\ttx = await signData(tx, config.signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChange,\n\t};\n};\n","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype TransactionOutput,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type { SendUtxosConfig, SendUtxosResult, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Sends utxos to the given destination\n * @param {SendUtxosConfig} config - Configuration object for sending utxos\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {Payment[]} config.payments - Array of payments with addresses and amounts\n * @param {number} [config.satsPerKb] - Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {string} [config.changeAddress] - Address to send change to. If not provided, defaults to paymentPk address\n * @returns {Promise<SendUtxosResult>} Transaction with utxo outputs\n */\nexport const sendUtxos = async (\n\tconfig: SendUtxosConfig,\n): Promise<SendUtxosResult> => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tpayments,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tchangeAddress = paymentPk.toAddress().toString(),\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\t// Outputs\n\tfor (const payment of payments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new P2PKH().lock(payment.to),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + (out.satoshis || 0),\n\t\t0,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + fee) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + fee) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to send. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChange: Utxo | undefined;\n\tif (totalSatsIn > totalSatsOut + fee) {\n\t\t// Change\n\t\tconst changeScript = new P2PKH().lock(changeAddress);\n\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t} else if (totalSatsIn < totalSatsOut + fee) {\n\t\tconsole.log(\"No change needed\");\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\ttype Destination,\n\tTokenType,\n\ttype TransferBSV20Inscription,\n\ttype TransferTokenInscription,\n  type TransferBSV21Inscription,\n\ttype TransferOrdTokensConfig,\n\ttype TransferOrdTokensResult,\n\ttype SendOrdinalsConfig,\n\ttype TokenUtxo,\n} from \"./types\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { sendOrdinals } from \"./sendOrdinals\";\n\n/**\n * Transfer tokens to a destination\n * @param {TransferOrdTokensConfig} config - Configuration object for transferring tokens\n * @param {TokenType} config.protocol - Token protocol. Must be TokenType.BSV20 or TokenType.BSV21\n * @param {string} config.tokenID - Token ID. Either the tick or id value depending on the protocol\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {TokenUtxo[]} config.inputTokens - Token utxos to spend\n * @param {Distribution[]} config.distributions - Array of destinations with addresses and amounts\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {string} config.changeAddress - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {string} config.tokenChangeAddress - Optional. Address to send token change to, if any. If not provided, defaults to ordPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {MAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<TransferOrdTokensResult>} Transaction with token transfer outputs\n */\nexport const transferOrdTokens = async (config: TransferOrdTokensConfig): Promise<TransferOrdTokensResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tinputTokens,\n\t\tdistributions,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tchangeAddress,\n\t\ttokenChangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\t// calculate change amount\n\tlet changeAmt = 0n;\n\tlet totalAmtIn = 0n;\n\tlet totalAmtOut = 0n;\n\n  // Ensure these inputs are for the expected token\n\tif(!inputTokens.every(\n\t\t(token) => token.id === tokenID,\n\t)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n\tfor (const token of inputTokens) {\n\t\ttotalAmtIn += BigInt(token.amt);\n\t}\n\n\tfor (const dest of distributions) {\n\t\ttotalAmtOut += BigInt(dest.amt);\n\t}\n\n\t// check that you have enough tokens to send\n\tif (totalAmtIn < totalAmtOut) {\n\t\tthrow new Error(\"Not enough tokens to send\");\n\t}\n\n\tchangeAmt = totalAmtIn - totalAmtOut;\n\n\t// add change to distributions\n\tif (changeAmt > 0n) {\n\t\tconst changeDistribution = {\n\t\t\taddress: tokenChangeAddress || ordPk.toAddress().toString(),\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t\tdistributions.push(changeDistribution);\n\t}\n\n\t// build destination inscriptions\n\tconst destinations: Destination[] = distributions.map((dest) => {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: \"transfer\",\n\t\t\tamt: dest.amt,\n\t\t}\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n\t\treturn {\n\t\t\taddress: dest.address,\n\t\t\tinscription: {\n\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\t\tcontentType: \"application/bsv-20\",\n\t\t\t},\n\t\t};\n\t});\n\n\tconst sendOrdinalsConfig: SendOrdinalsConfig = {\n\t\tpaymentUtxos: utxos,\n\t\tordinals: inputTokens,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tdestinations,\n\t\tchangeAddress: changeAddress || paymentPk.toAddress().toString(),\n\t\tsatsPerKb,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments,\n\t\tenforceUniformSend: false\n\t};\n\n\tconst { tx, spentOutpoints, payChange } = await sendOrdinals(sendOrdinalsConfig);\n\t\n\t// find the tokenChangeVout by looking for the destination with the tokenChangeAddress\n\tconst tokenChangeVout = destinations.findIndex(\n\t\t(d) => d.address === (tokenChangeAddress || ordPk.toAddress().toString())\n\t);\n\t\n\tlet tokenChange: TokenUtxo | undefined;\n\tif (tokenChangeVout !== -1) {\n\t\ttokenChange = {\n\t\t\tid: tokenID,\n\t\t\tamt: changeAmt.toString(),\n\t\t\tsatoshis: 1,\n\t\t\ttxid: tx.id(\"hex\"),\n\t\t\tvout: tokenChangeVout,\n\t\t\tscript: Buffer.from(tx.outputs[tokenChangeVout].lockingScript.toHex(), \"hex\").toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChange,\n\t\ttokenChange,\n\t}\n};"],"names":["TokenType","toHex","utf8Str","Buffer","from","toString","API_HOST","OrdP2PKH","_P2PKH","apply","this","arguments","prototype","lock","address","b64File","mediaType","metaData","ordAsm","undefined","ordHex","fileHex","trim","Error","fileMediaType","inscriptionAsm","P2PKH","toASM","app","type","mapCmdValue","_i","_Object$entries","Object","entries","length","_Object$entries$_i","key","value","LockingScript","fromASM","fromBase58Check","Utils","inputFromB64Utxo","utxo","unlockScriptTemplate","input","fromUtxo","_extends","script","sourceTXID","txid","fetchPayUtxos","payUrl","console","log","Promise","resolve","fetch","then","payRes","ok","json","payUtxos","filter","u","satoshis","pubKeyHash","p2pkhScript","data","map","vout","toBinary","e","reject","fetchNftUtxos","collectionId","limit","offset","url","JSON","stringify","subTypeData","res","nftUtxos","outpoints","_u$data","list","method","headers","body","concat","nftRes","nfts","nftUtxo","origin","outpoint","fetchTokenUtxos","protocol","tokenId","BSV20","tokenUtxos","amt","id","signData","tx","signer","_exit","_temp2","_result","idKey","keyHost","_sigma$sign","Sigma","sign","signedTx","_temp","authToken","sigma","remoteSign","_ref","_catch","createOrdinals","config","_step","utxos","destinations","paymentPk","changeAddress","_config$satsPerKb","satsPerKb","_config$additionalPay","additionalPayments","modelOrFee","SatoshisPerKilobyte","Transaction","_iterator","_createForOfIteratorHelperLoose","done","unlock","addInput","warn","_step2","_iterator2","destination","inscription","addOutput","lockingScript","dataB64","contentType","_iterator3","_step3","p","amount","to","totalInput","reduce","sum","BigInt","totalOutput","outputs","output","computeFee","estimatedFee","fee","payChange","spentOutpoints","changeScript","toAddress","changeOutput","change","_signData","pact","state","s","_Pact","o","_settle","bind","v","onFulfilled","result","_this","onRejected","_isSettledPact","thenable","sendOrdinals","_interrupt","_temp4","totalSatsIn","totalSatsOut","changeOut","enforceUniformSend","ordinals","ordUtxo","ordPk","push","_destination$inscript","_destination$inscript2","total","out","_temp3","array","check","_cycle","i","_forOf","paymentUtxos","_modelOrFee$computeFe","observer","sendUtxos","payments","DEFAULT_SAT_PER_KB","_config$changeAddress","payment","sendTxOut","transferOrdTokens","tokenID","inputTokens","distributions","tokenChangeAddress","changeAmt","totalAmtIn","totalAmtOut","every","token","changeDistribution","dest","transferInscription","op","tick","BSV21","sendOrdinalsConfig","tokenChange","tokenChangeVout","findIndex","d"],"mappings":"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"}