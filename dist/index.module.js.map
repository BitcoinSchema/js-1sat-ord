{"version":3,"file":"index.module.js","sources":["../src/utils/strings.ts","../src/types.ts","../src/constants.ts","../src/templates/ordP2pkh.ts","../src/utils/utxo.ts","../src/signData.ts","../src/utils/subtypeData.ts","../src/createOrdinals.ts","../src/sendOrdinals.ts","../src/sendUtxos.ts","../src/transferOrdinals.ts","../src/validate.ts","../src/templates/ordLock.ts","../src/createListings.ts","../src/cancelListings.ts","../src/utils/paymail.ts","../src/purchaseOrdListing.ts","../src/utils/icon.ts","../src/deployBsv21.ts"],"sourcesContent":["/**\n * Converts a string to its hexadecimal representation\n *\n * @param {string} utf8Str - The string to convert\n * @returns {string} The hexadecimal representation of the input string\n */\nconst toHex = (utf8Str: string): string => {\n  return Buffer.from(utf8Str).toString(\"hex\");\n};\n\nexport { toHex };\n","import type { PrivateKey, Transaction } from \"@bsv/sdk\";\nimport type { AuthToken } from \"sigma-protocol\";\n\n// biome-ignore lint/complexity/noBannedTypes: Reserved for future use\ntype Signer = {};\n\nexport interface LocalSigner extends Signer {\n  idKey: PrivateKey;\n}\n\nexport interface RemoteSigner extends Signer {\n  keyHost: string;\n  authToken?: AuthToken;\n}\n\nexport type Destination = {\n  address: string;\n  inscription?: Inscription;\n};\n\n/**\n * @typedef {Object} Listing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n * @property {Utxo} listingUtxo - Utxo of the listing\n */\nexport type NewListing = {\n  payAddress: string;\n  price: number;\n  ordAddress: string;\n  listingUtxo: Utxo;\n}\n\n/**\n * @typedef {Object} ExistingListing\n * @property {string} payout - Payment output script base64 encoded\n * @property {Utxo} listingUtxo - Utxo of the listing\n */\nexport type ExistingListing = {\n  payout: string;\n  listingUtxo: Utxo;\n}\n\n/**\n * @typedef {Object} NewTokenListing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n * @property {number} amt - Number of tokens as a number. Not adjusted for decimals (library will add zeros according to dec value).\n */\nexport type NewTokenListing = {\n  payAddress: string;\n  price: number;\n  amt: number;\n  ordAddress: string;\n}\n\n/**\n * @typedef {Object} Distribution\n * @property {string} address - Destination address. Must be a Ordinals address (BSV address for recieving 1Sat ordinals tokens).\n * @property {number} amt - Number of tokens as a string, considering decimals. Not display format. Ex. 100000000 for 1 token with 8 decimal places.\n */\nexport type Distribution = {\n  address: string;\n  amt: number;\n};\n\n/**\n * @typedef {Object} Utxo\n * @property {number} satoshis - Amount in satoshis\n * @property {string} txid - Transaction id\n * @property {number} vout - Output index\n * @property {string} script - Base64 encoded locking script\n */\nexport type Utxo = {\n  satoshis: number;\n  txid: string;\n  vout: number;\n  script: string;\n};\n\n/**\n * @typedef {Object} NftUtxo\n * @property {string} collectionId - Optional. Collection id of the NFT\n * @property {string} contentType - Media type of the NFT\n * @property {string} creatorBapId - Optional. Creator BAP id of the NFT\n * @property {string} origin - Origin address of the NFT\n * @property {number} satoshis - Always 1\n */\nexport interface NftUtxo extends Utxo {\n  collectionId?: string;\n  contentType: string;\n  creatorBapId?: string;\n  origin: string;\n  satoshis: 1;\n}\n\n/**\n * @typedef {Object} TokenUtxo\n * @property {string} amt - Number of tokens as a string, adjusted for decimals. Ex. 100000000 for 1 token with 8 decimal places.\n * @property {string} id - Token id -  either tick or id depending on protocol\n * @property {string} satoshis - Always 1\n * @property {string} [payout] - Optional. Payment output script base64 encoded\n * @property {number} [price] - Optional. Listing price in satoshis\n * @property {boolean} [isListing] - Optional. True if the token is a listing\n */\nexport interface TokenUtxo extends Utxo {\n  amt: string;\n  id: string;\n  satoshis: 1;\n  payout?: string;\n  price?: number;\n  isListing?: boolean;\n}\n\nexport type Inscription = {\n  dataB64: string;\n  contentType: string;\n};\n\nexport type ImageContentType =\n  | \"image/png\"\n  | \"image/jpeg\"\n  | \"image/gif\"\n  | \"image/svg+xml\"\n  | \"image/webp\";\n\n/**\n * @typedef {Object} IconInscription\n * @property {string} dataB64 - Base64 encoded image data. Must be a square image.\n * @property {ImageContentType} contentType - Media type of the image\n */\nexport type IconInscription = {\n  dataB64: string;\n  contentType: ImageContentType;\n};\n\nexport type Payment = {\n  to: string;\n  amount: number;\n};\n\nexport type TokenInscription = {\n  p: \"bsv-20\";\n  amt: string;\n  op: \"transfer\" | \"mint\" | \"deploy+mint\" | \"burn\";\n  dec?: string;\n};\n\nexport interface MintTokenInscription extends TokenInscription {\n  op: \"mint\";\n}\n\nexport interface DeployMintTokenInscription extends TokenInscription {\n  op: \"deploy+mint\";\n  sym: string;\n  icon: string;\n}\n\nexport interface TransferTokenInscription extends TokenInscription {\n  p: \"bsv-20\";\n  amt: string;\n  op: \"transfer\" | \"burn\";\n}\n\nexport interface TransferBSV20Inscription extends TransferTokenInscription {\n  tick: string;\n}\n\nexport interface TransferBSV21Inscription extends TransferTokenInscription {\n  id: string;\n}\n\nexport enum TokenType {\n  BSV20 = \"bsv20\",\n  BSV21 = \"bsv21\",\n}\n\nexport type CreateOrdinalsResult = {\n  tx: Transaction;\n  spentOutpoints: string[];\n  payChange?: Utxo;\n};\n\n/**\n * MAP (Magic Attribute Protocol) metadata object with stringified values for writing to the blockchain\n * @typedef {Object} MAP\n * @property {string} app - Application identifier\n * @property {string} type - Metadata type\n * @property {string} [prop] - Optional. Additional metadata properties\n */\nexport type MAP = {\n  app: string;\n  type: string;\n  [prop: string]: string;\n};\n\nexport type PreMAP = {\n  app: string;\n  type: string;\n  [prop: string]: unknown;\n  royalties?: Royalty[];\n  subTypeData?: CollectionSubTypeData | CollectionItemSubTypeData;\n};\n\nexport type CreateOrdinalsConfig = {\n  utxos: Utxo[];\n  destinations: Destination[];\n  paymentPk: PrivateKey;\n  changeAddress?: string;\n  satsPerKb?: number;\n  metaData?: PreMAP;\n  signer?: LocalSigner | RemoteSigner;\n  additionalPayments?: Payment[];\n};\n\nexport enum RoytaltyType {\n  Paymail = \"paymail\",\n  Address = \"address\",\n  Script = \"script\",\n}\n\n/**\n * Royalty object\n * @typedef {Object} Royalty\n * @property {RoytaltyType} type - Royalty type, string, one of \"paymail\", \"address\", \"script\"\n * @property {string} destination - Royalty destination\n * @property {string} percentage - Royalty percentage as a string float 0-1 (0.01 = 1%)\n */\nexport type Royalty = {\n  type: RoytaltyType;\n  destination: string;\n  percentage: string; // string float 0-1\n};\n\nexport interface CreateOrdinalsMetadata extends PreMAP {\n  type: \"ord\",\n  name: string,\n  previewUrl?: string,\n}\n\nexport interface CreateOrdinalsCollectionMetadata extends CreateOrdinalsMetadata {\n  subType: \"collection\",\n  subTypeData: CollectionSubTypeData, // JSON stringified CollectionSubTypeData\n  royalties?: Royalty[],\n};\n\nexport interface CreateOrdinalsCollectionItemMetadata extends CreateOrdinalsMetadata {\n  subType: \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n};\n\n/**\n * Configuration object for creating an ordinals collection\n * @typedef {Object} CreateOrdinalsCollectionConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collection\"\n * @property metaData.name - Collection name\n * @property metaData.subTypeData - JSON stringified CollectionSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionConfig extends CreateOrdinalsConfig {\n  metaData: CreateOrdinalsCollectionMetadata\n}\n\nexport type CollectionTraits = {\n  [trait: string]: CollectionTrait;\n};\n\nexport type CollectionTrait = {\n  values: string[];\n  occurancePercentages: string[];\n};\n\nexport type Rarity = {\n  [key: string]: string;\n}\n\nexport type RarityLabels = Rarity[]\nexport interface CollectionSubTypeData {\n  description: string;\n  quantity: number;\n  rarityLabels: RarityLabels;\n  traits: CollectionTraits;\n}\n\nexport interface CreateOrdinalsCollectionItemMetadata extends PreMAP {\n  type: \"ord\",\n  name: string,\n  subType: \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n  royalties?: Royalty[],\n  previewUrl?: string,\n}\n\n/**\n * Configuration object for creating an ordinals collection item\n * @typedef {Object} CreateOrdinalsCollectionItemConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection item\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collectionItem\"\n * @property metaData.name - Collection item name\n * @property metaData.subTypeData - JSON stringified CollectionItemSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionItemConfig extends CreateOrdinalsConfig {\n  metaData: CreateOrdinalsCollectionItemMetadata\n}\n\n/**\n * Subtype data for an ordinals collection item\n * @typedef {Object} CollectionItemSubTypeData\n * @property {string} collectionId - Collection id\n * @property {number} mintNumner - Mint number\n * @property {number} rank - Rank\n * @property {string} rarityLabel - Rarity label\n * @property {string} traits - traits object\n * @property {string} attachments - array of attachment objects\n */\nexport interface CollectionItemSubTypeData {\n  collectionId: string;\n  mintNumber?: number;\n  rank?: number;\n  rarityLabel?: RarityLabels;\n  traits?: CollectionItemTraits;\n  attachments?: CollectionItemAttachment[];\n}\n\nexport type CollectionItemTraits = {\n  name: string;\n  value: string;\n  rarityLabel?: string;\n  occurancePercentrage?: string;\n};\n\nexport type CollectionItemAttachment = {\n  name: string;\n  description?: string;\n  \"content-type\": string;\n  url: string;\n}\n\nexport type SendOrdinalsResult = {\n  tx: Transaction;\n  spentOutpoints: string[];\n  payChange?: Utxo;\n};\n\nexport type SendOrdinalsConfig = {\n  paymentUtxos: Utxo[];\n  ordinals: Utxo[];\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  destinations: Destination[];\n  changeAddress?: string;\n  satsPerKb?: number;\n  metaData?: PreMAP;\n  signer?: LocalSigner | RemoteSigner;\n  additionalPayments?: Payment[];\n  enforceUniformSend?: boolean;\n}\n\nexport type DeployBsv21TokenResult = {\n  tx: Transaction;\n  spentOutpoints: string[];\n  payChange?: Utxo;\n};\n\nexport type DeployBsv21TokenConfig = {\n  symbol: string;\n  decimals?: number;\n  icon: string | IconInscription;\n  utxos: Utxo[];\n  initialDistribution: Distribution;\n  paymentPk: PrivateKey;\n  destinationAddress: string;\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[];\n};\n\nexport type SendUtxosResult = {\n  tx: Transaction;\n  spentOutpoints: string[];\n  payChange?: Utxo;\n};\n\nexport type SendUtxosConfig = {\n  utxos: Utxo[];\n  paymentPk: PrivateKey;\n  payments: Payment[];\n  satsPerKb?: number;\n  changeAddress?: string;\n};\n\nexport interface TransferOrdTokensResult extends SendOrdinalsResult {\n  tokenChange?: TokenUtxo;\n}\n\nexport type TransferOrdTokensConfig = {\n  protocol: TokenType;\n  tokenID: string;\n  decimals: number;\n  utxos: Utxo[];\n  inputTokens: TokenUtxo[];\n  distributions: Distribution[];\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  changeAddress?: string;\n  tokenChangeAddress?: string;\n  satsPerKb?: number;\n  metaData?: PreMAP;\n  signer?: LocalSigner | RemoteSigner;\n  additionalPayments?: Payment[];\n  burn?: boolean;\n}\n\nexport type CreateOrdListingsConfig = {\n  utxos: Utxo[];\n  listings: NewListing[];\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey,\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[];\n}\n\nexport type PurchaseOrdListingConfig = {\n  utxos: Utxo[];\n  paymentPk: PrivateKey;\n  listing: ExistingListing;\n  ordAddress: string;\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[],\n  royalties?: Royalty[],\n}\n\nexport type PurchaseOrdTokenListingConfig = {\n  protocol: TokenType;\n  tokenID: string;\n  utxos: Utxo[];\n  paymentPk: PrivateKey;\n  listingUtxo: TokenUtxo;\n  ordAddress: string;\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[],\n}\n\nexport type CancelOrdListingsConfig = {\n  utxos: Utxo[],\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  listingUtxos: Utxo[];\n  additionalPayments?: Payment[];\n  changeAddress?: string;\n  satsPerKb?: number;\n}\n\nexport interface CancelOrdTokenListingsConfig extends CancelOrdListingsConfig {\n  utxos: Utxo[],\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  listingUtxos: TokenUtxo[];\n  additionalPayments: Payment[];\n  changeAddress?: string;\n  satsPerKb?: number;\n  protocol: TokenType,\n  tokenID: string;\n  ordAddress?: string;\n}\n\n/**\n * Configuration object for creating a token listing\n * @typedef {Object} CreateOrdTokenListingsConfig\n * @property {Utxo[]} utxos - Array of payment Utxos\n * @property {TokenUtxo[]} inputTokens - Array of TokenUtxos to be listed\n * @property {NewTokenListing[]} listings - Array of NewTokenListings\n * @property {PrivateKey} paymentPk - Private key of the payment address\n * @property {PrivateKey} ordPk - Private key of the ord address\n * @property {string} tokenChangeAddress - Address to send the token change\n * @property {number} [satsPerKb] - Optional. Satoshis per kilobyte\n * @property {Payment[]} [additionalPayments] - Optional. Array of additional payments\n * @property {TokenType} protocol - Token protocol\n * @property {string} tokenID - Token id\n * @property {number} decimals - Number of decimal places for this token.\n */\nexport interface CreateOrdTokenListingsConfig {\n  utxos: Utxo[];\n  listings: NewTokenListing[];\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey,\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[];\n  protocol: TokenType;\n  tokenID: string;\n  decimals: number;\n  inputTokens: TokenUtxo[];\n  tokenChangeAddress: string;\n}\n\nexport const MAX_TOKEN_SUPPLY = 2n ** 64n - 1n;","export const MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\nexport const DEFAULT_SAT_PER_KB = 10;\nexport const API_HOST = \"https://ordinals.gorillapool.io/api\";","import {\n\tLockingScript,\n\tP2PKH,\n\ttype Script,\n} from \"@bsv/sdk\";\nimport type { Inscription, MAP } from \"../types\";\nimport { toHex } from \"../utils/strings\";\nimport { MAP_PREFIX } from \"../constants\";\n\n/**\n * OrdP2PKH (1Sat Ordinal + Pay To Public Key Hash) class implementing ScriptTemplate.\n *\n * This class provides methods to create an Ordinal with Pay To Public Key Hash locking and unlocking scripts. \n * It extends the standard P2PKH script template and provides a custom lock method.\n */\nexport default class OrdP2PKH extends P2PKH {\n\t/**\n\t * Creates a 1Sat Ordinal + P2PKH locking script for a given address string\n\t *\n\t * @param {string} address - An destination address for the Ordinal.\n\t * @param {Object} [inscription] - Base64 encoded file data and Content type of the file.\n\t * @param {MAP} [metaData] - (optional) MAP Metadata to be included in OP_RETURN.\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\t// unlock method inherits from p2pkh\n\tlock(\n\t\taddress: string,\n    inscription?: Inscription,\n\t\tmetaData?: MAP | undefined,\n\t): Script {\n\t\tlet ordAsm = \"\";\n\t\t// This can be omitted for reinscriptions that just update metadata\n\t\tif (inscription?.dataB64 !== undefined && inscription?.contentType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(inscription.dataB64, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(inscription.contentType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`;\n\t\t}\n\n\t\t// Create ordinal output and inscription in a single output\n\t\tconst lockingScript = new P2PKH().lock(address);\n\t\tlet inscriptionAsm = `${ordAsm ? `${ordAsm} ` : \"\"}${lockingScript.toASM()}`;\n\n\t\t// MAP.app and MAP.type keys are required\n\t\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t\t}\n\n\t\tif (metaData?.app && metaData?.type) {\n\t\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\t\tconst mapCmdValue = toHex(\"SET\");\n\t\t\tinscriptionAsm = `${inscriptionAsm} OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\t\tif (key !== \"cmd\") {\n\t\t\t\t\tinscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\n\t\t\t\t\t\tvalue as string,\n\t\t\t\t\t)}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn LockingScript.fromASM(inscriptionAsm);\n\t}\n}\n","import {\n\ttype Transaction,\n\ttype UnlockingScript,\n\tfromUtxo,\n\ttype TransactionInput,\n\tUtils,\n\tP2PKH,\n  Script,\n} from \"@bsv/sdk\";\nimport { type NftUtxo, TokenType, type TokenUtxo, type Utxo } from \"../types\";\nimport { API_HOST } from \"../constants\";\n\nconst { fromBase58Check } = Utils;\n\n/**\n * Converts a Utxo object with a base64 encoded script to a Utxo object with a hex encoded script\n * @param {Utxo} utxo - Utxo object with base64 encoded script\n * @param {Object} unlockScriptTemplate - Object with sign and estimateLength functions\n * @returns {TransactionInput} Utxo object with hex encoded script\n */\nexport const inputFromB64Utxo = (\n\tutxo: Utxo,\n\tunlockScriptTemplate: {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>;\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>;\n\t},\n): TransactionInput => {\n\tconst input = fromUtxo(\n\t\t{\n\t\t\t...utxo,\n\t\t\tscript: Buffer.from(utxo.script, \"base64\").toString(\"hex\"),\n\t\t},\n\t\tunlockScriptTemplate,\n\t);\n\treturn input;\n};\n\n/**\n * Fetches pay utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<Utxo[]>} Array of pay utxos\n */\nexport const fetchPayUtxos = async (address: string, scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\"): Promise<Utxo[]> => {\n\tconst payUrl = `${API_HOST}/txos/address/${address}/unspent?bsv20=false`;\n\tconsole.log({ payUrl });\n\tconst payRes = await fetch(payUrl);\n\tif (!payRes.ok) {\n\t\tthrow new Error(\"Error fetching pay utxos\");\n\t}\n\tlet payUtxos = await payRes.json();\n\t// exclude all 1 satoshi utxos\n\tpayUtxos = payUtxos.filter((u: { satoshis: number }) => u.satoshis !== 1);\n\n\t// Get pubkey hash from address\n\tconst pubKeyHash = fromBase58Check(address);\n\tconst p2pkhScript = new P2PKH().lock(pubKeyHash.data);\n\tpayUtxos = payUtxos.map((utxo: Partial<Utxo>) => ({\n\t\ttxid: utxo.txid,\n\t\tvout: utxo.vout,\n\t\tsatoshis: utxo.satoshis,\n\t\tscript: scriptEncoding === \"hex\" || scriptEncoding === \"base64\" ? Buffer.from(p2pkhScript.toBinary()).toString(scriptEncoding) : p2pkhScript.toASM(),\n\t}));\n\treturn payUtxos as Utxo[];\n};\n\n/**\n * Fetches NFT utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @param {string} [collectionId] - Optional. Collection id (collection insciprtion origin)\n * @param {number} [limit=10] - Optional. Number of utxos to fetch. Default is 10\n * @param {number} [offset=0] - Optional. Offset for fetching utxos. Default is 0\n * @param {string} [scriptEncoding=\"base64\"] - Optional. Encoding for the script. Default is base64. Options are hex, base64, or asm.\n * @returns {Promise<Utxo[]>} Array of NFT utxos\n */\nexport const fetchNftUtxos = async (\n\taddress: string,\n\tcollectionId?: string,\n\tlimit = 10,\n\toffset = 0,\n  scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\",\n): Promise<NftUtxo[]> => {\n\tlet url = `${API_HOST}/txos/address/${address}/unspent?limit=${limit}&offset=${offset}&`;\n\n\tif (collectionId) {\n\t\tconst query = {\n\t\t\tmap: {\n\t\t\t\tsubTypeData: { collectionId },\n\t\t\t},\n\t\t};\n\t\tconst b64Query = Buffer.from(JSON.stringify(query)).toString(\"base64\");\n\t\turl += `q=${b64Query}`;\n\t}\n\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching NFT utxos for ${address}`);\n\t}\n\n\t// Returns a BSV20Txo but we only need a few fields\n\tlet nftUtxos = await res.json();\n\n\t// Only include 1 satoshi outputs, non listings\n\tnftUtxos = nftUtxos.filter(\n\t\t(u: {\n\t\t\tsatoshis: number;\n\t\t\tdata: { list: { price: number; payout: string } | undefined } | null;\n\t\t}) => u.satoshis === 1 && !u.data?.list,\n\t);\n\n\tconst outpoints = nftUtxos.map(\n\t\t(utxo: { txid: string; vout: number }) => `${utxo.txid}_${utxo.vout}`,\n\t);\n\t// Fetch the scripts up to the limit\n\tconst nftRes = await fetch(`${API_HOST}/txos/outpoints?script=true`, {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t\tbody: JSON.stringify([...outpoints]),\n\t});\n\n\tif (!nftRes.ok) {\n\t\tthrow new Error(`Error fetching NFT scripts for ${address}`);\n\t}\n\n\tconst nfts = (await nftRes.json() || [])\n\n\tnftUtxos = nfts.map(\n\t\t(utxo: {\n\t\t\torigin: { outpoint: string };\n\t\t\tscript: string;\n\t\t\tvout: number;\n\t\t\ttxid: string;\n\t\t}) => {\n      let script = utxo.script;\n      if (scriptEncoding === \"hex\") {\n        script = Buffer.from(script, \"base64\").toString(\"hex\");\n      } else if (scriptEncoding === \"asm\") {\n        script = Script.fromHex(Buffer.from(script, \"base64\").toString(\"hex\")).toASM();\n      }\n\t\t\tconst nftUtxo = {\n\t\t\t\torigin: utxo.origin.outpoint,\n\t\t\t\tscript,\n\t\t\t\tvout: utxo.vout,\n\t\t\t\ttxid: utxo.txid,\n\t\t\t\tsatoshis: 1,\n\t\t\t} as NftUtxo;\n\t\t\tif (collectionId) {\n\t\t\t\tnftUtxo.collectionId = collectionId;\n\t\t\t}\n\t\t\treturn nftUtxo;\n\t\t},\n\t);\n\n\treturn nftUtxos as NftUtxo[];\n};\n\n/**\n * Fetches token utxos from the API\n * @param {TokenType} protocol - Token protocol. Either BSV20 or BSV21\n * @param {string} tokenId - Token id. Ticker for BSV20 and id (mint+deploy inscription origin) for BSV21\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<TokenUtxo[]>} Array of token utxos\n */\nexport const fetchTokenUtxos = async (\n\tprotocol: TokenType,\n\ttokenId: string,\n\taddress: string,\n): Promise<TokenUtxo[]> => {\n\tconst url = `${API_HOST}/bsv20/${address}/${protocol === TokenType.BSV20 ? \"tick\" : \"id\"}/${tokenId}?bsv20=true&listing=false`;\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching ${protocol} utxos`);\n\t}\n\n\t// returns a BSV20Txo but we only need a few fields\n\tlet tokenUtxos = await res.json();\n\n\ttokenUtxos = tokenUtxos.map((utxo: Partial<TokenUtxo>) => ({\n\t\tamt: utxo.amt,\n\t\tscript: utxo.script,\n\t\tvout: utxo.vout,\n\t\ttxid: utxo.txid,\n\t\tid: tokenId,\n\t\tsatoshis: 1,\n\t}));\n\n\treturn tokenUtxos as TokenUtxo[];\n};\n","import type { Transaction } from \"@bsv/sdk\";\nimport { Sigma } from \"sigma-protocol\";\nimport type { LocalSigner, RemoteSigner } from \"./types\";\n\n/**\n * Signs data in the transaction with Sigma protocol\n * @param {Transaction} tx - Transaction to sign\n * @param {LocalSigner | RemoteSigner} signer - Local or remote signer (used for data signature)\n * @returns {Transaction} Transaction with signed data\n */\nexport const signData = async (\n\ttx: Transaction,\n\tsigner: LocalSigner | RemoteSigner,\n): Promise<Transaction> => {\n\t// Sign tx if idKey or remote signer like starfish/tokenpass\n\tconst idKey = (signer as LocalSigner)?.idKey;\n\tconst keyHost = (signer as RemoteSigner)?.keyHost;\n\n\tif (idKey) {\n\t\tconst sigma = new Sigma(tx);\n\t\tconst { signedTx } = sigma.sign(idKey);\n\t\treturn signedTx;\n\t}\n\tif (keyHost) {\n\t\tconst authToken = (signer as RemoteSigner)?.authToken;\n\t\tconst sigma = new Sigma(tx);\n\t\ttry {\n\t\t\tconst { signedTx } = await sigma.remoteSign(keyHost, authToken);\n\t\t\treturn signedTx;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthrow new Error(`Remote signing to ${keyHost} failed`);\n\t\t}\n\t}\n\tthrow new Error(\"Signer must be a LocalSigner or RemoteSigner\");\n};\n","import type { MAP, PreMAP } from \"../types\";\n\nconst stringifyMetaData = (metaData?: PreMAP): MAP | undefined => {\n  if (!metaData) return undefined;\n\tconst result: MAP = {\n\t\tapp: metaData.app,\n\t\ttype: metaData.type,\n\t};\n\n\tfor (const [key, value] of Object.entries(metaData)) {\n\t\tif (value !== undefined) {\n\t\t\tif (typeof value === \"string\") {\n\t\t\t\tresult[key] = value;\n\t\t\t} else if (Array.isArray(value) || typeof value === \"object\") {\n\t\t\t\tresult[key] = JSON.stringify(value);\n\t\t\t} else {\n\t\t\t\tresult[key] = String(value);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\nexport default stringifyMetaData;\n","import { Transaction, SatoshisPerKilobyte, P2PKH, Script, Utils } from \"@bsv/sdk\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n\tUtxo,\n\tCreateOrdinalsConfig,\n\tCreateOrdinalsResult,\n\tCreateOrdinalsCollectionConfig,\n\tCreateOrdinalsCollectionItemConfig,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Creates a transaction with inscription outputs\n * @param {CreateOrdinalsConfig | CreateOrdinalsCollectionConfig | CreateOrdinalsCollectionItemConfig} config - Configuration object for creating ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {string} config.changeAddress - Optional. Address to send change to. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Local or remote signer (used for data signature)\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<CreateOrdinalsResult>} Transaction with inscription outputs\n */\nexport const createOrdinals = async (\n\tconfig:\n\t\t| CreateOrdinalsConfig\n\t\t| CreateOrdinalsCollectionConfig\n\t\t| CreateOrdinalsCollectionItemConfig,\n): Promise<CreateOrdinalsResult> => {\n\tconst {\n\t\tutxos,\n\t\tdestinations,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t} = config;\n\t\n\t// Warn if creating many inscriptions at once\n\tif (destinations.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Outputs\n\t// Add inscription outputs\n\tfor (const destination of destinations) {\n\t\tif (!destination.inscription) {\n\t\t\tthrow new Error(\"Inscription is required for all destinations\");\n\t\t}\n\n\t\t// remove any undefined fields from metadata\n\t\tif (metaData) {\n\t\t\tfor(const key of Object.keys(metaData)) {\n\t\t\t\tif (metaData[key] === undefined) {\n\t\t\t\t\tdelete metaData[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription,\n\t\t\t\tstringifyMetaData(metaData),\n\t\t\t),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\tlet payChange: Utxo | undefined;\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\n\tif(signer) {\n\t\tconst utxo = utxos.pop() as Utxo\n\t\ttx.addInput(inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t)));\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\ttx = await signData(tx, signer);\n\t}\n\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\tScript,\n\ttype TransactionOutput,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type { SendOrdinalsResult, SendOrdinalsConfig, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Sends ordinals to the given destinations\n * @param {SendOrdinalsConfig} config - Configuration object for sending ordinals\n * @param {Utxo[]} config.paymentUtxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.ordinals - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {string} config.changeAddress - Optional. Address to send change to, if any. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @param {boolean} config.enforceUniformSend - Optional. Default: true. Enforce that the number of destinations matches the number of ordinals being sent. Sending ordinals requires a 1:1 mapping of destinations to ordinals. This is only used for sub-protocols like BSV21 that manage tokens without sending the inscriptions directly.\n * @returns {Promise<SendOrdinalsResult>} Transaction, spent outpoints, and change vout\n */\nexport const sendOrdinals = async (\n\tconfig: SendOrdinalsConfig,\n): Promise<SendOrdinalsResult> => {\n\tif (!config.satsPerKb) {\n\t\tconfig.satsPerKb = DEFAULT_SAT_PER_KB;\n\t}\n\tif (!config.additionalPayments) {\n\t\tconfig.additionalPayments = [];\n\t}\n\tif (config.enforceUniformSend === undefined) {\n\t\tconfig.enforceUniformSend = true;\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(config.satsPerKb);\n\tlet tx = new Transaction();\n\tconst spentOutpoints: string[] = [];\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of config.ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(\n\t\t\tordUtxo,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tconfig.ordPk, \n\t\t\t\t\"all\",\n\t\t\t\ttrue, \n\t\t\t\tordUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(ordUtxo.script, 'base64'))\n\t\t\t),\n\t\t);\n\t\tspentOutpoints.push(`${ordUtxo.txid}_${ordUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// check that ordinals coming in matches ordinals going out if supplied\n\tif (\n\t\tconfig.enforceUniformSend &&\n\t\tconfig.destinations.length !== config.ordinals.length\n\t) {\n\t\tthrow new Error(\n\t\t\t\"Number of destinations must match number of ordinals being sent\",\n\t\t);\n\t}\n\n\t// Add ordinal outputs\n\tfor (const destination of config.destinations) {\n\t\tlet s: Script;\n\t\tif (\n\t\t\tdestination.inscription?.dataB64 &&\n\t\t\tdestination.inscription?.contentType\n\t\t) {\n\t\t\ts = new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription,\n\t\t\t\tstringifyMetaData(config.metaData),\n\t\t\t);\n\t\t} else {\n\t\t\ts = new P2PKH().lock(destination.address);\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: s,\n\t\t});\n\t}\n\n  \n\t// Add additional payments if any\n\tfor (const p of config.additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n  // add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = config.changeAddress || config.paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of config.paymentUtxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tconfig.paymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\tspentOutpoints.push(`${utxo.txid}_${utxo.vout}`);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (totalSatsIn < totalSatsOut) {\n\t\tthrow new Error(\"Not enough ordinals to send\");\n\t}\n\n\tif (config.signer) {\n\t\ttx = await signData(tx, config.signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChange,\n\t};\n};\n","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype TransactionOutput,\n\tUtils,\n\tScript,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type { SendUtxosConfig, SendUtxosResult, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Sends utxos to the given destination\n * @param {SendUtxosConfig} config - Configuration object for sending utxos\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {Payment[]} config.payments - Array of payments with addresses and amounts\n * @param {number} [config.satsPerKb] - Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {string} [config.changeAddress] - Address to send change to. If not provided, defaults to paymentPk address\n * @returns {Promise<SendUtxosResult>} Transaction with utxo outputs\n */\nexport const sendUtxos = async (\n\tconfig: SendUtxosConfig,\n): Promise<SendUtxosResult> => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tpayments,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tchangeAddress = paymentPk.toAddress().toString(),\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\t// Outputs\n\tfor (const payment of payments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new P2PKH().lock(payment.to),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + (out.satoshis || 0),\n\t\t0,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\ttx.addInput(input);\n\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + fee) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + fee) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to send. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChange: Utxo | undefined;\n\tif (totalSatsIn > totalSatsOut + fee) {\n\t\t// Change\n\t\tconst changeScript = new P2PKH().lock(changeAddress);\n\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t} else if (totalSatsIn < totalSatsOut + fee) {\n\t\tconsole.log(\"No change needed\");\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\t\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import { P2PKH, SatoshisPerKilobyte, Script, Transaction, Utils } from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport {\n  TokenType,\n  type TokenUtxo,\n  type TransferBSV20Inscription,\n  type TransferBSV21Inscription,\n  type TransferOrdTokensConfig,\n  type TransferOrdTokensResult,\n  type TransferTokenInscription,\n  type Utxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Transfer tokens to a destination\n * @param {TransferOrdTokensConfig} config - Configuration object for transferring tokens\n * @param {TokenType} config.protocol - Token protocol. Must be TokenType.BSV20 or TokenType.BSV21\n * @param {string} config.tokenID - Token ID. Either the tick or id value depending on the protocol\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {TokenUtxo[]} config.inputTokens - Token utxos to spend\n * @param {Distribution[]} config.distributions - Array of destinations with addresses and amounts\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {string} config.changeAddress - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {string} config.tokenChangeAddress - Optional. Address to send token change to, if any. If not provided, defaults to ordPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @param {decimals} config.decimals - Number of decimal places for the token\n * @param {burn} config.burn - Optional. Set to true to burn the tokens.\n * @returns {Promise<TransferOrdTokensResult>} Transaction with token transfer outputs\n */\nexport const transferOrdTokens = async (config: TransferOrdTokensConfig): Promise<TransferOrdTokensResult> => {\n  const {\n    protocol,\n    tokenID,\n    utxos,\n    inputTokens,\n    distributions,\n    paymentPk,\n    ordPk,\n    changeAddress,\n    tokenChangeAddress,\n    satsPerKb = DEFAULT_SAT_PER_KB,\n    metaData,\n    signer,\n    decimals,\n    additionalPayments = [],\n    burn = false\n  } = config;\n\n  // calculate change amount\n  let changeAmt = 0n;\n  let totalAmtIn = 0n;\n  let totalAmtOut = 0n;\n\n  // Ensure these inputs are for the expected token\n  if (!inputTokens.every((token) => token.id === tokenID)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n  const modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n  const tx = new Transaction();\n\n  for (const token of inputTokens) {\n    const inputScriptBinary = Utils.toArray(token.script, \"base64\");\n    const inputScript = Script.fromBinary(inputScriptBinary);\n    tx.addInput(inputFromB64Utxo(\n      token,\n      new OrdP2PKH().unlock(\n        ordPk,\n        \"all\",\n        true,\n        token.satoshis,\n        inputScript,\n      ),\n    ));\n\n    totalAmtIn += BigInt(token.amt);\n  }\n\n  // build destination inscriptions\n  for (const dest of distributions) {\n    const bigAmt = BigInt(dest.amt * 10 ** decimals);\n    const transferInscription: TransferTokenInscription = {\n      p: \"bsv-20\",\n      op: burn ? \"burn\" : \"transfer\",\n      amt: bigAmt.toString(),\n    }\n    if (decimals > 0) {\n      transferInscription.amt = (BigInt(dest.amt) * 10n ** BigInt(decimals)).toString();\n    }\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n    if (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n    } else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n    tx.addOutput({\n      satoshis: 1,\n      lockingScript: new OrdP2PKH().lock(\n        dest.address,\n        {\n          dataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n          contentType: \"application/bsv-20\",\n        },\n      ),\n    });\n    totalAmtOut += bigAmt;\n  };\n  changeAmt = totalAmtIn - totalAmtOut;\n\n  let tokenChange: TokenUtxo | undefined;\n  // check that you have enough tokens to send and return change\n  if (changeAmt < 0n) {\n    throw new Error(\"Not enough tokens to send\");\n  }\n  if (changeAmt > 0n) {\n    const transferInscription: TransferTokenInscription = {\n      p: \"bsv-20\",\n      op: \"transfer\",\n      amt: changeAmt.toString(),\n    };\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n    if (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n    } else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n    const lockingScript = new OrdP2PKH().lock(\n      tokenChangeAddress || ordPk.toAddress().toString(),\n      {\n        dataB64: Buffer.from(JSON.stringify(inscription)).toString('base64'),\n        contentType: \"application/bsv-20\",\n      }\n    );\n    const vout = tx.outputs.length;\n    tx.addOutput({ lockingScript, satoshis: 1 });\n    tokenChange = {\n      id: tokenID,\n      satoshis: 1,\n      script: Buffer.from(lockingScript.toBinary()).toString(\"base64\"),\n      txid: \"\",\n      vout,\n      amt: changeAmt.toString(),\n    };\n  }\n\n  // Add additional payments if any\n  for (const p of additionalPayments) {\n    tx.addOutput({\n      satoshis: p.amount,\n      lockingScript: new P2PKH().lock(p.to),\n    });\n  }\n\n  // add change to the outputs\n  let payChange: Utxo | undefined;\n\n  const change = changeAddress || paymentPk.toAddress().toString();\n  const changeScript = new P2PKH().lock(change);\n  const changeOut = {\n    lockingScript: changeScript,\n    change: true,\n  };\n  tx.addOutput(changeOut);\n\n  let totalSatsIn = 0n;\n  const totalSatsOut = tx.outputs.reduce(\n    (total, out) => total + BigInt(out.satoshis || 0),\n    0n,\n  );\n  let fee = 0;\n  for (const utxo of utxos) {\n    const input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n      paymentPk,\n      \"all\",\n      true,\n      utxo.satoshis,\n      Script.fromBinary(Utils.toArray(utxo.script, 'base64'))\n    ));\n\n    tx.addInput(input);\n    // stop adding inputs if the total amount is enough\n    totalSatsIn += BigInt(utxo.satoshis);\n    fee = await modelOrFee.computeFee(tx);\n\n    if (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n      break;\n    }\n  }\n\n  // make sure we have enough\n  if (totalSatsIn < totalSatsOut + BigInt(fee)) {\n    throw new Error(\n      `Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n    );\n  }\n\n  // estimate the cost of the transaction and assign change value\n  await tx.fee(modelOrFee);\n\n  // Sign the transaction\n  await tx.sign();\n\n  const txid = tx.id(\"hex\") as string;\n  if (tokenChange) {\n    tokenChange.txid = txid;\n  }\n  // check for change\n  const payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n  if (payChangeOutIdx !== -1) {\n    const changeOutput = tx.outputs[payChangeOutIdx];\n    payChange = {\n      satoshis: changeOutput.satoshis as number,\n      txid,\n      vout: payChangeOutIdx,\n      script: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n        \"base64\",\n      ),\n    };\n  }\n\n  if (payChange) {\n    const changeOutput = tx.outputs[tx.outputs.length - 1];\n    payChange.satoshis = changeOutput.satoshis as number;\n    payChange.txid = tx.id(\"hex\") as string;\n  }\n\n  return {\n    tx,\n    spentOutpoints: tx.inputs.map(\n      (i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n    ),\n    payChange,\n    tokenChange,\n  };\n};","import type { CollectionItemSubTypeData, CollectionSubTypeData } from \"./types\";\n\n/**\n * Validates sub type data\n * @param {string} subType - Sub type of the ordinals token\n * @param {string} subTypeData - Sub type data of the ordinals token\n * @returns {Error | undefined} Error if validation fails, undefined if validation passes\n */\nexport const validateSubTypeData = (\n  subType: \"collection\" | \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData | CollectionSubTypeData,\n): Error | undefined => {\n  try {\n    if (subType === \"collection\") {\n      const collectionData = subTypeData as CollectionSubTypeData;\n      if (!collectionData.description) {\n        return new Error(\"Collection description is required\");\n      }\n      if (!collectionData.quantity) {\n        return new Error(\"Collection quantity is required\");\n      }\n      if (collectionData.rarityLabels) {\n        if (!Array.isArray(collectionData.rarityLabels)) {\n          return new Error(\"Rarity labels must be an array\");\n        }\n        // make sure keys and values are strings\n        if (!collectionData.rarityLabels.every((label) => {\n          return Object.values(label).every(value => typeof value === 'string');\n        })) {\n          return new Error(`Invalid rarity labels ${collectionData.rarityLabels}`);\n        }\n      }\n      if (collectionData.traits ) {\n        if (typeof collectionData.traits !== \"object\") {\n        return new Error(\"Collection traits must be an object\");\n        }\n        if (collectionData.traits && !Object.keys(collectionData.traits).every(key => typeof key === 'string' && typeof collectionData.traits[key] === 'object')) {\n          return new Error(\"Collection traits must be a valid CollectionTraits object\");\n        }\n      }\n    }\n    if (subType === \"collectionItem\") {\n      const itemData = subTypeData as CollectionItemSubTypeData;\n      if (!itemData.collectionId) {\n        return new Error(\"Collection id is required\");\n      }\n      if (!itemData.collectionId.includes(\"_\")) {\n        return new Error(\"Collection id must be a valid outpoint\");\n      }\n      if (itemData.collectionId.split(\"_\")[0].length !== 64) {\n        return new Error(\"Collection id must contain a valid txid\");\n      }\n      if (Number.isNaN(Number.parseInt(itemData.collectionId.split(\"_\")[1]))) {\n        return new Error(\"Collection id must contain a valid vout\");\n      }\n\n      if (itemData.mintNumber && typeof itemData.mintNumber !== \"number\") {\n        return new Error(\"Mint number must be a number\");\n      }\n      if (itemData.rank && typeof itemData.rank !== \"number\") {\n        return new Error(\"Rank must be a number\");\n      }\n      if (itemData.rarityLabel && typeof itemData.rarityLabel !== \"string\") {\n        return new Error(\"Rarity label must be a string\");\n      }\n      if (itemData.traits && typeof itemData.traits !== \"object\") {\n        return new Error(\"Traits must be an object\");\n      }\n      if (itemData.attachments && !Array.isArray(itemData.attachments)) {\n        return new Error(\"Attachments must be an array\");\n      }\n    }\n    return undefined;\n  } catch (error) {\n    return new Error(\"Invalid JSON data\");\n  }\n};","import {\n\tBigNumber,\n\ttype LockingScript,\n\tOP,\n\tP2PKH,\n\ttype PrivateKey,\n\tScript,\n\ttype Transaction,\n\tTransactionSignature,\n\tUnlockingScript,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { toHex } from \"../utils/strings\";\nimport type { Inscription } from \"../types\";\n\nexport const oLockPrefix =\n\t\"2097dfd76851bf465e8f715593b217714858bbe9570ff3bd5e33840a34e20ff0262102ba79df5f8ae7604a9830f03c7933028186aede0675a16f025dc4f8be8eec0382201008ce7480da41702918d1ec8e6849ba32b4d65b1e40dc669c31a1e6306b266c0000\";\nexport const oLockSuffix =\n\t\"615179547a75537a537a537a0079537a75527a527a7575615579008763567901c161517957795779210ac407f0e4bd44bfc207355a778b046225a7068fc59ee7eda43ad905aadbffc800206c266b30e6a1319c66dc401e5bd6b432ba49688eecd118297041da8074ce081059795679615679aa0079610079517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01007e81517a75615779567956795679567961537956795479577995939521414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff00517951796151795179970079009f63007952799367007968517a75517a75517a7561527a75517a517951795296a0630079527994527a75517a6853798277527982775379012080517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01205279947f7754537993527993013051797e527e54797e58797e527e53797e52797e57797e0079517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a756100795779ac517a75517a75517a75517a75517a75517a75517a75517a75517a7561517a75517a756169587951797e58797eaa577961007982775179517958947f7551790128947f77517a75517a75618777777777777777777767557951876351795779a9876957795779ac777777777777777767006868\";\n\n/**\n * OrdLock class implementing ScriptTemplate.\n *\n * This class provides methods for interacting with OrdinalLock contract \n */\nexport default class OrdLock {\n\t/**\n\t * Creates a 1Sat Ordinal Lock script\n\t *\n\t * @param {string} ordAddress - An address which can cancel listing.\n\t * @param {string} payAddress - Address which is paid on purchase\n\t * @param {number} price - Listing price in satoshis\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\tlock(\n\t\tordAddress: string,\n\t\tpayAddress: string,\n\t\tprice: number,\n\t\tinscription?: Inscription,\n\t): Script {\n\t\tconst cancelPkh = Utils.fromBase58Check(ordAddress).data as number[];\n\t\tconst payPkh = Utils.fromBase58Check(payAddress).data as number[];\n\n\t\tlet script = new Script()\n\t\tif (inscription?.dataB64 !== undefined && inscription?.contentType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(inscription.dataB64, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(inscription.contentType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tscript = Script.fromASM(`OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`);\n\t\t}\n\n\t\treturn script.writeScript(Script.fromHex(oLockPrefix))\n\t\t\t.writeBin(cancelPkh)\n\t\t\t.writeBin(OrdLock.buildOutput(price, new P2PKH().lock(payPkh).toBinary()))\n\t\t\t.writeScript(Script.fromHex(oLockSuffix))\n\t}\n\n\tcancelListing(\n\t\tprivateKey: PrivateKey,\n\t\tsignOutputs: 'all' | 'none' | 'single' = 'all',\n\t\tanyoneCanPay = false,\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: () => Promise<number>\n\t} {\n\t\tconst p2pkh = new P2PKH().unlock(privateKey, signOutputs, anyoneCanPay, sourceSatoshis, lockingScript)\n\t\treturn {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await p2pkh.sign(tx, inputIndex)).writeOpCode(OP.OP_1)\n\t\t\t},\n\t\t\testimateLength: async () => {\n\t\t\t\treturn 107\n\t\t\t}\n\t\t}\n\t}\n\n\tpurchaseListing(\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>\n\t} {\n\t\tconst purchase = {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\tif (tx.outputs.length < 2) {\n\t\t\t\t\tthrow new Error(\"Malformed transaction\")\n\t\t\t\t}\n\t\t\t\tconst script = new UnlockingScript()\n\t\t\t\t\t.writeBin(OrdLock.buildOutput(\n\t\t\t\t\t\ttx.outputs[0].satoshis || 0,\n\t\t\t\t\t\ttx.outputs[0].lockingScript.toBinary()\n\t\t\t\t\t))\n\t\t\t\tif (tx.outputs.length > 2) {\n\t\t\t\t\tconst writer = new Utils.Writer()\n\t\t\t\t\tfor (const output of tx.outputs.slice(2)) {\n\t\t\t\t\t\twriter.write(OrdLock.buildOutput(output.satoshis || 0, output.lockingScript.toBinary()))\n\t\t\t\t\t}\n\t\t\t\t\tscript.writeBin(writer.toArray())\n\t\t\t\t} else {\n\t\t\t\t\tscript.writeOpCode(OP.OP_0)\n\t\t\t\t}\n\n\t\t\t\tconst input = tx.inputs[inputIndex]\n\t\t\t\tlet sourceSats = sourceSatoshis as number\n\t\t\t\tif (!sourceSats && input.sourceTransaction) {\n\t\t\t\t\tsourceSats = input.sourceTransaction.outputs[input.sourceOutputIndex].satoshis as number\n\t\t\t\t} else if (!sourceSatoshis) {\n\t\t\t\t\tthrow new Error(\"sourceTransaction or sourceSatoshis is required\")\n\t\t\t\t}\n\n\t\t\t\tconst sourceTXID = (input.sourceTXID || input.sourceTransaction?.id('hex')) as string\n\t\t\t\tlet subscript = lockingScript as LockingScript\n\t\t\t\tif (!subscript) {\n\t\t\t\t\tsubscript = input.sourceTransaction?.outputs[input.sourceOutputIndex].lockingScript as LockingScript\n\t\t\t\t}\n\t\t\t\tconst preimage = TransactionSignature.format({\n\t\t\t\t\tsourceTXID,\n\t\t\t\t\tsourceOutputIndex: input.sourceOutputIndex,\n\t\t\t\t\tsourceSatoshis: sourceSats,\n\t\t\t\t\ttransactionVersion: tx.version,\n\t\t\t\t\totherInputs: [],\n\t\t\t\t\tinputIndex,\n\t\t\t\t\toutputs: tx.outputs,\n\t\t\t\t\tinputSequence: input.sequence,\n\t\t\t\t\tsubscript,\n\t\t\t\t\tlockTime: tx.lockTime,\n\t\t\t\t\tscope: TransactionSignature.SIGHASH_ALL |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_ANYONECANPAY |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_FORKID\n\t\t\t\t});\n\n\t\t\t\treturn script.writeBin(preimage).writeOpCode(OP.OP_0)\n\t\t\t},\n\t\t\testimateLength: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await purchase.sign(tx, inputIndex)).toBinary().length\n\t\t\t}\n\t\t}\n\t\treturn purchase\n\t}\n\n\tstatic buildOutput(satoshis: number, script: number[]): number[] {\n\t\tconst writer = new Utils.Writer()\n\t\twriter.writeUInt64LEBn(new BigNumber(satoshis))\n\t\twriter.writeVarIntNum(script.length)\n\t\twriter.write(script)\n\t\treturn writer.toArray()\n\t}\n}\n","import {\n  P2PKH,\n  SatoshisPerKilobyte,\n  Script,\n  Transaction,\n  Utils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport {\n  TokenType,\n  type CreateOrdListingsConfig,\n  type CreateOrdTokenListingsConfig,\n  type TokenUtxo,\n  type TransferBSV20Inscription,\n  type TransferBSV21Inscription,\n  type TransferTokenInscription,\n  type Utxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nconst { toArray } = Utils;\n\n// TODO: Handle royalty\nexport const createOrdListings = async (config: CreateOrdListingsConfig) => {\n  const {\n    utxos,\n    listings,\n    paymentPk,\n    ordPk,\n    changeAddress,\n    satsPerKb = DEFAULT_SAT_PER_KB,\n    additionalPayments = [],\n  } = config;\n\n  const modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n  const tx = new Transaction();\n\n  // Warn if creating many inscriptions at once\n  if (listings.length > 100) {\n    console.warn(\n      \"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n    );\n  }\n\n  // Outputs\n  // Add listing outputs\n  for (const listing of listings) {\n    tx.addOutput({\n      satoshis: 1,\n      lockingScript: new OrdLock().lock(\n        listing.ordAddress,\n        listing.payAddress,\n        listing.price,\n      ),\n    });\n    const inputScriptBinary = toArray(listing.listingUtxo.script, \"base64\");\n    const inputScript = Script.fromBinary(inputScriptBinary);\n    tx.addInput(inputFromB64Utxo(\n      listing.listingUtxo,\n      new OrdP2PKH().unlock(\n        ordPk,\n        \"all\",\n        true,\n        listing.listingUtxo.satoshis,\n        inputScript,\n      ),\n    ));\n  }\n\n  // Add additional payments if any\n  for (const p of additionalPayments) {\n    tx.addOutput({\n      satoshis: p.amount,\n      lockingScript: new P2PKH().lock(p.to),\n    });\n  }\n\n  // Check if change is needed\n  let payChange: Utxo | undefined;\n  const changeScript = new P2PKH().lock(\n    changeAddress || paymentPk.toAddress().toString(),\n  );\n  const changeOutput = {\n    lockingScript: changeScript,\n    change: true,\n  };\n  tx.addOutput(changeOutput);\n\n  let totalSatsIn = 0n;\n  const totalSatsOut = tx.outputs.reduce(\n    (total, out) => total + BigInt(out.satoshis || 0),\n    0n,\n  );\n  let fee = 0;\n  for (const utxo of utxos) {\n    const input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n      paymentPk,\n      \"all\",\n      true,\n      utxo.satoshis,\n      Script.fromBinary(Utils.toArray(utxo.script, 'base64'))\n    ));\n\n    tx.addInput(input);\n    // stop adding inputs if the total amount is enough\n    totalSatsIn += BigInt(utxo.satoshis);\n    fee = await modelOrFee.computeFee(tx);\n\n    if (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n      break;\n    }\n  }\n\n  // make sure we have enough\n  if (totalSatsIn < totalSatsOut + BigInt(fee)) {\n    throw new Error(\n      `Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n    );\n  }\n\n  // Calculate fee\n  await tx.fee(modelOrFee);\n\n  // Sign the transaction\n  await tx.sign();\n\n  // check for change\n  const payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n  if (payChangeOutIdx !== -1) {\n    const changeOutput = tx.outputs[payChangeOutIdx];\n    payChange = {\n      satoshis: changeOutput.satoshis as number,\n      txid: tx.id(\"hex\") as string,\n      vout: payChangeOutIdx,\n      script: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n        \"base64\",\n      ),\n    };\n  }\n\n  if (payChange) {\n    const changeOutput = tx.outputs[tx.outputs.length - 1];\n    payChange.satoshis = changeOutput.satoshis as number;\n    payChange.txid = tx.id(\"hex\") as string;\n  }\n\n  return {\n    tx,\n    spentOutpoints: tx.inputs.map(\n      (i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n    ),\n    payChange,\n  };\n};\n\nexport const createOrdTokenListings = async (\n  config: CreateOrdTokenListingsConfig,\n) => {\n  const {\n    utxos,\n    protocol,\n    tokenID,\n    ordPk,\n    paymentPk,\n    additionalPayments = [],\n    changeAddress,\n    tokenChangeAddress,\n    inputTokens,\n    listings,\n    decimals,\n    satsPerKb = DEFAULT_SAT_PER_KB,\n  } = config;\n\n\n  // Warn if creating many inscriptions at once\n  if (listings.length > 100) {\n    console.warn(\n      \"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n    );\n  }\n\n  // Ensure these inputs are for the expected token\n  if (!inputTokens.every((token) => token.id === tokenID)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n  // calculate change amount\n  let changeAmt = 0n;\n  let totalAmtIn = 0n;\n  let totalAmtOut = 0n;\n\n  // Ensure these inputs are for the expected token\n  if (!inputTokens.every((token) => token.id === tokenID)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n  const modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n  const tx = new Transaction();\n  // Outputs\n  // Add listing outputs\n  for (const listing of listings) {\n    // NewTokenListing is not adjusted for decimals\n    const bigAmt = BigInt(listing.amt * 10 ** decimals);\n    const transferInscription: TransferTokenInscription = {\n      p: \"bsv-20\",\n      op: \"transfer\",\n      amt: bigAmt.toString(),\n    };\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n    if (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n    } else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n    tx.addOutput({\n      satoshis: 1,\n      lockingScript: new OrdLock().lock(\n        listing.ordAddress,\n        listing.payAddress,\n        listing.price,\n        {\n          dataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n          contentType: \"application/bsv-20\",\n        },\n      ),\n    });\n    totalAmtOut += bigAmt;\n  }\n\n  // Input tokens are already adjusted for decimals\n  for (const token of inputTokens) {\n    tx.addInput(inputFromB64Utxo(\n      token,\n      new OrdP2PKH().unlock(\n        ordPk,\n        \"all\",\n        true,\n        token.satoshis,\n        Script.fromBinary(toArray(token.script, \"base64\")),\n      ),\n    ));\n\n    totalAmtIn += BigInt(token.amt);\n  }\n  changeAmt = totalAmtIn - totalAmtOut;\n\n  let tokenChange: TokenUtxo | undefined;\n  // check that you have enough tokens to send and return change\n  if (changeAmt < 0n) {\n    throw new Error(\"Not enough tokens to send\");\n  }\n  if (changeAmt > 0n) {\n    const transferInscription: TransferTokenInscription = {\n      p: \"bsv-20\",\n      op: \"transfer\",\n      amt: changeAmt.toString(),\n    };\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n    if (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n    } else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n    const lockingScript = new OrdP2PKH().lock(tokenChangeAddress, {\n      dataB64: Buffer.from(JSON.stringify(inscription)).toString('base64'),\n      contentType: \"application/bsv-20\",\n    });\n    const vout = tx.outputs.length;\n    tx.addOutput({ lockingScript, satoshis: 1 });\n    tokenChange = {\n      id: tokenID,\n      satoshis: 1,\n      script: Buffer.from(lockingScript.toBinary()).toString(\"base64\"),\n      txid: \"\",\n      vout,\n      amt: changeAmt.toString(),\n    };\n  }\n\n  // Add additional payments if any\n  for (const p of additionalPayments) {\n    tx.addOutput({\n      satoshis: p.amount,\n      lockingScript: new P2PKH().lock(p.to),\n    });\n  }\n\n  // add change to the outputs\n  let payChange: Utxo | undefined;\n\n  const change = changeAddress || paymentPk.toAddress().toString();\n  const changeScript = new P2PKH().lock(change);\n  const changeOut = {\n    lockingScript: changeScript,\n    change: true,\n  };\n  tx.addOutput(changeOut);\n\n  let totalSatsIn = 0n;\n  const totalSatsOut = tx.outputs.reduce(\n    (total, out) => total + BigInt(out.satoshis || 0),\n    0n,\n  );\n  let fee = 0;\n  for (const utxo of utxos) {\n    const input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n      paymentPk,\n      \"all\",\n      true,\n      utxo.satoshis,\n      Script.fromBinary(Utils.toArray(utxo.script, 'base64'))\n    ));\n\n    tx.addInput(input);\n    // stop adding inputs if the total amount is enough\n    totalSatsIn += BigInt(utxo.satoshis);\n    fee = await modelOrFee.computeFee(tx);\n\n    if (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n      break;\n    }\n  }\n\n  // make sure we have enough\n  if (totalSatsIn < totalSatsOut + BigInt(fee)) {\n    throw new Error(\n      `Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n    );\n  }\n\n  // estimate the cost of the transaction and assign change value\n  await tx.fee(modelOrFee);\n\n  // Sign the transaction\n  await tx.sign();\n\n  const txid = tx.id(\"hex\") as string;\n  if (tokenChange) {\n    tokenChange.txid = txid;\n  }\n  // check for change\n  const payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n  if (payChangeOutIdx !== -1) {\n    const changeOutput = tx.outputs[payChangeOutIdx];\n    payChange = {\n      satoshis: changeOutput.satoshis as number,\n      txid,\n      vout: payChangeOutIdx,\n      script: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n        \"base64\",\n      ),\n    };\n  }\n\n  if (payChange) {\n    const changeOutput = tx.outputs[tx.outputs.length - 1];\n    payChange.satoshis = changeOutput.satoshis as number;\n    payChange.txid = tx.id(\"hex\") as string;\n  }\n\n  return {\n    tx,\n    spentOutpoints: tx.inputs.map(\n      (i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n    ),\n    payChange,\n    tokenChange,\n  };\n};\n","import { P2PKH, SatoshisPerKilobyte, Script, Transaction, Utils } from \"@bsv/sdk\";\nimport {\n\tTokenType,\n\ttype TokenUtxo,\n\ttype CancelOrdListingsConfig,\n\ttype CancelOrdTokenListingsConfig,\n\ttype Destination,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\n\nexport const cancelOrdListings = async (config: CancelOrdListingsConfig) => {\n\tconst {\n\t\tutxos,\n\t\tlistingUtxos,\n\t\tordPk,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tadditionalPayments = [],\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\n\t// Warn if creating many inscriptions at once\n\tif (listingUtxos.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\t\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinals we're cancelling\n\tfor (const listingUtxo of listingUtxos) {\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().cancelListing(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlistingUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, 'base64'))\n\t\t\t)\n\t\t));\n\t\t// Add cancel outputs returning listed ordinals\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new P2PKH().lock(ordPk.toAddress().toString()),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo, \n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpaymentPk, \n\t\t\t\t\"all\",\n\t\t\t\ttrue, \n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t\t)\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\nexport const cancelOrdTokenListings = async (\n\tconfig: CancelOrdTokenListingsConfig,\n) => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tadditionalPayments,\n\t\tlistingUtxos,\n\t\tutxos,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\t// calculate change amount\n\tlet totalAmtIn = 0;\n\n\tif (listingUtxos.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Ensure these inputs are for the expected token\n\tif (!listingUtxos.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinals we're cancelling\n\tfor (const listingUtxo of listingUtxos) {\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().cancelListing(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlistingUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, 'base64'))\n\t\t\t)\n\t\t));\n\t\ttotalAmtIn += Number.parseInt(listingUtxo.amt);\n\t}\n\n\tconst transferInscription: TransferTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"transfer\",\n\t\tamt: totalAmtIn.toString(),\n\t};\n\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\tif (protocol === TokenType.BSV20) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\ttick: tokenID,\n\t\t} as TransferBSV20Inscription;\n\t} else if (protocol === TokenType.BSV21) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\tid: tokenID,\n\t\t} as TransferBSV21Inscription;\n\t} else {\n\t\tthrow new Error(\"Invalid protocol\");\n\t}\n\n\tconst destination: Destination = {\n\t\taddress: ordAddress || ordPk.toAddress().toString(),\n\t\tinscription: {\n\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t},\n\t};\n\n  const lockingScript = new OrdP2PKH().lock(\n    destination.address,\n    destination.inscription\n  );\n\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript,\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n  const tokenChange: TokenUtxo = {\n    amt: totalAmtIn.toString(),\n    script: Buffer.from(lockingScript.toHex(), 'hex').toString('base64'),\n    txid: tx.id(\"hex\") as string,\n    vout: 0,\n    id: tokenID,\n    satoshis: 1\n  };\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n    tokenChange\n\t};\n};","import { PaymailClient } from \"@bsv/paymail\";\nimport { LockingScript } from \"@bsv/sdk\";\n\nconst client = new PaymailClient();\n\nexport const resolvePaymail = async (paymailAddress: string, amtToReceive: number): Promise<LockingScript> => {\n  const destinationTx = await client.getP2pPaymentDestination(paymailAddress, amtToReceive);\n  // TODO: we are assuming only one output but in reality it can be many\n  return destinationTx.outputs[0].script as LockingScript;\n}","import {\n  LockingScript,\n  P2PKH,\n  SatoshisPerKilobyte,\n  Script,\n  Transaction,\n  Utils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport {\n  RoytaltyType,\n  TokenType,\n  type PurchaseOrdListingConfig,\n  type PurchaseOrdTokenListingConfig,\n  type TransferBSV20Inscription,\n  type TransferBSV21Inscription,\n  type TransferTokenInscription,\n  type Utxo,\n} from \"./types\";\nimport { resolvePaymail } from \"./utils/paymail\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\nexport const purchaseOrdListing = async (config: PurchaseOrdListingConfig) => {\n  const {\n    utxos,\n    paymentPk,\n    listing,\n    ordAddress,\n    changeAddress,\n    additionalPayments = [],\n    satsPerKb = DEFAULT_SAT_PER_KB,\n    royalties = [],\n  } = config;\n\n  const modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n  const tx = new Transaction();\n\n  // Inputs\n  // Add the locked ordinal we're purchasing\n  tx.addInput(\n    inputFromB64Utxo(\n      listing.listingUtxo,\n      new OrdLock().purchaseListing(\n        1,\n        Script.fromBinary(Utils.toArray(listing.listingUtxo.script, \"base64\")),\n      ),\n    ),\n  );\n\n  // Outputs\n  // Add the purchased output\n  tx.addOutput({\n    satoshis: 1,\n    lockingScript: new P2PKH().lock(ordAddress),\n  });\n\n  // add the payment output\n  const reader = new Utils.Reader(Utils.toArray(listing.payout, \"base64\"));\n  const satoshis = reader.readUInt64LEBn().toNumber();\n  const scriptLength = reader.readVarIntNum();\n  const scriptBin = reader.read(scriptLength);\n  const lockingScript = LockingScript.fromBinary(scriptBin);\n  tx.addOutput({\n    satoshis,\n    lockingScript,\n  });\n\n  // Add additional payments if any\n  for (const p of additionalPayments) {\n    tx.addOutput({\n      satoshis: p.amount,\n      lockingScript: new P2PKH().lock(p.to),\n    });\n  }\n\n  // Add any royalties\n  for (const r of royalties) {\n    let lockingScript: LockingScript | undefined;\n    const royaltySats = Math.floor(Number(r.percentage) * satoshis);\n\n    switch (r.type as RoytaltyType) {\n      case RoytaltyType.Paymail:\n        // resolve paymail address\n        lockingScript = await resolvePaymail(r.destination, royaltySats);\n        break;\n      case RoytaltyType.Script:\n        lockingScript = Script.fromBinary(Utils.toArray(r.destination, \"base64\"));\n        break;\n      case RoytaltyType.Address:\n        lockingScript = new P2PKH().lock(r.destination);\n        break;\n      default:\n        throw new Error(\"Invalid royalty type\");\n    }\n    if (!lockingScript) {\n      throw new Error(\"Invalid royalty destination\");\n    }\n    tx.addOutput({\n      satoshis: royaltySats,\n      lockingScript,\n    });\n  }\n\n  // add change to the outputs\n  let payChange: Utxo | undefined;\n\n  const change = changeAddress || paymentPk.toAddress().toString();\n  const changeScript = new P2PKH().lock(change);\n  const changeOut = {\n    lockingScript: changeScript,\n    change: true,\n  };\n  tx.addOutput(changeOut);\n\n  let totalSatsIn = 0n;\n  const totalSatsOut = tx.outputs.reduce(\n    (total, out) => total + BigInt(out.satoshis || 0),\n    0n,\n  );\n  let fee = 0;\n  for (const utxo of utxos) {\n    const input = inputFromB64Utxo(\n      utxo,\n      new P2PKH().unlock(\n        paymentPk,\n        \"all\",\n        true,\n        utxo.satoshis,\n        Script.fromBinary(Utils.toArray(utxo.script, \"base64\")),\n      ),\n    );\n\n    tx.addInput(input);\n    // stop adding inputs if the total amount is enough\n    totalSatsIn += BigInt(utxo.satoshis);\n    fee = await modelOrFee.computeFee(tx);\n\n    if (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n      break;\n    }\n  }\n\n  // make sure we have enough\n  if (totalSatsIn < totalSatsOut + BigInt(fee)) {\n    throw new Error(\n      `Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n    );\n  }\n\n  // estimate the cost of the transaction and assign change value\n  await tx.fee(modelOrFee);\n\n  // Sign the transaction\n  await tx.sign();\n\n  // check for change\n  const payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n  if (payChangeOutIdx !== -1) {\n    const changeOutput = tx.outputs[payChangeOutIdx];\n    payChange = {\n      satoshis: changeOutput.satoshis as number,\n      txid: tx.id(\"hex\") as string,\n      vout: payChangeOutIdx,\n      script: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n        \"base64\",\n      ),\n    };\n  }\n\n  if (payChange) {\n    const changeOutput = tx.outputs[tx.outputs.length - 1];\n    payChange.satoshis = changeOutput.satoshis as number;\n    payChange.txid = tx.id(\"hex\") as string;\n  }\n\n  return {\n    tx,\n    spentOutpoints: tx.inputs.map(\n      (i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n    ),\n    payChange,\n  };\n};\n\nexport const purchaseOrdTokenListing = async (\n  config: PurchaseOrdTokenListingConfig,\n) => {\n  const {\n    protocol,\n    tokenID,\n    utxos,\n    paymentPk,\n    listingUtxo,\n    ordAddress,\n    changeAddress,\n    satsPerKb = DEFAULT_SAT_PER_KB,\n    additionalPayments = [],\n  } = config;\n\n  const modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n  const tx = new Transaction();\n\n  // Inputs\n  // Add the locked ordinal we're purchasing\n  tx.addInput(\n    inputFromB64Utxo(\n      listingUtxo,\n      new OrdLock().purchaseListing(\n        1,\n        Script.fromBinary(Utils.toArray(listingUtxo.script, \"base64\")),\n      ),\n    ),\n  );\n\n  // Outputs\n  const transferInscription: TransferTokenInscription = {\n    p: \"bsv-20\",\n    op: \"transfer\",\n    amt: listingUtxo.amt,\n  };\n  let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n  if (protocol === TokenType.BSV20) {\n    inscription = {\n      ...transferInscription,\n      tick: tokenID,\n    } as TransferBSV20Inscription;\n  } else if (protocol === TokenType.BSV21) {\n    inscription = {\n      ...transferInscription,\n      id: tokenID,\n    } as TransferBSV21Inscription;\n  } else {\n    throw new Error(\"Invalid protocol\");\n  }\n  const dataB64 = Buffer.from(JSON.stringify(inscription)).toString(\"base64\");\n\n  // Add the purchased output\n  tx.addOutput({\n    satoshis: 1,\n    lockingScript: new OrdP2PKH().lock(ordAddress, {\n      dataB64,\n      contentType: \"bsv-20\",\n    }),\n  });\n\n  if (!listingUtxo.payout) {\n    throw new Error(\"Listing UTXO does not have a payout script\");\n  }\n\n  // Add the payment output\n  const reader = new Utils.Reader(Utils.toArray(listingUtxo.payout, \"base64\"));\n  const satoshis = reader.readUInt64LEBn().toNumber();\n  const scriptLength = reader.readVarIntNum();\n  const scriptBin = reader.read(scriptLength);\n  const lockingScript = LockingScript.fromBinary(scriptBin);\n  tx.addOutput({\n    satoshis,\n    lockingScript,\n  });\n\n  // Add additional payments if any\n  for (const p of additionalPayments) {\n    tx.addOutput({\n      satoshis: p.amount,\n      lockingScript: new P2PKH().lock(p.to),\n    });\n  }\n\n  // add change to the outputs\n  let payChange: Utxo | undefined;\n\n  const change = changeAddress || paymentPk.toAddress().toString();\n  const changeScript = new P2PKH().lock(change);\n  const changeOut = {\n    lockingScript: changeScript,\n    change: true,\n  };\n  tx.addOutput(changeOut);\n\n  let totalSatsIn = 0n;\n  const totalSatsOut = tx.outputs.reduce(\n    (total, out) => total + BigInt(out.satoshis || 0),\n    0n,\n  );\n  let fee = 0;\n  for (const utxo of utxos) {\n    const input = inputFromB64Utxo(\n      utxo,\n      new P2PKH().unlock(\n        paymentPk,\n        \"all\",\n        true,\n        utxo.satoshis,\n        Script.fromBinary(Utils.toArray(utxo.script, \"base64\")),\n      ),\n    );\n\n    tx.addInput(input);\n    // stop adding inputs if the total amount is enough\n    totalSatsIn += BigInt(utxo.satoshis);\n    fee = await modelOrFee.computeFee(tx);\n\n    if (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n      break;\n    }\n  }\n\n  // make sure we have enough\n  if (totalSatsIn < totalSatsOut + BigInt(fee)) {\n    throw new Error(\n      `Not enough funds to purchase token listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n    );\n  }\n\n  // estimate the cost of the transaction and assign change value\n  await tx.fee(modelOrFee);\n\n  // Sign the transaction\n  await tx.sign();\n\n  const payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n  if (payChangeOutIdx !== -1) {\n    const changeOutput = tx.outputs[payChangeOutIdx];\n    payChange = {\n      satoshis: changeOutput.satoshis as number,\n      txid: tx.id(\"hex\") as string,\n      vout: payChangeOutIdx,\n      script: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n        \"base64\",\n      ),\n    };\n  }\n\n  if (payChange) {\n    const changeOutput = tx.outputs[tx.outputs.length - 1];\n    payChange.satoshis = changeOutput.satoshis as number;\n    payChange.txid = tx.id(\"hex\") as string;\n  }\n\n  return {\n    tx,\n    spentOutpoints: tx.inputs.map(\n      (i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n    ),\n    payChange,\n  };\n};\n","// import sharp from \"sharp\";\n// import type { IconInscription, ImageContentType } from \"../types\";\n\n// // export the errors for use in tests\n// export const ErrorOversizedIcon = new Error(\n// \t\"Image must be a square image with dimensions <= 400x400\",\n// );\n// export const ErrorIconProportions = new Error(\"Image must be a square image\");\n// export const ErrorInvalidIconData = new Error(\"Error processing image\");\n// export const ErrorImageDimensionsUndefined = new Error(\n// \t\"Image dimensions are undefined\",\n// );\n\n// export const validIconData = async (\n// \ticon: IconInscription,\n// ): Promise<Error | null> => {\n// \tconst { dataB64, contentType } = icon;\n// \ttry {\n// \t\tconst buffer = Buffer.from(dataB64, \"base64\");\n// \t\tlet image = sharp(buffer);\n\n// \t\t// Special handling for SVG\n// \t\tif (contentType === \"image/svg+xml\") {\n// \t\t\t// Convert SVG to PNG for consistent dimension checking\n// \t\t\timage = image.png();\n// \t\t}\n\n// \t\tconst metadata = await image.metadata();\n\n// \t\tif (metadata.width === undefined || metadata.height === undefined) {\n// \t\t\treturn ErrorImageDimensionsUndefined;\n// \t\t}\n// \t\t// Check if the image is a square\n// \t\tif (metadata.width !== metadata.height) {\n// \t\t\treturn ErrorIconProportions;\n// \t\t}\n// \t\t// ensure the image is <= 400x400\n// \t\tif (metadata.width > 400 || metadata.height > 400) {\n// \t\t\treturn ErrorOversizedIcon;\n// \t\t}\n\n// \t\treturn null;\n// \t} catch (error) {\n// \t\treturn ErrorInvalidIconData;\n// \t}\n// };\n\nimport Jimp from \"jimp\";\nimport type { IconInscription, ImageContentType } from \"../types\";\n\nexport const ErrorOversizedIcon = new Error(\n\t\"Image must be a square image with dimensions <= 400x400\",\n);\nexport const ErrorIconProportions = new Error(\"Image must be a square image\");\nexport const ErrorInvalidIconData = new Error(\"Error processing image\");\nexport const ErrorImageDimensionsUndefined = new Error(\n\t\"Image dimensions are undefined\",\n);\n\nconst isImageContentType = (value: string): value is ImageContentType => {\n\treturn (value as ImageContentType) === value;\n};\n\nexport const validIconData = async (\n\ticon: IconInscription,\n): Promise<Error | null> => {\n\tconst { dataB64, contentType } = icon;\n\n\tif (contentType === \"image/svg+xml\") {\n\t\treturn validateSvg(dataB64);\n\t}\n\n\t// make sure the contentType is one of ImageContentType\n\tif (!isImageContentType(contentType)) {\n\t\treturn ErrorInvalidIconData;\n\t}\n\n\ttry {\n\t\tconst buffer = Buffer.from(dataB64, \"base64\");\n\t\tconst image = await Jimp.read(buffer);\n\n\t\tconst width = image.getWidth();\n\t\tconst height = image.getHeight();\n\n\t\tif (width === undefined || height === undefined) {\n\t\t\treturn ErrorImageDimensionsUndefined;\n\t\t}\n\t\tif (width !== height) {\n\t\t\treturn ErrorIconProportions;\n\t\t}\n\t\tif (width > 400 || height > 400) {\n\t\t\treturn ErrorOversizedIcon;\n\t\t}\n\n\t\treturn null;\n\t} catch (error) {\n\t\treturn ErrorInvalidIconData;\n\t}\n};\n\nconst validateSvg = (svgBase64: string): Error | null => {\n  const svgString = Buffer.from(svgBase64, \"base64\").toString(\"utf-8\");\n  const widthMatch = svgString.match(/<svg[^>]*\\s+width=\"([^\"]+)\"/);\n  const heightMatch = svgString.match(/<svg[^>]*\\s+height=\"([^\"]+)\"/);\n  console.log({widthMatch, heightMatch})\n  if (!widthMatch || !heightMatch) {\n    return ErrorImageDimensionsUndefined;\n  }\n\n\tconst width = Number.parseInt(widthMatch[1], 10);\n\tconst height = Number.parseInt(heightMatch[1], 10);\n\n\tif (Number.isNaN(width) || Number.isNaN(height)) {\n\t\treturn ErrorImageDimensionsUndefined;\n\t}\n\n\tif (width !== height) {\n\t\treturn ErrorIconProportions;\n\t}\n\tif (width > 400 || height > 400) {\n\t\treturn ErrorOversizedIcon;\n\t}\n\n\treturn null;\n}\n\nexport const validIconFormat = (icon: string): boolean => {\n\tif (!icon.includes(\"_\") || icon.endsWith(\"_\")) {\n\t\treturn false;\n\t}\n\n\t// use parseint to validate the vout\n\tconst iconVout = Number.parseInt(icon.split(\"_\")[1]);\n\tif (Number.isNaN(iconVout)) {\n\t\treturn false;\n\t}\n\n\tif (!icon.startsWith(\"_\") && icon.split(\"_\")[0].length !== 64) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","import {\n\tTransaction,\n\tP2PKH,\n\tSatoshisPerKilobyte,\n\ttype TransactionOutput,\n\tUtils,\n\tScript,\n} from \"@bsv/sdk\";\nimport type {\n\tDeployBsv21TokenConfig,\n\tDeployBsv21TokenResult,\n\tDeployMintTokenInscription,\n\tInscription,\n\tUtxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { validIconData, validIconFormat } from \"./utils/icon\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\n\n/**\n * Deploys & Mints a BSV21 token to the given destination address\n * @param {DeployBsv21TokenConfig} config - Configuration object for deploying BSV21 token\n * @param {string} config.symbol - Token ticker symbol\n * @param {number} config.decimals - Number of decimal places to display\n * @param {string | IconInscription} config.icon - outpoint (format: txid_vout) or Inscription. If Inscription, must be a valid image type\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {Distribution} config.initialDistribution - Initial distribution with addresses and total supply (not adjusted for decimals, library will add zeros)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {string} config.destinationAddress - Address to deploy token to.\n * @param {string} config.changeAddress - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<DeployBsv21TokenResult>} Transaction to deploy BSV 2.1 token\n */\nexport const deployBsv21Token = async (\n\tconfig: DeployBsv21TokenConfig,\n): Promise<DeployBsv21TokenResult> => {\n\tconst {\n\t\tsymbol,\n\t\ticon,\n    decimals,\n\t\tutxos,\n\t\tinitialDistribution,\n\t\tpaymentPk,\n\t\tdestinationAddress,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\tlet iconValue: string;\n\tif (typeof icon === \"string\") {\n\t\ticonValue = icon;\n\t} else {\n\t\tconst iconError = await validIconData(icon);\n\t\tif (iconError) {\n\t\t\tthrow iconError;\n\t\t}\n\t\t// add icon inscription to the transaction\n\t\tconst iconScript = new OrdP2PKH().lock(destinationAddress, icon);\n\t\tconst iconOut = {\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: iconScript,\n\t\t};\n\t\ttx.addOutput(iconOut);\n\t\t// relative output index of the icon\n\t\ticonValue = \"_0\";\n\t}\n\n\t// Ensure the icon format\n\tif (!validIconFormat(iconValue)) {\n\t\tthrow new Error(\n\t\t\t\"Invalid icon format. Must be either outpoint (format: txid_vout) or relative output index of the icon (format _vout). examples: ecb483eda58f26da1b1f8f15b782b1186abdf9c6399a1c3e63e0d429d5092a41_0 or _1\",\n\t\t);\n\t}\n  \n\t// Outputs\n  const amt = decimals ? BigInt(initialDistribution.amt) * 10n ** BigInt(decimals) : BigInt(initialDistribution.amt);\n\tconst fileData: DeployMintTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"deploy+mint\",\n\t\tsym: symbol,\n\t\ticon: iconValue,\n\t\tamt: amt.toString(),\n\t};\n\n  if (decimals) {\n    fileData.dec = decimals.toString();\n  }\n\n\tconst b64File = Buffer.from(JSON.stringify(fileData)).toString(\"base64\");\n\tconst sendTxOut = {\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(destinationAddress, {\n\t\t\tdataB64: b64File,\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t} as Inscription),\n\t};\n\ttx.addOutput(sendTxOut);\n\n\t// Additional payments\n\tfor (const payment of additionalPayments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new P2PKH().lock(payment.to),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to deploy token. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n"],"names":["TokenType","RoytaltyType","toHex","utf8Str","Buffer","from","toString","DEFAULT_SAT_PER_KB","API_HOST","OrdP2PKH","_P2PKH","apply","arguments","_inheritsLoose","prototype","lock","address","inscription","metaData","ordAsm","undefined","dataB64","contentType","ordHex","fileHex","trim","Error","fileMediaType","inscriptionAsm","P2PKH","toASM","app","type","_i","_Object$entries","Object","entries","length","_Object$entries$_i","key","value","LockingScript","fromASM","MAX_TOKEN_SUPPLY","Math","pow","fromBase58Check","Utils","inputFromB64Utxo","utxo","unlockScriptTemplate","fromUtxo","_extends","script","fetchPayUtxos","scriptEncoding","payUrl","console","log","Promise","resolve","fetch","then","payRes","ok","json","payUtxos","filter","u","satoshis","pubKeyHash","p2pkhScript","data","map","txid","vout","toBinary","e","reject","fetchNftUtxos","collectionId","limit","offset","url","JSON","stringify","subTypeData","res","nftUtxos","outpoints","_u$data","list","method","headers","body","concat","nftRes","nfts","Script","fromHex","nftUtxo","origin","outpoint","fetchTokenUtxos","protocol","tokenId","BSV20","tokenUtxos","amt","id","signData","tx","signer","_exit","_temp2","_result","idKey","keyHost","_sigma$sign","Sigma","sign","signedTx","_temp","authToken","sigma","remoteSign","_ref","_catch","stringifyMetaData","result","Array","isArray","String","pact","state","s","_Pact","o","bind","v","_settle","observer","onFulfilled","this","_this","onRejected","_isSettledPact","thenable","createOrdinals","config","_temp4","_interrupt","totalSatsIn","totalSatsOut","BigInt","fee","modelOrFee","payChangeOutIdx","outputs","findIndex","change","changeOutput","payChange","lockingScript","spentOutpoints","utxos","_forOf","input","unlock","paymentPk","fromBinary","toArray","addInput","computeFee","_modelOrFee$computeFe","destinations","changeAddress","_config$satsPerKb","satsPerKb","_config$additionalPay","additionalPayments","warn","_step","SatoshisPerKilobyte","Transaction","_iterator","_createForOfIteratorHelperLoose","done","destination","_Object$keys","keys","addOutput","_step2","_iterator2","p","amount","to","toAddress","changeScript","reduce","total","out","_temp3","pop","_signData","sendOrdinals","enforceUniformSend","ordinals","ordUtxo","ordPk","push","_destination$inscript","_destination$inscript2","_step3","_iterator3","array","_cycle","i","check","paymentUtxos","sendUtxos","changeOut","payments","_config$changeAddress","payment","sendTxOut","_iteratorSymbol","Symbol","iterator","transferOrdTokens","tokenChange","inputs","sourceTXID","sourceOutputIndex","tokenID","inputTokens","distributions","tokenChangeAddress","decimals","_config$burn","burn","changeAmt","totalAmtIn","totalAmtOut","every","token","inputScriptBinary","inputScript","dest","bigAmt","transferInscription","op","tick","BSV21","target","step","next","validateSubTypeData","subType","collectionData","description","quantity","rarityLabels","label","values","traits","itemData","includes","split","Number","isNaN","parseInt","mintNumber","rank","rarityLabel","attachments","error","OrdLock","_proto","ordAddress","payAddress","price","cancelPkh","payPkh","writeScript","writeBin","buildOutput","cancelListing","privateKey","signOutputs","anyoneCanPay","sourceSatoshis","p2pkh","inputIndex","_p2pkh$sign","writeOpCode","OP","OP_1","estimateLength","purchaseListing","purchase","_input$sourceTransact","UnlockingScript","writer","Writer","slice","output","write","OP_0","sourceSats","sourceTransaction","_input$sourceTransact2","subscript","preimage","TransactionSignature","format","transactionVersion","version","otherInputs","inputSequence","sequence","lockTime","scope","SIGHASH_ALL","SIGHASH_ANYONECANPAY","SIGHASH_FORKID","_purchase$sign","writeUInt64LEBn","BigNumber","writeVarIntNum","callback","return","_fixup","TypeError","_forTo","createOrdListings","listings","listing","listingUtxo","createOrdTokenListings","_interrupt2","_config$additionalPay2","_config$satsPerKb2","_step4","_iterator4","_step5","_iterator5","_modelOrFee$computeFe2","cancelOrdListings","listingUtxos","cancelOrdTokenListings","client","PaymailClient","purchaseOrdListing","_temp6","_result2","_config$royalties","royalties","reader","Reader","payout","readUInt64LEBn","toNumber","scriptLength","readVarIntNum","scriptBin","read","_temp5","r","royaltySats","floor","percentage","_switch","Paymail","paymailAddress","amtToReceive","getP2pPaymentDestination","destinationTx","resolvePaymail","_resolvePaymail","Address","purchaseOrdTokenListing","_temp8","_interrupt3","_temp7","ErrorOversizedIcon","ErrorIconProportions","ErrorInvalidIconData","ErrorImageDimensionsUndefined","deployBsv21Token","iconValue","icon","endsWith","iconVout","startsWith","validIconFormat","initialDistribution","fileData","sym","symbol","dec","b64File","destinationAddress","svgBase64","svgString","widthMatch","match","heightMatch","width","height","validateSvg","buffer","Jimp","image","getWidth","getHeight","validIconData","iconError","iconScript"],"mappings":"s6CAMA,ICwKYA,EA2CAC,EDnNNC,EAAQ,SAACC,GACb,OAAOC,OAAOC,KAAKF,GAASG,SAAS,MACvC,EEPaC,EAAqB,GACrBC,EAAW,sCCaHC,eAASC,SAAAA,YAAAD,IAAA,OAAAC,EAAAC,MAAAC,KAAAA,YAAAC,IAAAA,kBAAAH,KAAAD,yEAAAA,EAAAK,UAU7BC,KAAA,SACCC,EACEC,EACFC,GAEA,IAAIC,EAAS,GAEb,QAA6BC,KAAzBH,MAAAA,OAAAA,EAAAA,EAAaI,eAAsDD,WAA7BH,SAAAA,EAAaK,aAA2B,CACjF,IAAMC,EAASrB,EAAM,OAEfsB,EADWpB,OAAOC,KAAKY,EAAYI,QAAS,UACzBf,SAAS,OAAOmB,OACzC,IAAKD,EACJ,UAAUE,MAAM,qBAEjB,IAAMC,EAAgBzB,EAAMe,EAAYK,aACxC,IAAKK,EACJ,UAAUD,MAAM,sBAEjBP,gBAAuBI,EAAM,SAASI,EAAsBH,SAAAA,aAC7D,CAGA,IACII,GAAoBT,EAAYA,EAAY,IAAA,KAD1B,IAAIU,GAAQd,KAAKC,GAC4Bc,QAGnE,GAAIZ,KAAcA,EAASa,MAAQb,EAASc,MAC3C,MAAM,IAAIN,MAAM,4CAGjB,GAAIR,MAAAA,GAAAA,EAAUa,KAAOb,MAAAA,GAAAA,EAAUc,KAAM,CAGpCJ,EAAoBA,EAAc,cAFb1B,EDxDE,sCC0DqC,IADxCA,EAAM,OAG1B,IAAA,IAAA+B,EAAA,EAAAC,EAA2BC,OAAOC,QAAQlB,GAASe,EAAAC,EAAAG,OAAAJ,IAAE,CAAhD,IAAAK,EAAAJ,EAAAD,GAAOM,EAAGD,EAAEE,GAAAA,EAAKF,KACT,QAARC,IACHX,EAAoBA,MAAkB1B,EAAMqC,GAAI,IAAIrC,EACnDsC,GAGH,CACD,CAEA,OAAOC,EAAcC,QAAQd,EAC9B,EAACnB,CAAA,CAvD4BC,CAAQmB,IF+JtC,SAAY7B,GACVA,EAAA,MAAA,QACAA,EAAA,MAAA,OACD,CAHD,CAAYA,IAAAA,EAGX,KAwCD,SAAYC,GACVA,EAAA,QAAA,UACAA,EAAA,QAAA,UACAA,EAAA,OAAA,QACD,CAJD,CAAYA,IAAAA,EAIX,CAAA,IA8RY,IAAA0C,EAAmBC,KAAAC,OAAM,KAAM,GG/epCC,EAAoBC,EAApBD,gBAQKE,EAAmB,SAC/BC,EACAC,GAYA,OAPcC,EAAQC,KAEjBH,EAAI,CACPI,OAAQjD,OAAOC,KAAK4C,EAAKI,OAAQ,UAAU/C,SAAS,SAErD4C,EAGF,EAOaI,EAAa,SAAUtC,EAAiBuC,QAAAA,IAAAA,IAAAA,EAA2C,UAAQ,IACvG,IAAMC,EAAYhD,EAAQ,iBAAiBQ,EAA6B,uBAChD,OAAxByC,QAAQC,IAAI,CAAEF,OAAAA,IAAUG,QAAAC,QACHC,MAAML,IAAOM,cAA5BC,GACN,IAAKA,EAAOC,GACX,MAAU,IAAAtC,MAAM,4BAChB,OAAAiC,QAAAC,QACoBG,EAAOE,QAAMH,KAA9BI,SAAAA,GAEJA,EAAWA,EAASC,OAAO,SAACC,GAAuB,OAAoB,IAAfA,EAAEC,QAAc,GAGxE,IAAMC,EAAaxB,EAAgB9B,GAC7BuD,GAAc,IAAI1C,GAAQd,KAAKuD,EAAWE,MAOhD,OANWN,EAASO,IAAI,SAACxB,SAAyB,CACjDyB,KAAMzB,EAAKyB,KACXC,KAAM1B,EAAK0B,KACXN,SAAUpB,EAAKoB,SACfhB,OAA2B,QAAnBE,GAA+C,WAAnBA,EAA8BnD,OAAOC,KAAKkE,EAAYK,YAAYtE,SAASiD,GAAkBgB,EAAYzC,QAC7I,EACyB,IAC3B,CAAC,MAAA+C,GAAAlB,OAAAA,QAAAmB,OAAAD,KAWYE,EAAa,SACzB/D,EACAgE,EACAC,EACAC,EACC3B,QAFD0B,IAAAA,IAAAA,EAAQ,aACRC,IAAAA,EAAS,YACR3B,IAAAA,EAA2C,UACrB,IACvB,IAAI4B,EAAS3E,EAAQ,iBAAiBQ,EAAyBiE,kBAAAA,EAAgBC,WAAAA,EAAS,IAUvF,OARGF,IAOHG,GAAG,KADc/E,OAAOC,KAAK+E,KAAKC,UALpB,CACbZ,IAAK,CACJa,YAAa,CAAEN,aAAAA,OAGmC1E,SAAS,WAE7DqD,QAAAC,QAEiBC,MAAMsB,IAAIrB,cAAtByB,GACN,IAAKA,EAAIvB,GACR,MAAU,IAAAtC,MAAsCV,gCAAAA,GAChD,OAAA2C,QAAAC,QAGoB2B,EAAItB,QAAMH,KAA3B0B,SAAAA,GAUJ,IAAMC,GAPND,EAAWA,EAASrB,OACnB,SAACC,GAGAsB,IAAAA,EAAK,OAAe,IAAftB,EAAEC,YAAyB,OAAPqB,EAACtB,EAAEI,OAAFkB,EAAQC,SAGTlB,IAC1B,SAACxB,GAAoC,OAAQA,EAAKyB,KAAQzB,IAAAA,EAAK0B,IAAI,GAClE,OAAAhB,QAAAC,QAEmBC,MAASrD,EAAQ,8BAA+B,CACpEoF,OAAQ,OACRC,QAAS,CACR,eAAgB,oBAEjBC,KAAMV,KAAKC,aAASU,OAAKN,OACxB3B,cANIkC,GAQN,IAAKA,EAAOhC,GACX,MAAM,IAAItC,MAAK,kCAAmCV,GAClD,OAAA2C,QAAAC,QAEmBoC,EAAO/B,QAAMH,KAAA,SAA3BmC,GA6BN,OA3BAT,EAAWS,EAAKxB,IACf,SAACxB,GAMG,IAAII,EAASJ,EAAKI,OACK,QAAnBE,EACFF,EAASjD,OAAOC,KAAKgD,EAAQ,UAAU/C,SAAS,OACpB,QAAnBiD,IACTF,EAAS6C,EAAOC,QAAQ/F,OAAOC,KAAKgD,EAAQ,UAAU/C,SAAS,QAAQwB,SAE5E,IAAMsE,EAAU,CACfC,OAAQpD,EAAKoD,OAAOC,SACpBjD,OAAAA,EACAsB,KAAM1B,EAAK0B,KACXD,KAAMzB,EAAKyB,KACXL,SAAU,GAKX,OAHIW,IACHoB,EAAQpB,aAAeA,GAEjBoB,CACR,EAG4B,EAC9B,EAAA,EAAA,EAAA,CAAC,MAAAvB,GAAA,OAAAlB,QAAAmB,OAAAD,EASD,CAAA,EAAa0B,WACZC,EACAC,EACAzF,GAAe,IAEgH,OAAA2C,QAAAC,QAC7GC,MADHrD,EAAkBQ,UAAAA,EAAWwF,KAAAA,IAAaxG,EAAU0G,MAAQ,OAAS,MAAI,IAAID,EAAO,8BACvE3C,KAAtByB,SAAAA,GACN,IAAKA,EAAIvB,GACR,MAAU,IAAAtC,MAAK,kBAAmB8E,EAAgB,UAClD,OAAA7C,QAAAC,QAGsB2B,EAAItB,QAAMH,cAA7B6C,GAWJ,OATaA,EAAWlC,IAAI,SAACxB,GAA8B,MAAA,CAC1D2D,IAAK3D,EAAK2D,IACVvD,OAAQJ,EAAKI,OACbsB,KAAM1B,EAAK0B,KACXD,KAAMzB,EAAKyB,KACXmC,GAAIJ,EACJpC,SAAU,EACV,EAEgC,EAAA,EAClC,CAAC,MAAAQ,UAAAlB,QAAAmB,OAAAD,EAAA,CAAA,EClLYiC,WACZC,EACAC,GACyB,IAAA,IAqBuCC,EArBvCC,EAAA,SAAAC,GAAAF,GAAAA,EAAAE,OAAAA,EAqBzB,MAAU,IAAAzF,MAAM,+CAAgD,EAnB1D0F,EAASJ,MAAAA,OAAAA,EAAAA,EAAwBI,MACjCC,EAAWL,MAAAA,OAAAA,EAAAA,EAAyBK,QAE1C,GAAID,EAAO,CACV,IACAE,EADc,IAAIC,EAAMR,GACGS,KAAKJ,GAChC,OAAAzD,QAAAC,QADgB0D,EAARG,SAET,CAAC,IAAAC,EAAA,WAAA,GACGL,EAAO,CACV,IAAMM,EAAoC,MAAvBX,OAAuB,EAAvBA,EAAyBW,UACtCC,EAAQ,IAAIL,EAAMR,GAAI,+BACxBpD,QAAAC,QACwBgE,EAAMC,WAAWR,EAASM,IAAU7D,KAAAgE,SAAAA,GAA/C,OAAAb,EAAA,EAAAa,EAARL,QACO,4DAHYM,CAAA,EAInBlD,SAAAA,GAER,MADApB,QAAQC,IAAImB,GACF,IAAAnD,MAAK,qBAAsB2F,EAAO,UAC7C,EAAC1D,CAAAA,CAVD,GAUCA,OAAAA,QAAAC,QAAA8D,GAAAA,EAAA5D,KAAA4D,EAAA5D,KAAAoD,GAAAA,EAAAQ,GAGH,CAAC,MAAA7C,GAAAlB,OAAAA,QAAAmB,OAAAD,EAAA,CAAA,ECjCKmD,EAAoB,SAAC9G,GACzB,GAAKA,EAAL,CAMD,IALA,IAAM+G,EAAc,CACnBlG,IAAKb,EAASa,IACdC,KAAMd,EAASc,MAGhBC,EAAAC,EAAAA,EAA2BC,OAAOC,QAAQlB,GAASe,EAAAC,EAAAG,OAAAJ,IAAE,CAAhD,IAAAK,EAAAJ,EAAAD,GAAYO,EAAKF,EACrB,QAAclB,IAAVoB,IAEFyF,EAHY3F,EAAA,IAEQ,iBAAVE,EACIA,EACJ0F,MAAMC,QAAQ3F,IAA2B,iBAAVA,EAC3B4C,KAAKC,UAAU7C,GAEf4F,OAAO5F,GAGxB,CAEA,OAAOyF,CAlByB,CAmBjC,0HC6CII,EAAAC,EAAA9F,SACD+F,EAAA,iBAEEC,EAAU,CACZ,IAAAhG,EAAA+F,gBAWCE,IAAWC,KAAA,KAAAL,EAAAC,IAVZ,EAAAA,IAKAA,EAAE9F,EAAA+F,GAGJ/F,EAAiCA,EAAAmG,CAK/B,IACDnG,GAAAA,EAAAsB,iBAEDtB,SAAgCkG,KAAA,KAAAL,EAAAC,GAAAM,EAAAF,KAAA,KAAAL,EAAA,IAGhCA,EAAAE,IACCF,EAAAM,EAAAnG,EACA,IAAAqG,EAAYR,EAAAI,EACXI,GACFA,EAAGR,EAGH,EAjGM,IAAAG,eAAc,WAQrB,SAAAA,IACAA,QAAAA,EAAO1H,UAAEgD,KAAA,SAAoBgF,KAC7B,IAASb,EAAQ,IAAAO,EACVF,EAAAS,KAAAR,EAEP,GAAAD,EAAA,gFAYG,QACGS,KAACN,WAAoBO,OAiB1B,IAA6CxG,EAAAwG,EAAAL,IACzCK,IACHJ,EAAAX,EACC,EAAAa,EAAAA,EAAAtG,GAAAA,GAEDyG,EAEDL,IAAmB,EAAAK,MAGTL,EAAAX,EAAA,EAAAzF,EAEV,CAAA,MAAWqC,GACV+D,EAAIX,EAAC,EAAApD,EACJ,GAG2CoD,IAG1C,CA/DiB,GAwGnB,SAAAiB,KAOA,OAAAC,aAAAX,GAAqC,EAAVW,EAAUZ,EArF1B,IAAAa,EAAc,SAC1BC,GAGqC,IACHC,IAAAA,EAAAA,eAAAC,EAAA,SAAArC,IAwGlC,GAAIsC,EAAcC,EAAeC,OAAOC,GACvC,MAAM,IAAIjI,8DAC+C8H,EAAW,qBAAqBC,EAAY,UAAUE,GAE/G,OAAAhG,QAAAC,QAGKmD,EAAG4C,IAAIC,IAAW9F,KAAAH,WAAAA,OAAAA,QAAAC,QAGlBmD,EAAGS,QAAM1D,KAAA,WAEf,IAAM+F,EAAkB9C,EAAG+C,QAAQC,UAAU,SAACtB,GAAC,OAAKA,EAAEuB,MAAM,GAC5D,IAAyB,IAArBH,EAAwB,CAC3B,IAAMI,EAAelD,EAAG+C,QAAQD,GAChCK,EAAY,CACX7F,SAAU4F,EAAa5F,SACvBK,KAAMqC,EAAGF,GAAG,OACZlC,KAAMkF,EACNxG,OAAQjD,OAAOC,KAAK4J,EAAaE,cAAcvF,YAAYtE,SAC1D,UAGH,CAQA,OANI4J,IAEHA,EAAU7F,SADW0C,EAAG+C,QAAQ/C,EAAG+C,QAAQzH,OAAS,GAClBgC,SAClC6F,EAAUxF,KAAOqC,EAAGF,GAAG,QAGjB,CACNE,GAAAA,EACAqD,eAAgBC,EAAM5F,IAAI,SAACxB,GAAY,OAAAA,EAAKyB,KAAQzB,IAAAA,EAAK0B,IAAI,GAC7DuF,UAAAA,EACC,EAvDF,EAAA,CAAA,IAAIP,EAAM,EAAEjC,uwBAAA4C,CACOD,WAARpH,GACV,KAAIuG,GAAeC,EAAeC,OAAOC,IAAzC,CAGA,IAAMY,EAAQvH,EAAiBC,GAAM,IAAIpB,GAAQ2I,OAChDC,EACA,OACA,EACAxH,EAAKoB,SACL6B,EAAOwE,WAAW3H,EAAM4H,QAAQ1H,EAAKI,OAAQ,aAKT,OAFrC0D,EAAG6D,SAASL,GAEZf,GAAeE,OAAOzG,EAAKoB,UAAUV,QAAAC,QACzBgG,EAAWiB,WAAW9D,IAAGjD,cAAAgH,GAArCnB,EAAGmB,CAAmC,EAZtC,CAF+CvB,EAE/C,CAaD,EAACA,WAAAA,OAAAA,CAAA,UAAA7B,GAAAA,EAAA5D,KAAA4D,EAAA5D,KAAAoD,GAAAA,GAAA,EAnGAmD,EAQGhB,EARHgB,MACAU,EAOG1B,EAPH0B,aACAN,EAMGpB,EANHoB,UACAO,EAKG3B,EALH2B,cAAaC,EAKV5B,EAJH6B,UAAAA,OAAS,IAAAD,EAAG1K,EAAkB0K,EAC9B/J,EAGGmI,EAHHnI,SACA8F,EAEGqC,EAFHrC,OAAMmE,EAEH9B,EADH+B,mBAAAA,OAAqB,IAAHD,EAAG,GAAEA,EAIpBJ,EAAa1I,OAAS,KACzBoB,QAAQ4H,KACP,iGASF,IALA,IAKsCC,EAgClCpB,EArCEN,EAAa,IAAI2B,EAAoBL,GACvCnE,EAAK,IAAIyE,EAIbC,EAAAC,EAA0BX,KAAYO,EAAAG,KAAAE,MAAE,CAA7B,IAAAC,EAAWN,EAAA9I,MACrB,IAAKoJ,EAAY3K,YAChB,MAAU,IAAAS,MAAM,gDAIjB,GAAIR,EACH,IAAAe,IAAAA,EAAA4J,EAAAA,EAAiB1J,OAAO2J,KAAK5K,GAASe,EAAA4J,EAAAxJ,OAAAJ,IAAE,CAApC,IAAMM,EAAGsJ,EAAA5J,QACUb,IAAlBF,EAASqB,WACLrB,EAASqB,EAElB,CAGDwE,EAAGgF,UAAU,CACZ1H,SAAU,EACV8F,eAAe,IAAI1J,GAAWM,KAC7B6K,EAAY5K,QACZ4K,EAAY3K,YACZ+G,EAAkB9G,KAGrB,CAGA,IAAA,IAAkC8K,EAAlCC,EAAAP,EAAgBN,KAAkBY,EAAAC,KAAAN,MAAE,CAAzB,IAAAO,EAACF,EAAAxJ,MACXuE,EAAGgF,UAAU,CACZ1H,SAAU6H,EAAEC,OACZhC,eAAe,IAAItI,GAAQd,KAAKmL,EAAEE,KAEpC,CAGA,IAAMpC,EAASgB,GAAiBP,EAAU4B,YAAY/L,WAChDgM,GAAe,IAAIzK,GAAQd,KAAKiJ,GAKtCjD,EAAGgF,UAJe,CACjB5B,cAAemC,EACftC,QAAQ,IAIT,IAAIR,EAAc,GACZC,EAAe1C,EAAG+C,QAAQyC,OAC/B,SAACC,EAAOC,GAAQ,OAAAD,EAAQ9C,OAAO+C,EAAIpI,UAAY,EAAE,EACjD,IACCqI,EAAA,WAAA,GAEC1F,EACF,CAAA,IAAM/D,EAAOoH,EAAMsC,MAQkB,OAPrC5F,EAAG6D,SAAS5H,EAAiBC,GAAM,IAAIpB,GAAQ2I,OAC9CC,EACA,OACA,EACAxH,EAAKoB,SACL6B,EAAOwE,WAAW3H,EAAM4H,QAAQ1H,EAAKI,OAAQ,cAE9CmG,GAAeE,OAAOzG,EAAKoB,UAAUV,QAAAC,QAC1BkD,EAASC,EAAIC,IAAOlD,KAAA8I,SAAAA,GAA/B7F,EAAE6F,CAA8B,EAAA,CAAA,CAZ/B,GAY+B,OAAAjJ,QAAAC,QAAA8I,GAAAA,EAAA5I,KAAA4I,EAAA5I,KAAAwF,GAAAA,IA2DlC,CAAC,MAAAzE,UAAAlB,QAAAmB,OAAAD,EAAA,CAAA,+GCxHE,SAAA+D,EAAUP,EAAMC,EAAA9F,SAChB+F,EAAA,CAED,GAAA/F,aAAAgG,EAAc,CAUd,IAAAhG,EAAA+F,EAUA,cAFME,EAAAG,EAAaF,KAAA,KAAOL,EAAKC,IAP5B,EAAHA,IACAA,EAAA9F,EAAA+F,GAGD/F,EAAuEA,EAAAmG,EAWvE,GAAAnG,GAAWA,EAAWsB,KAErB,YADAtB,EAAAsB,KAAc8E,EAAAF,KAAA,KAAAL,EAAAC,GAAAM,EAAAF,KAAA,KAAAL,EAAA,cAUb7F,QAAO6F,EAAAI,OAEPJ,EAGA,CACA,CA1FI,IAAEG,eAA0B,WAC5B,SAAAA,IAAc,QAErBA,EAAO1H,UAAEgD,KAAA,SAAwBgF,KACjC,IAASb,EAAQ,IAAAO,EACVF,EAAAS,KAAAR,EAEP,GAAAD,EAAA,iFA8BC,8BAfE,IAAA9F,EAAAwG,EAAAL,EACsB,IAAAJ,EAGxBK,EAAKX,EAAO,EAAAa,EAAYA,EAAAtG,GAAAA,GAChByG,EACPL,EAAAX,EAAA,EAAAgB,EAAAzG,IAEAoG,EAAAX,EAAO,EAAAzF,EAER,CAAA,SACCoG,EAAAX,EAAO,EAAApD,KAIFoD,KArC4B,GA4FjC,SAAAiB,EAAAC,UAGgCA,aAAAX,GAAA,EAAAW,EAAAZ,CACjC,CAzEY,IAAAsE,EAAA,SACZxD,GACgC,IAAA,IAyHQE,EAzHRD,EAAA,WAAApC,SAAAA,IAAAvD,OAAAA,QAAAC,QA6H1BmD,EAAG4C,IAAIC,IAAW9F,KAAA,WAAA,OAAAH,QAAAC,QAGlBmD,EAAGS,QAAM1D,KAEf,WAAA,IAAM+F,EAAkB9C,EAAG+C,QAAQC,UAAU,SAACtB,UAAMA,EAAEuB,MAAM,GAC5D,IAAyB,IAArBH,EAAwB,CAC3B,IAAMI,EAAelD,EAAG+C,QAAQD,GAChCK,EAAY,CACX7F,SAAU4F,EAAa5F,SACvBK,KAAMqC,EAAGF,GAAG,OACZlC,KAAMkF,EACNxG,OAAQjD,OAAOC,KAAK4J,EAAaE,cAAcvF,YAAYtE,SAC1D,UAGH,CAQA,OANI4J,IAEHA,EAAU7F,SADW0C,EAAG+C,QAAQ/C,EAAG+C,QAAQzH,OAAS,GAClBgC,SAClC6F,EAAUxF,KAAOqC,EAAGF,GAAG,QAGjB,CACNE,GAAAA,EACAqD,eAAAA,EACAF,UAAAA,EACC,EArCF,EAAA,CAAA,GAAIV,EAAcC,EACjB,MAAM,IAAI/H,MAAM,+BAChB,IAAAgG,EAEG2B,WAAAA,GAAAA,EAAOrC,OAAMrD,OAAAA,QAAAC,QACLkD,EAASC,EAAIsC,EAAOrC,SAAOlD,cAAA8I,GAAtC7F,EAAE6F,CAAqC,EAAA,CADpCvD,GACoC,OAAA3B,GAAAA,EAAA5D,KAAA4D,EAAA5D,KAAAoD,GAAAA,GAAAqC,EAxHnCF,EAAO6B,YACX7B,EAAO6B,UAAY3K,GAEf8I,EAAO+B,qBACX/B,EAAO+B,mBAAqB,SAEKhK,IAA9BiI,EAAOyD,qBACVzD,EAAOyD,oBAAqB,GAS7B,IANA,IAMqCxB,EA8DjCpB,EApEEN,EAAa,IAAI2B,EAAoBlC,EAAO6B,WAC9CnE,EAAK,IAAIyE,EACPpB,EAA2B,GAIjCqB,EAAAC,EAAsBrC,EAAO0D,YAAQzB,EAAAG,KAAAE,MAAE,CAAA,IAA5BqB,EAAO1B,EAAA9I,MACjB,GAAyB,IAArBwK,EAAQ3I,SACX,MAAM,IAAI3C,MAAM,kDAGjB,IAAM6I,EAAQvH,EACbgK,GACA,IAAIvM,GAAW+J,OACdnB,EAAO4D,MACP,OACA,EACAD,EAAQ3I,SACR6B,EAAOwE,WAAW3H,EAAM4H,QAAQqC,EAAQ3J,OAAQ,aAGlD+G,EAAe8C,KAAQF,EAAQtI,SAAQsI,EAAQrI,MAC/CoC,EAAG6D,SAASL,EACb,CAIA,GACClB,EAAOyD,oBACPzD,EAAO0B,aAAa1I,SAAWgH,EAAO0D,SAAS1K,OAE/C,MAAU,IAAAX,MACT,mEAKF,IAAAuK,IAA6CD,EAA7CC,EAAAP,EAA0BrC,EAAO0B,gBAAYiB,EAAAC,KAAAN,MAAE,CAAAwB,IAAAA,EAAAC,EAC1C7E,EADMqD,EAAWI,EAAAxJ,MAMpB+F,SAHA4E,EAAAvB,EAAY3K,cAAZkM,EAAyB9L,gBAAO+L,EAChCxB,EAAY3K,cAAZmM,EAAyB9L,aAErB,IAAIb,GAAWM,KAClB6K,EAAY5K,QACZ4K,EAAY3K,YACZ+G,EAAkBqB,EAAOnI,YAGtB,IAAIW,GAAQd,KAAK6K,EAAY5K,SAGlC+F,EAAGgF,UAAU,CACZ1H,SAAU,EACV8F,cAAe5B,GAEjB,CAIA,IAAA,IAAyC8E,EAAzCC,EAAA5B,EAAgBrC,EAAO+B,sBAAkBiC,EAAAC,KAAA3B,MAAE,CAAhC,IAAAO,EAACmB,EAAA7K,MACXuE,EAAGgF,UAAU,CACZ1H,SAAU6H,EAAEC,OACZhC,eAAe,IAAItI,GAAQd,KAAKmL,EAAEE,KAEpC,CAKA,IAAMpC,EAASX,EAAO2B,eAAiB3B,EAAOoB,UAAU4B,YAAY/L,WAC9DgM,GAAe,IAAIzK,GAAQd,KAAKiJ,GAKtCjD,EAAGgF,UAJe,CACjB5B,cAAemC,EACftC,QAAQ,IAKT,IAAIR,EAAc,GACZC,EAAe1C,EAAG+C,QAAQyC,OAC/B,SAACC,EAAOC,GAAG,OAAKD,EAAQ9C,OAAO+C,EAAIpI,UAAY,EAAE,EACjD,IAEWqI,sgBA0CV,SAAca,EAAKzH,SAGlBuC,EAAAvD,KAAA,kBACF0I,EAAAvF,OAGA,OAAAwF,EAAkBF,EAAAlL,cAAiBqL,UACnCzF,EAAAnC,EAAU2H,KACAxF,EAAOnE,KAAM,CACvB,IAAAoF,EAAAjB,iBAIcnE,KAAA0J,EAAA1I,IAAAA,EAAA8D,EAAAF,KAAA,KAAAL,EAAA,IAAAG,EAAA,KAFRP,EAAAA,EAAAU,CAKN,qFA3DW2B,CACOjB,EAAOsE,sBAAf1K,GACV,IAAMsH,EAAQvH,EAAiBC,GAAM,IAAIpB,GAAQ2I,OAChDnB,EAAOoB,UACP,OACA,EACAxH,EAAKoB,SACL6B,EAAOwE,WAAW3H,EAAM4H,QAAQ1H,EAAKI,OAAQ,aAMT,OAJrC+G,EAAe8C,KAAQjK,EAAKyB,KAAI,IAAIzB,EAAK0B,MAEzCoC,EAAG6D,SAASL,GAEZf,GAAeE,OAAOzG,EAAKoB,UAAUV,QAAAC,QACzBgG,EAAWiB,WAAW9D,IAAGjD,KAAA,SAAAgH,GAEjCtB,GAAeC,EAAeC,OAF/BoB,KAE0CvB,MAG9C,EAAC,WAAA,OAAAA,CAAA,GAAA,OAAA5F,QAAAC,QAAA8I,GAAAA,EAAA5I,KAAA4I,EAAA5I,KAAAwF,GAAAA,IAwCF,CAAC,MAAAzE,UAAAlB,QAAAmB,OAAAD,EAAA,CAAA,+GClH2B,SAAA+D,EAAAP,EAAAC,EAAA9F,GAC3B,IAAA6F,qBACOG,EACuC,KAE7ChG,EAAA+F,EASC,YADD/F,EAAAiG,EAAMG,OAA+B,KAAAP,EAAAC,IANa,EAAAA,IACnDA,IAAgCC,KAEtB/F,EAAAmG,EAOT,GAAAnG,GAAAA,EAAYsB,KAEX,mBADI8E,EAAMF,KAAwB,KAAAL,EAAAC,GAAAM,EAAAF,KAAA,KAAAL,EAAA,IAGlCA,EAAAE,EAAAD,MACC9F,EACF,IAAAqG,EAAGR,EAAUI,EACbI,GAAMA,EAAAR,IAxFD,IAAEG,eAA0B,WAEnC,SAAAA,KAyDE,OAvDFA,EAAA1H,UAAAgD,KAAA,SAAAgF,EAAAG,gFASGL,EAAAX,EAAA,EAAApD,EACG,CAGL,OAAMoD,CAQN,CAEA,WAGA,CA0BC,OAzBAc,KAAAN,EAAA,sBAEcO,EAAAL,EACZ,IAAAJ,EACFK,EAAGX,EAAU,EAAAa,EAAWA,EAAAtG,GAAAA,GACxByG,EAEQL,EAAAX,EAAA,EAAAgB,EAAAzG,IAEHoG,EAAAX,EAAA,EAAezF,EAKrB,CAAA,MAAWqC,GACV+D,EAAAX,EAAc,EAAApD,EAOd,GAGAoD,GAGAO,EA3DiC,GA+FX,SAAAU,EAAAC,GACvB,OAAAA,aAAaX,GAAG,EAAAW,EAAAZ,CAEhB,CApFY,IAAAqF,EAAS,SACrBvE,GAC6B,IAc7B,IAd6B,IAyG3BE,EA3F4B+B,EAdDpE,EAAA,WAiD7B,GAAIsC,EAAcC,EAAeE,EAChC,MAAM,IAAIjI,MAAK,4CAC8B8H,EAAgCC,qBAAAA,YAAsBE,GAKpG,IAAIO,EACJ,GAAIV,EAAcC,EAAeE,EAAK,CAErC,IAAM2C,GAAe,IAAIzK,GAAQd,KAAKiK,GAEhC6C,EAA+B,CACpC1D,cAAemC,EACftC,QAAQ,GAETE,EAAY,CACXxF,KAAM,GACNC,KAAMoC,EAAG+C,QAAQzH,OACjBgC,SAAU,EACVhB,OAAQjD,OAAOC,KAAKiM,EAAapM,QAAS,OAAOI,SAAS,WAE3DyG,EAAGgF,UAAU8B,EACd,MAAWrE,EAAcC,EAAeE,GACvClG,QAAQC,IAAI,oBACZ,OAAAC,QAAAC,QAGKmD,EAAG4C,IAAIC,IAAW9F,KAAAH,WAAAA,OAAAA,QAAAC,QAGlBmD,EAAGS,QAAM1D,KAEf,WAAA,IAAM+F,EAAkB9C,EAAG+C,QAAQC,UAAU,SAACtB,GAAC,OAAKA,EAAEuB,MAAM,GAC5D,IAAyB,IAArBH,EAAwB,CAC3B,IAAMI,EAAelD,EAAG+C,QAAQD,GAChCK,EAAY,CACX7F,SAAU4F,EAAa5F,SACvBK,KAAMqC,EAAGF,GAAG,OACZlC,KAAMkF,EACNxG,OAAQjD,OAAOC,KAAK4J,EAAaE,cAAcvF,YAAYtE,SAC1D,UAGH,CAQA,OANI4J,IAEHA,EAAU7F,SADW0C,EAAG+C,QAAQ/C,EAAG+C,QAAQzH,OAAS,GAClBgC,SAClC6F,EAAUxF,KAAOqC,EAAGF,GAAG,QAGjB,CACNE,GAAAA,EACAqD,eAAgBC,EAAM5F,IAAI,SAACxB,GAAY,OAAAA,EAAKyB,SAAQzB,EAAK0B,IAAI,GAC7DuF,UAAAA,EACC,EAAA,EAAA,EAvGDG,EAKGhB,EALHgB,MACAI,EAIGpB,EAJHoB,UACAqD,EAGGzE,EAHHyE,SAAQ7C,EAGL5B,EAFH6B,UAAAA,OAAS,IAAAD,EAAG1K,EAAkB0K,EAAA8C,EAE3B1E,EADH2B,cAAAA,OAAgBP,IAAHsD,EAAGtD,EAAU4B,YAAY/L,WAAUyN,EAG3CnE,EAAa,IAAI2B,EAAoBL,GAErCnE,EAAK,IAAIyE,EAGfC,EAAAC,EAAsBoC,KAAQxC,EAAAG,KAAAE,MAAE,CAArB,IAAAqC,EAAO1C,EAAA9I,MACXyL,EAA+B,CACpC5J,SAAU2J,EAAQ7B,OAClBhC,eAAe,IAAItI,GAAQd,KAAKiN,EAAQ5B,KAEzCrF,EAAGgF,UAAUkC,EACd,CAGA,IAAIzE,EAAc,GACZC,EAAe1C,EAAG+C,QAAQyC,OAC/B,SAACC,EAAOC,GAAQ,OAAAD,GAASC,EAAIpI,UAAY,EAAE,EAC3C,GAEGsF,EAAM,EAAEjC,uwBAAA4C,CACOD,EAARpH,SAAAA,GACV,IAAMsH,EAAQvH,EAAiBC,GAAM,IAAIpB,GAAQ2I,OAChDC,EACA,OACA,EACAxH,EAAKoB,SACL6B,EAAOwE,WAAW3H,EAAM4H,QAAQ1H,EAAKI,OAAQ,aAKT,OAHrC0D,EAAG6D,SAASL,GAGZf,GAAeE,OAAOzG,EAAKoB,UAAUV,QAAAC,QACzBgG,EAAWiB,WAAW9D,IAAGjD,KAAAgH,SAAAA,GAEjCtB,GAAeC,GAFnBE,EAAGmB,KAEkCvB,EAGtC,EAAA,EAAA,oBAACA,CAAA,GAAA,OAAA5F,QAAAC,QAAA8D,GAAAA,EAAA5D,KAAA4D,EAAA5D,KAAAoD,GAAAA,IA4DF,CAAC,MAAArC,GAAA,OAAAlB,QAAAmB,OAAAD,EAAA,CAAA,ECkGoB,MAAAqJ,EAAA,oBAAAC,OAAAA,OAAAC,WAAAD,OAAAC,SAAAD,OAAA,oBAAA,wBAhKX9F,EAAoBC,WACvBC,EAAQ,CAWX,GAAA/F,aAAAgG,OACDhG,EAAA+F,EAQG,gBADEK,EAAQF,KAAO,KAAaL,EAAAC,IALD,EAAAA,IACjCA,EAAW9F,EAAI+F,GAEb/F,EAAAA,GAKA,OACqBA,EAAAsB,KAErB,cADCA,KAAA8E,EAAAF,KAAA,KAAAL,EAAAC,GAAAM,EAAAF,KAAA,KAAAL,EAAA,IAGCA,EAAAE,EAAAD,EACED,EAAAM,EAAAnG,EACA,IAAAqG,EAAAR,EAAaI,OAEhBJ,EACC,CACE,CAtGD,IAAEG,eAA0B,WAC5B,SAAAA,IAAc,CA8DnB,OA7DFA,EAAO1H,UACLgD,KAQD,WAAgBmF,GACjB,IAAShB,EAAA,IAAAO,EAETF,EAAAS,KAAAR,wFA8CI,8DA3BDU,EACGL,EAAOX,EAAiB,EAAAgB,MAmBFL,EAAAX,EAAA,EAAAzF,GAEtB,MAAAqC,GACJ+D,EAAIX,EAAc,EAAApD,GAGlB,EACEoD,GAGFO,CACA,CAhEiC,cAwGCW,UAChCA,aAACX,GAAA,EAAAW,EAAAZ,EAvEQ,IAAA8F,EAAA,SAA2BhF,GAA+B,IAAsCnC,IA6NzGqC,EA7NyGrC,EAAAA,WAkL3G,GAAIsC,GAAcC,GAAeC,OAAOC,IACtC,MAAU,IAAAjI,MAAK,wDAC2C8H,GAAgCC,qBAAAA,GAAsBE,UAAAA,IAEjH,OAAAhG,QAAAC,QAGKmD,EAAG4C,IAAIC,IAAW9F,KAAA,WAAA,OAAAH,QAAAC,QAGlBmD,EAAGS,QAAM1D,KAAA,WAEf,IAAMY,EAAOqC,EAAGF,GAAG,OACfyH,IACFA,EAAY5J,KAAOA,GAGrB,IAAMmF,EAAkB9C,EAAG+C,QAAQC,UAAU,SAACtB,UAAMA,EAAEuB,MAAM,GAC5D,IAAyB,IAArBH,EAAwB,CAC1B,IAAMI,EAAelD,EAAG+C,QAAQD,GAChCK,EAAY,CACV7F,SAAU4F,EAAa5F,SACvBK,KAAAA,EACAC,KAAMkF,EACNxG,OAAQjD,OAAOC,KAAK4J,EAAaE,cAAcvF,YAAYtE,SACzD,UAGN,CAQA,OANI4J,IAEFA,EAAU7F,SADW0C,EAAG+C,QAAQ/C,EAAG+C,QAAQzH,OAAS,GAClBgC,SAClC6F,EAAUxF,KAAOqC,EAAGF,GAAG,QAGlB,CACLE,GAAAA,EACAqD,eAAgBrD,EAAGwH,OAAO9J,IACxB,SAACgJ,GAAS,OAAAA,EAAEe,WAAU,IAAIf,EAAEgB,iBAAiB,GAE/CvE,UAAAA,EACAoE,YAAAA,EACA,EAAA,EAAA,EA3NA9H,EAeE6C,EAfF7C,SACAkI,EAcErF,EAdFqF,QACArE,EAaEhB,EAbFgB,MACAsE,EAYEtF,EAZFsF,YACAC,EAWEvF,EAXFuF,cACAnE,EAUEpB,EAVFoB,UACAwC,EASE5D,EATF4D,MACAjC,EAQE3B,EARF2B,cACA6D,EAOExF,EAPFwF,mBAAkB5D,EAOhB5B,EANF6B,UAAAA,OAAS,IAAAD,EAAG1K,EAAkB0K,EAG9B6D,EAGEzF,EAHFyF,SAAQ3D,EAGN9B,EAFF+B,mBAAAA,OAAqB,IAAHD,EAAG,GAAEA,EAAA4D,EAErB1F,EADF2F,KAAAA,OAAO,IAAHD,GAAQA,EAIVE,EAAY,GACZC,EAAa,GACbC,EAAc,GAGlB,IAAKR,EAAYS,MAAM,SAACC,GAAU,OAAAA,EAAMxI,KAAO6H,CAAO,GACpD,MAAM,IAAIhN,MAAM,kDAMlB,IAHA,IAG+B4J,EAwD3BgD,EAsDApE,EAjHEN,EAAa,IAAI2B,EAAoBL,GACrCnE,EAAK,IAAIyE,EAEfC,EAAAC,EAAoBiD,KAAWrD,EAAAG,KAAAE,MAAE,CAAA,IAAtB0D,EAAK/D,EAAA9I,MACR8M,EAAoBvM,EAAM4H,QAAQ0E,EAAMhM,OAAQ,UAChDkM,EAAcrJ,EAAOwE,WAAW4E,GACtCvI,EAAG6D,SAAS5H,EACVqM,GACA,IAAI5O,GAAW+J,OACbyC,EACA,OACA,EACAoC,EAAMhL,SACNkL,KAIJL,GAAcxF,OAAO2F,EAAMzI,IAC7B,CAGA,IAAA,IAAgCoF,EAAhCC,EAAAP,EAAmBkD,KAAa5C,EAAAC,KAAAN,MAAE,CAAvB,IAAA6D,EAAIxD,EAAAxJ,MACPiN,EAAS/F,OAAO8F,EAAK5I,IAAGhE,KAAAC,IAAG,GAAMiM,IACjCY,EAAgD,CACpDxD,EAAG,SACHyD,GAAIX,EAAO,OAAS,WACpBpI,IAAK6I,EAAOnP,YAEVwO,EAAW,IACbY,EAAoB9I,KAAO8C,OAAO8F,EAAK5I,KAAIhE,KAAAC,IAAG,IAAO6G,OAAOoF,KAAWxO,YAEzE,IAAIW,OACJ,EAAA,GAAIuF,IAAaxG,EAAU0G,MACzBzF,EAAWmC,EACNsM,CAAAA,EAAAA,EACHE,CAAAA,KAAMlB,QAEClI,IAAAA,IAAaxG,EAAU6P,MAMhC,MAAU,IAAAnO,MAAM,oBALhBT,EAAWmC,EAAA,CAAA,EACNsM,EAAmB,CACtB7I,GAAI6H,GAIR,CACA3H,EAAGgF,UAAU,CACX1H,SAAU,EACV8F,eAAe,IAAI1J,GAAWM,KAC5ByO,EAAKxO,QACL,CACEK,QAASjB,OAAOC,KAAK+E,KAAKC,UAAUpE,IAAcX,SAAS,UAC3DgB,YAAa,yBAInB6N,GAAeM,CACjB,CAKA,IAJAR,EAAYC,EAAaC,GAIT,GACd,MAAU,IAAAzN,MAAM,6BAElB,GAAIuN,EAAY,GAAI,CAClB,IAKIhO,EALEyO,EAAgD,CACpDxD,EAAG,SACHyD,GAAI,WACJ/I,IAAKqI,EAAU3O,YAGjB,GAAIkG,IAAaxG,EAAU0G,MACzBzF,EAAWmC,EAAA,CAAA,EACNsM,EAAmB,CACtBE,KAAMlB,YAEClI,IAAaxG,EAAU6P,MAMhC,MAAM,IAAInO,MAAM,oBALhBT,EAAWmC,EACNsM,CAAAA,EAAAA,EACH7I,CAAAA,GAAI6H,GAIR,CAEA,IAAMvE,IAAgB,IAAI1J,GAAWM,KACnC8N,GAAsB5B,EAAMZ,YAAY/L,WACxC,CACEe,QAASjB,OAAOC,KAAK+E,KAAKC,UAAUpE,IAAcX,SAAS,UAC3DgB,YAAa,uBAGXqD,GAAOoC,EAAG+C,QAAQzH,OACxB0E,EAAGgF,UAAU,CAAE5B,cAAAA,GAAe9F,SAAU,IACxCiK,EAAc,CACZzH,GAAI6H,EACJrK,SAAU,EACVhB,OAAQjD,OAAOC,KAAK8J,GAAcvF,YAAYtE,SAAS,UACvDoE,KAAM,GACNC,KAAAA,GACAiC,IAAKqI,EAAU3O,WAEnB,CAGA,IAAAgN,IAAkCD,GAAlCC,GAAA5B,EAAgBN,KAAkBiC,GAAAC,MAAA3B,MAAE,CAAA,IAAzBO,GAACmB,GAAA7K,MACVuE,EAAGgF,UAAU,CACX1H,SAAU6H,GAAEC,OACZhC,eAAe,IAAItI,GAAQd,KAAKmL,GAAEE,KAEtC,CAKA,IAAMpC,GAASgB,GAAiBP,EAAU4B,YAAY/L,WAChDgM,IAAe,IAAIzK,GAAQd,KAAKiJ,IAKtCjD,EAAGgF,UAJe,CAChB5B,cAAemC,GACftC,QAAQ,IAIV,IAAIR,GAAc,GACZC,GAAe1C,EAAG+C,QAAQyC,OAC9B,SAACC,EAAOC,GAAG,OAAKD,EAAQ9C,OAAO+C,EAAIpI,UAAY,EAAE,EACjD,IAEEsF,GAAM,EAAEjC,GAyCV,SAAYoI,EAAAhK,EAAA4H,MAC+B,mBAAzCoC,EAAQ5B,GAAiC,CAAA,IACrC6B,EAAA1H,EAAAvD,IAAAgL,EAAA5B,QACJ,SAAAV,EAAMvF,GACN,YAGA8H,EAAA3B,EAAA4B,QAAArE,MAAA+B,GAAAA,MAGA,IAFHzF,EAAAnC,EAAAiK,EAAAvN,SAEcyF,EAACnE,KAAA,CACd,IAAAoF,EAAkBjB,GAKb,YAFNA,EAAAnE,KAAA0J,EAAA1I,IAAAA,EAAA8D,EAAAF,KAAA,KAAAL,EAAA,IAAAG,EAAA,KAFCP,EAAAA,EAAkBU,EAUlBN,EACDO,EAACP,EAAA,EAAAJ,uSAlGA,SAAcsF,EAAAzH,EAAA4H,GACZ,IAAArF,EAAWvD,EAAX2I,GAAA,SACA,SAAAD,EAAAvF,GACA,IACA,OAAAwF,EAAIF,EAAIlL,UAAAqL,IAAAA,MAER,MADI5H,EAAA2H,KACCxF,EAAAnE,KAAU,KAChBoF,EAACjB,eAIJA,EAAWnE,KAAK0J,EAAA1I,IAAAA,EAAqB8D,EAAAF,KAAA,KAAAL,EAAA,IAAAG,EAAA,KAHpCP,EAAAA,EAAAU,EAQAN,EAEDO,EAA4BP,EAAA,EAAAJ,GAG5BI,EAAMJ,CAEN,CAAA,SACEW,EAAAP,IAAAA,EAA2B,IAAAG,GAAA,EAAA3D,EAC3B,EAEF2I,GAEInF,CACJ,mCAIYiC,CACOD,EAAK,SAAbpH,GACT,IAAMsH,EAAQvH,EAAiBC,GAAM,IAAIpB,GAAQ2I,OAC/CC,EACA,OACA,EACAxH,EAAKoB,SACL6B,EAAOwE,WAAW3H,EAAM4H,QAAQ1H,EAAKI,OAAQ,aAKV,OAFrC0D,EAAG6D,SAASL,GAEZf,IAAeE,OAAOzG,EAAKoB,UAAUV,QAAAC,QACzBgG,EAAWiB,WAAW9D,IAAGjD,KAAAgH,SAAAA,GAArCnB,GAAGmB,EAECtB,IAAeC,GAAeC,OAAOC,MAAIJ,EAAA,EAAA,EAG/C,EAAC,WAAA,OAAAA,CAAA,GAAA,OAAA5F,QAAAC,QAAA8D,IAAAA,GAAA5D,KAAA4D,GAAA5D,KAAAoD,GAAAA,IA+CH,CAAC,MAAArC,GAAAlB,OAAAA,QAAAmB,OAAAD,EAAA,CAAA,ECzPYoL,EAAsB,SACjCC,EACA5K,GAEA,IACE,GAAgB,eAAZ4K,EAA0B,CAC5B,IAAMC,EAAiB7K,EACvB,IAAK6K,EAAeC,YAClB,OAAW,IAAA1O,MAAM,sCAEnB,IAAKyO,EAAeE,SAClB,OAAO,IAAI3O,MAAM,mCAEnB,GAAIyO,EAAeG,aAAc,CAC/B,IAAKpI,MAAMC,QAAQgI,EAAeG,cAChC,OAAW,IAAA5O,MAAM,kCAGnB,IAAKyO,EAAeG,aAAalB,MAAM,SAACmB,GACtC,OAAOpO,OAAOqO,OAAOD,GAAOnB,MAAM,SAAA5M,SAA0B,iBAAVA,CAAkB,EACtE,GACE,OAAO,IAAId,MAAK,yBAA0ByO,EAAeG,aAE7D,CACA,GAAIH,EAAeM,OAAS,CAC1B,GAAqC,iBAA1BN,EAAeM,OAC1B,OAAW,IAAA/O,MAAM,uCAEjB,GAAIyO,EAAeM,SAAWtO,OAAO2J,KAAKqE,EAAeM,QAAQrB,MAAM,SAAA7M,GAAG,MAAmB,iBAARA,GAA0D,iBAA/B4N,EAAeM,OAAOlO,EAAiB,GACrJ,OAAO,IAAIb,MAAM,4DAErB,CACF,CACA,GAAgB,mBAAZwO,EAA8B,CAChC,IAAMQ,EAAWpL,EACjB,IAAKoL,EAAS1L,aACZ,OAAO,IAAItD,MAAM,6BAEnB,IAAKgP,EAAS1L,aAAa2L,SAAS,KAClC,OAAW,IAAAjP,MAAM,0CAEnB,GAAmD,KAA/CgP,EAAS1L,aAAa4L,MAAM,KAAK,GAAGvO,OACtC,OAAW,IAAAX,MAAM,2CAEnB,GAAImP,OAAOC,MAAMD,OAAOE,SAASL,EAAS1L,aAAa4L,MAAM,KAAK,KAChE,OAAW,IAAAlP,MAAM,2CAGnB,GAAIgP,EAASM,YAA6C,iBAAxBN,EAASM,WACzC,OAAO,IAAItP,MAAM,gCAEnB,GAAIgP,EAASO,MAAiC,iBAAlBP,EAASO,KACnC,OAAO,IAAIvP,MAAM,yBAEnB,GAAIgP,EAASQ,aAA+C,iBAAzBR,EAASQ,YAC1C,OAAW,IAAAxP,MAAM,iCAEnB,GAAIgP,EAASD,QAAqC,iBAApBC,EAASD,OACrC,OAAO,IAAI/O,MAAM,4BAEnB,GAAIgP,EAASS,cAAgBjJ,MAAMC,QAAQuI,EAASS,aAClD,OAAO,IAAIzP,MAAM,+BAErB,CACA,MACF,CAAE,MAAO0P,GACP,OAAW,IAAA1P,MAAM,oBACnB,CACF,ECnDqB2P,eAAO,WAAA,SAAAA,IAAAC,CAAAA,IAAAA,EAAAD,EAAAvQ,iBAAAwQ,EAS3BvQ,KAAA,SACCwQ,EACAC,EACAC,EACAxQ,GAEA,IAAMyQ,EAAY3O,EAAMD,gBAAgByO,GAAY/M,KAC9CmN,EAAS5O,EAAMD,gBAAgB0O,GAAYhN,KAE7CnB,EAAS,IAAI6C,EACjB,QAA6B9E,KAAd,MAAXH,OAAW,EAAXA,EAAaI,eAAsDD,KAAlB,MAAXH,OAAW,EAAXA,EAAaK,aAA2B,CACjF,IAAMC,EAASrB,EAAM,OAEfsB,EADWpB,OAAOC,KAAKY,EAAYI,QAAS,UACzBf,SAAS,OAAOmB,OACzC,IAAKD,EACJ,MAAM,IAAIE,MAAM,qBAEjB,IAAMC,EAAgBzB,EAAMe,EAAYK,aACxC,IAAKK,EACJ,UAAUD,MAAM,sBAEjB2B,EAAS6C,EAAOxD,QAAsBnB,cAAAA,WAAeI,EAAa,SAASH,EAAO,YACnF,CAEA,OAAO6B,EAAOuO,YAAY1L,EAAOC,QA1ClC,iNA2CG0L,SAASH,GACTG,SAASR,EAAQS,YAAYL,GAAO,IAAI5P,GAAQd,KAAK4Q,GAAQ/M,aAC7DgN,YAAY1L,EAAOC,QA3CtB,g4CA4CA,EAACmL,EAEDS,cAAA,SACCC,EACAC,EACAC,EACAC,EACAhI,QAHA,IAAA8H,IAAAA,EAAyC,YACzCC,IAAAA,IAAAA,GAAe,GAOf,IAAME,GAAQ,IAAIvQ,GAAQ2I,OAAOwH,EAAYC,EAAaC,EAAcC,EAAgBhI,GACxF,MAAO,CACN3C,KAAI,SAAST,EAAiBsL,GAAkB,IAAI1O,OAAAA,QAAAC,QACrCwO,EAAM5K,KAAKT,EAAIsL,IAAWvO,KAAA,SAAAwO,GAAxC,OAAOA,EAAmCC,YAAYC,EAAGC,KAAK,EAC/D,CAAC,MAAA5N,GAAA,OAAAlB,QAAAmB,OAAAD,EACD6N,CAAAA,EAAAA,eAAcA,WACb,OAAA/O,QAAAC,QAAO,IACR,EAEF,EAAC0N,EAEDqB,gBAAA,SACCR,EACAhI,GAKA,IAAMyI,EAAW,CAChBpL,cAAaT,EAAiBsL,GAAsB,IAAA,IAAAQ,EACnD,GAAI9L,EAAG+C,QAAQzH,OAAS,EACvB,MAAM,IAAIX,MAAM,yBAEjB,IAAM2B,GAAS,IAAIyP,GACjBjB,SAASR,EAAQS,YACjB/K,EAAG+C,QAAQ,GAAGzF,UAAY,EAC1B0C,EAAG+C,QAAQ,GAAGK,cAAcvF,aAE9B,GAAImC,EAAG+C,QAAQzH,OAAS,EAAG,CAE1B,IADA,IACwCiJ,EADlCyH,EAAS,IAAIhQ,EAAMiQ,OACzBvH,EAAAC,EAAqB3E,EAAG+C,QAAQmJ,MAAM,MAAE3H,EAAAG,KAAAE,MAAE,KAA/BuH,EAAM5H,EAAA9I,MAChBuQ,EAAOI,MAAM9B,EAAQS,YAAYoB,EAAO7O,UAAY,EAAG6O,EAAO/I,cAAcvF,YAC7E,CACAvB,EAAOwO,SAASkB,EAAOpI,UACxB,MACCtH,EAAOkP,YAAYC,EAAGY,MAGvB,IAAM7I,EAAQxD,EAAGwH,OAAO8D,GACpBgB,EAAalB,EACjB,IAAKkB,GAAc9I,EAAM+I,kBACxBD,EAAa9I,EAAM+I,kBAAkBxJ,QAAQS,EAAMkE,mBAAmBpK,cAChE,IAAK8N,EACX,MAAU,IAAAzQ,MAAM,mDAGjB,IAEgB6R,EAFV/E,EAAcjE,EAAMiE,aAAqC,OAA3BqE,EAAItI,EAAM+I,wBAAiB,EAAvBT,EAAyBhM,GAAG,QAChE2M,EAAYrJ,EACXqJ,IACJA,EAAYD,OAAHA,EAAGhJ,EAAM+I,wBAANC,EAAAA,EAAyBzJ,QAAQS,EAAMkE,mBAAmBtE,eAEvE,IAAMsJ,EAAWC,EAAqBC,OAAO,CAC5CnF,WAAAA,EACAC,kBAAmBlE,EAAMkE,kBACzB0D,eAAgBkB,EAChBO,mBAAoB7M,EAAG8M,QACvBC,YAAa,GACbzB,WAAAA,EACAvI,QAAS/C,EAAG+C,QACZiK,cAAexJ,EAAMyJ,SACrBR,UAAAA,EACAS,SAAUlN,EAAGkN,SACbC,MAAOR,EAAqBS,YAC3BT,EAAqBU,qBACrBV,EAAqBW,iBAGvB,OAAA1Q,QAAAC,QAAOP,EAAOwO,SAAS4B,GAAUlB,YAAYC,EAAGY,MACjD,CAAC,MAAAvO,GAAAlB,OAAAA,QAAAmB,OAAAD,EAAA,CAAA,EACD6N,eAAc,SAAS3L,EAAiBsL,GAAkB,IAAI1O,OAAAA,QAAAC,QAC/CgP,EAASpL,KAAKT,EAAIsL,IAAWvO,KAAA,SAAAwQ,GAA3C,OAAOA,EAAsC1P,WAAWvC,MAAM,EAC/D,CAAC,MAAAwC,GAAA,OAAAlB,QAAAmB,OAAAD,MAEF,OAAO+N,CACR,EAACvB,EAEMS,YAAP,SAAmBzN,EAAkBhB,GACpC,IAAM0P,EAAS,IAAIhQ,EAAMiQ,OAIzB,OAHAD,EAAOwB,gBAAgB,IAAIC,EAAUnQ,IACrC0O,EAAO0B,eAAepR,EAAOhB,QAC7B0Q,EAAOI,MAAM9P,GACN0P,EAAOpI,SACf,EAAC0G,CAAA,CAnI0B,GCwPjBnD,GAAmC,oBAAAC,OAAAA,OAAAC,WAAAD,OAAAC,SAAAD,OAAA,oBAAA,aA5L1C,SAAQvF,GAAIP,EAAAC,EAAA9F,OACZ6F,EAAAE,EAAA,CACF,GAAE/F,aAAWgG,GAAa,KAEtBhG,EAAA+F,EAiBF,cADmDE,EAAAG,GAAAF,KAAA,KAAAL,EAAAC,IAfnC,EAAlBA,IAIIA,EAAM9F,EAAE+F,GAEV/F,EAAAA,UAcQA,EAAAsB,mBACPA,KAAA8E,GAAAF,KAAA,KAAAL,EAAAC,GAAAM,GAAAF,KAAA,KAAAL,EAAA,MAICE,EAAAD,MACI9F,MAGPqG,EAAAR,EAAAI,EAEeI,GAChBA,EAAQR,EAGR,MAtHOG,gBAA0B,WAC5B,SAAAA,IAAa,CAuElB,OAtEKA,EAAA1H,UAAcgD,KAAA,SAAAgF,EAAuBG,GAC5C,IACEhB,EAAA,IAAAO,EASOF,EAAAS,KAAAR,EACT,GAAMD,EAAE,CAEe,IAAAoM,EAAA,EAAApM,EAAAQ,EAAAG,EACjB,GAACyL,EAAuB,CAC5B,IAUA9L,KAAmB,EAAA8L,UACnB,CAAA,MAAQ7P,GAEqC+D,GAAAX,EAAA,EAAApD,EAC7C,CACE,OAAAoD,EAKF,OAAUc,IAEV,eACK,SAASC,GACV,IACA,IAAAxG,EAAAwG,EAAAL,EAKC,EAAFK,EAAET,EACHK,GAAAX,EAAuB,EAAAa,EAAUA,EAAStG,GAAWA,GAC/CyG,EACNL,GAAGX,EAAS,EAAAgB,EAAAzG,IAYmBoG,GAAAX,EAAA,EAAAzF,eAG7ByF,EAAQ,EAAGpD,GAEZ,EACFoD,GAGDO,CACA,CAzEiC,GA0HjC,SAAmBU,aACjBC,iBAAgC,IAAAZ,CAChC,KA9GIoC,GAAY5H,EAAZ4H,oBAgQ4BmF,EAAAhK,EAAA4H,MAC/B,mBAAAoC,EAAA5B,IAAA,KAAO6B,EAAA1H,EAAAvD,IAAAgL,EAAA5B,SACN,SAAAV,EAAMvF,eAGF8H,EAAA3B,UAAoBzC,MAAW+B,GAAKA,MAExC,IADAzF,EAAAnC,EAAOiK,EAAQvN,SACfyF,EAAiCnE,KAAA,CAClC,IAACoF,GAACjB,GAID,YADFA,EAAAnE,KAAW0J,EAAG1I,IAAAA,EAAA8D,GAAAF,KAAA,KAAAL,EAAA,IAAAG,GAAA,KAFdP,IAAeU,CAKb,GAGAC,GAAAP,EAAK,EAAAJ,GAERI,EAAAJ,CAGD,CAAA,MAAWpD,UACIwD,EAAA,IAAAG,IAAA,EAAA3D,IAGZ2I,GACFY,EAAAuG,OAAA,KAE2BC,EAAA,SAAApS,GAC5B,IAEMuN,EAAApE,MACAyC,EAAAuG,QAEJ,CAAA,MAAA9P,GAAA,QAEArC,CACF,KAEI6F,GAAAA,EAAcvE,KAClB,OAAkBuE,EAAAvE,KAAA8Q,EAAa,SAAO/P,GAIlC,MAAG+P,EAAK/P,EACZ,GASE+P,IAEA,OAAAvM,kBAIQyH,aACP+E,UAAA,kCAICrE,EAAA,GACI/C,EAAA,EAAAA,EAASqC,EAC2CzN,OAAAoL,MAE3DP,KAAA4C,EAAArC,IAGD,gBA9IIF,EAAAzH,EAAA4H,GACF,QAAAD,GAAA,SACA,SAAAD,KACE,IACE,OAAAC,EAAAF,EAAsBlL,UAAAqL,IAAAA,UACtBzF,EAAAnC,EAAA2H,KAC4BxF,EAAAnE,KAAA,KAC/BoF,GAAAjB,GAGG,YADAA,EAAAnE,KAAA0J,EAAsB1I,IAAAA,EAAA8D,GAAAF,KAAA,KAAAL,EAAA,IAAAG,GAAA,KAFnBP,EAAAA,IAMLI,KACDA,EAAA,EAAAJ,GAGCI,EAAAJ,CAMI,CAAA,MAAApD,GACA+D,GAAAP,IAAAA,EAAW,IAAsBG,IAAA,EAAA3D,GAGtC,IAEFwD,EAiHDyM,CAAStE,EAAI,SAAY/C,GAAA,OAAA3H,EAAA0K,EAAA/C,GAAA,EAAAC,GAtUd,IAAAqH,GAAiB,SAAU1L,GAA+B,QAiInEE,EA1EEW,EAvDqEhD,EAAA,WA2FzE,GAAIsC,EAAcC,EAAeC,OAAOC,GACtC,UAAUjI,MACgD8H,wDAAAA,uBAAgCC,EAAY,UAAUE,GAEjH,OAAAhG,QAAAC,QAGKmD,EAAG4C,IAAIC,IAAW9F,KAAA,WAAA,OAAAH,QAAAC,QAGlBmD,EAAGS,QAAM1D,KAGf,WAAA,IAAM+F,EAAkB9C,EAAG+C,QAAQC,UAAU,SAACtB,UAAMA,EAAEuB,MAAM,GAC5D,IAAyB,IAArBH,EAAwB,CAC1B,IAAMI,EAAelD,EAAG+C,QAAQD,GAChCK,EAAY,CACV7F,SAAU4F,EAAa5F,SACvBK,KAAMqC,EAAGF,GAAG,OACZlC,KAAMkF,EACNxG,OAAQjD,OAAOC,KAAK4J,EAAaE,cAAcvF,YAAYtE,SACzD,UAGN,CAQA,OANI4J,IAEFA,EAAU7F,SADW0C,EAAG+C,QAAQ/C,EAAG+C,QAAQzH,OAAS,GAClBgC,SAClC6F,EAAUxF,KAAOqC,EAAGF,GAAG,QAGlB,CACLE,GAAAA,EACAqD,eAAgBrD,EAAGwH,OAAO9J,IACxB,SAACgJ,UAASA,EAAEe,WAAU,IAAIf,EAAEgB,iBAAiB,GAE/CvE,UAAAA,EACA,EAAA,EAAA,EA/HAG,EAOEhB,EAPFgB,MACA2K,EAME3L,EANF2L,SACAvK,EAKEpB,EALFoB,UACAwC,EAIE5D,EAJF4D,MACAjC,EAGE3B,EAHF2B,cAAaC,EAGX5B,EAFF6B,UAA8BC,EAE5B9B,EADF+B,mBAAAA,WAAkBD,EAAG,GAAEA,EAGnBvB,EAAa,IAAI2B,OAJZ,IAAAN,EAAG1K,EAAkB0K,GAK1BlE,EAAK,IAAIyE,EAGXwJ,EAAS3S,OAAS,KACpBoB,QAAQ4H,KACN,iGAMJ,QAA8BC,EAA9BG,EAAAC,EAAsBsJ,KAAQ1J,EAAAG,KAAAE,MAAE,CAAA,IAArBsJ,EAAO3J,EAAA9I,MAChBuE,EAAGgF,UAAU,CACX1H,SAAU,EACV8F,eAAe,IAAIkH,GAAUtQ,KAC3BkU,EAAQ1D,WACR0D,EAAQzD,WACRyD,EAAQxD,SAGZ,IAAMnC,EAAoB3E,GAAQsK,EAAQC,YAAY7R,OAAQ,UACxDkM,EAAcrJ,EAAOwE,WAAW4E,GACtCvI,EAAG6D,SAAS5H,EACViS,EAAQC,aACR,IAAIzU,GAAW+J,OACbyC,EACA,OACA,EACAgI,EAAQC,YAAY7Q,SACpBkL,IAGN,CAGA,QAAkCvD,EAAlCC,EAAAP,EAAgBN,KAAkBY,EAAAC,KAAAN,MAAE,CAAzB,IAAAO,EAACF,EAAAxJ,MACVuE,EAAGgF,UAAU,CACX1H,SAAU6H,EAAEC,OACZhC,eAAe,IAAItI,GAAQd,KAAKmL,EAAEE,KAEtC,CAIA,IAAME,GAAe,IAAIzK,GAAQd,KAC/BiK,GAAiBP,EAAU4B,YAAY/L,YAMzCyG,EAAGgF,UAJkB,CACnB5B,cAAemC,EACftC,QAAQ,IAIV,IAAIR,EAAc,GACZC,EAAe1C,EAAG+C,QAAQyC,OAC9B,SAACC,EAAOC,GAAQ,OAAAD,EAAQ9C,OAAO+C,EAAIpI,UAAY,EAAE,EACjD,IAEEsF,EAAM,EAAEjC,EAAA4C,GACOD,EAAK,SAAbpH,GACT,IAAMsH,EAAQvH,EAAiBC,GAAM,IAAIpB,GAAQ2I,OAC/CC,EACA,OACA,EACAxH,EAAKoB,SACL6B,EAAOwE,WAAW3H,EAAM4H,QAAQ1H,EAAKI,OAAQ,aAKV,OAFrC0D,EAAG6D,SAASL,GAEZf,GAAeE,OAAOzG,EAAKoB,UAAUV,QAAAC,QACzBgG,EAAWiB,WAAW9D,IAAGjD,KAAA,SAAAgH,GAArCnB,EAAGmB,EAECtB,GAAeC,EAAeC,OAAOC,KAAIJ,MAG/C,EAAC,WAAA,OAAAA,CAAA,GAAA,OAAA5F,QAAAC,QAAA8D,GAAAA,EAAA5D,KAAA4D,EAAA5D,KAAAoD,GAAAA,IA0CH,CAAC,MAAArC,GAAAlB,OAAAA,QAAAmB,OAAAD,EAED,CAAA,EAAasQ,GAAA,SACX9L,OACEC,IAoOA8L,EApOA9L,EAAAA,WAyLF,GAAIE,GAAcC,GAAeC,OAAOC,IACtC,MAAM,IAAIjI,MAAK,wDAC2C8H,GAAgCC,qBAAAA,GAAsBE,UAAAA,IAEjH,OAAAhG,QAAAC,QAGKmD,EAAG4C,IAAIC,IAAW9F,KAAAH,WAAAA,OAAAA,QAAAC,QAGlBmD,EAAGS,QAAM1D,KAAA,WAEf,IAAMY,EAAOqC,EAAGF,GAAG,OACfyH,IACFA,EAAY5J,KAAOA,GAGrB,IAAMmF,EAAkB9C,EAAG+C,QAAQC,UAAU,SAACtB,UAAMA,EAAEuB,MAAM,GAC5D,IAAyB,IAArBH,EAAwB,CAC1B,IAAMI,EAAelD,EAAG+C,QAAQD,GAChCK,EAAY,CACV7F,SAAU4F,EAAa5F,SACvBK,KAAAA,EACAC,KAAMkF,EACNxG,OAAQjD,OAAOC,KAAK4J,EAAaE,cAAcvF,YAAYtE,SACzD,UAGN,CAQA,OANI4J,IAEFA,EAAU7F,SADW0C,EAAG+C,QAAQ/C,EAAG+C,QAAQzH,OAAS,GAClBgC,SAClC6F,EAAUxF,KAAOqC,EAAGF,GAAG,QAGlB,CACLE,GAAAA,EACAqD,eAAgBrD,EAAGwH,OAAO9J,IACxB,SAACgJ,GAAS,OAAAA,EAAEe,WAAcf,IAAAA,EAAEgB,iBAAiB,GAE/CvE,UAAAA,EACAoE,YAAAA,EACA,EAAA,EAAA,EAlOAjE,EAYEhB,EAZFgB,MACA7D,EAWE6C,EAXF7C,SACAkI,EAUErF,EAVFqF,QACAzB,EASE5D,EATF4D,MACAxC,EAQEpB,EARFoB,UAAS4K,EAQPhM,EAPF+B,mBAAAA,OAAkB,IAAAiK,EAAG,GAAEA,EACvBrK,EAME3B,EANF2B,cACA6D,EAKExF,EALFwF,mBACAF,EAIEtF,EAJFsF,YACAqG,EAGE3L,EAHF2L,SACAlG,EAEEzF,EAFFyF,SAAQwG,EAENjM,EADF6B,UAAAA,OAAS,IAAAoK,EAAG/U,EAAkB+U,EAYhC,GAPIN,EAAS3S,OAAS,KACpBoB,QAAQ4H,KACN,kGAKCsD,EAAYS,MAAM,SAACC,GAAK,OAAKA,EAAMxI,KAAO6H,CAAO,GACpD,MAAM,IAAIhN,MAAM,kDAIlB,IAAIuN,EAAY,GACZC,EAAa,GACbC,EAAc,GAGlB,IAAKR,EAAYS,MAAM,SAACC,GAAK,OAAKA,EAAMxI,KAAO6H,CAAO,GACpD,MAAM,IAAIhN,MAAM,kDAOlB,IAJA,IAI8B2L,EAuD1BiB,EAmDApE,EA9GEN,EAAa,IAAI2B,EAAoBL,GACrCnE,EAAK,IAAIyE,EAGf8B,EAAA5B,EAAsBsJ,KAAQ3H,EAAAC,KAAA3B,MAAE,CAAA,IAArBsJ,EAAO5H,EAAA7K,MAEViN,EAAS/F,OAAOuL,EAAQrO,IAAGhE,KAAAC,IAAG,GAAMiM,IACpCY,EAAgD,CACpDxD,EAAG,SACHyD,GAAI,WACJ/I,IAAK6I,EAAOnP,YAEVW,OAAgE,EACpE,GAAIuF,IAAaxG,EAAU0G,MACzBzF,EAAWmC,KACNsM,EAAmB,CACtBE,KAAMlB,QAEClI,IAAAA,IAAaxG,EAAU6P,MAMhC,MAAU,IAAAnO,MAAM,oBALhBT,EAAWmC,EACNsM,CAAAA,EAAAA,GACH7I,GAAI6H,GAIR,CAEA3H,EAAGgF,UAAU,CACX1H,SAAU,EACV8F,eAAe,IAAIkH,GAAUtQ,KAC3BkU,EAAQ1D,WACR0D,EAAQzD,WACRyD,EAAQxD,MACR,CACEpQ,QAASjB,OAAOC,KAAK+E,KAAKC,UAAUpE,IAAcX,SAAS,UAC3DgB,YAAa,yBAInB6N,GAAeM,CACjB,CAGA,IAAA,IAA+B8F,EAA/BC,EAAA9J,EAAoBiD,KAAW4G,EAAAC,KAAA7J,MAAE,CAAtB,IAAA0D,EAAKkG,EAAA/S,MACduE,EAAG6D,SAAS5H,EACVqM,GACA,IAAI5O,GAAW+J,OACbyC,EACA,OACA,EACAoC,EAAMhL,SACN6B,EAAOwE,WAAWC,GAAQ0E,EAAMhM,OAAQ,cAI5C6L,GAAcxF,OAAO2F,EAAMzI,IAC7B,CAKA,IAJAqI,EAAYC,EAAaC,GAIT,GACd,MAAU,IAAAzN,MAAM,6BAElB,GAAIuN,EAAY,GAAI,CAClB,IAKIhO,EALEyO,EAAgD,CACpDxD,EAAG,SACHyD,GAAI,WACJ/I,IAAKqI,EAAU3O,YAGjB,GAAIkG,IAAaxG,EAAU0G,MACzBzF,EAAWmC,EACNsM,CAAAA,EAAAA,GACHE,KAAMlB,QAEH,IAAIlI,IAAaxG,EAAU6P,MAMhC,MAAM,IAAInO,MAAM,oBALhBT,EAAWmC,EAAA,GACNsM,EACH7I,CAAAA,GAAI6H,GAIR,CAEA,IAAMvE,GAAgB,IAAI1J,GAAWM,KAAK8N,EAAoB,CAC5DxN,QAASjB,OAAOC,KAAK+E,KAAKC,UAAUpE,IAAcX,SAAS,UAC3DgB,YAAa,uBAETqD,EAAOoC,EAAG+C,QAAQzH,OACxB0E,EAAGgF,UAAU,CAAE5B,cAAAA,EAAe9F,SAAU,IACxCiK,EAAc,CACZzH,GAAI6H,EACJrK,SAAU,EACVhB,OAAQjD,OAAOC,KAAK8J,EAAcvF,YAAYtE,SAAS,UACvDoE,KAAM,GACNC,KAAAA,EACAiC,IAAKqI,EAAU3O,WAEnB,CAGA,IAAA,IAAkCmV,EAAlCC,EAAAhK,EAAgBN,KAAkBqK,EAAAC,KAAA/J,MAAE,KAAzBO,EAACuJ,EAAAjT,MACVuE,EAAGgF,UAAU,CACX1H,SAAU6H,EAAEC,OACZhC,eAAe,IAAItI,GAAQd,KAAKmL,EAAEE,KAEtC,CAKA,IAAMpC,EAASgB,GAAiBP,EAAU4B,YAAY/L,WAChDgM,GAAe,IAAIzK,GAAQd,KAAKiJ,GAKtCjD,EAAGgF,UAJe,CAChB5B,cAAemC,EACftC,QAAQ,IAIV,IAAIR,GAAc,GACZC,GAAe1C,EAAG+C,QAAQyC,OAC9B,SAACC,EAAOC,GAAG,OAAKD,EAAQ9C,OAAO+C,EAAIpI,UAAY,EAAE,EACjD,IAEEsF,GAAM,EAAE+C,GAAApC,GACOD,WAARpH,GACT,IAAMsH,EAAQvH,EAAiBC,GAAM,IAAIpB,GAAQ2I,OAC/CC,EACA,OACA,EACAxH,EAAKoB,SACL6B,EAAOwE,WAAW3H,EAAM4H,QAAQ1H,EAAKI,OAAQ,aAKV,OAFrC0D,EAAG6D,SAASL,GAEZf,IAAeE,OAAOzG,EAAKoB,UAAUV,QAAAC,QACzBgG,EAAWiB,WAAW9D,IAAGjD,cAAA6R,GAArChM,GAAGgM,EAECnM,IAAeC,GAAeC,OAAOC,MAAIyL,EAG/C,EAAA,EAAA,EAACA,WAAAA,OAAAA,CAAA,UAAAzR,QAAAC,QAAA8I,IAAAA,GAAA5I,KAAA4I,GAAA5I,KAAAwF,GAAAA,IA+CH,CAAC,MAAAzE,GAAA,OAAAlB,QAAAmB,OAAAD,EAAA,CAAA,EC9G2B,MAAAqJ,GAAA,oBAAAC,OAAAA,OAAAC,WAAAD,OAAAC,SAAAD,OAAA,oBAAA,aA1MxB,SAAAvF,GAAUP,EAAWC,EAAA9F,OAEpB6F,EAAAE,EAAA,CACJ,GAAA/F,aAAkBgG,GAAa,KAI3BhG,EAAM+F,gBAgBNE,EAAGG,GAAgBF,KAAA,WAfZ,EAAXJ,IACCA,EAAA9F,EAAW+F,KAYwC/F,EAAAmG,KAOnDnG,GAAAA,EAAAsB,mBAE0BA,KAAA8E,GAAAF,KAAA,KAAAL,EAAAC,GAAAM,GAAAF,KAAA,KAAAL,EAAA,MAK1BE,EAAAD,IAE8DK,EAAAnG,EAC/D,IAAAqG,EAAaR,EAAAI,EAEUI,GACvBA,EAAQR,EAGR,CACA,CAvHM,IACNG,2BAUD,SAAAA,IAAS,CA2DR,OA1DDA,EAAO1H,UAAEgD,KAAA,SAAoBgF,KACtB,IAAAb,EAAa,IAAAO,EACbF,EAAcS,KAAAR,EAEf,GAAAD,EAAO,KACNoM,EAEL,EAAApM,SAQ4CoM,EAAA,CAC7C,IACC9L,GAAAX,EACC,EAAAyM,EAAA3L,KAAAJ,GAEF,CAAC,MAAA9D,GAED+D,KAAmB,EAAA/D,EACnB,CAEA,OAASoD,EAET,OAAWc,mBAYP,SAASC,GACX,IACA,IAAAxG,EAAAwG,EAAAL,EACE,EAAFK,EAAET,EACHK,GAAAX,EAAA,EAAAa,EAAAA,EAAAtG,GAAAA,GAEgCyG,EACjCL,GAAWX,EAAK,EAAAgB,EAAAzG,OAENyF,EAAA,EAAIzF,EAEZ,CAAA,MAAEqC,GACJ+D,GAACX,EAAA,EAAApD,GAGD,EAEMoD,GAENO,CACC,IAkDA,SAAAU,GAAYC,uBACHX,IAAiC,EAAAW,EAAAZ,CACzC,CAgK6D,SAAA+B,GAAAwF,EAAAhK,EAAA4H,GAC/D,GAAyB,mBAAjBoC,EAAK5B,IAAY,CAGjB,IADe6B,EAAA1H,EAAAvD,EAAAsJ,EAAA0B,EAAA5B,SACvB,SAAQV,EAAKvF,GAEZ,IACE,QAAK8H,EAAA3B,EAAW4B,QAAUrE,MAAA+B,GAAAA,MAE1B,IADAzF,EAAMnC,EAAQiK,EAAKvN,SACRyF,EAAiBnE,KAAA,CAC5B,IAAAoF,GAAOjB,GAKS,YAFhBA,EAAAnE,KAAA0J,EAAA1I,IAAAA,EAAA8D,GAAAF,KAAA,KAAAL,EAAA,IAAAG,GAAA,KAFAP,EAAWA,EAAAU,CAMd,CAECN,KACSA,EAAA,EAAEJ,GAEVI,EAAAJ,QAICpD,GACH+D,GAACP,IAAAA,EAAA,IAAAG,IAAA,EAAA3D,GAGA,CACA2I,KACS,OAAQ,KACjBoH,EAAA,SAAApS,GAED,IACGuN,EAAApE,QACY,eAID9G,GAEb,CAAA,OAAArC,2LAzHM,SAAiB+K,EAAAzH,EAAU4H,GACjC,IAAArF,EAAWvD,EAAX2I,GAAA,SACC,SAAAD,EAAsBvF,GACtB,WAC6BwF,EAAAF,EAAAlL,UAAAqL,IAAAA,UAC/BzF,EAACnC,EAAA2H,KAAOxF,EAAAnE,KAAA,CACP,IAAAoF,GAAgBjB,GAKhB,cADOnE,WAAsBgB,EAAS8D,GAAGF,KAAU,KAAAL,EAAA,IAAAG,GAAA,KAHnDP,EAAAA,EAAAU,CAMC,CAEAN,EAEDO,UAMAP,EAAAJ,CAEA,CAAA,MAAEpD,MAE8BwD,IAAAA,EAAA,IAAAG,IAAA,EAAA3D,EACjC,MAIE,mCA7NU,IAAA+Q,GAAiB,SAAUvM,GAA+B,IAAInC,IA+HxEqC,EA/HwErC,aAyF1E,GAAIsC,EAAcC,EAAeC,OAAOC,GACvC,UAAUjI,MAC+C8H,wDAAAA,uBAAgCC,EAAY,UAAUE,GAE/G,OAAAhG,QAAAC,QAGKmD,EAAG4C,IAAIC,IAAW9F,KAAA,WAAA,OAAAH,QAAAC,QAGlBmD,EAAGS,QAAM1D,KAAA,WAGf,IAAM+F,EAAkB9C,EAAG+C,QAAQC,UAAU,SAACtB,UAAMA,EAAEuB,MAAM,GAC5D,IAAyB,IAArBH,EAAwB,CAC3B,IAAMI,EAAelD,EAAG+C,QAAQD,GAChCK,EAAY,CACX7F,SAAU4F,EAAa5F,SACvBK,KAAMqC,EAAGF,GAAG,OACZlC,KAAMkF,EACNxG,OAAQjD,OAAOC,KAAK4J,EAAaE,cAAcvF,YAAYtE,SAC1D,UAGH,CAQA,OANI4J,IAEHA,EAAU7F,SADW0C,EAAG+C,QAAQ/C,EAAG+C,QAAQzH,OAAS,GAClBgC,SAClC6F,EAAUxF,KAAOqC,EAAGF,GAAG,QAGjB,CACNE,GAAAA,EACAqD,eAAgBrD,EAAGwH,OAAO9J,IACzB,SAACgJ,UAASA,EAAEe,eAAcf,EAAEgB,iBAAiB,GAE9CvE,UAAAA,EACC,EAAA,EAAA,EA7HDG,EAOGhB,EAPHgB,MACAwL,EAMGxM,EANHwM,aACA5I,EAKG5D,EALH4D,MACAxC,EAIGpB,EAJHoB,UACAO,EAGG3B,EAHH2B,cAAaG,EAGV9B,EAFH+B,mBAAAA,OAAqB,IAAHD,EAAG,GAAEA,EAAAF,EAEpB5B,EADH6B,UAAAA,WAASD,EAAG1K,EAAkB0K,EAI3B4K,EAAaxT,OAAS,KACzBoB,QAAQ4H,KACP,iGASF,IALA,IAKsCC,EA2BlCpB,EAhCEN,EAAa,IAAI2B,EAAoBL,GACrCnE,EAAK,IAAIyE,EAIfC,EAAAC,EAA0BmK,KAAYvK,EAAAG,KAAAE,MAAE,CAAA,IAA7BuJ,EAAW5J,EAAA9I,MACrBuE,EAAG6D,SAAS5H,EACXkS,GACA,IAAI7D,GAAUU,cACb9E,EACA,OACA,EACAiI,EAAY7Q,SACZ6B,EAAOwE,WAAW3H,EAAM4H,QAAQuK,EAAY7R,OAAQ,cAItD0D,EAAGgF,UAAU,CACZ1H,SAAU,EACV8F,eAAe,IAAItI,GAAQd,KAAKkM,EAAMZ,YAAY/L,aAEpD,CAGA,QAAkC0L,EAAlCC,EAAAP,EAAgBN,KAAkBY,EAAAC,KAAAN,MAAE,KAAzBO,EAACF,EAAAxJ,MACXuE,EAAGgF,UAAU,CACZ1H,SAAU6H,EAAEC,OACZhC,eAAe,IAAItI,GAAQd,KAAKmL,EAAEE,KAEpC,CAKA,IAAMpC,EAASgB,GAAiBP,EAAU4B,YAAY/L,WAChDgM,GAAe,IAAIzK,GAAQd,KAAKiJ,GAKtCjD,EAAGgF,UAJe,CACjB5B,cAAemC,EACftC,QAAQ,IAIT,IAAIR,EAAc,GACZC,EAAe1C,EAAG+C,QAAQyC,OAC/B,SAACC,EAAOC,GAAG,OAAKD,EAAQ9C,OAAO+C,EAAIpI,UAAY,EAAE,EACjD,IAEGsF,EAAM,EAAEjC,EAAA4C,GACOD,EAAK,SAAbpH,GACV,IAAMsH,EAAQvH,EACbC,GACA,IAAIpB,GAAQ2I,OACXC,EACA,OACA,EACAxH,EAAKoB,SACL6B,EAAOwE,WAAW3H,EAAM4H,QAAQ1H,EAAKI,OAAQ,aAMV,OAFrC0D,EAAG6D,SAASL,GAEZf,GAAeE,OAAOzG,EAAKoB,UAAUV,QAAAC,QACzBgG,EAAWiB,WAAW9D,IAAGjD,cAAAgH,GAArCnB,EAAGmB,EAECtB,GAAeC,EAAeC,OAAOC,KAAIJ,EAG9C,EAAA,EAAA,oBAACA,CAAA,GAAA,OAAA5F,QAAAC,QAAA8D,GAAAA,EAAA5D,KAAA4D,EAAA5D,KAAAoD,GAAAA,IA0CF,CAAC,MAAArC,GAAA,OAAAlB,QAAAmB,OAAAD,EAED,CAAA,EAAaiR,GAAA,SACZzM,GACG,IAAA,IAiLD+L,EAjLC9L,EAAAA,WAiIH,GAAIE,EAAcC,EAAeC,OAAOC,GACvC,MAAU,IAAAjI,MAAK,wDAC0C8H,EAAgCC,qBAAAA,EAAsBE,UAAAA,GAE/G,OAAAhG,QAAAC,QAGKmD,EAAG4C,IAAIC,IAAW9F,uBAAAH,QAAAC,QAGlBmD,EAAGS,QAAM1D,KAAA,WAEd,IAAMwK,EAAyB,CAC7B1H,IAAKsI,EAAW5O,WAChB+C,OAAQjD,OAAOC,KAAK8J,EAAcjK,QAAS,OAAOI,SAAS,UAC3DoE,KAAMqC,EAAGF,GAAG,OACZlC,KAAM,EACNkC,GAAI6H,EACJrK,SAAU,GAIPwF,EAAkB9C,EAAG+C,QAAQC,UAAU,SAACtB,GAAM,OAAAA,EAAEuB,MAAM,GAC5D,IAAyB,IAArBH,EAAwB,CAC3B,IAAMI,EAAelD,EAAG+C,QAAQD,GAChCK,EAAY,CACX7F,SAAU4F,EAAa5F,SACvBK,KAAMqC,EAAGF,GAAG,OACZlC,KAAMkF,EACNxG,OAAQjD,OAAOC,KAAK4J,EAAaE,cAAcvF,YAAYtE,SAC1D,UAGH,CAQA,OANI4J,IAEHA,EAAU7F,SADW0C,EAAG+C,QAAQ/C,EAAG+C,QAAQzH,OAAS,GAClBgC,SAClC6F,EAAUxF,KAAOqC,EAAGF,GAAG,QAGjB,CACNE,GAAAA,EACAqD,eAAgBrD,EAAGwH,OAAO9J,IACzB,SAACgJ,GAAS,OAAAA,EAAEe,WAAcf,IAAAA,EAAEgB,iBAAiB,GAE9CvE,UAAAA,EACEoE,YAAAA,EACD,EAAA8G,EAAAA,EA/KD5O,EAUG6C,EAVH7C,SACAkI,EASGrF,EATHqF,QACA6C,EAQGlI,EARHkI,WACAvG,EAOG3B,EAPH2B,cACAP,EAMGpB,EANHoB,UACAwC,EAKG5D,EALH4D,MACA7B,EAIG/B,EAJH+B,mBACAyK,EAGGxM,EAHHwM,aACAxL,EAEGhB,EAFHgB,MAAKiL,EAEFjM,EADH6B,UAAAA,WAASoK,EAAG/U,EAAkB+U,EAG3BpG,EAAa,EASjB,GAPI2G,EAAaxT,OAAS,KACzBoB,QAAQ4H,KACP,kGAKGwK,EAAazG,MAAM,SAACC,GAAK,OAAKA,EAAMxI,KAAO6H,CAAO,GACtD,MAAU,IAAAhN,MAAM,kDAQjB,IALA,IAKsC2L,EALhCzD,EAAa,IAAI2B,EAAoBL,GACrCnE,EAAK,IAAIyE,EAIf8B,EAAA5B,EAA0BmK,KAAYxI,EAAAC,KAAA3B,MAAE,CAAA,IAA7BuJ,EAAW7H,EAAA7K,MACrBuE,EAAG6D,SAAS5H,EACXkS,GACA,IAAI7D,GAAUU,cACb9E,EACA,OACA,EACAiI,EAAY7Q,SACZ6B,EAAOwE,WAAW3H,EAAM4H,QAAQuK,EAAY7R,OAAQ,cAGtD6L,GAAc2B,OAAOE,SAASmE,EAAYtO,IAC3C,CAEA,IAKI3F,EALEyO,EAAgD,CACrDxD,EAAG,SACHyD,GAAI,WACJ/I,IAAKsI,EAAW5O,YAGjB,GAAIkG,IAAaxG,EAAU0G,MAC1BzF,EAAWmC,EAAA,GACPsM,EACHE,CAAAA,KAAMlB,QAEGlI,IAAAA,IAAaxG,EAAU6P,MAMjC,UAAUnO,MAAM,oBALhBT,EAAWmC,EAAA,CAAA,EACPsM,EACH7I,CAAAA,GAAI6H,GAIN,CAEA,IA2BIxE,EA3BE0B,EAA2B,CAChC5K,QAASuQ,GAActE,EAAMZ,YAAY/L,WACzCW,YAAa,CACZI,QAASjB,OAAOC,KAAK+E,KAAKC,UAAUpE,IAAcX,SAAS,UAC3DgB,YAAa,uBAIR6I,GAAgB,IAAI1J,GAAWM,KACnC6K,EAAY5K,QACZ4K,EAAY3K,aAGf8F,EAAGgF,UAAU,CACZ1H,SAAU,EACV8F,cAAAA,IAID,IAAAqL,IAAkCD,EAAlCC,EAAA9J,EAAgBN,KAAkBmK,EAAAC,KAAA7J,MAAE,CAAzB,IAAAO,EAACqJ,EAAA/S,MACXuE,EAAGgF,UAAU,CACZ1H,SAAU6H,EAAEC,OACZhC,eAAe,IAAItI,GAAQd,KAAKmL,EAAEE,KAEpC,CAKA,IAAMpC,EAASgB,GAAiBP,EAAU4B,YAAY/L,WAChDgM,GAAe,IAAIzK,GAAQd,KAAKiJ,GAKtCjD,EAAGgF,UAJe,CACjB5B,cAAemC,EACftC,QAAQ,IAIT,IAAIR,EAAc,GACZC,EAAe1C,EAAG+C,QAAQyC,OAC/B,SAACC,EAAOC,GAAG,OAAKD,EAAQ9C,OAAO+C,EAAIpI,UAAY,EAAE,EACjD,IAEGsF,EAAM,EAAE+C,EAAApC,GACOD,EAARpH,SAAAA,GACV,IAAMsH,EAAQvH,EAAiBC,GAAM,IAAIpB,GAAQ2I,OAChDC,EACA,OACA,EACAxH,EAAKoB,SACL6B,EAAOwE,WAAW3H,EAAM4H,QAAQ1H,EAAKI,OAAQ,aAKT,OAFrC0D,EAAG6D,SAASL,GAEZf,GAAeE,OAAOzG,EAAKoB,UAAUV,QAAAC,QACzBgG,EAAWiB,WAAW9D,IAAGjD,cAAA6R,GAArChM,EAAGgM,EAECnM,GAAeC,EAAeC,OAAOC,KAAIyL,EAG9C,EAAA,EAAA,oBAACA,CAAA,GAAA,OAAAzR,QAAAC,QAAA8I,GAAAA,EAAA5I,KAAA4I,EAAA5I,KAAAwF,GAAAA,IAoDF,CAAC,MAAAzE,GAAAlB,OAAAA,QAAAmB,OAAAD,EAAA,CAAA,ECpUKkR,GAAS,IAAIC,EC4Ef,SAAApN,KAA6CN,EAAA9F,GAC7C,IAAA6F,EAAAE,EAAM,CAEN,GAAA/F,aAAAgG,GAAiC,OAC1BD,qBAMGG,KAAA,KAAAL,EAAAC,IALN,UACaC,KAEf/F,EAAKmG,EAML,GAAAnG,GAAAA,EAAAsB,iBACEtB,EAAAsB,KAAA8E,GAAMF,KAAI,KAAML,EAAAC,GAAAM,GAAuBF,KAAC,KAAAL,EAAA,IAG1CA,EAAAE,EAAAD,MACD9F,QACDqG,IAAaJ,EACXI,KACAR,IA7FC,IAAEG,gBAA0B,WAC5B,SAAAA,KAiEF,OAhEEA,EAAA1H,UAAcgD,KAAA,SAAAgF,EAAuBG,GAC5C,MACc,IAAAT,EASLF,EAAAS,KAAAR,EACT,GAAAD,EAAS,CAEH,MAAyB,EAAAA,EAAAQ,EAAUG,KACjCyL,EACC,CAUP,IACA9L,GAAQX,EAAO,EAAAyM,EAAc3L,KAAAJ,GAE7B,CAAS,MAAA9D,GACiC+D,GAAAX,EAAA,EAAApD,EAC1C,CAUA,OAAUoD,EAEV,mBAGCc,KAAEN,EAAA,SAAAO,OAGH,IAAMxG,EAASwG,IACD,EAARA,EAAAT,EACNK,OAAqBE,EAAOA,EAAgBtG,GAAAA,GACtCyG,EACAL,GAAAX,EAAA,IAA6BzF,OAEzByF,EAAA,EAAAzF,EAET,CAAA,MAAEqC,GAEH+D,GAAiCX,EAAA,EAAApD,EACjC,MAIG2D,EAlE8B,GA2PlB0F,GAAA,oBAAAC,OAAAA,OAAAC,WAAAD,OAAAC,SAAAD,OAAA,oBAAA,aAvJT,SAAAjF,GAASC,UACTA,aAAAX,IAAwC,EAAbW,EAAWZ,CAC5C,aA0JeuH,EAAAhK,EAAA4H,MACO,mBAAlBoC,EAAQ5B,IAAU,CAEjB,IAD+B6B,EAAK1H,EAAAvD,IAAxBgL,EAAA5B,SACd,SAAEV,EAAAvF,OAGL,QAA4B8H,EAAA3B,EAAA4B,QAAArE,MAAA+B,GAAAA,MAGtB,IAFNzF,IAAgC8H,EAAAvN,SAEjByF,EAAAnE,KAAa,CACtB,IAAAoF,GAAejB,GAInB,YADAA,EAAMnE,KAAM0J,EAAA1I,IAAAA,EAAA8D,GAAAF,KAAA,KAAAL,EAAA,IAAAG,GAAA,KAFdP,IAAkBU,CAMd,CAKAN,EACJO,GAAWP,EAAI,EAAIJ,GAYjBI,EAAGJ,CAEH,CAAA,MAAApD,MACGwD,IAAmBA,EAAA,IAAAG,IAAY,EAAG3D,OAKtCuJ,EAAA,OAAA,KAE0BwG,EAAA,SAAApS,GAC3B,IACQuN,EAAApE,MAGPyC,UAGD,CAAA,MAAQvJ,GAAC,CAGT,OAAQrC,CAER,EACA,GAAA6F,GAAmBA,EAAAvE,YACXuE,EAAAvE,KAAA8Q,EAAe,YACrB,MAAAA,EAAY/P,KAGV+P,GACA,QAGDvM,EAID,KAAA,WAAkByH,GAClB,MAAA,IAAA+E,UAAkB,kCAIbrE,EAAA,GACH/C,EAAA,EAAAA,EAAAqC,EAAAzN,OAAAoL,MACYP,KAAA4C,EAAArC,WA/JhB,SAAAF,EAAAzH,EAAA4H,GAEI,IAAOrF,EAAuBvD,EAA9B2I,qBAGED,EACIvF,GAWV,IACA,OAAQwF,EAAOF,EAAAlL,UAAcqL,IAAAA,MAG7B,IADAzF,EAASnC,EAAA2H,KACiCxF,EAAAnE,KAAA,CAC1C,IAAGoF,GACDjB,GAYA,YADAA,EAAWnE,KAAA0J,EAAA1I,IAAAA,EAAA8D,GAAAF,KAAA,KAAAL,EAAA,IAAAG,GAAA,KAFHP,EAAAA,EAAAU,EAOVN,EACEO,GAAAP,EAAA,EAAcJ,GAEZI,EAAAJ,EAEJ,MAACpD,GAAM+D,GAAAP,MAAiB,IAAAG,IAAe,EAAG3D,EACxC,CACE,CACA2I,KAoHFsH,CAAAtE,EAAA,SAAA/C,GAAA,OAAA3H,EAAA0K,EAAA/C,GAAA,EAAAC,EACJ,CApUa,IAAAuI,YAA4B5M,GAAoC,IAAA,IAAA6M,EAAAA,SAAAC,GAAAf,IAAAA,EAkFvElL,EAlFuE,SAAAZ,IAyH3E,GAAIE,EAAcC,EAAeC,OAAOC,GACtC,UAAUjI,8DACgD8H,EAAW,qBAAqBC,EAAsBE,UAAAA,GAEjH,OAAAhG,QAAAC,QAGKmD,EAAG4C,IAAIC,IAAW9F,KAAAH,WAAAA,OAAAA,QAAAC,QAGlBmD,EAAGS,QAAM1D,KAAA,WAGf,IAAM+F,EAAkB9C,EAAG+C,QAAQC,UAAU,SAACtB,GAAM,OAAAA,EAAEuB,MAAM,GAC5D,IAAyB,IAArBH,EAAwB,CAC1B,IAAMI,EAAelD,EAAG+C,QAAQD,GAChCK,EAAY,CACV7F,SAAU4F,EAAa5F,SACvBK,KAAMqC,EAAGF,GAAG,OACZlC,KAAMkF,EACNxG,OAAQjD,OAAOC,KAAK4J,EAAaE,cAAcvF,YAAYtE,SACzD,UAGN,CAQA,OANI4J,IAEFA,EAAU7F,SADW0C,EAAG+C,QAAQ/C,EAAG+C,QAAQzH,OAAS,GAClBgC,SAClC6F,EAAUxF,KAAOqC,EAAGF,GAAG,QAGlB,CACLE,GAAAA,EACAqD,eAAgBrD,EAAGwH,OAAO9J,IACxB,SAACgJ,GAAS,OAAAA,EAAEe,WAAU,IAAIf,EAAEgB,iBAAiB,GAE/CvE,UAAAA,EACA,EAAA,EAAA,CA3EF,IAAMF,EAASgB,GAAiBP,EAAU4B,YAAY/L,WAChDgM,GAAe,IAAIzK,GAAQd,KAAKiJ,GAKtCjD,EAAGgF,UAJe,CAChB5B,cAAemC,EACftC,QAAQ,IAIV,IAAIR,EAAc,GACZC,EAAe1C,EAAG+C,QAAQyC,OAC9B,SAACC,EAAOC,GAAQ,OAAAD,EAAQ9C,OAAO+C,EAAIpI,UAAY,EAAE,EACjD,IAEEsF,EAAM,EAAE+C,EAAApC,GACOD,WAARpH,GACT,IAAMsH,EAAQvH,EACZC,GACA,IAAIpB,GAAQ2I,OACVC,EACA,OACA,EACAxH,EAAKoB,SACL6B,EAAOwE,WAAW3H,EAAM4H,QAAQ1H,EAAKI,OAAQ,aAMZ,OAFrC0D,EAAG6D,SAASL,GAEZf,GAAeE,OAAOzG,EAAKoB,UAAUV,QAAAC,QACzBgG,EAAWiB,WAAW9D,IAAGjD,KAAAgH,SAAAA,GAArCnB,EAAGmB,EAECtB,GAAeC,EAAeC,OAAOC,KAAIyL,MAG/C,EAAC,WAAA,OAAAA,CAAA,GAAA,OAAA1I,GAAAA,EAAA5I,KAAA4I,EAAA5I,KAAAwF,GAAAA,GAAArC,EApHCoD,EAQEhB,EARFgB,MACAI,EAOEpB,EAPFoB,UACAwK,EAME5L,EANF4L,QACA1D,EAKElI,EALFkI,WACAvG,EAIE3B,EAJF2B,cAAaG,EAIX9B,EAHF+B,mBAAAA,WAAkBD,EAAG,GAAEA,EAAAF,EAGrB5B,EAFF6B,UAA8BkL,EAE5B/M,EADFgN,UAAAA,OAAY,IAAHD,EAAG,GAAEA,EAGVxM,EAAa,IAAI2B,OAJZ,IAAAN,EAAG1K,EAAkB0K,GAK1BlE,EAAK,IAAIyE,EAIfzE,EAAG6D,SACD5H,EACEiS,EAAQC,aACR,IAAI7D,GAAUsB,gBACZ,EACAzM,EAAOwE,WAAW3H,EAAM4H,QAAQsK,EAAQC,YAAY7R,OAAQ,cAOlE0D,EAAGgF,UAAU,CACX1H,SAAU,EACV8F,eAAe,IAAItI,GAAQd,KAAKwQ,KAIlC,IAAM+E,EAAS,IAAIvT,EAAMwT,OAAOxT,EAAM4H,QAAQsK,EAAQuB,OAAQ,WACxDnS,EAAWiS,EAAOG,iBAAiBC,WACnCC,EAAeL,EAAOM,gBACtBC,EAAYP,EAAOQ,KAAKH,GACxBxM,EAAgB1H,EAAciI,WAAWmM,GAC/C9P,EAAGgF,UAAU,CACX1H,SAAAA,EACA8F,cAAAA,IAIF,IAAA,IAAkCmB,EAAlCG,EAAAC,EAAgBN,KAAkBE,EAAAG,KAAAE,MAAE,CAAA,IAAzBO,EAACZ,EAAA9I,MACVuE,EAAGgF,UAAU,CACX1H,SAAU6H,EAAEC,OACZhC,eAAe,IAAItI,GAAQd,KAAKmL,EAAEE,KAEtC,CAAC,IAAA2K,EAAAzM,GAGe+L,EAAS,SAAdW,GAAgB,IACrB7M,EADqBjD,SAAAA,EAAAC,GAkBzB,IAAKgD,EACH,MAAM,IAAIzI,MAAM,+BAElBqF,EAAGgF,UAAU,CACX1H,SAAU4S,EACV9M,cAAAA,GACC,CAtBH,IAAM8M,EAAcrU,KAAKsU,MAAMrG,OAAOmG,EAAEG,YAAc9S,GAAUqD,4zBAAA0P,CAExDJ,EAAEhV,yBACH/B,EAAaoX,OAAO,EAAA,WAAA,OAAA1T,QAAAC,QD9ElB,SAAwB0T,EAAwBC,GAAoB,IAA4B5T,OAAAA,QAAAC,QAC/EmS,GAAOyB,yBAAyBF,EAAgBC,IAAazT,KAAA,SAAnF2T,GAEN,OAAOA,EAAc3N,QAAQ,GAAGzG,MAAwB,EAC1D,CAAC,MAAAwB,GAAAlB,OAAAA,QAAAmB,OAAAD,EAAA,CAAA,CC4E6B6S,CAAeV,EAAEpL,YAAaqL,IAAYnT,KAAA,SAAA6T,GAAhExN,EAAawN,CAAoD,EAAA,GAAA,CAAA,WAAA,OAE9D1X,EAAaiG,MAAM,EACtBiE,WAAAA,EAAgBjE,EAAOwE,WAAW3H,EAAM4H,QAAQqM,EAAEpL,YAAa,UAAW,GAAA,CAAA,WAAA,OAEvE3L,EAAa2X,OAAO,EAAA,WACvBzN,GAAgB,IAAItI,GAAQd,KAAKiW,EAAEpL,YAGnC,GAAA,MAAA,EAAA,WAAA,UAAUlK,MAAM,uBAAwB,YAAAgG,GAAAA,EAAA5D,KAAA4D,EAAA5D,KAAAoD,GAAAA,GAS9C,EAAC,WAAA,GAAAvD,OAAAA,QAAAC,QAAAmT,GAAAA,EAAAjT,KAAAiT,EAAAjT,KAAAoS,GAAAA,IAiFH,CAAC,MAAArR,GAAA,OAAAlB,QAAAmB,OAAAD,EAAA,CAAA,EAEYgT,GAAA,SACXxO,OACEyO,IA+JAC,EA/JAD,EAAAA,WA0HF,GAAItO,EAAcC,EAAeC,OAAOC,GACtC,MAAU,IAAAjI,MACsD8H,8DAAAA,uBAAgCC,EAAY,UAAUE,GAEvH,OAAAhG,QAAAC,QAGKmD,EAAG4C,IAAIC,IAAW9F,uBAAAH,QAAAC,QAGlBmD,EAAGS,QAAM1D,KAEf,WAAA,IAAM+F,EAAkB9C,EAAG+C,QAAQC,UAAU,SAACtB,GAAM,OAAAA,EAAEuB,MAAM,GAC5D,IAAyB,IAArBH,EAAwB,CAC1B,IAAMI,EAAelD,EAAG+C,QAAQD,GAChCK,EAAY,CACV7F,SAAU4F,EAAa5F,SACvBK,KAAMqC,EAAGF,GAAG,OACZlC,KAAMkF,EACNxG,OAAQjD,OAAOC,KAAK4J,EAAaE,cAAcvF,YAAYtE,SACzD,UAGN,CAQA,OANI4J,IAEFA,EAAU7F,SADW0C,EAAG+C,QAAQ/C,EAAG+C,QAAQzH,OAAS,GAClBgC,SAClC6F,EAAUxF,KAAOqC,EAAGF,GAAG,QAGlB,CACLE,GAAAA,EACAqD,eAAgBrD,EAAGwH,OAAO9J,IACxB,SAACgJ,GAAC,OAAQA,EAAEe,WAAcf,IAAAA,EAAEgB,iBAAiB,GAE/CvE,UAAAA,EACA,EAAA6N,EAAAA,EA7JAvR,EASE6C,EATF7C,SACAkI,EAQErF,EARFqF,QACArE,EAOEhB,EAPFgB,MACAI,EAMEpB,EANFoB,UACAyK,EAKE7L,EALF6L,YACA3D,EAIElI,EAJFkI,WACAvG,EAGE3B,EAHF2B,cAAasK,EAGXjM,EAFF6B,UAA8BmK,EAE5BhM,EADF+B,mBAAAA,OAAkB,IAAAiK,EAAG,GAAEA,EAGnBzL,EAAa,IAAI2B,OAJThL,IAAH+U,EAAG/U,EAAkB+U,GAK1BvO,EAAK,IAAIyE,EAIfzE,EAAG6D,SACD5H,EACEkS,GACA,IAAI7D,GAAUsB,gBACZ,EACAzM,EAAOwE,WAAW3H,EAAM4H,QAAQuK,EAAY7R,OAAQ,cAM1D,IAKIpC,EALEyO,EAAgD,CACpDxD,EAAG,SACHyD,GAAI,WACJ/I,IAAKsO,EAAYtO,KAGnB,GAAIJ,IAAaxG,EAAU0G,MACzBzF,EAAWmC,EACNsM,CAAAA,EAAAA,EACHE,CAAAA,KAAMlB,QAEH,IAAIlI,IAAaxG,EAAU6P,MAMhC,MAAM,IAAInO,MAAM,oBALhBT,EAAWmC,KACNsM,EAAmB,CACtB7I,GAAI6H,GAIR,CACA,IAAMrN,EAAUjB,OAAOC,KAAK+E,KAAKC,UAAUpE,IAAcX,SAAS,UAWlE,GARAyG,EAAGgF,UAAU,CACX1H,SAAU,EACV8F,eAAe,IAAI1J,GAAWM,KAAKwQ,EAAY,CAC7ClQ,QAAAA,EACAC,YAAa,cAIZ4T,EAAYsB,OACf,MAAM,IAAI9U,MAAM,8CAIlB,IAmBIwI,EAnBEoM,EAAS,IAAIvT,EAAMwT,OAAOxT,EAAM4H,QAAQuK,EAAYsB,OAAQ,WAC5DnS,EAAWiS,EAAOG,iBAAiBC,WACnCC,EAAeL,EAAOM,gBACtBC,EAAYP,EAAOQ,KAAKH,GACxBxM,EAAgB1H,EAAciI,WAAWmM,GAC/C9P,EAAGgF,UAAU,CACX1H,SAAAA,EACA8F,cAAAA,IAIF,IAAA8B,IAAkCD,EAAlCC,EAAAP,EAAgBN,KAAkBY,EAAAC,KAAAN,MAAE,CAAzB,IAAAO,EAACF,EAAAxJ,MACVuE,EAAGgF,UAAU,CACX1H,SAAU6H,EAAEC,OACZhC,eAAe,IAAItI,GAAQd,KAAKmL,EAAEE,KAEtC,CAKA,IAAMpC,EAASgB,GAAiBP,EAAU4B,YAAY/L,WAChDgM,GAAe,IAAIzK,GAAQd,KAAKiJ,GAKtCjD,EAAGgF,UAJe,CAChB5B,cAAemC,EACftC,QAAQ,IAIV,IAAIR,EAAc,GACZC,EAAe1C,EAAG+C,QAAQyC,OAC9B,SAACC,EAAOC,GAAG,OAAKD,EAAQ9C,OAAO+C,EAAIpI,UAAY,EAAE,EACjD,IAEEsF,EAAM,EAAEqO,EAAA1N,GACOD,EAARpH,SAAAA,GACT,IAAMsH,EAAQvH,EACZC,GACA,IAAIpB,GAAQ2I,OACVC,EACA,OACA,EACAxH,EAAKoB,SACL6B,EAAOwE,WAAW3H,EAAM4H,QAAQ1H,EAAKI,OAAQ,aAMZ,OAFrC0D,EAAG6D,SAASL,GAEZf,GAAeE,OAAOzG,EAAKoB,UAAUV,QAAAC,QACzBgG,EAAWiB,WAAW9D,IAAGjD,KAAA6R,SAAAA,GAArChM,EAAGgM,EAECnM,GAAeC,EAAeC,OAAOC,KAAIoO,EAG/C,EAAA,EAAA,oBAACA,CAAA,GAAA,OAAApU,QAAAC,QAAAoU,GAAAA,EAAAlU,KAAAkU,EAAAlU,KAAAgU,GAAAA,IAyCH,CAAC,MAAAjT,UAAAlB,QAAAmB,OAAAD,EAAA,CAAA,EC1SYoT,GAAqB,IAAIvW,MACrC,2DAEYwW,GAAuB,IAAIxW,MAAM,gCACjCyW,GAAuB,IAAIzW,MAAM,0BACjC0W,GAAgC,IAAI1W,MAChD,gJCaC,SAAAkH,GAAaP,EAASC,EAAA9F,SACc+F,EAAA,iBAC3BC,GAAQ,KACjBhG,EAAA+F,EAWD,YADC/F,EAAMiG,EAAGG,GAAWF,KAAG,KAAML,EAAoBC,IARzB,EAAAA,IACzBA,EAAoB9F,EAAA+F,GAIpB/F,EAACA,EAAAmG,CAMA,CACA,GAAAnG,GAAWA,EAAAsB,KAEX,YADAtB,EAAAsB,KAAM8E,GAASF,KAAA,KAAAL,EAAAC,GAAAM,GAAAF,KAAA,KAAAL,EAAA,MAIXE,EAAAD,EACFD,EAAAM,EAAAnG,MACDqG,EAAAR,EAAAI,EAEFI,GACAA,KAGE,CApFI,IAAEL,2BACT,SAAAA,IACOA,CAgDL,OAhDKA,EAAA1H,UAAcgD,KAAA,SAAAgF,EAAuBG,GAC5C,IAAShB,EAAA,IAAAO,EAETF,EAAAS,KAAAR,iGAcGQ,KAAAN,EAAA,SAAAO,GACG,IAGL,IAAMxG,EACCwG,EACFL,IAWLK,IAEAJ,GAAQX,EAAO,EAAAa,EAAcA,EAAAtG,GAAAA,KAG7BoG,GAAWX,EAAS,EAAAgB,EAAWzG,IAE9BoG,GAAAX,EAAA,EAAAzF,EACA,CAAA,MAAAqC,MACIoD,EAAA,EAAWpD,EACd,GAEyCoD,CAC1C,EACAO,CACC,gBAmCgBW,UAChBA,aAAAX,IAAA,EAAAW,EAAAZ,CACF,CApEY,IAAA8P,GAAA,SACZhP,GAA8B,QAmB1BiP,EAlBgChP,EAAA,SAAAnC,GAAAoC,IAAAA,EAAArC,SAAAA,IAuGpC,GAAIsC,EAAcC,EAAeC,OAAOC,GACvC,MAAM,IAAIjI,MAAK,oDACsC8H,EAAW,qBAAqBC,EAAY,UAAUE,GAK5G,IAAIO,EAEEF,EAASgB,GAAiBP,EAAU4B,YAAY/L,WAChDgM,GAAe,IAAIzK,GAAQd,KAAKiJ,GAKd,OAAxBjD,EAAGgF,UAJe,CACjB5B,cAAemC,EACftC,QAAQ,IAEerG,QAAAC,QAGlBmD,EAAG4C,IAAIC,IAAW9F,KAAAH,WAAAA,OAAAA,QAAAC,QAGlBmD,EAAGS,QAAM1D,gBAGf,IAAM+F,EAAkB9C,EAAG+C,QAAQC,UAAU,SAACtB,GAAM,OAAAA,EAAEuB,MAAM,GAC5D,IAAyB,IAArBH,EAAwB,CAC3B,IAAMI,EAAelD,EAAG+C,QAAQD,GAChCK,EAAY,CACX7F,SAAU4F,EAAa5F,SACvBK,KAAMqC,EAAGF,GAAG,OACZlC,KAAMkF,EACNxG,OAAQjD,OAAOC,KAAK4J,EAAaE,cAAcvF,YAAYtE,SAC1D,UAGH,CAEA,MAAO,CACNyG,GAAAA,EACAqD,eAAgBrD,EAAGwH,OAAO9J,IACzB,SAACgJ,UAASA,EAAEe,WAAcf,IAAAA,EAAEgB,iBAAiB,GAE9CvE,UAAAA,EACC,EA5GF,EAAA,CAAA,IDmD8B,SAACqO,GAC/B,IAAKA,EAAK5H,SAAS,MAAQ4H,EAAKC,SAAS,KACxC,OACD,EAGA,IAAMC,EAAW5H,OAAOE,SAASwH,EAAK3H,MAAM,KAAK,IACjD,QAAIC,OAAOC,MAAM2H,KAIZF,EAAKG,WAAW,MAAsC,KAA9BH,EAAK3H,MAAM,KAAK,GAAGvO,OAKjD,CCnEMsW,CAAgBL,GACpB,MAAM,IAAI5W,MACT,4MAKD,IAAMkF,EAAMkI,EAAWpF,OAAOkP,EAAoBhS,KAAIhE,KAAAC,IAAG,IAAO6G,OAAOoF,IAAYpF,OAAOkP,EAAoBhS,KACzGiS,EAAuC,CAC5C3M,EAAG,SACHyD,GAAI,cACJmJ,IAAKC,EACLR,KAAMD,EACN1R,IAAKA,EAAItG,YAGLwO,IACF+J,EAASG,IAAMlK,EAASxO,YAG3B,IAAM2Y,EAAU7Y,OAAOC,KAAK+E,KAAKC,UAAUwT,IAAWvY,SAAS,UACzD2N,EAAY,CACjB5J,SAAU,EACV8F,eAAe,IAAI1J,GAAWM,KAAKmY,EAAoB,CACtD7X,QAAS4X,EACT3X,YAAa,wBAGfyF,EAAGgF,UAAUkC,GAGb,QAAwC3C,EAAxCG,EAAAC,EAAsBN,KAAkBE,EAAAG,KAAAE,MAAE,CAAA,IAA/BqC,EAAO1C,EAAA9I,MACXyL,EAA+B,CACpC5J,SAAU2J,EAAQ7B,OAClBhC,eAAe,IAAItI,GAAQd,KAAKiN,EAAQ5B,KAEzCrF,EAAGgF,UAAUkC,EACd,CAGA,IAAIzE,EAAc,GACZC,EAAe1C,EAAG+C,QAAQyC,OAC/B,SAACC,EAAOC,GAAG,OAAKD,EAAQ9C,OAAO+C,EAAIpI,UAAY,EAAE,EACjD,IAEGsF,EAAM,EAAEjC,8gBAkDV,SAAqB6F,EAAAzH,EAAA4H,GACrB,IAAArF,IAAAoF,GAAA,kBAGCD,EAAAvF,cAGIwF,EAAAF,EAAAlL,UAAAqL,IAAAA,YACJ5H,EAAA2H,KACYxF,OAAK,KAGViB,GAAAjB,yDACRA,EAAAA,EAAAU,yFA/DU2B,CACOD,EAARpH,SAAAA,GACV,IAAMsH,EAAQvH,EAAiBC,GAAM,IAAIpB,GAAQ2I,OAChDC,EACA,OACA,EACAxH,EAAKoB,SACL6B,EAAOwE,WAAW3H,EAAM4H,QAAQ1H,EAAKI,OAAQ,aAIT,OAFrC0D,EAAG6D,SAASL,GAEZf,GAAeE,OAAOzG,EAAKoB,UAAUV,QAAAC,QACzBgG,EAAWiB,WAAW9D,IAAGjD,KAAAgH,SAAAA,GAArCnB,EAAGmB,EAECtB,GAAeC,EAAeC,OAAOC,KAAIJ,EAAA,EAAA,EAG9C,EAACA,WAAAA,OAAAA,CAAA,GAAA7B,OAAAA,GAAAA,EAAA5D,KAAA4D,EAAA5D,KAAAoD,GAAAA,GAAA,EAlGA6R,EAUG1P,EAVH0P,OACAR,EASGlP,EATHkP,KACEzJ,EAQCzF,EARDyF,SACFzE,EAOGhB,EAPHgB,MACAuO,EAMGvP,EANHuP,oBACAnO,EAKGpB,EALHoB,UACAyO,EAIG7P,EAJH6P,mBACAlO,EAGG3B,EAHH2B,cAAaC,EAGV5B,EAFH6B,UAA8BC,EAE3B9B,EADH+B,mBAAAA,OAAqB,IAAHD,EAAG,GAAEA,EAGlBvB,EAAa,IAAI2B,OAJVhL,IAAH0K,EAAG1K,EAAkB0K,GAMzBlE,EAAK,IAAIyE,EAEOkB,EAClB,WAAA,GAAgB,iBAAT6L,EACO5U,OAAAA,QAAAC,QDMN,SACZ2U,GAC0B,IAC1B,IAAQlX,EAAyBkX,EAAzBlX,QAASC,EAAgBiX,EAAhBjX,YAEjB,MAAoB,kBAAhBA,EACHqC,QAAAC,QA+BkB,SAACuV,GACnB,IAAMC,EAAYhZ,OAAOC,KAAK8Y,EAAW,UAAU7Y,SAAS,SACtD+Y,EAAaD,EAAUE,MAAM,+BAC7BC,EAAcH,EAAUE,MAAM,gCAEpC,GADA7V,QAAQC,IAAI,CAAC2V,WAAAA,EAAYE,YAAAA,KACpBF,IAAeE,EAClB,OAAOnB,GAGV,IAAMoB,EAAQ3I,OAAOE,SAASsI,EAAW,GAAI,IACvCI,EAAS5I,OAAOE,SAASwI,EAAY,GAAI,IAE/C,OAAI1I,OAAOC,MAAM0I,IAAU3I,OAAOC,MAAM2I,GAChCrB,GAGJoB,IAAUC,EACNvB,GAEJsB,EAAQ,KAAOC,EAAS,IACpBxB,GAGD,IACR,CAvDSyB,CAAYrY,KAVOmB,EAcHlB,EACvBqC,QAAAC,QAdOpB,GAA+BA,EAc/B2V,4BAIDwB,EAASvZ,OAAOC,KAAKgB,EAAS,UAAUsC,QAAAC,QAC1BgW,EAAK9C,KAAK6C,IAAO7V,KAAA,SAA/B+V,GAEN,IAAML,EAAQK,EAAMC,WACdL,EAASI,EAAME,YAErB,YAAc3Y,IAAVoY,QAAkCpY,IAAXqY,EACnBrB,GAEJoB,IAAUC,EACNvB,GAEJsB,EAAQ,KAAOC,EAAS,IACpBxB,GAGD,IAAI,wBAjBR,IACG0B,sCAHN5R,CAEG,EAkBH,WACA,OAAOoQ,EACR,IACD,CAAC,MAAAtT,GAAA,OAAAlB,QAAAmB,OAAAD,EAED,CAzC2B,IAACrC,CAyC5B,CCzC0BwX,CAAczB,IAAKzU,KAArCmW,SAAAA,GACN,GAAIA,EACH,MAAMA,EAGP,IAAMC,GAAa,IAAIzZ,GAAWM,KAAKmY,EAAoBX,GAK3DxR,EAAGgF,UAJa,CACf1H,SAAU,EACV8F,cAAe+P,IAIhB5B,EAAY,IAAK,GAdjBA,EAAYC,CAcK5U,CAfd,GAecA,OAAAA,QAAAC,QAAA8I,GAAAA,EAAA5I,KAAA4I,EAAA5I,KAAAwF,GAAAA,IAiHnB,CAAC,MAAAzE,UAAAlB,QAAAmB,OAAAD,EAAA,CAAA"}