{"version":3,"file":"index.module.js","sources":["../src/utils/strings.ts","../src/types.ts","../src/constants.ts","../src/templates/ordP2pkh.ts","../src/utils/utxo.ts","../src/signData.ts","../src/utils/subtypeData.ts","../src/createOrdinals.ts","../src/sendOrdinals.ts","../src/sendUtxos.ts","../src/transferOrdinals.ts","../src/validate.ts","../src/templates/ordLock.ts","../src/createListings.ts","../src/cancelListings.ts","../src/purchaseOrdListing.ts","../src/utils/icon.ts","../src/deployBsv21.ts"],"sourcesContent":["/**\n * Converts a string to its hexadecimal representation\n *\n * @param {string} utf8Str - The string to convert\n * @returns {string} The hexadecimal representation of the input string\n */\nconst toHex = (utf8Str: string): string => {\n  return Buffer.from(utf8Str).toString(\"hex\");\n};\n\nexport { toHex };\n","import type { PrivateKey, Script, Transaction } from \"@bsv/sdk\";\nimport type { AuthToken } from \"sigma-protocol\";\n\n// biome-ignore lint/complexity/noBannedTypes: Reserved for future use\ntype Signer = {};\n\nexport interface LocalSigner extends Signer {\n\tidKey: PrivateKey;\n}\n\nexport interface RemoteSigner extends Signer {\n\tkeyHost: string;\n\tauthToken?: AuthToken;\n}\n\nexport type Destination = {\n\taddress: string;\n\tinscription?: Inscription;\n};\n\n/**\n * @typedef {Object} Listing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n * @property {Utxo} listingUtxo - Utxo of the listing\n */\nexport type NewListing = {\n\tpayAddress: string;\n\tprice: number;\n\tordAddress: string;\n\tlistingUtxo: Utxo;\n}\n\n/**\n * @typedef {Object} ExistingListing\n * @property {string} payout - Payment output script base64 encoded\n * @property {Utxo} listingUtxo - Utxo of the listing\n */\nexport type ExistingListing = {\n  payout: string;\n  listingUtxo: Utxo;\n}\n\n/**\n * @typedef {Object} NewTokenListing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n * @property {bigint} amt - Number of tokens as a bigint. Not adjusted for decimals (library will add zeros according to dec value).\n */\nexport type NewTokenListing = {\n\tpayAddress: string;\n\tprice: number;\n\tamt: bigint;\n\tordAddress: string;\n}\n\n/**\n * @typedef {Object} Distribution\n * @property {string} address - Destination address. Must be a Ordinals address (BSV address for recieving 1Sat ordinals tokens).\n * @property {string} amt - Number of tokens as a string, considering decimals. Not display format. Ex. 100000000 for 1 token with 8 decimal places.\n */\nexport type Distribution = {\n\taddress: string;\n\tamt: string;\n};\n\n/**\n * @typedef {Object} Utxo\n * @property {number} satoshis - Amount in satoshis\n * @property {string} txid - Transaction id\n * @property {number} vout - Output index\n * @property {string} script - Base64 encoded locking script\n */\nexport type Utxo = {\n\tsatoshis: number;\n\ttxid: string;\n\tvout: number;\n\tscript: string;\n};\n\n/**\n * @typedef {Object} NftUtxo\n * @property {string} collectionId - Optional. Collection id of the NFT\n * @property {string} contentType - Media type of the NFT\n * @property {string} creatorBapId - Optional. Creator BAP id of the NFT\n * @property {string} origin - Origin address of the NFT\n * @property {number} satoshis - Always 1\n */\nexport interface NftUtxo extends Utxo {\n\tcollectionId?: string;\n\tcontentType: string;\n\tcreatorBapId?: string;\n\torigin: string;\n\tsatoshis: 1;\n}\n\n/**\n * @typedef {Object} TokenUtxo\n * @property {string} amt - Number of tokens as a string, adjusted for decimals. Ex. 100000000 for 1 token with 8 decimal places.\n * @property {string} id - Token id -  either tick or id depending on protocol\n * @property {string} satoshis - Always 1\n * @property {string} [payout] - Optional. Payment output script base64 encoded\n * @property {number} [price] - Optional. Listing price in satoshis\n * @property {boolean} [isListing] - Optional. True if the token is a listing\n */\nexport interface TokenUtxo extends Utxo {\n\tamt: string;\n\tid: string;\n\tsatoshis: 1;\n  payout?: string;\n  price?: number;\n  isListing?: boolean;\n}\n\nexport type Inscription = {\n\tdataB64: string;\n\tcontentType: string;\n};\n\nexport type ImageContentType =\n\t| \"image/png\"\n\t| \"image/jpeg\"\n\t| \"image/gif\"\n\t| \"image/svg+xml\"\n\t| \"image/webp\";\n\n/**\n * @typedef {Object} IconInscription\n * @property {string} dataB64 - Base64 encoded image data. Must be a square image.\n * @property {ImageContentType} contentType - Media type of the image\n */\nexport type IconInscription = {\n\tdataB64: string;\n\tcontentType: ImageContentType;\n};\n\nexport type Payment = {\n\tto: string;\n\tamount: number;\n};\n\nexport type TokenInscription = {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\" | \"mint\" | \"deploy+mint\" | \"burn\";\n  dec?: string;\n};\n\nexport interface MintTokenInscription extends TokenInscription {\n\top: \"mint\";\n}\n\nexport interface DeployMintTokenInscription extends TokenInscription {\n\top: \"deploy+mint\";\n\tsym: string;\n\ticon: string;\n}\n\nexport interface TransferTokenInscription extends TokenInscription {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\" | \"burn\";\n}\n\nexport interface TransferBSV20Inscription extends TransferTokenInscription {\n\ttick: string;\n}\n\nexport interface TransferBSV21Inscription extends TransferTokenInscription {\n\tid: string;\n}\n\nexport enum TokenType {\n\tBSV20 = \"bsv20\",\n\tBSV21 = \"bsv21\",\n}\n\nexport type CreateOrdinalsResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\n/**\n * MAP (Magic Attribute Protocol) metadata object with stringified values for writing to the blockchain\n * @typedef {Object} MAP\n * @property {string} app - Application identifier\n * @property {string} type - Metadata type\n * @property {string} [prop] - Optional. Additional metadata properties\n */\nexport type MAP = {\n\tapp: string;\n\ttype: string;\n\t[prop: string]: string;\n};\n\nexport type PreMAP = {\n\tapp: string;\n\ttype: string;\n\t[prop: string]: unknown;\n\troyalties?: Royalty[];\n\tsubTypeData?: CollectionSubTypeData | CollectionItemSubTypeData;\n};\n\nexport type CreateOrdinalsConfig = {\n\tutxos: Utxo[];\n\tdestinations: Destination[];\n\tpaymentPk: PrivateKey;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: PreMAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n};\n\nexport enum RoytaltyType {\n\tPaymail = \"paymail\",\n\tAddress = \"address\",\n\tScript = \"script\",\n}\n\n/**\n * Royalty object\n * @typedef {Object} Royalty\n * @property {RoytaltyType} type - Royalty type, string, one of \"paymail\", \"address\", \"script\"\n * @property {string} destination - Royalty destination\n * @property {string} percentage - Royalty percentage as a string float 0-1\n */\nexport type Royalty = {\n\ttype: RoytaltyType;\n\tdestination: string;\n\tpercentage: string; // string float 0-1\n};\n\nexport interface CreateOrdinalsMetadata extends PreMAP {\n\ttype: \"ord\",\n\tname: string,\n\tpreviewUrl?: string,\n}\n\nexport interface CreateOrdinalsCollectionMetadata extends CreateOrdinalsMetadata {\n\tsubType: \"collection\",\n\tsubTypeData: CollectionSubTypeData, // JSON stringified CollectionSubTypeData\n\troyalties?: Royalty[],\n};\n\nexport interface CreateOrdinalsCollectionItemMetadata extends CreateOrdinalsMetadata {\n\tsubType: \"collectionItem\",\n\tsubTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n};\n\n/**\n * Configuration object for creating an ordinals collection\n * @typedef {Object} CreateOrdinalsCollectionConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collection\"\n * @property metaData.name - Collection name\n * @property metaData.subTypeData - JSON stringified CollectionSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionConfig extends CreateOrdinalsConfig {\n\tmetaData: CreateOrdinalsCollectionMetadata\n}\n\nexport type CollectionTraits = {\n\t[trait: string]: CollectionTrait;\n};\n\nexport type CollectionTrait = {\n\tvalues: string[];\n\toccurancePercentages: string[];\n};\n\nexport type Rarity = {\n\t[key: string]: string;\n}\n\nexport type RarityLabels = Rarity[]\nexport interface CollectionSubTypeData {\n\tdescription: string;\n\tquantity: number;\n\trarityLabels: RarityLabels;\n\ttraits: CollectionTraits;\n}\n\nexport interface CreateOrdinalsCollectionItemMetadata extends PreMAP {\n\ttype: \"ord\",\n\tname: string,\n\tsubType: \"collectionItem\",\n\tsubTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n\troyalties?: Royalty[],\n\tpreviewUrl?: string,\n}\n\n/**\n * Configuration object for creating an ordinals collection item\n * @typedef {Object} CreateOrdinalsCollectionItemConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection item\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collectionItem\"\n * @property metaData.name - Collection item name\n * @property metaData.subTypeData - JSON stringified CollectionItemSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionItemConfig extends CreateOrdinalsConfig {\n\tmetaData: CreateOrdinalsCollectionItemMetadata\n}\n\n/**\n * Subtype data for an ordinals collection item\n * @typedef {Object} CollectionItemSubTypeData\n * @property {string} collectionId - Collection id\n * @property {number} mintNumner - Mint number\n * @property {number} rank - Rank\n * @property {string} rarityLabel - Rarity label\n * @property {string} traits - traits object\n * @property {string} attachments - array of attachment objects\n */\nexport interface CollectionItemSubTypeData {\n\tcollectionId: string;\n\tmintNumber?: number;\n\trank?: number;\n\trarityLabel?: RarityLabels;\n\ttraits?: CollectionItemTraits;\n\tattachments?: CollectionItemAttachment[];\n}\n\nexport type CollectionItemTraits = {\n\tname: string;\n\tvalue: string;\n\trarityLabel?: string;\n\toccurancePercentrage?: string;\n};\n\nexport type CollectionItemAttachment = {\n\tname: string;\n\tdescription?: string;\n\t\"content-type\": string;\n\turl: string;\n}\n\nexport type SendOrdinalsResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type SendOrdinalsConfig = {\n\tpaymentUtxos: Utxo[];\n\tordinals: Utxo[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tdestinations: Destination[];\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: PreMAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n\tenforceUniformSend?: boolean;\n}\n\nexport type DeployBsv21TokenResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type DeployBsv21TokenConfig = {\n\tsymbol: string;\n  decimals?: number;\n\ticon: string | IconInscription;\n\tutxos: Utxo[];\n\tinitialDistribution: Distribution;\n\tpaymentPk: PrivateKey;\n\tdestinationAddress: string;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[];\n};\n\nexport type SendUtxosResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type SendUtxosConfig = {\n\tutxos: Utxo[];\n\tpaymentPk: PrivateKey;\n\tpayments: Payment[];\n\tsatsPerKb?: number;\n\tchangeAddress?: string;\n};\n\nexport interface TransferOrdTokensResult extends SendOrdinalsResult {\n\ttokenChange?: TokenUtxo;\n}\n\nexport type TransferOrdTokensConfig = {\n\tprotocol: TokenType;\n\ttokenID: string;\n  decimals: number;\n\tutxos: Utxo[];\n\tinputTokens: TokenUtxo[];\n\tdistributions: Distribution[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tchangeAddress?: string;\n\ttokenChangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: PreMAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n\tburn?: boolean;\n}\n\nexport type CreateOrdListingsConfig = {\n\tutxos: Utxo[];\n\tlistings: NewListing[];\n\troyalty?: number;\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey,\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[];\n}\n\nexport type PurchaseOrdListingConfig = {\n\tutxos: Utxo[];\n\tpaymentPk: PrivateKey;\n\tlisting: ExistingListing;\n\tordAddress: string;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[],\n}\n\nexport type PurchaseOrdTokenListingConfig = {\n\tprotocol: TokenType;\n\ttokenID: string;\n\tutxos: Utxo[];\n\tpaymentPk: PrivateKey;\n\tlistingUtxo: TokenUtxo;\n\tordAddress: string;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[],\n}\n\nexport type CancelOrdListingsConfig = {\n\tutxos: Utxo[],\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tlistingUtxos: Utxo[];\n\tadditionalPayments?: Payment[];\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n}\n\nexport interface CancelOrdTokenListingsConfig extends CancelOrdListingsConfig {\n\tutxos: Utxo[],\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tlistingUtxos: TokenUtxo[];\n\tadditionalPayments: Payment[];\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tprotocol: TokenType,\n\ttokenID: string;\n\tordAddress?: string;\n}\n\n/**\n * Configuration object for creating a token listing\n * @typedef {Object} CreateOrdTokenListingsConfig\n * @property {Utxo[]} utxos - Array of payment Utxos\n * @property {TokenUtxo[]} inputTokens - Array of TokenUtxos to be listed\n * @property {NewTokenListing[]} listings - Array of NewTokenListings\n * @property {PrivateKey} paymentPk - Private key of the payment address\n * @property {PrivateKey} ordPk - Private key of the ord address\n * @property {string} tokenChangeAddress - Address to send the token change\n * @property {number} [satsPerKb] - Optional. Satoshis per kilobyte\n * @property {Payment[]} [additionalPayments] - Optional. Array of additional payments\n * @property {TokenType} protocol - Token protocol\n * @property {string} tokenID - Token id\n * @property {number} decimals - Number of decimal places for this token.\n */\nexport interface CreateOrdTokenListingsConfig {\n\tutxos: Utxo[];\n\tlistings: NewTokenListing[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey,\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[];\n\tprotocol: TokenType;\n\ttokenID: string;\n  decimals: number;\n\tinputTokens: TokenUtxo[];\n\ttokenChangeAddress: string;\n}\n\n","export const MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\nexport const DEFAULT_SAT_PER_KB = 10;\nexport const API_HOST = \"https://ordinals.gorillapool.io/api\";","import {\n\tLockingScript,\n\tP2PKH,\n\ttype Script,\n} from \"@bsv/sdk\";\nimport type { Inscription, MAP } from \"../types\";\nimport { toHex } from \"../utils/strings\";\nimport { MAP_PREFIX } from \"../constants\";\n\n/**\n * OrdP2PKH (1Sat Ordinal + Pay To Public Key Hash) class implementing ScriptTemplate.\n *\n * This class provides methods to create an Ordinal with Pay To Public Key Hash locking and unlocking scripts. \n * It extends the standard P2PKH script template and provides a custom lock method.\n */\nexport default class OrdP2PKH extends P2PKH {\n\t/**\n\t * Creates a 1Sat Ordinal + P2PKH locking script for a given address string\n\t *\n\t * @param {string} address - An destination address for the Ordinal.\n\t * @param {Object} [inscription] - Base64 encoded file data and Content type of the file.\n\t * @param {MAP} [metaData] - (optional) MAP Metadata to be included in OP_RETURN.\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\t// unlock method inherits from p2pkh\n\tlock(\n\t\taddress: string,\n    inscription?: Inscription,\n\t\tmetaData?: MAP | undefined,\n\t): Script {\n\t\tlet ordAsm = \"\";\n\t\t// This can be omitted for reinscriptions that just update metadata\n\t\tif (inscription?.dataB64 !== undefined && inscription?.contentType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(inscription.dataB64, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(inscription.contentType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`;\n\t\t}\n\n\t\t// Create ordinal output and inscription in a single output\n\t\tconst lockingScript = new P2PKH().lock(address);\n\t\tlet inscriptionAsm = `${ordAsm ? `${ordAsm} ` : \"\"}${lockingScript.toASM()}`;\n\n\t\t// MAP.app and MAP.type keys are required\n\t\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t\t}\n\n\t\tif (metaData?.app && metaData?.type) {\n\t\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\t\tconst mapCmdValue = toHex(\"SET\");\n\t\t\tinscriptionAsm = `${inscriptionAsm} OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\t\tif (key !== \"cmd\") {\n\t\t\t\t\tinscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\n\t\t\t\t\t\tvalue as string,\n\t\t\t\t\t)}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn LockingScript.fromASM(inscriptionAsm);\n\t}\n}\n","import {\n\ttype Transaction,\n\ttype UnlockingScript,\n\tfromUtxo,\n\ttype TransactionInput,\n\tUtils,\n\tP2PKH,\n  Script,\n} from \"@bsv/sdk\";\nimport { type NftUtxo, TokenType, type TokenUtxo, type Utxo } from \"../types\";\nimport { API_HOST } from \"../constants\";\n\nconst { fromBase58Check } = Utils;\n\n/**\n * Converts a Utxo object with a base64 encoded script to a Utxo object with a hex encoded script\n * @param {Utxo} utxo - Utxo object with base64 encoded script\n * @param {Object} unlockScriptTemplate - Object with sign and estimateLength functions\n * @returns {TransactionInput} Utxo object with hex encoded script\n */\nexport const inputFromB64Utxo = (\n\tutxo: Utxo,\n\tunlockScriptTemplate: {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>;\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>;\n\t},\n): TransactionInput => {\n\tconst input = fromUtxo(\n\t\t{\n\t\t\t...utxo,\n\t\t\tscript: Buffer.from(utxo.script, \"base64\").toString(\"hex\"),\n\t\t},\n\t\tunlockScriptTemplate,\n\t);\n\treturn input;\n};\n\n/**\n * Fetches pay utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<Utxo[]>} Array of pay utxos\n */\nexport const fetchPayUtxos = async (address: string, scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\"): Promise<Utxo[]> => {\n\tconst payUrl = `${API_HOST}/txos/address/${address}/unspent?bsv20=false`;\n\tconsole.log({ payUrl });\n\tconst payRes = await fetch(payUrl);\n\tif (!payRes.ok) {\n\t\tthrow new Error(\"Error fetching pay utxos\");\n\t}\n\tlet payUtxos = await payRes.json();\n\t// exclude all 1 satoshi utxos\n\tpayUtxos = payUtxos.filter((u: { satoshis: number }) => u.satoshis !== 1);\n\n\t// Get pubkey hash from address\n\tconst pubKeyHash = fromBase58Check(address);\n\tconst p2pkhScript = new P2PKH().lock(pubKeyHash.data);\n\tpayUtxos = payUtxos.map((utxo: Partial<Utxo>) => ({\n\t\ttxid: utxo.txid,\n\t\tvout: utxo.vout,\n\t\tsatoshis: utxo.satoshis,\n\t\tscript: scriptEncoding === \"hex\" || scriptEncoding === \"base64\" ? Buffer.from(p2pkhScript.toBinary()).toString(scriptEncoding) : p2pkhScript.toASM(),\n\t}));\n\treturn payUtxos as Utxo[];\n};\n\n/**\n * Fetches NFT utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @param {string} [collectionId] - Optional. Collection id (collection insciprtion origin)\n * @param {number} [limit=10] - Optional. Number of utxos to fetch. Default is 10\n * @param {number} [offset=0] - Optional. Offset for fetching utxos. Default is 0\n * @param {string} [scriptEncoding=\"base64\"] - Optional. Encoding for the script. Default is base64. Options are hex, base64, or asm.\n * @returns {Promise<Utxo[]>} Array of NFT utxos\n */\nexport const fetchNftUtxos = async (\n\taddress: string,\n\tcollectionId?: string,\n\tlimit = 10,\n\toffset = 0,\n  scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\",\n): Promise<NftUtxo[]> => {\n\tlet url = `${API_HOST}/txos/address/${address}/unspent?limit=${limit}&offset=${offset}&`;\n\n\tif (collectionId) {\n\t\tconst query = {\n\t\t\tmap: {\n\t\t\t\tsubTypeData: { collectionId },\n\t\t\t},\n\t\t};\n\t\tconst b64Query = Buffer.from(JSON.stringify(query)).toString(\"base64\");\n\t\turl += `q=${b64Query}`;\n\t}\n\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching NFT utxos for ${address}`);\n\t}\n\n\t// Returns a BSV20Txo but we only need a few fields\n\tlet nftUtxos = await res.json();\n\n\t// Only include 1 satoshi outputs, non listings\n\tnftUtxos = nftUtxos.filter(\n\t\t(u: {\n\t\t\tsatoshis: number;\n\t\t\tdata: { list: { price: number; payout: string } | undefined } | null;\n\t\t}) => u.satoshis === 1 && !u.data?.list,\n\t);\n\n\tconst outpoints = nftUtxos.map(\n\t\t(utxo: { txid: string; vout: number }) => `${utxo.txid}_${utxo.vout}`,\n\t);\n\t// Fetch the scripts up to the limit\n\tconst nftRes = await fetch(`${API_HOST}/txos/outpoints?script=true`, {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t\tbody: JSON.stringify([...outpoints]),\n\t});\n\n\tif (!nftRes.ok) {\n\t\tthrow new Error(`Error fetching NFT scripts for ${address}`);\n\t}\n\n\tconst nfts = (await nftRes.json() || [])\n\n\tnftUtxos = nfts.map(\n\t\t(utxo: {\n\t\t\torigin: { outpoint: string };\n\t\t\tscript: string;\n\t\t\tvout: number;\n\t\t\ttxid: string;\n\t\t}) => {\n      let script = utxo.script;\n      if (scriptEncoding === \"hex\") {\n        script = Buffer.from(script, \"base64\").toString(\"hex\");\n      } else if (scriptEncoding === \"asm\") {\n        script = Script.fromHex(Buffer.from(script, \"base64\").toString(\"hex\")).toASM();\n      }\n\t\t\tconst nftUtxo = {\n\t\t\t\torigin: utxo.origin.outpoint,\n\t\t\t\tscript,\n\t\t\t\tvout: utxo.vout,\n\t\t\t\ttxid: utxo.txid,\n\t\t\t\tsatoshis: 1,\n\t\t\t} as NftUtxo;\n\t\t\tif (collectionId) {\n\t\t\t\tnftUtxo.collectionId = collectionId;\n\t\t\t}\n\t\t\treturn nftUtxo;\n\t\t},\n\t);\n\n\treturn nftUtxos as NftUtxo[];\n};\n\n/**\n * Fetches token utxos from the API\n * @param {TokenType} protocol - Token protocol. Either BSV20 or BSV21\n * @param {string} tokenId - Token id. Ticker for BSV20 and id (mint+deploy inscription origin) for BSV21\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<TokenUtxo[]>} Array of token utxos\n */\nexport const fetchTokenUtxos = async (\n\tprotocol: TokenType,\n\ttokenId: string,\n\taddress: string,\n): Promise<TokenUtxo[]> => {\n\tconst url = `${API_HOST}/bsv20/${address}/${protocol === TokenType.BSV20 ? \"tick\" : \"id\"}/${tokenId}?bsv20=true&listing=false`;\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching ${protocol} utxos`);\n\t}\n\n\t// returns a BSV20Txo but we only need a few fields\n\tlet tokenUtxos = await res.json();\n\n\ttokenUtxos = tokenUtxos.map((utxo: Partial<TokenUtxo>) => ({\n\t\tamt: utxo.amt,\n\t\tscript: utxo.script,\n\t\tvout: utxo.vout,\n\t\ttxid: utxo.txid,\n\t\tid: tokenId,\n\t\tsatoshis: 1,\n\t}));\n\n\treturn tokenUtxos as TokenUtxo[];\n};\n","import type { Transaction } from \"@bsv/sdk\";\nimport { Sigma } from \"sigma-protocol\";\nimport type { LocalSigner, RemoteSigner } from \"./types\";\n\n/**\n * Signs data in the transaction with Sigma protocol\n * @param {Transaction} tx - Transaction to sign\n * @param {LocalSigner | RemoteSigner} signer - Local or remote signer (used for data signature)\n * @returns {Transaction} Transaction with signed data\n */\nexport const signData = async (\n\ttx: Transaction,\n\tsigner: LocalSigner | RemoteSigner,\n): Promise<Transaction> => {\n\t// Sign tx if idKey or remote signer like starfish/tokenpass\n\tconst idKey = (signer as LocalSigner)?.idKey;\n\tconst keyHost = (signer as RemoteSigner)?.keyHost;\n\n\tif (idKey) {\n\t\tconst sigma = new Sigma(tx);\n\t\tconst { signedTx } = sigma.sign(idKey);\n\t\treturn signedTx;\n\t}\n\tif (keyHost) {\n\t\tconst authToken = (signer as RemoteSigner)?.authToken;\n\t\tconst sigma = new Sigma(tx);\n\t\ttry {\n\t\t\tconst { signedTx } = await sigma.remoteSign(keyHost, authToken);\n\t\t\treturn signedTx;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthrow new Error(`Remote signing to ${keyHost} failed`);\n\t\t}\n\t}\n\tthrow new Error(\"Signer must be a LocalSigner or RemoteSigner\");\n};\n","import type { MAP, PreMAP } from \"../types\";\n\nconst stringifyMetaData = (metaData?: PreMAP): MAP | undefined => {\n  if (!metaData) return undefined;\n\tconst result: MAP = {\n\t\tapp: metaData.app,\n\t\ttype: metaData.type,\n\t};\n\n\tfor (const [key, value] of Object.entries(metaData)) {\n\t\tif (value !== undefined) {\n\t\t\tif (typeof value === \"string\") {\n\t\t\t\tresult[key] = value;\n\t\t\t} else if (Array.isArray(value) || typeof value === \"object\") {\n\t\t\t\tresult[key] = JSON.stringify(value);\n\t\t\t} else {\n\t\t\t\tresult[key] = String(value);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\nexport default stringifyMetaData;\n","import { Transaction, SatoshisPerKilobyte, P2PKH, Script, Utils } from \"@bsv/sdk\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n\tUtxo,\n\tCreateOrdinalsConfig,\n\tCreateOrdinalsResult,\n\tCreateOrdinalsCollectionConfig,\n\tCreateOrdinalsCollectionItemConfig,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Creates a transaction with inscription outputs\n * @param {CreateOrdinalsConfig | CreateOrdinalsCollectionConfig | CreateOrdinalsCollectionItemConfig} config - Configuration object for creating ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {string} config.changeAddress - Optional. Address to send change to. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Local or remote signer (used for data signature)\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<CreateOrdinalsResult>} Transaction with inscription outputs\n */\nexport const createOrdinals = async (\n\tconfig:\n\t\t| CreateOrdinalsConfig\n\t\t| CreateOrdinalsCollectionConfig\n\t\t| CreateOrdinalsCollectionItemConfig,\n): Promise<CreateOrdinalsResult> => {\n\tconst {\n\t\tutxos,\n\t\tdestinations,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t} = config;\n\t\n\t// Warn if creating many inscriptions at once\n\tif (destinations.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Outputs\n\t// Add inscription outputs\n\tfor (const destination of destinations) {\n\t\tif (!destination.inscription) {\n\t\t\tthrow new Error(\"Inscription is required for all destinations\");\n\t\t}\n\n\t\t// remove any undefined fields from metadata\n\t\tif (metaData) {\n\t\t\tfor(const key of Object.keys(metaData)) {\n\t\t\t\tif (metaData[key] === undefined) {\n\t\t\t\t\tdelete metaData[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription,\n\t\t\t\tstringifyMetaData(metaData),\n\t\t\t),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\tlet payChange: Utxo | undefined;\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\n\tif(signer) {\n\t\tconst utxo = utxos.pop() as Utxo\n\t\ttx.addInput(inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t)));\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\ttx = await signData(tx, signer);\n\t}\n\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\tScript,\n\ttype TransactionOutput,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type { SendOrdinalsResult, SendOrdinalsConfig, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Sends ordinals to the given destinations\n * @param {SendOrdinalsConfig} config - Configuration object for sending ordinals\n * @param {Utxo[]} config.paymentUtxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.ordinals - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {string} config.changeAddress - Optional. Address to send change to, if any. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @param {boolean} config.enforceUniformSend - Optional. Default: true. Enforce that the number of destinations matches the number of ordinals being sent. Sending ordinals requires a 1:1 mapping of destinations to ordinals. This is only used for sub-protocols like BSV21 that manage tokens without sending the inscriptions directly.\n * @returns {Promise<SendOrdinalsResult>} Transaction, spent outpoints, and change vout\n */\nexport const sendOrdinals = async (\n\tconfig: SendOrdinalsConfig,\n): Promise<SendOrdinalsResult> => {\n\tif (!config.satsPerKb) {\n\t\tconfig.satsPerKb = DEFAULT_SAT_PER_KB;\n\t}\n\tif (!config.additionalPayments) {\n\t\tconfig.additionalPayments = [];\n\t}\n\tif (config.enforceUniformSend === undefined) {\n\t\tconfig.enforceUniformSend = true;\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(config.satsPerKb);\n\tlet tx = new Transaction();\n\tconst spentOutpoints: string[] = [];\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of config.ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(\n\t\t\tordUtxo,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tconfig.ordPk, \n\t\t\t\t\"all\",\n\t\t\t\ttrue, \n\t\t\t\tordUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(ordUtxo.script, 'base64'))\n\t\t\t),\n\t\t);\n\t\tspentOutpoints.push(`${ordUtxo.txid}_${ordUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// check that ordinals coming in matches ordinals going out if supplied\n\tif (\n\t\tconfig.enforceUniformSend &&\n\t\tconfig.destinations.length !== config.ordinals.length\n\t) {\n\t\tthrow new Error(\n\t\t\t\"Number of destinations must match number of ordinals being sent\",\n\t\t);\n\t}\n\n\t// Add ordinal outputs\n\tfor (const destination of config.destinations) {\n\t\tlet s: Script;\n\t\tif (\n\t\t\tdestination.inscription?.dataB64 &&\n\t\t\tdestination.inscription?.contentType\n\t\t) {\n\t\t\ts = new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription,\n\t\t\t\tstringifyMetaData(config.metaData),\n\t\t\t);\n\t\t} else {\n\t\t\ts = new P2PKH().lock(destination.address);\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: s,\n\t\t});\n\t}\n\n  \n\t// Add additional payments if any\n\tfor (const p of config.additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n  // add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = config.changeAddress || config.paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of config.paymentUtxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tconfig.paymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\tspentOutpoints.push(`${utxo.txid}_${utxo.vout}`);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (totalSatsIn < totalSatsOut) {\n\t\tthrow new Error(\"Not enough ordinals to send\");\n\t}\n\n\tif (config.signer) {\n\t\ttx = await signData(tx, config.signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChange,\n\t};\n};\n","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype TransactionOutput,\n\tUtils,\n\tScript,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type { SendUtxosConfig, SendUtxosResult, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Sends utxos to the given destination\n * @param {SendUtxosConfig} config - Configuration object for sending utxos\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {Payment[]} config.payments - Array of payments with addresses and amounts\n * @param {number} [config.satsPerKb] - Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {string} [config.changeAddress] - Address to send change to. If not provided, defaults to paymentPk address\n * @returns {Promise<SendUtxosResult>} Transaction with utxo outputs\n */\nexport const sendUtxos = async (\n\tconfig: SendUtxosConfig,\n): Promise<SendUtxosResult> => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tpayments,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tchangeAddress = paymentPk.toAddress().toString(),\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\t// Outputs\n\tfor (const payment of payments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new P2PKH().lock(payment.to),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + (out.satoshis || 0),\n\t\t0,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\ttx.addInput(input);\n\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + fee) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + fee) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to send. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChange: Utxo | undefined;\n\tif (totalSatsIn > totalSatsOut + fee) {\n\t\t// Change\n\t\tconst changeScript = new P2PKH().lock(changeAddress);\n\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t} else if (totalSatsIn < totalSatsOut + fee) {\n\t\tconsole.log(\"No change needed\");\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\t\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTokenType,\n\ttype TransferBSV20Inscription,\n\ttype TransferTokenInscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferOrdTokensConfig,\n\ttype TransferOrdTokensResult,\n\ttype TokenUtxo,\n\ttype Utxo,\n} from \"./types\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { P2PKH, SatoshisPerKilobyte, Script, Transaction, Utils } from \"@bsv/sdk\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Transfer tokens to a destination\n * @param {TransferOrdTokensConfig} config - Configuration object for transferring tokens\n * @param {TokenType} config.protocol - Token protocol. Must be TokenType.BSV20 or TokenType.BSV21\n * @param {string} config.tokenID - Token ID. Either the tick or id value depending on the protocol\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {TokenUtxo[]} config.inputTokens - Token utxos to spend\n * @param {Distribution[]} config.distributions - Array of destinations with addresses and amounts\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {string} config.changeAddress - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {string} config.tokenChangeAddress - Optional. Address to send token change to, if any. If not provided, defaults to ordPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @param {decimals} config.decimals - Number of decimal places for the token\n * @param {burn} config.burn - Optional. Set to true to burn the tokens.\n * @returns {Promise<TransferOrdTokensResult>} Transaction with token transfer outputs\n */\nexport const transferOrdTokens = async (config: TransferOrdTokensConfig): Promise<TransferOrdTokensResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tinputTokens,\n\t\tdistributions,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tchangeAddress,\n\t\ttokenChangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n    decimals,\n\t\tadditionalPayments = [],\n\t\tburn = false\n\t} = config;\n\n\t// calculate change amount\n\tlet changeAmt = 0n;\n\tlet totalAmtIn = 0n;\n\tlet totalAmtOut = 0n;\n\n\t// Ensure these inputs are for the expected token\n\tif (!inputTokens.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\tfor (const token of inputTokens) {\n\t\tconst inputScriptBinary = Utils.toArray(token.script, \"base64\");\n\t\tconst inputScript = Script.fromBinary(inputScriptBinary);\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\ttoken,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\ttoken.satoshis,\n\t\t\t\tinputScript,\n\t\t\t),\n\t\t));\n\t\n\t\ttotalAmtIn += BigInt(token.amt);\n\t}\n\n\t// build destination inscriptions\n\tfor (const dest of distributions) {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: burn ? \"burn\" : \"transfer\",\n\t\t\tamt: dest.amt,\n\t\t}\n    if (decimals > 0) {\n      transferInscription.amt = (BigInt(dest.amt) * BigInt(10 ** decimals)).toString();\n    }\n\t\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\ttick: tokenID,\n\t\t\t} as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\tid: tokenID,\n\t\t\t} as TransferBSV21Inscription;\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid protocol\");\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdest.address,\n\t\t\t\t{\n\t\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\t\t\tcontentType: \"application/bsv20\",\n\t\t\t\t},\n\t\t\t),\n\t\t});\n\t\ttotalAmtOut += BigInt(transferInscription.amt);\n\t};\n\tchangeAmt = totalAmtIn - totalAmtOut;\n\n\tlet tokenChange: TokenUtxo | undefined;\n\t// check that you have enough tokens to send and return change\n\tif (changeAmt < 0n) {\n\t\tthrow new Error(\"Not enough tokens to send\");\n\t}\n\tif (changeAmt > 0n) {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: \"transfer\",\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\ttick: tokenID,\n\t\t\t} as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\tid: tokenID,\n\t\t\t} as TransferBSV21Inscription;\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid protocol\");\n\t\t}\n\n\t\tconst lockingScript = new OrdP2PKH().lock(\n\t\t\ttokenChangeAddress || ordPk.toAddress().toString(), \n\t\t\t{\n\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString('base64'),\n\t\t\t\tcontentType: \"application/bsv-20\",\n\t\t\t}\n\t\t);\n\t\tconst vout = tx.outputs.length;\n\t\ttx.addOutput({ lockingScript, satoshis: 1 });\n\t\ttokenChange = {\n\t\t\tid: tokenID,\n\t\t\tsatoshis: 1,\n\t\t\tscript: Buffer.from(lockingScript.toBinary()).toString(\"base64\"),\n\t\t\ttxid: \"\",\n\t\t\tvout,\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst txid = tx.id(\"hex\") as string;\n\tif (tokenChange) {\n\t\ttokenChange.txid = txid;\n\t}\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t\ttokenChange,\n\t};\n};","import type { CollectionItemSubTypeData, CollectionSubTypeData } from \"./types\";\n\n/**\n * Validates sub type data\n * @param {string} subType - Sub type of the ordinals token\n * @param {string} subTypeData - Sub type data of the ordinals token\n * @returns {Error | undefined} Error if validation fails, undefined if validation passes\n */\nexport const validateSubTypeData = (\n  subType: \"collection\" | \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData | CollectionSubTypeData,\n): Error | undefined => {\n  try {\n    if (subType === \"collection\") {\n      const collectionData = subTypeData as CollectionSubTypeData;\n      if (!collectionData.description) {\n        return new Error(\"Collection description is required\");\n      }\n      if (!collectionData.quantity) {\n        return new Error(\"Collection quantity is required\");\n      }\n      if (collectionData.rarityLabels) {\n        if (!Array.isArray(collectionData.rarityLabels)) {\n          return new Error(\"Rarity labels must be an array\");\n        }\n        // make sure keys and values are strings\n        if (!collectionData.rarityLabels.every((label) => {\n          return Object.values(label).every(value => typeof value === 'string');\n        })) {\n          return new Error(`Invalid rarity labels ${collectionData.rarityLabels}`);\n        }\n      }\n      if (collectionData.traits ) {\n        if (typeof collectionData.traits !== \"object\") {\n        return new Error(\"Collection traits must be an object\");\n        }\n        if (collectionData.traits && !Object.keys(collectionData.traits).every(key => typeof key === 'string' && typeof collectionData.traits[key] === 'object')) {\n          return new Error(\"Collection traits must be a valid CollectionTraits object\");\n        }\n      }\n    }\n    if (subType === \"collectionItem\") {\n      const itemData = subTypeData as CollectionItemSubTypeData;\n      if (!itemData.collectionId) {\n        return new Error(\"Collection id is required\");\n      }\n      if (!itemData.collectionId.includes(\"_\")) {\n        return new Error(\"Collection id must be a valid outpoint\");\n      }\n      if (itemData.collectionId.split(\"_\")[0].length !== 64) {\n        return new Error(\"Collection id must contain a valid txid\");\n      }\n      if (Number.isNaN(Number.parseInt(itemData.collectionId.split(\"_\")[1]))) {\n        return new Error(\"Collection id must contain a valid vout\");\n      }\n\n      if (itemData.mintNumber && typeof itemData.mintNumber !== \"number\") {\n        return new Error(\"Mint number must be a number\");\n      }\n      if (itemData.rank && typeof itemData.rank !== \"number\") {\n        return new Error(\"Rank must be a number\");\n      }\n      if (itemData.rarityLabel && typeof itemData.rarityLabel !== \"string\") {\n        return new Error(\"Rarity label must be a string\");\n      }\n      if (itemData.traits && typeof itemData.traits !== \"object\") {\n        return new Error(\"Traits must be an object\");\n      }\n      if (itemData.attachments && !Array.isArray(itemData.attachments)) {\n        return new Error(\"Attachments must be an array\");\n      }\n    }\n    return undefined;\n  } catch (error) {\n    return new Error(\"Invalid JSON data\");\n  }\n};","import {\n\tBigNumber,\n\ttype LockingScript,\n\tOP,\n\tP2PKH,\n\ttype PrivateKey,\n\tScript,\n\ttype Transaction,\n\tTransactionSignature,\n\tUnlockingScript,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { toHex } from \"../utils/strings\";\nimport type { Inscription } from \"../types\";\n\nexport const oLockPrefix =\n\t\"2097dfd76851bf465e8f715593b217714858bbe9570ff3bd5e33840a34e20ff0262102ba79df5f8ae7604a9830f03c7933028186aede0675a16f025dc4f8be8eec0382201008ce7480da41702918d1ec8e6849ba32b4d65b1e40dc669c31a1e6306b266c0000\";\nexport const oLockSuffix =\n\t\"615179547a75537a537a537a0079537a75527a527a7575615579008763567901c161517957795779210ac407f0e4bd44bfc207355a778b046225a7068fc59ee7eda43ad905aadbffc800206c266b30e6a1319c66dc401e5bd6b432ba49688eecd118297041da8074ce081059795679615679aa0079610079517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01007e81517a75615779567956795679567961537956795479577995939521414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff00517951796151795179970079009f63007952799367007968517a75517a75517a7561527a75517a517951795296a0630079527994527a75517a6853798277527982775379012080517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01205279947f7754537993527993013051797e527e54797e58797e527e53797e52797e57797e0079517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a756100795779ac517a75517a75517a75517a75517a75517a75517a75517a75517a7561517a75517a756169587951797e58797eaa577961007982775179517958947f7551790128947f77517a75517a75618777777777777777777767557951876351795779a9876957795779ac777777777777777767006868\";\n\n/**\n * OrdLock class implementing ScriptTemplate.\n *\n * This class provides methods for interacting with OrdinalLock contract \n */\nexport default class OrdLock {\n\t/**\n\t * Creates a 1Sat Ordinal Lock script\n\t *\n\t * @param {string} ordAddress - An address which can cancel listing.\n\t * @param {string} payAddress - Address which is paid on purchase\n\t * @param {number} price - Listing price in satoshis\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\tlock(\n\t\tordAddress: string,\n\t\tpayAddress: string,\n\t\tprice: number,\n\t\tinscription?: Inscription,\n\t): Script {\n\t\tconst cancelPkh = Utils.fromBase58Check(ordAddress).data as number[];\n\t\tconst payPkh = Utils.fromBase58Check(payAddress).data as number[];\n\n\t\tlet script = new Script()\n\t\tif (inscription?.dataB64 !== undefined && inscription?.contentType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(inscription.dataB64, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(inscription.contentType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tscript = Script.fromASM(`OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`);\n\t\t}\n\n\t\treturn script.writeScript(Script.fromHex(oLockPrefix))\n\t\t\t.writeBin(cancelPkh)\n\t\t\t.writeBin(OrdLock.buildOutput(price, new P2PKH().lock(payPkh).toBinary()))\n\t\t\t.writeScript(Script.fromHex(oLockSuffix))\n\t}\n\n\tcancelListing(\n\t\tprivateKey: PrivateKey,\n\t\tsignOutputs: 'all' | 'none' | 'single' = 'all',\n\t\tanyoneCanPay = false,\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: () => Promise<number>\n\t} {\n\t\tconst p2pkh = new P2PKH().unlock(privateKey, signOutputs, anyoneCanPay, sourceSatoshis, lockingScript)\n\t\treturn {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await p2pkh.sign(tx, inputIndex)).writeOpCode(OP.OP_1)\n\t\t\t},\n\t\t\testimateLength: async () => {\n\t\t\t\treturn 107\n\t\t\t}\n\t\t}\n\t}\n\n\tpurchaseListing(\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>\n\t} {\n\t\tconst purchase = {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\tif (tx.outputs.length < 2) {\n\t\t\t\t\tthrow new Error(\"Malformed transaction\")\n\t\t\t\t}\n\t\t\t\tconst script = new UnlockingScript()\n\t\t\t\t\t.writeBin(OrdLock.buildOutput(\n\t\t\t\t\t\ttx.outputs[0].satoshis || 0,\n\t\t\t\t\t\ttx.outputs[0].lockingScript.toBinary()\n\t\t\t\t\t))\n\t\t\t\tif (tx.outputs.length > 2) {\n\t\t\t\t\tconst writer = new Utils.Writer()\n\t\t\t\t\tfor (const output of tx.outputs.slice(2)) {\n\t\t\t\t\t\twriter.write(OrdLock.buildOutput(output.satoshis || 0, output.lockingScript.toBinary()))\n\t\t\t\t\t}\n\t\t\t\t\tscript.writeBin(writer.toArray())\n\t\t\t\t} else {\n\t\t\t\t\tscript.writeOpCode(OP.OP_0)\n\t\t\t\t}\n\n\t\t\t\tconst input = tx.inputs[inputIndex]\n\t\t\t\tlet sourceSats = sourceSatoshis as number\n\t\t\t\tif (!sourceSats && input.sourceTransaction) {\n\t\t\t\t\tsourceSats = input.sourceTransaction.outputs[input.sourceOutputIndex].satoshis as number\n\t\t\t\t} else if (!sourceSatoshis) {\n\t\t\t\t\tthrow new Error(\"sourceTransaction or sourceSatoshis is required\")\n\t\t\t\t}\n\n\t\t\t\tconst sourceTXID = (input.sourceTXID || input.sourceTransaction?.id('hex')) as string\n\t\t\t\tlet subscript = lockingScript as LockingScript\n\t\t\t\tif (!subscript) {\n\t\t\t\t\tsubscript = input.sourceTransaction?.outputs[input.sourceOutputIndex].lockingScript as LockingScript\n\t\t\t\t}\n\t\t\t\tconst preimage = TransactionSignature.format({\n\t\t\t\t\tsourceTXID,\n\t\t\t\t\tsourceOutputIndex: input.sourceOutputIndex,\n\t\t\t\t\tsourceSatoshis: sourceSats,\n\t\t\t\t\ttransactionVersion: tx.version,\n\t\t\t\t\totherInputs: [],\n\t\t\t\t\tinputIndex,\n\t\t\t\t\toutputs: tx.outputs,\n\t\t\t\t\tinputSequence: input.sequence,\n\t\t\t\t\tsubscript,\n\t\t\t\t\tlockTime: tx.lockTime,\n\t\t\t\t\tscope: TransactionSignature.SIGHASH_ALL |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_ANYONECANPAY |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_FORKID\n\t\t\t\t});\n\n\t\t\t\treturn script.writeBin(preimage).writeOpCode(OP.OP_0)\n\t\t\t},\n\t\t\testimateLength: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await purchase.sign(tx, inputIndex)).toBinary().length\n\t\t\t}\n\t\t}\n\t\treturn purchase\n\t}\n\n\tstatic buildOutput(satoshis: number, script: number[]): number[] {\n\t\tconst writer = new Utils.Writer()\n\t\twriter.writeUInt64LEBn(new BigNumber(satoshis))\n\t\twriter.writeVarIntNum(script.length)\n\t\twriter.write(script)\n\t\treturn writer.toArray()\n\t}\n}\n","import {\n\tP2PKH,\n\tSatoshisPerKilobyte,\n\tScript,\n\tTransaction,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport {\n\ttype CreateOrdTokenListingsConfig,\n\ttype CreateOrdListingsConfig,\n\ttype Utxo,\n\ttype TransferTokenInscription,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\tTokenType,\n\ttype TokenUtxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nconst { toArray } = Utils;\n\n// TODO: Handle royalty\nexport const createOrdListings = async (config: CreateOrdListingsConfig) => {\n\tconst {\n\t\tutxos,\n\t\tlistings,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t\troyalty,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Warn if creating many inscriptions at once\n\tif (listings.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Outputs\n\t// Add listing outputs\n\tfor (const listing of listings) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdLock().lock(\n\t\t\t\tlisting.ordAddress,\n\t\t\t\tlisting.payAddress,\n\t\t\t\tlisting.price,\n\t\t\t),\n\t\t});\n\t\tconst inputScriptBinary = toArray(listing.listingUtxo.script, \"base64\");\n\t\tconst inputScript = Script.fromBinary(inputScriptBinary);\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\tlisting.listingUtxo,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlisting.listingUtxo.satoshis,\n\t\t\t\tinputScript,\n\t\t\t),\n\t\t));\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Check if change is needed\n\tlet payChange: Utxo | undefined;\n\tconst changeScript = new P2PKH().lock(\n\t\tchangeAddress || paymentPk.toAddress().toString(),\n\t);\n\tconst changeOutput = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOutput);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\nexport const createOrdTokenListings = async (\n\tconfig: CreateOrdTokenListingsConfig,\n) => {\n\tconst {\n\t\tutxos,\n\t\tprotocol,\n\t\ttokenID,\n\t\tordPk,\n\t\tpaymentPk,\n\t\tadditionalPayments = [],\n\t\tchangeAddress,\n\t\ttokenChangeAddress,\n\t\tinputTokens,\n\t\tlistings,\n    decimals,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\n\t// Warn if creating many inscriptions at once\n\tif (listings.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Ensure these inputs are for the expected token\n\tif (!inputTokens.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\t// calculate change amount\n\tlet changeAmt = 0n;\n\tlet totalAmtIn = 0n;\n\tlet totalAmtOut = 0n;\n\n\t// Ensure these inputs are for the expected token\n\tif (!inputTokens.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\t// Outputs\n\t// Add listing outputs\n\tfor (const listing of listings) {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: \"transfer\",\n\t\t\tamt: listing.amt.toString(),\n\t\t};\n    // NewTokenListing is not adjusted for decimals\n    if (decimals > 0) {\n      transferInscription.amt = (listing.amt * BigInt(10 ** decimals)).toString();\n    }\n\t\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\ttick: tokenID,\n\t\t\t} as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\tid: tokenID,\n\t\t\t} as TransferBSV21Inscription;\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid protocol\");\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdLock().lock(\n\t\t\t\tlisting.payAddress,\n\t\t\t\tlisting.ordAddress,\n\t\t\t\tlisting.price,\n\t\t\t\t{\n\t\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\t\t\tcontentType: \"application/bsv20\",\n\t\t\t\t},\n\t\t\t),\n\t\t});\n    totalAmtOut += BigInt(transferInscription.amt);\n\t}\n\n  // Input tokens are already adjusted for decimals\n\tfor (const token of inputTokens) {\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\ttoken,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\ttoken.satoshis,\n\t\t\t\tScript.fromBinary(toArray(token.script, \"base64\")),\n\t\t\t),\n\t\t));\n\n\t\ttotalAmtIn += BigInt(token.amt);\n\t}\n\tchangeAmt = totalAmtIn - totalAmtOut;\n\n\tlet tokenChange: TokenUtxo | undefined;\n\t// check that you have enough tokens to send and return change\n\tif (changeAmt < 0n) {\n\t\tthrow new Error(\"Not enough tokens to send\");\n\t}\n\tif (changeAmt > 0n) {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: \"transfer\",\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\ttick: tokenID,\n\t\t\t} as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\tid: tokenID,\n\t\t\t} as TransferBSV21Inscription;\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid protocol\");\n\t\t}\n\n\t\tconst lockingScript = new OrdP2PKH().lock(tokenChangeAddress, {\n\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString('base64'),\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t});\n\t\tconst vout = tx.outputs.length;\n\t\ttx.addOutput({ lockingScript, satoshis: 1 });\n\t\ttokenChange = {\n\t\t\tid: tokenID,\n\t\t\tsatoshis: 1,\n\t\t\tscript: Buffer.from(lockingScript.toBinary()).toString(\"base64\"),\n\t\t\ttxid: \"\",\n\t\t\tvout,\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst txid = tx.id(\"hex\") as string;\n\tif (tokenChange) {\n\t\ttokenChange.txid = txid;\n\t}\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t\ttokenChange,\n\t};\n};\n","import { P2PKH, SatoshisPerKilobyte, Script, Transaction, Utils } from \"@bsv/sdk\";\nimport {\n\tTokenType,\n\ttype TokenUtxo,\n\ttype CancelOrdListingsConfig,\n\ttype CancelOrdTokenListingsConfig,\n\ttype Destination,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\n\nexport const cancelOrdListings = async (config: CancelOrdListingsConfig) => {\n\tconst {\n\t\tutxos,\n\t\tlistingUtxos,\n\t\tordPk,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tadditionalPayments = [],\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\n\t// Warn if creating many inscriptions at once\n\tif (listingUtxos.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\t\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinals we're cancelling\n\tfor (const listingUtxo of listingUtxos) {\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().cancelListing(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlistingUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, 'base64'))\n\t\t\t)\n\t\t));\n\t\t// Add cancel outputs returning listed ordinals\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new P2PKH().lock(ordPk.toAddress().toString()),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo, \n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpaymentPk, \n\t\t\t\t\"all\",\n\t\t\t\ttrue, \n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t\t)\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\nexport const cancelOrdTokenListings = async (\n\tconfig: CancelOrdTokenListingsConfig,\n) => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tadditionalPayments,\n\t\tlistingUtxos,\n\t\tutxos,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\t// calculate change amount\n\tlet totalAmtIn = 0;\n\n\tif (listingUtxos.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Ensure these inputs are for the expected token\n\tif (!listingUtxos.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinals we're cancelling\n\tfor (const listingUtxo of listingUtxos) {\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().cancelListing(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlistingUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, 'base64'))\n\t\t\t)\n\t\t));\n\t\ttotalAmtIn += Number.parseInt(listingUtxo.amt);\n\t}\n\n\tconst transferInscription: TransferTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"transfer\",\n\t\tamt: totalAmtIn.toString(),\n\t};\n\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\tif (protocol === TokenType.BSV20) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\ttick: tokenID,\n\t\t} as TransferBSV20Inscription;\n\t} else if (protocol === TokenType.BSV21) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\tid: tokenID,\n\t\t} as TransferBSV21Inscription;\n\t} else {\n\t\tthrow new Error(\"Invalid protocol\");\n\t}\n\n\tconst destination: Destination = {\n\t\taddress: ordAddress || ordPk.toAddress().toString(),\n\t\tinscription: {\n\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t},\n\t};\n\n  const lockingScript = new OrdP2PKH().lock(\n    destination.address,\n    destination.inscription\n  );\n\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript,\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n  const tokenChange: TokenUtxo = {\n    amt: totalAmtIn.toString(),\n    script: Buffer.from(lockingScript.toHex(), 'hex').toString('base64'),\n    txid: tx.id(\"hex\") as string,\n    vout: 0,\n    id: tokenID,\n    satoshis: 1\n  };\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n    tokenChange\n\t};\n};","import {\n\tLockingScript,\n\tP2PKH,\n\tSatoshisPerKilobyte,\n\tScript,\n\tTransaction,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport {\n\tTokenType,\n\ttype PurchaseOrdListingConfig,\n\ttype PurchaseOrdTokenListingConfig,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\n\nexport const purchaseOrdListing = async (config: PurchaseOrdListingConfig) => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tlisting,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tadditionalPayments = [],\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinal we're purchasing\n\ttx.addInput(\n\t\tinputFromB64Utxo(\n\t\t\tlisting.listingUtxo,\n\t\t\tnew OrdLock().purchaseListing(\n\t\t\t\t1,\n\t\t\t\tScript.fromBinary(Utils.toArray(listing.listingUtxo.script, \"base64\")),\n\t\t\t),\n\t\t),\n\t);\n\n\t// Outputs\n\t// Add the purchased output\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript: new P2PKH().lock(ordAddress),\n\t});\n\n\t// add the payment output\n\tconst reader = new Utils.Reader(Utils.toArray(listing.payout, \"base64\"));\n\tconst satoshis = reader.readUInt64LEBn().toNumber();\n\tconst scriptLength = reader.readVarIntNum();\n\tconst scriptBin = reader.read(scriptLength);\n\tconst lockingScript = LockingScript.fromBinary(scriptBin);\n\ttx.addOutput({\n\t\tsatoshis,\n\t\tlockingScript,\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo,\n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpaymentPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, \"base64\")),\n\t\t\t),\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\nexport const purchaseOrdTokenListing = async (\n\tconfig: PurchaseOrdTokenListingConfig,\n) => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tpaymentPk,\n\t\tlistingUtxo,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinal we're purchasing\n\ttx.addInput(\n\t\tinputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().purchaseListing(\n\t\t\t\t1,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, \"base64\")),\n\t\t\t),\n\t\t),\n\t);\n\n\t// Outputs\n\tconst transferInscription: TransferTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"transfer\",\n\t\tamt: listingUtxo.amt,\n\t};\n\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\tif (protocol === TokenType.BSV20) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\ttick: tokenID,\n\t\t} as TransferBSV20Inscription;\n\t} else if (protocol === TokenType.BSV21) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\tid: tokenID,\n\t\t} as TransferBSV21Inscription;\n\t} else {\n\t\tthrow new Error(\"Invalid protocol\");\n\t}\n\tconst dataB64 = Buffer.from(JSON.stringify(inscription)).toString(\"base64\");\n\n\t// Add the purchased output\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(ordAddress, {\n\t\t\tdataB64,\n\t\t\tcontentType: \"bsv-20\",\n\t\t}),\n\t});\n\n  if (!listingUtxo.payout) {\n    throw new Error(\"Listing UTXO does not have a payout script\");\n  }\n\n  // Add the payment output\n  const reader = new Utils.Reader(Utils.toArray(listingUtxo.payout, \"base64\"));\n  const satoshis = reader.readUInt64LEBn().toNumber();\n  const scriptLength = reader.readVarIntNum();\n  const scriptBin = reader.read(scriptLength);\n  const lockingScript = LockingScript.fromBinary(scriptBin);\n  tx.addOutput({\n    satoshis,\n    lockingScript,\n  });\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo,\n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpaymentPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, \"base64\")),\n\t\t\t),\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase token listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n","// import sharp from \"sharp\";\n// import type { IconInscription, ImageContentType } from \"../types\";\n\n// // export the errors for use in tests\n// export const ErrorOversizedIcon = new Error(\n// \t\"Image must be a square image with dimensions <= 400x400\",\n// );\n// export const ErrorIconProportions = new Error(\"Image must be a square image\");\n// export const ErrorInvalidIconData = new Error(\"Error processing image\");\n// export const ErrorImageDimensionsUndefined = new Error(\n// \t\"Image dimensions are undefined\",\n// );\n\n// export const validIconData = async (\n// \ticon: IconInscription,\n// ): Promise<Error | null> => {\n// \tconst { dataB64, contentType } = icon;\n// \ttry {\n// \t\tconst buffer = Buffer.from(dataB64, \"base64\");\n// \t\tlet image = sharp(buffer);\n\n// \t\t// Special handling for SVG\n// \t\tif (contentType === \"image/svg+xml\") {\n// \t\t\t// Convert SVG to PNG for consistent dimension checking\n// \t\t\timage = image.png();\n// \t\t}\n\n// \t\tconst metadata = await image.metadata();\n\n// \t\tif (metadata.width === undefined || metadata.height === undefined) {\n// \t\t\treturn ErrorImageDimensionsUndefined;\n// \t\t}\n// \t\t// Check if the image is a square\n// \t\tif (metadata.width !== metadata.height) {\n// \t\t\treturn ErrorIconProportions;\n// \t\t}\n// \t\t// ensure the image is <= 400x400\n// \t\tif (metadata.width > 400 || metadata.height > 400) {\n// \t\t\treturn ErrorOversizedIcon;\n// \t\t}\n\n// \t\treturn null;\n// \t} catch (error) {\n// \t\treturn ErrorInvalidIconData;\n// \t}\n// };\n\nimport Jimp from \"jimp\";\nimport type { IconInscription, ImageContentType } from \"../types\";\n\nexport const ErrorOversizedIcon = new Error(\n\t\"Image must be a square image with dimensions <= 400x400\",\n);\nexport const ErrorIconProportions = new Error(\"Image must be a square image\");\nexport const ErrorInvalidIconData = new Error(\"Error processing image\");\nexport const ErrorImageDimensionsUndefined = new Error(\n\t\"Image dimensions are undefined\",\n);\n\nconst isImageContentType = (value: string): value is ImageContentType => {\n\treturn (value as ImageContentType) === value;\n};\n\nexport const validIconData = async (\n\ticon: IconInscription,\n): Promise<Error | null> => {\n\tconst { dataB64, contentType } = icon;\n\n\tif (contentType === \"image/svg+xml\") {\n\t\treturn validateSvg(dataB64);\n\t}\n\n\t// make sure the contentType is one of ImageContentType\n\tif (!isImageContentType(contentType)) {\n\t\treturn ErrorInvalidIconData;\n\t}\n\n\ttry {\n\t\tconst buffer = Buffer.from(dataB64, \"base64\");\n\t\tconst image = await Jimp.read(buffer);\n\n\t\tconst width = image.getWidth();\n\t\tconst height = image.getHeight();\n\n\t\tif (width === undefined || height === undefined) {\n\t\t\treturn ErrorImageDimensionsUndefined;\n\t\t}\n\t\tif (width !== height) {\n\t\t\treturn ErrorIconProportions;\n\t\t}\n\t\tif (width > 400 || height > 400) {\n\t\t\treturn ErrorOversizedIcon;\n\t\t}\n\n\t\treturn null;\n\t} catch (error) {\n\t\treturn ErrorInvalidIconData;\n\t}\n};\n\nconst validateSvg = (svgBase64: string): Error | null => {\n  const svgString = Buffer.from(svgBase64, \"base64\").toString(\"utf-8\");\n  const widthMatch = svgString.match(/<svg[^>]*\\s+width=\"([^\"]+)\"/);\n  const heightMatch = svgString.match(/<svg[^>]*\\s+height=\"([^\"]+)\"/);\n  console.log({widthMatch, heightMatch})\n  if (!widthMatch || !heightMatch) {\n    return ErrorImageDimensionsUndefined;\n  }\n\n\tconst width = Number.parseInt(widthMatch[1], 10);\n\tconst height = Number.parseInt(heightMatch[1], 10);\n\n\tif (Number.isNaN(width) || Number.isNaN(height)) {\n\t\treturn ErrorImageDimensionsUndefined;\n\t}\n\n\tif (width !== height) {\n\t\treturn ErrorIconProportions;\n\t}\n\tif (width > 400 || height > 400) {\n\t\treturn ErrorOversizedIcon;\n\t}\n\n\treturn null;\n}\n\nexport const validIconFormat = (icon: string): boolean => {\n\tif (!icon.includes(\"_\") || icon.endsWith(\"_\")) {\n\t\treturn false;\n\t}\n\n\t// use parseint to validate the vout\n\tconst iconVout = Number.parseInt(icon.split(\"_\")[1]);\n\tif (Number.isNaN(iconVout)) {\n\t\treturn false;\n\t}\n\n\tif (!icon.startsWith(\"_\") && icon.split(\"_\")[0].length !== 64) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","import {\n\tTransaction,\n\tP2PKH,\n\tSatoshisPerKilobyte,\n\ttype TransactionOutput,\n\tUtils,\n\tScript,\n} from \"@bsv/sdk\";\nimport type {\n\tDeployBsv21TokenConfig,\n\tDeployBsv21TokenResult,\n\tDeployMintTokenInscription,\n\tInscription,\n\tUtxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { validIconData, validIconFormat } from \"./utils/icon\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\n\n/**\n * Deploys & Mints a BSV21 token to the given destination address\n * @param {DeployBsv21TokenConfig} config - Configuration object for deploying BSV21 token\n * @param {string} config.symbol - Token ticker symbol\n * @param {number} config.decimals - Number of decimal places to display\n * @param {string | IconInscription} config.icon - outpoint (format: txid_vout) or Inscription. If Inscription, must be a valid image type\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {Distribution} config.initialDistribution - Initial distribution with addresses and total supply (not adjusted for decimals, library will add zeros)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {string} config.destinationAddress - Address to deploy token to.\n * @param {string} config.changeAddress - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<DeployBsv21TokenResult>} Transaction to deploy BSV 2.1 token\n */\nexport const deployBsv21Token = async (\n\tconfig: DeployBsv21TokenConfig,\n): Promise<DeployBsv21TokenResult> => {\n\tconst {\n\t\tsymbol,\n\t\ticon,\n    decimals,\n\t\tutxos,\n\t\tinitialDistribution,\n\t\tpaymentPk,\n\t\tdestinationAddress,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\tlet iconValue: string;\n\tif (typeof icon === \"string\") {\n\t\ticonValue = icon;\n\t} else {\n\t\tconst iconError = await validIconData(icon);\n\t\tif (iconError) {\n\t\t\tthrow iconError;\n\t\t}\n\t\t// add icon inscription to the transaction\n\t\tconst iconScript = new OrdP2PKH().lock(destinationAddress, icon);\n\t\tconst iconOut = {\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: iconScript,\n\t\t};\n\t\ttx.addOutput(iconOut);\n\t\t// relative output index of the icon\n\t\ticonValue = \"_0\";\n\t}\n\n\t// Ensure the icon format\n\tif (!validIconFormat(iconValue)) {\n\t\tthrow new Error(\n\t\t\t\"Invalid icon format. Must be either outpoint (format: txid_vout) or relative output index of the icon (format _vout). examples: ecb483eda58f26da1b1f8f15b782b1186abdf9c6399a1c3e63e0d429d5092a41_0 or _1\",\n\t\t);\n\t}\n  \n\t// Outputs\n  const amt = decimals ? BigInt(initialDistribution.amt) * 10n ** BigInt(decimals) : BigInt(initialDistribution.amt);\n\tconst fileData: DeployMintTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"deploy+mint\",\n\t\tsym: symbol,\n\t\ticon: iconValue,\n\t\tamt: amt.toString(),\n\t};\n\n  if (decimals) {\n    fileData.dec = decimals.toString();\n  }\n\n\tconst b64File = Buffer.from(JSON.stringify(fileData)).toString(\"base64\");\n\tconst sendTxOut = {\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(destinationAddress, {\n\t\t\tdataB64: b64File,\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t} as Inscription),\n\t};\n\ttx.addOutput(sendTxOut);\n\n\t// Additional payments\n\tfor (const payment of additionalPayments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new P2PKH().lock(payment.to),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to deploy token. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n"],"names":["TokenType","RoytaltyType","toHex","utf8Str","Buffer","from","toString","DEFAULT_SAT_PER_KB","API_HOST","OrdP2PKH","_P2PKH","apply","arguments","_inheritsLoose","prototype","lock","address","inscription","metaData","ordAsm","undefined","dataB64","contentType","ordHex","fileHex","trim","Error","fileMediaType","inscriptionAsm","P2PKH","toASM","app","type","_i","_Object$entries","Object","entries","length","_Object$entries$_i","key","value","LockingScript","fromASM","fromBase58Check","Utils","inputFromB64Utxo","utxo","unlockScriptTemplate","fromUtxo","_extends","script","fetchPayUtxos","scriptEncoding","payUrl","console","log","Promise","resolve","fetch","then","payRes","ok","json","payUtxos","filter","u","satoshis","pubKeyHash","p2pkhScript","data","map","txid","vout","toBinary","e","reject","fetchNftUtxos","collectionId","limit","offset","url","JSON","stringify","subTypeData","res","nftUtxos","outpoints","_u$data","list","method","headers","body","concat","nftRes","nfts","Script","fromHex","nftUtxo","origin","outpoint","fetchTokenUtxos","protocol","tokenId","BSV20","tokenUtxos","amt","id","signData","tx","signer","_exit","_temp2","_result","idKey","keyHost","_sigma$sign","Sigma","sign","signedTx","_temp","authToken","sigma","remoteSign","_ref","_catch","stringifyMetaData","result","Array","isArray","String","pact","state","s","_Pact","o","bind","v","_settle","observer","onFulfilled","this","_this","onRejected","_isSettledPact","thenable","createOrdinals","config","_temp4","_interrupt","totalSatsIn","totalSatsOut","BigInt","fee","modelOrFee","payChangeOutIdx","outputs","findIndex","change","changeOutput","payChange","lockingScript","spentOutpoints","utxos","_forOf","input","unlock","paymentPk","fromBinary","toArray","addInput","computeFee","_modelOrFee$computeFe","destinations","changeAddress","_config$satsPerKb","satsPerKb","_config$additionalPay","additionalPayments","warn","_step","SatoshisPerKilobyte","Transaction","_iterator","_createForOfIteratorHelperLoose","done","destination","_Object$keys","keys","addOutput","_step2","_iterator2","p","amount","to","toAddress","changeScript","reduce","total","out","_temp3","pop","_signData","sendOrdinals","enforceUniformSend","ordinals","ordUtxo","ordPk","push","_destination$inscript","_destination$inscript2","_step3","_iterator3","array","_cycle","i","check","paymentUtxos","sendUtxos","changeOut","payments","_config$changeAddress","payment","sendTxOut","Symbol","iterator","transferOrdTokens","tokenChange","inputs","sourceTXID","sourceOutputIndex","tokenID","inputTokens","distributions","tokenChangeAddress","decimals","_config$burn","burn","changeAmt","totalAmtIn","totalAmtOut","every","token","inputScriptBinary","inputScript","dest","transferInscription","op","Math","pow","tick","BSV21","target","_iteratorSymbol","step","next","validateSubTypeData","subType","collectionData","description","quantity","rarityLabels","label","values","traits","itemData","includes","split","Number","isNaN","parseInt","mintNumber","rank","rarityLabel","attachments","error","OrdLock","_proto","ordAddress","payAddress","price","cancelPkh","payPkh","writeScript","writeBin","buildOutput","cancelListing","privateKey","signOutputs","anyoneCanPay","sourceSatoshis","p2pkh","inputIndex","_p2pkh$sign","writeOpCode","OP","OP_1","estimateLength","purchaseListing","purchase","_input$sourceTransact","UnlockingScript","writer","Writer","slice","output","write","OP_0","sourceSats","sourceTransaction","_input$sourceTransact2","subscript","preimage","TransactionSignature","format","transactionVersion","version","otherInputs","inputSequence","sequence","lockTime","scope","SIGHASH_ALL","SIGHASH_ANYONECANPAY","SIGHASH_FORKID","_purchase$sign","writeUInt64LEBn","BigNumber","writeVarIntNum","callback","return","_fixup","TypeError","_forTo","createOrdListings","listings","listing","listingUtxo","createOrdTokenListings","_interrupt2","_config$additionalPay2","_config$satsPerKb2","_step4","_iterator4","_step5","_iterator5","_modelOrFee$computeFe2","cancelOrdListings","listingUtxos","cancelOrdTokenListings","purchaseOrdListing","reader","Reader","payout","readUInt64LEBn","toNumber","scriptLength","readVarIntNum","scriptBin","read","purchaseOrdTokenListing","ErrorOversizedIcon","ErrorIconProportions","ErrorInvalidIconData","ErrorImageDimensionsUndefined","deployBsv21Token","iconValue","icon","endsWith","iconVout","startsWith","validIconFormat","initialDistribution","fileData","sym","symbol","dec","b64File","destinationAddress","svgBase64","svgString","widthMatch","match","heightMatch","width","height","validateSvg","buffer","Jimp","image","getWidth","getHeight","validIconData","iconError","iconScript"],"mappings":"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"}