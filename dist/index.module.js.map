{"version":3,"file":"index.module.js","sources":["../src/utils/strings.ts","../src/templates/ordP2pkh.ts","../src/constants.ts","../src/utils/utxo.ts","../src/signData.ts","../src/createOrdinals.ts","../src/sendOrdinals.ts","../src/sendUtxos.ts","../src/types.ts","../src/transferOrdinals.ts"],"sourcesContent":["/**\n * Converts a string to its hexadecimal representation\n *\n * @param {string} utf8Str - The string to convert\n * @returns {string} The hexadecimal representation of the input string\n */\nconst toHex = (utf8Str: string): string => {\n  return Buffer.from(utf8Str).toString(\"hex\");\n};\n\nexport { toHex };\n","import {\n\tLockingScript,\n\tP2PKH,\n\ttype Script,\n} from \"@bsv/sdk\";\nimport type { MAP } from \"../types\";\nimport { toHex } from \"../utils/strings\";\nimport { MAP_PREFIX } from \"../constants\";\n\n/**\n * OrdP2PKH (1Sat Ordinal + Pay To Public Key Hash) class implementing ScriptTemplate.\n *\n * This class provides methods to create an Ordinal with Pay To Public Key Hash locking and unlocking scripts. \n * It extends the standard P2PKH script template and provides a custom lock method.\n */\nexport default class OrdP2PKH extends P2PKH {\n\t/**\n\t * Creates a 1Sat Ordinal + P2PKH locking script for a given address string\n\t *\n\t * @param {string} address - An destination address for the Ordinal.\n\t * @param {string} [b64File] - Base64 encoded file data.\n\t * @param {string} [mediaType] - Media type of the file.\n\t * @param {MAP} [metaData] - (optional) MAP Metadata to be included in OP_RETURN.\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\t// unlock method inherits from p2pkh\n\tlock(\n\t\taddress: string,\n\t\tb64File?: string | undefined,\n\t\tmediaType?: string | undefined,\n\t\tmetaData?: MAP | undefined,\n\t): Script {\n\t\tlet ordAsm = \"\";\n\t\t// This can be omitted for reinscriptions that just update metadata\n\t\tif (b64File !== undefined && mediaType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(b64File, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(mediaType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`;\n\t\t}\n\n\t\t// Create ordinal output and inscription in a single output\n\t\tconst lockingScript = new P2PKH().lock(address);\n\t\tlet inscriptionAsm = `${ordAsm ? `${ordAsm} ` : \"\"}${lockingScript.toASM()}`;\n\n\t\t// MAP.app and MAP.type keys are required\n\t\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t\t}\n\n\t\tif (metaData?.app && metaData?.type) {\n\t\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\t\tconst mapCmdValue = toHex(\"SET\");\n\t\t\tinscriptionAsm = `${inscriptionAsm} OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\t\tif (key !== \"cmd\") {\n\t\t\t\t\tinscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\n\t\t\t\t\t\tvalue as string,\n\t\t\t\t\t)}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn LockingScript.fromASM(inscriptionAsm);\n\t}\n}\n","export const MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\nexport const DEFAULT_SAT_PER_KB = 10;\nexport const API_HOST = \"https://ordinals.gorillapool.io/api\";","import { type Transaction, type UnlockingScript, fromUtxo, type TransactionInput, Utils, P2PKH } from \"@bsv/sdk\";\nimport type { Utxo } from \"../types\";\nimport { API_HOST } from \"../constants\";\n\nconst { fromBase58Check } = Utils;\n\n/**\n * Converts a Utxo object with a base64 encoded script to a Utxo object with a hex encoded script\n * @param {Utxo} utxo - Utxo object with base64 encoded script\n * @param {Object} unlockScriptTemplate - Object with sign and estimateLength functions\n * @returns {TransactionInput} Utxo object with hex encoded script\n */\nexport const inputFromB64Utxo = (\n\tutxo: Utxo,\n\tunlockScriptTemplate: {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>;\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>;\n\t},\n): TransactionInput => {\n\tconst input = fromUtxo(\n\t\t{\n\t\t\t...utxo,\n\t\t\tscript: Buffer.from(utxo.script, \"base64\").toString(\"hex\"),\n\t\t},\n\t\tunlockScriptTemplate,\n\t);\n\tinput.sourceTXID = utxo.txid;\n\treturn input;\n};\n\n/**\n * Fetches pay utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<Utxo[]>} Array of pay utxos\n */\nexport const fetchPayUtxos = async (address: string): Promise<Utxo[]> => {\n  const payUrl = `${API_HOST}/txos/address/${address}/unspent?bsv20=false`;\n  console.log({ payUrl });\n  const payRes = await fetch(payUrl);\n  if (!payRes.ok) {\n    throw new Error(\"Error fetching pay utxos\");\n  }\n  let payUtxos = await payRes.json();\n  // exclude all 1 satoshi utxos\n  payUtxos = payUtxos.filter((u: { satoshis: number }) => u.satoshis !== 1)\n\n  // Get pubkey hash from address\n  const pubKeyHash = fromBase58Check(address)\n  const p2pkhScript = new P2PKH().lock(pubKeyHash.data)\n  payUtxos = payUtxos.map((utxo: {\n\t\ttxid: string;\n\t\tvout: number;\n\t\tsatoshis: number;\n\t}) => ({\n      txid: utxo.txid,\n      vout: utxo.vout,\n      satoshis: utxo.satoshis,\n      script: Buffer.from(p2pkhScript.toBinary()).toString(\"base64\"),\n  }))\n  return payUtxos\n}","import type { Transaction } from \"@bsv/sdk\";\nimport { Sigma } from \"sigma-protocol\";\nimport type { LocalSigner, RemoteSigner } from \"./types\";\n\n/**\n * Signs data in the transaction with Sigma protocol\n * @param {Transaction} tx - Transaction to sign\n * @param {LocalSigner | RemoteSigner} signer - Local or remote signer (used for data signature)\n * @returns {Transaction} Transaction with signed data\n */\nexport const signData = async (\n\ttx: Transaction,\n\tsigner: LocalSigner | RemoteSigner,\n): Promise<Transaction> => {\n\t// Sign tx if idKey or remote signer like starfish/tokenpass\n\tconst idKey = (signer as LocalSigner)?.idKey;\n\tconst keyHost = (signer as RemoteSigner)?.keyHost;\n\n\tif (idKey) {\n\t\tconst sigma = new Sigma(tx);\n\t\tconst { signedTx } = sigma.sign(idKey);\n\t\treturn signedTx;\n\t}\n\tif (keyHost) {\n\t\tconst authToken = (signer as RemoteSigner)?.authToken;\n\t\tconst sigma = new Sigma(tx);\n\t\ttry {\n\t\t\tconst { signedTx } = await sigma.remoteSign(keyHost, authToken);\n\t\t\treturn signedTx;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthrow new Error(`Remote signing to ${keyHost} failed`);\n\t\t}\n\t}\n\tthrow new Error(\"Signer must be a LocalSigner or RemoteSigner\");\n};\n","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n} from \"@bsv/sdk\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n\tUtxo,\n\tDestination,\n\tMAP,\n\tLocalSigner,\n\tRemoteSigner,\n\tPayment,\n\tCreateOrdinalsConfig,\n\tCreateOrdinalsResult,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { signData } from \"./signData\";\n\n/**\n * Creates a transaction with inscription outputs\n * @param {CreateOrdinalsConfig} config - Configuration object for creating ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {string} config.changeAddress - Optional. Address to send change to. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {MAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Local or remote signer (used for data signature)\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<CreateOrdinalsResult>} Transaction with inscription outputs\n */\nexport const createOrdinals = async (\n\tconfig: CreateOrdinalsConfig,\n): Promise<CreateOrdinalsResult> => {\n\tconst {\n\t\tutxos,\n\t\tdestinations,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Inputs\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\t}\n\n\t// Warn if creating many inscriptions at once\n\tif (destinations.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Outputs\n\t// Add inscription outputs\n\tfor (const destination of destinations) {\n\t\tif (!destination.inscription) {\n\t\t\tthrow new Error(\"Inscription is required for all destinations\");\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription.dataB64,\n\t\t\t\tdestination.inscription.contentType,\n\t\t\t\tmetaData,\n\t\t\t),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\tlet payChangeVout: number | undefined;\n\n\t// Calculate total input and output amounts\n\tconst totalInput = utxos.reduce(\n\t\t(sum, utxo) => sum + BigInt(utxo.satoshis),\n\t\t0n,\n\t);\n\tconst totalOutput = tx.outputs.reduce(\n\t\t(sum, output) => sum + BigInt(output.satoshis || 0),\n\t\t0n,\n\t);\n\n\t// Estimate fee\n\tconst estimatedFee = await modelOrFee.computeFee(tx);\n\n\t// Check if change is needed\n\tlet payChange: Utxo | undefined;\n\tif (totalInput > totalOutput + BigInt(estimatedFee)) {\n\t\tconst changeScript = new P2PKH().lock(\n\t\t\tchangeAddress || paymentPk.toAddress().toString(),\n\t\t);\n\t\tconst changeOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\t// Add change output\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet,\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\n\t\ttx.addOutput(changeOutput);\n\t}\n\n\tif (signer) {\n\t\ttx = await signData(tx, signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.hash(\"hex\") as string;\n\t}\n\t\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype Script,\n\ttype TransactionOutput,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n\tSendOrdinalsResult,\n\tSendOrdinalsConfig,\n\tUtxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\n\n/**\n * Sends ordinals to the given destinations\n * @param {SendOrdinalsConfig} config - Configuration object for sending ordinals\n * @param {Utxo[]} config.paymentUtxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.ordinals - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {string} config.changeAddress - Optional. Address to send change to, if any. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {MAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @param {boolean} config.enforceUniformSend - Optional. Default: true. Enforce that the number of destinations matches the number of ordinals being sent. Sending ordinals requires a 1:1 mapping of destinations to ordinals. This is only used for sub-protocols like BSV21 that manage tokens without sending the inscriptions directly.\n * @returns {Promise<SendOrdinalsResult>} Transaction, spent outpoints, and change vout\n */\nexport const sendOrdinals = async (config: SendOrdinalsConfig): Promise<SendOrdinalsResult> => {\n\tif (!config.satsPerKb) {\n\t\tconfig.satsPerKb = DEFAULT_SAT_PER_KB;\n\t}\n\tif (!config.additionalPayments) {\n\t\tconfig.additionalPayments = [];\n\t}\n\tif (config.enforceUniformSend === undefined) {\n\t\tconfig.enforceUniformSend = true;\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(config.satsPerKb);\n\tlet tx = new Transaction();\n\tconst spentOutpoints: string[] = [];\n\tlet payChangeVout: number | undefined;\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of config.ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(ordUtxo, new OrdP2PKH().unlock(config.ordPk));\n\t\tspentOutpoints.push(`${ordUtxo.txid}_${ordUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// check that ordinals coming in matches ordinals going out if supplied\n\tif (config.enforceUniformSend && config.destinations.length !== config.ordinals.length) {\n\t\tthrow new Error(\n\t\t\t\"Number of destinations must match number of ordinals being sent\",\n\t\t);\n\t}\n\n\t// Add ordinal outputs\n\tfor (const destination of config.destinations) {\n\t\tlet s: Script;\n\t\tif (\n\t\t\tdestination.inscription?.dataB64 &&\n\t\t\tdestination.inscription?.contentType\n\t\t) {\n\t\t\ts = new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription.dataB64,\n\t\t\t\tdestination.inscription.contentType,\n\t\t\t\tconfig.metaData,\n\t\t\t);\n\t\t} else {\n\t\t\ts = new P2PKH().lock(destination.address);\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: s,\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of config.additionalPayments) {\n\t\tconsole.log(\"Additional payment\", p);\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Add payment inputs\n\tfor (const paymentUtxo of config.paymentUtxos) {\n\t\tconst input = inputFromB64Utxo(paymentUtxo, new P2PKH().unlock(config.paymentPk));\n\t\tspentOutpoints.push(`${paymentUtxo.txid}_${paymentUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Add change output if needed\n\tconst fee = await modelOrFee.computeFee(tx);\n\tconst totalSatsIn = config.paymentUtxos.reduce(\n\t\t(total, utxo) => total + BigInt(utxo.satoshis),\n\t\t0n,\n\t);\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + (out.satoshis || 0),\n\t\t0,\n\t);\n\n\tif (totalSatsIn < totalSatsOut) {\n\t\tthrow new Error(\"Not enough ordinals to send\");\n\t}\n\t\n\tlet payChange: Utxo | undefined;\n\tif (totalSatsIn > totalSatsOut + fee) {\n\t\tconst changeScript = new P2PKH().lock(\n\t\t\tconfig.changeAddress || config.paymentPk.toAddress().toString(),\n\t\t);\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not available until the transaction is signed\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\n\t\t\t\t\"base64\",\n\t\t\t)\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t}\n\n\tif (config.signer) {\n\t\ttx = await signData(tx, config.signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\t\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number\n\t\tpayChange.txid = tx.hash(\"hex\") as string;\n\t}\n\t\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChange,\n\t};\n};","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype TransactionOutput,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type { SendUtxosConfig, SendUtxosResult, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Sends utxos to the given destination\n * @param {SendUtxosConfig} config - Configuration object for sending utxos\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {Payment[]} config.payments - Array of payments with addresses and amounts\n * @param {number} [config.satsPerKb] - Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {string} [config.changeAddress] - Address to send change to. If not provided, defaults to paymentPk address\n * @returns {Promise<SendUtxosResult>} Transaction with utxo outputs\n */\nexport const sendUtxos = async (\n\tconfig: SendUtxosConfig,\n): Promise<SendUtxosResult> => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tpayments,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tchangeAddress = paymentPk.toAddress().toString(),\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\t// Outputs\n\tfor (const payment of payments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new P2PKH().lock(payment.to),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + (out.satoshis || 0),\n\t\t0,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + fee) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + fee) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to send. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChange: Utxo | undefined;\n\tif (totalSatsIn > totalSatsOut + fee) {\n\t\t// Change\n\t\tconst changeScript = new P2PKH().lock(changeAddress);\n\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t} else if (totalSatsIn < totalSatsOut + fee) {\n\t\tconsole.log(\"No change needed\");\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.hash(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import type { PrivateKey, Transaction } from \"@bsv/sdk\";\nimport type { AuthToken } from \"sigma-protocol\";\n\n// biome-ignore lint/complexity/noBannedTypes: Reserved for future use\ntype Signer = {};\n\nexport interface LocalSigner extends Signer {\n\tidKey: PrivateKey;\n}\n\nexport interface RemoteSigner extends Signer {\n\tkeyHost: string;\n\tauthToken?: AuthToken;\n}\n\nexport type Destination = {\n\taddress: string;\n\tinscription?: Inscription;\n};\n\n/**\n * @typedef {Object} Distribution\n * @property {string} address - Destination address. Must be a Ordinals address (BSV address for recieving 1Sat ordinals tokens).\n * @property {string} amt - Number of tokens as a string, considering decimals. Not display format. Ex. 100000000 for 1 token with 8 decimal places.\n */\nexport type Distribution = {\n\taddress: string;\n\tamt: string;\n};\n\n/**\n * @typedef {Object} Utxo\n * @property {number} satoshis - Amount in satoshis\n * @property {string} txid - Transaction id\n * @property {number} vout - Output index\n * @property {string} script - Base64 encoded locking script\n */\nexport type Utxo = {\n\tsatoshis: number;\n\ttxid: string;\n\tvout: number;\n\tscript: string;\n};\n\n/**\n * @typedef {Object} TokenUtxo\n * @property {string} amt - Number of tokens as a string\n * @property {string} id - Token id -  either tick or id depending on protocol\n * @property {string} satoshis - Always 1\n */\nexport interface TokenUtxo extends Utxo {\n\tamt: string;\n\tid: string;\n\tsatoshis: 1;\n}\n\nexport type Inscription = {\n\tdataB64: string;\n\tcontentType: string;\n};\n\nexport type ImageContentType =\n\t| \"image/png\"\n\t| \"image/jpeg\"\n\t| \"image/gif\"\n\t| \"image/svg+xml\"\n\t| \"image/webp\";\n\n/**\n * @typedef {Object} IconInscription\n * @property {string} dataB64 - Base64 encoded image data. Must be a square image.\n * @property {ImageContentType} contentType - Media type of the image\n */\nexport type IconInscription = {\n\tdataB64: string;\n\tcontentType: ImageContentType;\n};\n\nexport type MAP = {\n\tapp: string;\n\ttype: string;\n\t[prop: string]: string;\n};\n\nexport type Payment = {\n\tto: string;\n\tamount: number;\n};\n\nexport type TokenInscription = {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\" | \"mint\" | \"deploy+mint\";\n};\n\nexport interface MintTokenInscription extends TokenInscription {\n\top: \"mint\";\n}\n\nexport interface DeployMintTokenInscription extends TokenInscription {\n\top: \"deploy+mint\";\n\tsym: string;\n\ticon: string;\n}\n\nexport interface TransferTokenInscription extends TokenInscription {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\";\n}\n\nexport interface TransferBSV20Inscription extends TransferTokenInscription {\n\ttick: string;\n}\n\nexport interface TransferBSV21Inscription extends TransferTokenInscription {\n\tid: string;\n}\n\nexport enum TokenType {\n\tBSV20 = \"bsv20\",\n\tBSV21 = \"bsv21\",\n}\n\n\nexport type CreateOrdinalsResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type CreateOrdinalsConfig = {\n\tutxos: Utxo[];\n\tdestinations: Destination[];\n\tpaymentPk: PrivateKey;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: MAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n};\n\nexport type SendOrdinalsResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type SendOrdinalsConfig = {\n\tpaymentUtxos: Utxo[];\n\tordinals: Utxo[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tdestinations: Destination[];\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: MAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n\tenforceUniformSend?: boolean;\n}\n\nexport type DeployBsv21TokenResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type DeployBsv21TokenConfig = {\n\tsymbol: string;\n\ticon: string | IconInscription;\n\tutxos: Utxo[];\n\tinitialDistribution: Distribution;\n\tpaymentPk: PrivateKey;\n\tdestinationAddress: string;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[];\n};\n\nexport type SendUtxosResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type SendUtxosConfig = {\n\tutxos: Utxo[];\n\tpaymentPk: PrivateKey;\n\tpayments: Payment[];\n\tsatsPerKb?: number;\n\tchangeAddress?: string;\n};\n\nexport interface TransferOrdTokensResult extends SendOrdinalsResult {\n\ttokenChange?: TokenUtxo;\n}\n\nexport type TransferOrdTokensConfig = {\n\tprotocol: TokenType;\n\ttokenID: string;\n\tutxos: Utxo[];\n\tinputTokens: TokenUtxo[];\n\tdistributions: Distribution[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tchangeAddress?: string;\n\ttokenChangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: MAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n}","import {\n\ttype Destination,\n\tTokenType,\n\ttype TransferBSV20Inscription,\n\ttype TransferTokenInscription,\n  type TransferBSV21Inscription,\n\ttype TransferOrdTokensConfig,\n\ttype TransferOrdTokensResult,\n\ttype SendOrdinalsConfig,\n\ttype TokenUtxo,\n} from \"./types\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { sendOrdinals } from \"./sendOrdinals\";\n\n/**\n * Transfer tokens to a destination\n * @param {TransferOrdTokensConfig} config - Configuration object for transferring tokens\n * @param {TokenType} config.protocol - Token protocol. Must be TokenType.BSV20 or TokenType.BSV21\n * @param {string} config.tokenID - Token ID. Either the tick or id value depending on the protocol\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {TokenUtxo[]} config.inputTokens - Token utxos to spend\n * @param {Distribution[]} config.distributions - Array of destinations with addresses and amounts\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {string} config.changeAddress - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {string} config.tokenChangeAddress - Optional. Address to send token change to, if any. If not provided, defaults to ordPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {MAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<TransferOrdTokensResult>} Transaction with token transfer outputs\n */\nexport const transferOrdTokens = async (config: TransferOrdTokensConfig): Promise<TransferOrdTokensResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tinputTokens,\n\t\tdistributions,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tchangeAddress,\n\t\ttokenChangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\t// calculate change amount\n\tlet changeAmt = 0n;\n\tlet totalAmtIn = 0n;\n\tlet totalAmtOut = 0n;\n\n  // Ensure these inputs are for the expected token\n\tif(!inputTokens.every(\n\t\t(token) => token.id === tokenID,\n\t)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n\tfor (const token of inputTokens) {\n\t\ttotalAmtIn += BigInt(token.amt);\n\t}\n\n\tfor (const dest of distributions) {\n\t\ttotalAmtOut += BigInt(dest.amt);\n\t}\n\n\t// check that you have enough tokens to send\n\tif (totalAmtIn < totalAmtOut) {\n\t\tthrow new Error(\"Not enough tokens to send\");\n\t}\n\n\tchangeAmt = totalAmtIn - totalAmtOut;\n\n\t// add change to distributions\n\tif (changeAmt > 0n) {\n\t\tconst changeDistribution = {\n\t\t\taddress: tokenChangeAddress || ordPk.toAddress().toString(),\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t\tdistributions.push(changeDistribution);\n\t}\n\n\t// build destination inscriptions\n\tconst destinations: Destination[] = distributions.map((dest) => {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: \"transfer\",\n\t\t\tamt: dest.amt,\n\t\t}\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n\t\treturn {\n\t\t\taddress: dest.address,\n\t\t\tinscription: {\n\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\t\tcontentType: \"application/bsv-20\",\n\t\t\t},\n\t\t};\n\t});\n\n\tconst sendOrdinalsConfig: SendOrdinalsConfig = {\n\t\tpaymentUtxos: utxos,\n\t\tordinals: inputTokens,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tdestinations,\n\t\tchangeAddress: changeAddress || paymentPk.toAddress().toString(),\n\t\tsatsPerKb,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments,\n\t\tenforceUniformSend: false\n\t};\n\n\tconst { tx, spentOutpoints, payChange } = await sendOrdinals(sendOrdinalsConfig);\n\t\n\t// find the tokenChangeVout by looking for the destination with the tokenChangeAddress\n\tconst tokenChangeVout = destinations.findIndex(\n\t\t(d) => d.address === (tokenChangeAddress || ordPk.toAddress().toString())\n\t);\n\t\n\tlet tokenChange: TokenUtxo | undefined;\n\tif (tokenChangeVout !== -1) {\n\t\ttokenChange = {\n\t\t\tid: tokenID,\n\t\t\tamt: changeAmt.toString(),\n\t\t\tsatoshis: 1,\n\t\t\ttxid: tx.id(\"hex\"),\n\t\t\tvout: tokenChangeVout,\n\t\t\tscript: Buffer.from(tx.outputs[tokenChangeVout].lockingScript.toHex(), \"hex\").toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChange,\n\t\ttokenChange,\n\t}\n};"],"names":["toHex","utf8Str","Buffer","from","toString","OrdP2PKH","_P2PKH","apply","this","arguments","prototype","lock","address","b64File","mediaType","metaData","ordAsm","undefined","ordHex","fileHex","trim","Error","fileMediaType","inscriptionAsm","P2PKH","toASM","app","type","mapCmdValue","_i","_Object$entries","Object","entries","length","_Object$entries$_i","key","value","LockingScript","fromASM","fromBase58Check","Utils","inputFromB64Utxo","utxo","unlockScriptTemplate","input","fromUtxo","_extends","script","sourceTXID","txid","fetchPayUtxos","payUrl","API_HOST","console","log","Promise","resolve","fetch","then","payRes","ok","json","payUtxos","filter","u","satoshis","pubKeyHash","p2pkhScript","data","map","vout","toBinary","e","reject","signData","tx","signer","_exit","_temp2","_result","idKey","keyHost","_sigma$sign","Sigma","sign","signedTx","_temp","authToken","sigma","remoteSign","_ref","_catch","createOrdinals","config","_step","utxos","destinations","paymentPk","changeAddress","_config$satsPerKb","satsPerKb","_config$additionalPay","additionalPayments","modelOrFee","SatoshisPerKilobyte","Transaction","_iterator","_createForOfIteratorHelperLoose","done","unlock","addInput","warn","_step2","_iterator2","destination","inscription","addOutput","lockingScript","dataB64","contentType","_iterator3","_step3","p","amount","to","totalInput","reduce","sum","BigInt","totalOutput","outputs","output","computeFee","estimatedFee","fee","payChange","hash","spentOutpoints","changeScript","toAddress","changeOutput","change","_signData","sendOrdinals","enforceUniformSend","ordinals","ordUtxo","ordPk","push","_destination$inscript","_destination$inscript2","s","_step4","_iterator4","paymentUtxos","paymentUtxo","totalSatsIn","total","totalSatsOut","out","changeOut","_settle","pact","state","_Pact","o","v","bind","observer","onFulfilled","onRejected","result","_this","_isSettledPact","thenable","TokenType","sendUtxos","_interrupt","payments","DEFAULT_SAT_PER_KB","_config$changeAddress","payment","sendTxOut","_forOf","_modelOrFee$computeFe","transferOrdTokens","protocol","tokenID","inputTokens","distributions","tokenChangeAddress","changeAmt","totalAmtIn","totalAmtOut","every","token","id","amt","changeDistribution","dest","transferInscription","op","BSV20","tick","BSV21","JSON","stringify","sendOrdinalsConfig","tokenChange","tokenChangeVout","findIndex","d"],"mappings":"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"}