{"version":3,"file":"index.module.js","sources":["../src/utils/strings.ts","../src/index.ts"],"sourcesContent":["const toHex = (asciiStr: string) => {\r\n  var arr1: string[] = [];\r\n  for (var n = 0, l = asciiStr.length; n < l; n++) {\r\n    var hex = Number(asciiStr.charCodeAt(n)).toString(16);\r\n    arr1.push(hex);\r\n  }\r\n  return arr1.join(\"\");\r\n};\r\n\r\nconst toAscii = (hexStr: string) => {\r\n  var hex, i;\r\n\r\n  var result = \"\";\r\n  for (i = 0; i < hexStr.length; i++) {\r\n    hex = hexStr.charCodeAt(i).toString(16);\r\n    result += (\"000\" + hex).slice(-4);\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nexport { toHex, toAscii };\r\n","import { MAP } from \"bmapjs/types/protocols/map\";\r\nimport {\r\n  P2PKHAddress,\r\n  PrivateKey,\r\n  Script,\r\n  SigHash,\r\n  Transaction,\r\n  TxIn,\r\n  TxOut,\r\n} from \"bsv-wasm-web\";\r\nimport { Buffer } from \"buffer\";\r\nimport * as dotenv from \"dotenv\";\r\nimport { Sigma } from \"sigma-protocol\";\r\nimport { toHex } from \"./utils/strings\";\r\n\r\ndotenv.config();\r\n\r\nexport type Utxo = {\r\n  satoshis: number;\r\n  txid: string;\r\n  vout: number;\r\n  script: string;\r\n};\r\n\r\nexport type Inscription = {\r\n  dataB64: string;\r\n  contentType: string;\r\n};\r\n\r\nconst MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\r\n\r\nconst buildInscription = (\r\n  destinationAddress: P2PKHAddress,\r\n  b64File: string,\r\n  mediaType: string,\r\n  metaData?: MAP\r\n): Script => {\r\n  const ordHex = toHex(\"ord\");\r\n  const fsBuffer = Buffer.from(b64File, \"base64\");\r\n  const fireShardHex = fsBuffer.toString(\"hex\");\r\n  const fireShardMediaType = toHex(mediaType);\r\n\r\n  // Create ordinal output and inscription in a single output\r\n  let inscriptionAsm = `${destinationAddress\r\n    .get_locking_script()\r\n    .to_asm_string()} OP_0 OP_IF ${ordHex} OP_1 ${fireShardMediaType} OP_0 ${fireShardHex} OP_ENDIF`;\r\n\r\n  // MAP.app and MAP.type keys are required\r\n  if (metaData && metaData?.app && metaData?.type) {\r\n    const mapPrefixHex = toHex(MAP_PREFIX);\r\n    const mapCmdValue = toHex(\"SET\");\r\n    inscriptionAsm = `${inscriptionAsm} OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\r\n\r\n    for (const [key, value] of Object.entries(metaData)) {\r\n      if (key !== \"cmd\") {\r\n        inscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\r\n          value as string\r\n        )}`;\r\n      }\r\n    }\r\n  }\r\n\r\n  return Script.from_asm_string(inscriptionAsm);\r\n};\r\n\r\nconst createOrdinal = async (\r\n  utxo: Utxo,\r\n  destinationAddress: string,\r\n  paymentPk: PrivateKey,\r\n  changeAddress: string,\r\n  satPerByteFee: number,\r\n  inscription: Inscription,\r\n  metaData?: MAP,\r\n  idKey?: PrivateKey\r\n): Promise<Transaction> => {\r\n  let tx = new Transaction(1, 0);\r\n\r\n  // Inputs\r\n  let utxoIn = new TxIn(\r\n    Buffer.from(utxo.txid, \"hex\"),\r\n    utxo.vout,\r\n    Script.from_asm_string(\"\")\r\n  );\r\n\r\n  tx.add_input(utxoIn);\r\n\r\n  // Outputs\r\n  const inscriptionScript = buildInscription(\r\n    P2PKHAddress.from_string(destinationAddress),\r\n    inscription.dataB64,\r\n    inscription.contentType,\r\n    metaData\r\n  );\r\n\r\n  let satOut = new TxOut(BigInt(1), inscriptionScript);\r\n  tx.add_output(satOut);\r\n\r\n  // add change\r\n  const changeaddr = P2PKHAddress.from_string(changeAddress);\r\n  const changeScript = changeaddr.get_locking_script();\r\n  let emptyOut = new TxOut(BigInt(1), changeScript);\r\n  const fee = Math.ceil(\r\n    satPerByteFee * (tx.get_size() + emptyOut.to_bytes().byteLength)\r\n  );\r\n  const change = utxo.satoshis - 1 - fee;\r\n  if (change < 0) throw new Error(\"Inadequate satoshis for fee\");\r\n  if (change > 0) {\r\n    let changeOut = new TxOut(BigInt(change), changeScript);\r\n    tx.add_output(changeOut);\r\n  }\r\n  const sig = tx.sign(\r\n    paymentPk,\r\n    SigHash.ALL | SigHash.FORKID,\r\n    0,\r\n    Script.from_asm_string(utxo.script),\r\n    BigInt(utxo.satoshis)\r\n  );\r\n\r\n  utxoIn.set_unlocking_script(\r\n    Script.from_asm_string(\r\n      `${sig.to_hex()} ${paymentPk.to_public_key().to_hex()}`\r\n    )\r\n  );\r\n\r\n  tx.set_input(0, utxoIn);\r\n\r\n  // sign tx if idKey is provided\r\n  if (idKey) {\r\n    const sigma = new Sigma(tx);\r\n    const { signedTx } = sigma.sign(idKey);\r\n    tx = signedTx;\r\n  }\r\n\r\n  return tx;\r\n};\r\n\r\nconst sendOrdinal = async (\r\n  paymentUtxo: Utxo,\r\n  ordinal: Utxo,\r\n  paymentPk: PrivateKey,\r\n  changeAddress: string,\r\n  satPerByteFee: number,\r\n  ordPk: PrivateKey,\r\n  ordDestinationAddress: string,\r\n  reinscription?: Inscription,\r\n  metaData?: MAP\r\n): Promise<Transaction> => {\r\n  let tx = new Transaction(1, 0);\r\n\r\n  let ordIn = new TxIn(\r\n    Buffer.from(ordinal.txid, \"hex\"),\r\n    ordinal.vout,\r\n    Script.from_asm_string(\"\")\r\n  );\r\n  tx.add_input(ordIn);\r\n\r\n  // Inputs\r\n  let utxoIn = new TxIn(\r\n    Buffer.from(paymentUtxo.txid, \"hex\"),\r\n    paymentUtxo.vout,\r\n    Script.from_asm_string(\"\")\r\n  );\r\n\r\n  tx.add_input(utxoIn);\r\n\r\n  let s: Script;\r\n  const destinationAddress = P2PKHAddress.from_string(ordDestinationAddress);\r\n  if (reinscription?.dataB64 && reinscription?.contentType) {\r\n    s = buildInscription(\r\n      destinationAddress,\r\n      reinscription.dataB64,\r\n      reinscription.contentType,\r\n      metaData\r\n    );\r\n  } else {\r\n    s = destinationAddress.get_locking_script();\r\n  }\r\n  let satOut = new TxOut(BigInt(1), s);\r\n  tx.add_output(satOut);\r\n\r\n  // add change\r\n  const changeaddr = P2PKHAddress.from_string(changeAddress);\r\n  const changeScript = changeaddr.get_locking_script();\r\n  let emptyOut = new TxOut(BigInt(1), changeScript);\r\n  const fee = Math.ceil(\r\n    satPerByteFee * (tx.get_size() + emptyOut.to_bytes().byteLength)\r\n  );\r\n  const change = paymentUtxo.satoshis - fee;\r\n  let changeOut = new TxOut(BigInt(change), changeScript);\r\n\r\n  tx.add_output(changeOut);\r\n\r\n  // sign ordinal\r\n  const sig = tx.sign(\r\n    ordPk,\r\n    SigHash.InputOutput,\r\n    0,\r\n    Script.from_asm_string(ordinal.script),\r\n    BigInt(ordinal.satoshis)\r\n  );\r\n\r\n  ordIn.set_unlocking_script(\r\n    Script.from_asm_string(`${sig.to_hex()} ${ordPk.to_public_key().to_hex()}`)\r\n  );\r\n\r\n  tx.set_input(0, ordIn);\r\n\r\n  // sign fee payment\r\n  const sig2 = tx.sign(\r\n    paymentPk,\r\n    SigHash.InputOutput,\r\n    1,\r\n    Script.from_asm_string(paymentUtxo.script),\r\n    BigInt(paymentUtxo.satoshis)\r\n  );\r\n\r\n  utxoIn.set_unlocking_script(\r\n    Script.from_asm_string(\r\n      `${sig2.to_hex()} ${paymentPk.to_public_key().to_hex()}`\r\n    )\r\n  );\r\n\r\n  tx.set_input(1, utxoIn);\r\n\r\n  return tx;\r\n};\r\n\r\n// sendUtxos sends p2pkh utxos to the given destinationAddress\r\nconst sendUtxos = async (\r\n  utxos: Utxo[],\r\n  paymentPk: PrivateKey,\r\n  address: P2PKHAddress,\r\n  feeSats: number\r\n): Promise<Transaction> => {\r\n  const tx = new Transaction(1, 0);\r\n\r\n  // Outputs\r\n  let inputValue = 0;\r\n  for (let u of utxos || []) {\r\n    inputValue += u.satoshis;\r\n  }\r\n  const satsIn = inputValue;\r\n  const satsOut = satsIn - feeSats;\r\n  console.log({ feeSats, satsIn, satsOut });\r\n  tx.add_output(new TxOut(BigInt(satsOut), address.get_locking_script()));\r\n\r\n  // build txins from our UTXOs\r\n  let idx = 0;\r\n  for (let u of utxos || []) {\r\n    console.log({ u });\r\n    const inx = new TxIn(\r\n      Buffer.from(u.txid, \"hex\"),\r\n      u.vout,\r\n      Script.from_asm_string(\"\")\r\n    );\r\n    console.log({ inx });\r\n    inx.set_satoshis(BigInt(u.satoshis));\r\n    tx.add_input(inx);\r\n\r\n    const sig = tx.sign(\r\n      paymentPk,\r\n      SigHash.InputOutputs,\r\n      idx,\r\n      Script.from_asm_string(u.script),\r\n      BigInt(u.satoshis)\r\n    );\r\n\r\n    inx.set_unlocking_script(\r\n      Script.from_asm_string(\r\n        `${sig.to_hex()} ${paymentPk.to_public_key().to_hex()}`\r\n      )\r\n    );\r\n\r\n    tx.set_input(idx, inx);\r\n    idx++;\r\n  }\r\n  return tx;\r\n};\r\n\r\nexport { buildInscription, createOrdinal, sendOrdinal, sendUtxos };\r\n"],"names":["toHex","asciiStr","arr1","n","l","length","hex","Number","charCodeAt","toString","push","join","dotenv","config","buildInscription","destinationAddress","b64File","mediaType","metaData","ordHex","fireShardHex","Buffer","from","fireShardMediaType","inscriptionAsm","get_locking_script","to_asm_string","app","type","_i","_Object$entries","Object","entries","_Object$entries$_i","key","value","Script","from_asm_string","createOrdinal","utxo","paymentPk","changeAddress","satPerByteFee","inscription","idKey","tx","Transaction","utxoIn","TxIn","txid","vout","add_input","inscriptionScript","P2PKHAddress","from_string","dataB64","contentType","satOut","TxOut","BigInt","add_output","changeScript","emptyOut","fee","Math","ceil","get_size","to_bytes","byteLength","change","satoshis","Error","changeOut","sig","sign","SigHash","ALL","FORKID","script","set_unlocking_script","to_hex","to_public_key","set_input","Sigma","signedTx","Promise","resolve","e","reject","sendOrdinal","paymentUtxo","ordinal","ordPk","ordDestinationAddress","reinscription","ordIn","s","InputOutput","sig2","sendUtxos","utxos","address","feeSats","_step","inputValue","_iterator","_createForOfIteratorHelperLoose","done","satsOut","console","log","satsIn","_step2","idx","_iterator2","u","inx","set_satoshis","InputOutputs"],"mappings":"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"}