{"version":3,"file":"index.module.js","sources":["../src/utils/strings.ts","../src/types.ts","../src/constants.ts","../src/templates/ordP2pkh.ts","../src/utils/utxo.ts","../src/signData.ts","../src/utils/subtypeData.ts","../src/createOrdinals.ts","../src/sendOrdinals.ts","../src/sendUtxos.ts","../src/transferOrdinals.ts","../src/validate.ts","../src/templates/ordLock.ts","../src/createListings.ts","../src/cancelListings.ts","../src/purchaseOrdListing.ts","../src/utils/paymail.ts","../src/utils/icon.ts","../src/deployBsv21.ts","../src/burnOrdinals.ts"],"sourcesContent":["/**\n * Converts a string to its hexadecimal representation\n *\n * @param {string} utf8Str - The string to convert\n * @returns {string} The hexadecimal representation of the input string\n */\nconst toHex = (utf8Str: string): string => {\n  return Buffer.from(utf8Str).toString(\"hex\");\n};\n\nexport { toHex };\n","import type { PrivateKey, Transaction } from \"@bsv/sdk\";\nimport type { AuthToken } from \"sigma-protocol\";\n\n// biome-ignore lint/complexity/noBannedTypes: Reserved for future use\ntype Signer = {};\n\nexport interface LocalSigner extends Signer {\n  idKey: PrivateKey;\n}\n\nexport interface RemoteSigner extends Signer {\n  keyHost: string;\n  authToken?: AuthToken;\n}\n\nexport type Destination = {\n  address: string;\n  inscription?: Inscription;\n};\n\n/**\n * @typedef {Object} Listing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n * @property {Utxo} listingUtxo - Utxo of the listing\n */\nexport type NewListing = {\n  payAddress: string;\n  price: number;\n  ordAddress: string;\n  listingUtxo: Utxo;\n}\n\n/**\n * @typedef {Object} ExistingListing\n * @property {string} payout - Payment output script base64 encoded\n * @property {Utxo} listingUtxo - Utxo of the listing\n */\nexport type ExistingListing = {\n  payout: string;\n  listingUtxo: Utxo;\n}\n\n/**\n * @typedef {Object} NewTokenListing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n * @property {number} amt - Number of tokens as a number. Not adjusted for decimals (library will add zeros according to dec value).\n */\nexport type NewTokenListing = {\n  payAddress: string;\n  price: number;\n  amt: number;\n  ordAddress: string;\n}\n\n/**\n * @typedef {Object} Distribution\n * @property {string} address - Destination address. Must be a Ordinals address (BSV address for recieving 1Sat ordinals tokens).\n * @property {number} amt - Number of tokens as a string, considering decimals. Not display format. Ex. 100000000 for 1 token with 8 decimal places.\n * @property {boolean} [omitMetaData] - Optional. Set to true to omit metadata from this distribution's output.\n */\nexport type Distribution = {\n  address: string;\n  amt: number;\n  omitMetaData?: boolean;\n};\n\n/**\n * @typedef {Object} Utxo\n * @property {number} satoshis - Amount in satoshis\n * @property {string} txid - Transaction id\n * @property {number} vout - Output index\n * @property {string} script - Base64 encoded locking script\n */\nexport type Utxo = {\n  satoshis: number;\n  txid: string;\n  vout: number;\n  script: string;\n};\n\n/**\n * @typedef {Object} NftUtxo\n * @property {string} collectionId - Optional. Collection id of the NFT\n * @property {string} contentType - Media type of the NFT\n * @property {string} creatorBapId - Optional. Creator BAP id of the NFT\n * @property {string} origin - Origin address of the NFT\n * @property {number} satoshis - Always 1\n */\nexport interface NftUtxo extends Utxo {\n  collectionId?: string;\n  contentType: string;\n  creatorBapId?: string;\n  origin: string;\n  satoshis: 1;\n}\n\n/**\n * @typedef {Object} TokenUtxo\n * @property {string} amt - Number of tokens as a string, adjusted for decimals. Ex. 100000000 for 1 token with 8 decimal places.\n * @property {string} id - Token id -  either tick or id depending on protocol\n * @property {string} satoshis - Always 1\n * @property {string} [payout] - Optional. Payment output script base64 encoded\n * @property {number} [price] - Optional. Listing price in satoshis\n * @property {boolean} [isListing] - Optional. True if the token is a listing\n */\nexport interface TokenUtxo extends Utxo {\n  amt: string;\n  id: string;\n  satoshis: 1;\n  payout?: string;\n  price?: number;\n  isListing?: boolean;\n}\n\nexport enum TokenSelectionStrategy {\n  SmallestFirst = \"smallest\",\n  LargestFirst = \"largest\",\n  RetainOrder = \"retain\",\n  Random = \"random\",\n}\n\nexport interface TokenSelectionOptions {\n  inputStrategy?: TokenSelectionStrategy;\n  outputStrategy?: TokenSelectionStrategy;\n}\n\nexport interface TokenSelectionResult {\n  selectedUtxos: TokenUtxo[];\n  totalSelected: bigint;\n  isEnough: boolean;\n}\n\nexport type Inscription = {\n  dataB64: string;\n  contentType: string;\n};\n\nexport type ImageContentType =\n  | \"image/png\"\n  | \"image/jpeg\"\n  | \"image/gif\"\n  | \"image/svg+xml\"\n  | \"image/webp\";\n\n/**\n * @typedef {Object} IconInscription\n * @property {string} dataB64 - Base64 encoded image data. Must be a square image.\n * @property {ImageContentType} contentType - Media type of the image\n */\nexport type IconInscription = {\n  dataB64: string;\n  contentType: ImageContentType;\n};\n\nexport type Payment = {\n  to: string;\n  amount: number;\n};\n\nexport type TokenInscription = {\n  p: \"bsv-20\";\n  amt: string;\n  op: \"transfer\" | \"mint\" | \"deploy+mint\" | \"burn\";\n  dec?: string;\n};\n\nexport interface MintTokenInscription extends TokenInscription {\n  op: \"mint\";\n}\n\nexport interface DeployMintTokenInscription extends TokenInscription {\n  op: \"deploy+mint\";\n  sym: string;\n  icon: string;\n}\n\nexport interface TransferTokenInscription extends TokenInscription {\n  p: \"bsv-20\";\n  amt: string;\n  op: \"transfer\" | \"burn\";\n}\n\nexport interface TransferBSV20Inscription extends TransferTokenInscription {\n  tick: string;\n}\n\nexport interface TransferBSV21Inscription extends TransferTokenInscription {\n  id: string;\n}\n\nexport enum TokenType {\n  BSV20 = \"bsv20\",\n  BSV21 = \"bsv21\",\n}\n\nexport type BaseResult = {\n  tx: Transaction;\n  spentOutpoints: string[];\n};\n\nexport interface ChangeResult extends BaseResult {\n  payChange?: Utxo;\n};\n\n/**\n * MAP (Magic Attribute Protocol) metadata object with stringified values for writing to the blockchain\n * @typedef {Object} MAP\n * @property {string} app - Application identifier\n * @property {string} type - Metadata type\n * @property {string} [prop] - Optional. Additional metadata properties\n */\nexport type MAP = {\n  app: string;\n  type: string;\n  [prop: string]: string;\n};\n\nexport type PreMAP = {\n  app: string;\n  type: string;\n  [prop: string]: unknown;\n  royalties?: Royalty[];\n  subTypeData?: CollectionSubTypeData | CollectionItemSubTypeData;\n};\n\nexport type CreateOrdinalsConfig = {\n  utxos: Utxo[];\n  destinations: Destination[];\n  paymentPk: PrivateKey;\n  changeAddress?: string;\n  satsPerKb?: number;\n  metaData?: PreMAP;\n  signer?: LocalSigner | RemoteSigner;\n  additionalPayments?: Payment[];\n};\n\nexport enum RoytaltyType {\n  Paymail = \"paymail\",\n  Address = \"address\",\n  Script = \"script\",\n}\n\n/**\n * Royalty object\n * @typedef {Object} Royalty\n * @property {RoytaltyType} type - Royalty type, string, one of \"paymail\", \"address\", \"script\"\n * @property {string} destination - Royalty destination\n * @property {string} percentage - Royalty percentage as a string float 0-1 (0.01 = 1%)\n */\nexport type Royalty = {\n  type: RoytaltyType;\n  destination: string;\n  percentage: string; // string float 0-1\n};\n\nexport interface CreateOrdinalsMetadata extends PreMAP {\n  type: \"ord\",\n  name: string,\n  previewUrl?: string,\n}\n\nexport interface CreateOrdinalsCollectionMetadata extends CreateOrdinalsMetadata {\n  subType: \"collection\",\n  subTypeData: CollectionSubTypeData, // JSON stringified CollectionSubTypeData\n  royalties?: Royalty[],\n};\n\nexport interface CreateOrdinalsCollectionItemMetadata extends CreateOrdinalsMetadata {\n  subType: \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n};\n\n/**\n * Configuration object for creating an ordinals collection\n * @typedef {Object} CreateOrdinalsCollectionConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collection\"\n * @property metaData.name - Collection name\n * @property metaData.subTypeData - JSON stringified CollectionSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionConfig extends CreateOrdinalsConfig {\n  metaData: CreateOrdinalsCollectionMetadata\n}\n\nexport type CollectionTraits = {\n  [trait: string]: CollectionTrait;\n};\n\nexport type CollectionTrait = {\n  values: string[];\n  occurancePercentages: string[];\n};\n\nexport type Rarity = {\n  [key: string]: string;\n}\n\nexport type RarityLabels = Rarity[]\nexport interface CollectionSubTypeData {\n  description: string;\n  quantity: number;\n  rarityLabels: RarityLabels;\n  traits: CollectionTraits;\n}\n\nexport interface CreateOrdinalsCollectionItemMetadata extends PreMAP {\n  type: \"ord\",\n  name: string,\n  subType: \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n  previewUrl?: string,\n}\n\n/**\n * Configuration object for creating an ordinals collection item\n * @typedef {Object} CreateOrdinalsCollectionItemConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection item\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collectionItem\"\n * @property metaData.name - Collection item name\n * @property metaData.subTypeData - JSON stringified CollectionItemSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionItemConfig extends CreateOrdinalsConfig {\n  metaData: CreateOrdinalsCollectionItemMetadata\n}\n\n/**\n * Subtype data for an ordinals collection item\n * @typedef {Object} CollectionItemSubTypeData\n * @property {string} collectionId - Collection id\n * @property {number} mintNumner - Mint number\n * @property {number} rank - Rank\n * @property {string} rarityLabel - Rarity label\n * @property {string} traits - traits object\n * @property {string} attachments - array of attachment objects\n */\nexport interface CollectionItemSubTypeData {\n  collectionId: string;\n  mintNumber?: number;\n  rank?: number;\n  rarityLabel?: RarityLabels;\n  traits?: CollectionItemTrait[];\n  attachments?: CollectionItemAttachment[];\n}\n\nexport type CollectionItemTrait = {\n  name: string;\n  value: string;\n  rarityLabel?: string;\n  occurancePercentrage?: string;\n};\n\nexport type CollectionItemAttachment = {\n  name: string;\n  description?: string;\n  \"content-type\": string;\n  url: string;\n}\n\nexport interface BurnMAP extends MAP {\n  type: \"ord\";\n  op: \"burn\";\n}\n\nexport type BurnOrdinalsConfig = {\n  ordPk: PrivateKey;\n  ordinals: Utxo[];\n  metaData?: BurnMAP;\n}\n\nexport type SendOrdinalsConfig = {\n  paymentUtxos: Utxo[];\n  ordinals: Utxo[];\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  destinations: Destination[];\n  changeAddress?: string;\n  satsPerKb?: number;\n  metaData?: PreMAP;\n  signer?: LocalSigner | RemoteSigner;\n  additionalPayments?: Payment[];\n  enforceUniformSend?: boolean;\n}\n\nexport type DeployBsv21TokenConfig = {\n  symbol: string;\n  decimals?: number;\n  icon: string | IconInscription;\n  utxos: Utxo[];\n  initialDistribution: Distribution;\n  paymentPk: PrivateKey;\n  destinationAddress: string;\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[];\n};\n\nexport type SendUtxosConfig = {\n  utxos: Utxo[];\n  paymentPk: PrivateKey;\n  payments: Payment[];\n  satsPerKb?: number;\n  changeAddress?: string;\n  metaData?: MAP;\n};\n\nexport interface TokenChangeResult extends ChangeResult {\n  tokenChange?: TokenUtxo[];\n}\n\n/**\n * Configuration object for token outputs\n * @typedef {Object} TokenSplitConfig\n * @property {number} outputs - Number of outputs to split the token into. Default is 1.\n * @property {number} threshold - Optional. Minimum amount of tokens per output.\n * @property {boolean} omitMetaData - Set to true to omit metadata from the token change outputs\n **/\nexport type TokenSplitConfig = {\n  outputs: number;\n  threshold?: number;\n  omitMetaData?: boolean;\n}\n\nexport enum TokenInputMode {\n  All = \"all\",\n  Needed = \"needed\",\n}\n\n/**\n * Configuration object for transferring token ordinals\n * @typedef {Object} TransferOrdTokensConfig\n * @property {TokenType} protocol - Token protocol\n * @property {string} tokenID - Token id\n * @property {number} decimals - Number of decimal places for this token.\n * @property {Utxo[]} utxos - Array of payment Utxos\n * @property {TokenUtxo[]} inputTokens - Array of TokenUtxos to be transferred\n * @property {Distribution[]} distributions - Array of Distribution objects\n * @property {PrivateKey} paymentPk - Private key of the payment address\n * @property {PrivateKey} ordPk - Private key of the ord address\n * @property {string} [changeAddress] - Optional. Address to send the change\n * @property {string} [tokenChangeAddress] - Optional. Address to send the token change\n * @property {number} [satsPerKb] - Optional. Satoshis per kilobyte\n * @property {PreMAP} [metaData] - Optional. MAP metadata object\n * @property {LocalSigner | RemoteSigner} [signer] - Optional. Signer object\n * @property {Payment[]} [additionalPayments] - Optional. Array of additional payments\n * @property {boolean} [burn] - Optional. Set to true to burn the input tokens\n * @property {TokenSplitConfig} [splitConfig] - Optional. Configuration object for splitting token change\n * @property {TokenInputMode} [tokenInputMode] - Optional. Token input mode. Default is \"needed\"\n */\nexport type TransferOrdTokensConfig = {\n  protocol: TokenType;\n  tokenID: string;\n  decimals: number;\n  utxos: Utxo[];\n  inputTokens: TokenUtxo[];\n  distributions: Distribution[];\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  inputMode?: TokenInputMode;\n  changeAddress?: string;\n  tokenChangeAddress?: string;\n  satsPerKb?: number;\n  metaData?: PreMAP;\n  signer?: LocalSigner | RemoteSigner;\n  additionalPayments?: Payment[];\n  burn?: boolean;\n  splitConfig?: TokenSplitConfig;\n  tokenInputMode?: TokenInputMode;\n}\n\nexport type CreateOrdListingsConfig = {\n  utxos: Utxo[];\n  listings: NewListing[];\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey,\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[];\n}\n\nexport type PurchaseOrdListingConfig = {\n  utxos: Utxo[];\n  paymentPk: PrivateKey;\n  listing: ExistingListing;\n  ordAddress: string;\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[],\n  royalties?: Royalty[],\n  metaData?: MAP,\n}\n\nexport type PurchaseOrdTokenListingConfig = {\n  protocol: TokenType;\n  tokenID: string;\n  utxos: Utxo[];\n  paymentPk: PrivateKey;\n  listingUtxo: TokenUtxo;\n  ordAddress: string;\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[],\n  metaData?: MAP,\n}\n\nexport type CancelOrdListingsConfig = {\n  utxos: Utxo[],\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  listingUtxos: Utxo[];\n  additionalPayments?: Payment[];\n  changeAddress?: string;\n  satsPerKb?: number;\n}\n\nexport interface CancelOrdTokenListingsConfig extends CancelOrdListingsConfig {\n  utxos: Utxo[],\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  listingUtxos: TokenUtxo[];\n  additionalPayments: Payment[];\n  changeAddress?: string;\n  satsPerKb?: number;\n  protocol: TokenType,\n  tokenID: string;\n  ordAddress?: string;\n}\n\n/**\n * Configuration object for creating a token listing\n * @typedef {Object} CreateOrdTokenListingsConfig\n * @property {Utxo[]} utxos - Array of payment Utxos\n * @property {TokenUtxo[]} inputTokens - Array of TokenUtxos to be listed\n * @property {NewTokenListing[]} listings - Array of NewTokenListings\n * @property {PrivateKey} paymentPk - Private key of the payment address\n * @property {PrivateKey} ordPk - Private key of the ord address\n * @property {string} tokenChangeAddress - Address to send the token change\n * @property {number} [satsPerKb] - Optional. Satoshis per kilobyte\n * @property {Payment[]} [additionalPayments] - Optional. Array of additional payments\n * @property {TokenType} protocol - Token protocol\n * @property {string} tokenID - Token id\n * @property {number} decimals - Number of decimal places for this token.\n */\nexport interface CreateOrdTokenListingsConfig {\n  utxos: Utxo[];\n  listings: NewTokenListing[];\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey,\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[];\n  protocol: TokenType;\n  tokenID: string;\n  decimals: number;\n  inputTokens: TokenUtxo[];\n  tokenChangeAddress: string;\n}\n\nexport const MAX_TOKEN_SUPPLY = 2n ** 64n - 1n;","export const MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\nexport const DEFAULT_SAT_PER_KB = 10;\nexport const API_HOST = \"https://ordinals.gorillapool.io/api\";","import {\n\tLockingScript,\n\tP2PKH,\n\ttype Script,\n} from \"@bsv/sdk\";\nimport type { Inscription, MAP } from \"../types\";\nimport { toHex } from \"../utils/strings\";\nimport { MAP_PREFIX } from \"../constants\";\n\n/**\n * OrdP2PKH (1Sat Ordinal + Pay To Public Key Hash) class implementing ScriptTemplate.\n *\n * This class provides methods to create an Ordinal with Pay To Public Key Hash locking and unlocking scripts. \n * It extends the standard P2PKH script template and provides a custom lock method.\n */\nexport default class OrdP2PKH extends P2PKH {\n\t/**\n\t * Creates a 1Sat Ordinal + P2PKH locking script for a given address string\n\t *\n\t * @param {string} address - An destination address for the Ordinal.\n\t * @param {Object} [inscription] - Base64 encoded file data and Content type of the file.\n\t * @param {MAP} [metaData] - (optional) MAP Metadata to be included in OP_RETURN.\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\t// unlock method inherits from p2pkh\n\tlock(\n\t\taddress: string,\n    inscription?: Inscription,\n\t\tmetaData?: MAP | undefined,\n\t): Script {\n\t\tlet ordAsm = \"\";\n\t\t// This can be omitted for reinscriptions that just update metadata\n\t\tif (inscription?.dataB64 !== undefined && inscription?.contentType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(inscription.dataB64, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(inscription.contentType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`;\n\t\t}\n\n\t\t// Create ordinal output and inscription in a single output\n\t\tconst lockingScript = new P2PKH().lock(address);\n\t\tlet inscriptionAsm = `${ordAsm ? `${ordAsm} ` : \"\"}${lockingScript.toASM()}`;\n\n\t\t// MAP.app and MAP.type keys are required\n\t\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t\t}\n\n\t\tif (metaData?.app && metaData?.type) {\n\t\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\t\tconst mapCmdValue = toHex(\"SET\");\n\t\t\tinscriptionAsm = `${inscriptionAsm ? `${inscriptionAsm} `: \"\"}OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\t\tif (key !== \"cmd\") {\n\t\t\t\t\tinscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\n\t\t\t\t\t\tvalue as string,\n\t\t\t\t\t)}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn LockingScript.fromASM(inscriptionAsm);\n\t}\n}\n","import {\n\ttype Transaction,\n\ttype UnlockingScript,\n\tfromUtxo,\n\ttype TransactionInput,\n\tUtils,\n\tP2PKH,\n  Script,\n} from \"@bsv/sdk\";\nimport { type NftUtxo, type TokenSelectionOptions, type TokenSelectionResult, TokenSelectionStrategy, TokenType, type TokenUtxo, type Utxo } from \"../types\";\nimport { API_HOST } from \"../constants\";\n\nconst { fromBase58Check } = Utils;\n\n/**\n * Converts a Utxo object with a base64 encoded script to a Utxo object with a hex encoded script\n * @param {Utxo} utxo - Utxo object with base64 encoded script\n * @param {Object} unlockScriptTemplate - Object with sign and estimateLength functions\n * @returns {TransactionInput} Utxo object with hex encoded script\n */\nexport const inputFromB64Utxo = (\n\tutxo: Utxo,\n\tunlockScriptTemplate: {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>;\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>;\n\t},\n): TransactionInput => {\n\tconst input = fromUtxo(\n\t\t{\n\t\t\t...utxo,\n\t\t\tscript: Buffer.from(utxo.script, \"base64\").toString(\"hex\"),\n\t\t},\n\t\tunlockScriptTemplate,\n\t);\n\treturn input;\n};\n\n/**\n * Fetches pay utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<Utxo[]>} Array of pay utxos\n */\nexport const fetchPayUtxos = async (address: string, scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\"): Promise<Utxo[]> => {\n\tconst payUrl = `${API_HOST}/txos/address/${address}/unspent?bsv20=false`;\n\tconsole.log({ payUrl });\n\tconst payRes = await fetch(payUrl);\n\tif (!payRes.ok) {\n\t\tthrow new Error(\"Error fetching pay utxos\");\n\t}\n\tlet payUtxos = await payRes.json();\n\t// exclude all 1 satoshi utxos\n\tpayUtxos = payUtxos.filter((u: Utxo) => u.satoshis !== 1 && !isLock(u));\n\n\t// Get pubkey hash from address\n\tconst pubKeyHash = fromBase58Check(address);\n\tconst p2pkhScript = new P2PKH().lock(pubKeyHash.data);\n\tpayUtxos = payUtxos.map((utxo: Partial<Utxo>) => ({\n\t\ttxid: utxo.txid,\n\t\tvout: utxo.vout,\n\t\tsatoshis: utxo.satoshis,\n\t\tscript: scriptEncoding === \"hex\" || scriptEncoding === \"base64\" ? Buffer.from(p2pkhScript.toBinary()).toString(scriptEncoding) : p2pkhScript.toASM(),\n\t}));\n\treturn payUtxos as Utxo[];\n};\n\n/**\n * Fetches NFT utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @param {string} [collectionId] - Optional. Collection id (collection insciprtion origin)\n * @param {number} [limit=10] - Optional. Number of utxos to fetch. Default is 10\n * @param {number} [offset=0] - Optional. Offset for fetching utxos. Default is 0\n * @param {string} [scriptEncoding=\"base64\"] - Optional. Encoding for the script. Default is base64. Options are hex, base64, or asm.\n * @returns {Promise<Utxo[]>} Array of NFT utxos\n */\nexport const fetchNftUtxos = async (\n\taddress: string,\n\tcollectionId?: string,\n\tlimit = 10,\n\toffset = 0,\n  scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\",\n): Promise<NftUtxo[]> => {\n\tlet url = `${API_HOST}/txos/address/${address}/unspent?limit=${limit}&offset=${offset}&`;\n\n\tif (collectionId) {\n\t\tconst query = {\n\t\t\tmap: {\n\t\t\t\tsubTypeData: { collectionId },\n\t\t\t},\n\t\t};\n\t\tconst b64Query = Buffer.from(JSON.stringify(query)).toString(\"base64\");\n\t\turl += `q=${b64Query}`;\n\t}\n\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching NFT utxos for ${address}`);\n\t}\n\n\t// Returns a BSV20Txo but we only need a few fields\n\tlet nftUtxos = await res.json();\n\n\t// Only include 1 satoshi outputs, non listings\n\tnftUtxos = nftUtxos.filter(\n\t\t(u: {\n\t\t\tsatoshis: number;\n\t\t\tdata: { list: { price: number; payout: string } | undefined } | null;\n\t\t}) => u.satoshis === 1 && !u.data?.list,\n\t);\n\n\tconst outpoints = nftUtxos.map(\n\t\t(utxo: { txid: string; vout: number }) => `${utxo.txid}_${utxo.vout}`,\n\t);\n\t// Fetch the scripts up to the limit\n\tconst nftRes = await fetch(`${API_HOST}/txos/outpoints?script=true`, {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t\tbody: JSON.stringify([...outpoints]),\n\t});\n\n\tif (!nftRes.ok) {\n\t\tthrow new Error(`Error fetching NFT scripts for ${address}`);\n\t}\n\n\tconst nfts = (await nftRes.json() || [])\n\n\tnftUtxos = nfts.map(\n\t\t(utxo: {\n\t\t\torigin: { outpoint: string };\n\t\t\tscript: string;\n\t\t\tvout: number;\n\t\t\ttxid: string;\n\t\t}) => {\n      let script = utxo.script;\n      if (scriptEncoding === \"hex\") {\n        script = Buffer.from(script, \"base64\").toString(\"hex\");\n      } else if (scriptEncoding === \"asm\") {\n        script = Script.fromHex(Buffer.from(script, \"base64\").toString(\"hex\")).toASM();\n      }\n\t\t\tconst nftUtxo = {\n\t\t\t\torigin: utxo.origin.outpoint,\n\t\t\t\tscript,\n\t\t\t\tvout: utxo.vout,\n\t\t\t\ttxid: utxo.txid,\n\t\t\t\tsatoshis: 1,\n\t\t\t} as NftUtxo;\n\t\t\tif (collectionId) {\n\t\t\t\tnftUtxo.collectionId = collectionId;\n\t\t\t}\n\t\t\treturn nftUtxo;\n\t\t},\n\t);\n\n\treturn nftUtxos as NftUtxo[];\n};\n\n/**\n * Fetches token utxos from the API\n * @param {TokenType} protocol - Token protocol. Either BSV20 or BSV21\n * @param {string} tokenId - Token id. Ticker for BSV20 and id (mint+deploy inscription origin) for BSV21\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<TokenUtxo[]>} Array of token utxos\n */\nexport const fetchTokenUtxos = async (\n\tprotocol: TokenType,\n\ttokenId: string,\n\taddress: string,\n): Promise<TokenUtxo[]> => {\n\tconst url = `${API_HOST}/bsv20/${address}/${protocol === TokenType.BSV20 ? \"tick\" : \"id\"}/${tokenId}?bsv20=true&listing=false`;\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching ${protocol} utxos`);\n\t}\n\n\t// returns a BSV20Txo but we only need a few fields\n\tlet tokenUtxos = await res.json();\n\n\ttokenUtxos = tokenUtxos.map((utxo: Partial<TokenUtxo>) => ({\n\t\tamt: utxo.amt,\n\t\tscript: utxo.script,\n\t\tvout: utxo.vout,\n\t\ttxid: utxo.txid,\n\t\tid: tokenId,\n\t\tsatoshis: 1,\n\t}));\n\n\treturn tokenUtxos as TokenUtxo[];\n};\n\nconst isLock = (utxo: Utxo) => {\n  return !!(utxo as unknown as { lock: { address: string, until: number } }).lock;\n}\n\n/**\n * Selects token UTXOs based on the required amount and specified strategies.\n * @param {TokenUtxo[]} tokenUtxos - Array of token UTXOs.\n * @param {number} requiredAmount - Required amount in tokens (displayed amount).\n * @param {number} decimals - Number of decimal places for the token.\n * @param {TokenSelectionOptions} [options={}] - Options for token selection.\n * @returns {TokenSelectionResult} Selected token UTXOs and total selected amount.\n */\nexport const selectTokenUtxos = (\n  tokenUtxos: TokenUtxo[],\n  requiredAmount: number,\n  decimals: number,\n  options: TokenSelectionOptions = {}\n): TokenSelectionResult => {\n  const {\n    inputStrategy = TokenSelectionStrategy.RetainOrder,\n    outputStrategy = TokenSelectionStrategy.RetainOrder,\n  } = options;\n\n  const requiredAmountBigInt = BigInt(Math.floor(requiredAmount * 10 ** decimals));\n\n  // Sort the UTXOs based on the input strategy\n  const sortedUtxos = [...tokenUtxos].sort((a, b) => {\n    if (inputStrategy === TokenSelectionStrategy.RetainOrder) return 0;\n    const amtA = BigInt(a.amt);\n    const amtB = BigInt(b.amt);\n\n    switch (inputStrategy) {\n      case TokenSelectionStrategy.SmallestFirst:\n        return Number(amtA - amtB);\n      case TokenSelectionStrategy.LargestFirst:\n        return Number(amtB - amtA);\n      case TokenSelectionStrategy.Random:\n        return Math.random() - 0.5;\n      default:\n        return 0;\n    }\n  });\n\n  let totalSelected = 0n;\n  const selectedUtxos: TokenUtxo[] = [];\n\n  for (const utxo of sortedUtxos) {\n    selectedUtxos.push(utxo);\n    totalSelected += BigInt(utxo.amt);\n\n    if (totalSelected >= requiredAmountBigInt && requiredAmountBigInt > 0n) {\n      break;\n    }\n  }\n\n  // Sort the selected UTXOs based on the output strategy\n  if (outputStrategy !== TokenSelectionStrategy.RetainOrder) {\n    selectedUtxos.sort((a, b) => {\n      const amtA = BigInt(a.amt);\n      const amtB = BigInt(b.amt);\n\n      switch (outputStrategy) {\n        case TokenSelectionStrategy.SmallestFirst:\n          return Number(amtA - amtB);\n        case TokenSelectionStrategy.LargestFirst:\n          return Number(amtB - amtA);\n        case TokenSelectionStrategy.Random:\n          return Math.random() - 0.5;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  return {\n    selectedUtxos,\n    totalSelected,\n    isEnough: totalSelected >= requiredAmountBigInt\n  };\n};","import type { Transaction } from \"@bsv/sdk\";\nimport { Sigma } from \"sigma-protocol\";\nimport type { LocalSigner, RemoteSigner } from \"./types\";\n\n/**\n * Signs data in the transaction with Sigma protocol\n * @param {Transaction} tx - Transaction to sign\n * @param {LocalSigner | RemoteSigner} signer - Local or remote signer (used for data signature)\n * @returns {Transaction} Transaction with signed data\n */\nexport const signData = async (\n\ttx: Transaction,\n\tsigner: LocalSigner | RemoteSigner,\n): Promise<Transaction> => {\n\t// Sign tx if idKey or remote signer like starfish/tokenpass\n\tconst idKey = (signer as LocalSigner)?.idKey;\n\tconst keyHost = (signer as RemoteSigner)?.keyHost;\n\n\tif (idKey) {\n\t\tconst sigma = new Sigma(tx);\n\t\tconst { signedTx } = sigma.sign(idKey);\n\t\treturn signedTx;\n\t}\n\tif (keyHost) {\n\t\tconst authToken = (signer as RemoteSigner)?.authToken;\n\t\tconst sigma = new Sigma(tx);\n\t\ttry {\n\t\t\tconst { signedTx } = await sigma.remoteSign(keyHost, authToken);\n\t\t\treturn signedTx;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthrow new Error(`Remote signing to ${keyHost} failed`);\n\t\t}\n\t}\n\tthrow new Error(\"Signer must be a LocalSigner or RemoteSigner\");\n};\n","import type { MAP, PreMAP } from \"../types\";\n\nconst stringifyMetaData = (metaData?: PreMAP): MAP | undefined => {\n  if (!metaData) return undefined;\n\tconst result: MAP = {\n\t\tapp: metaData.app,\n\t\ttype: metaData.type,\n\t};\n\n\tfor (const [key, value] of Object.entries(metaData)) {\n\t\tif (value !== undefined) {\n\t\t\tif (typeof value === \"string\") {\n\t\t\t\tresult[key] = value;\n\t\t\t} else if (Array.isArray(value) || typeof value === \"object\") {\n\t\t\t\tresult[key] = JSON.stringify(value);\n\t\t\t} else {\n\t\t\t\tresult[key] = String(value);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\nexport default stringifyMetaData;\n","import { Transaction, SatoshisPerKilobyte, P2PKH, Script, Utils } from \"@bsv/sdk\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n\tUtxo,\n\tCreateOrdinalsConfig,\n\tCreateOrdinalsCollectionConfig,\n\tCreateOrdinalsCollectionItemConfig,\n  ChangeResult,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Creates a transaction with inscription outputs\n * @param {CreateOrdinalsConfig | CreateOrdinalsCollectionConfig | CreateOrdinalsCollectionItemConfig} config - Configuration object for creating ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {string} config.changeAddress - Optional. Address to send change to. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Local or remote signer (used for data signature)\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<ChangeResult>} Transaction with inscription outputs\n */\nexport const createOrdinals = async (\n\tconfig:\n\t\t| CreateOrdinalsConfig\n\t\t| CreateOrdinalsCollectionConfig\n\t\t| CreateOrdinalsCollectionItemConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tutxos,\n\t\tdestinations,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t} = config;\n\t\n\t// Warn if creating many inscriptions at once\n\tif (destinations.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Outputs\n\t// Add inscription outputs\n\tfor (const destination of destinations) {\n\t\tif (!destination.inscription) {\n\t\t\tthrow new Error(\"Inscription is required for all destinations\");\n\t\t}\n\n\t\t// remove any undefined fields from metadata\n\t\tif (metaData) {\n\t\t\tfor(const key of Object.keys(metaData)) {\n\t\t\t\tif (metaData[key] === undefined) {\n\t\t\t\t\tdelete metaData[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription,\n\t\t\t\tstringifyMetaData(metaData),\n\t\t\t),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\tlet payChange: Utxo | undefined;\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\n\tif(signer) {\n\t\tconst utxo = utxos.pop() as Utxo\n\t\ttx.addInput(inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t)));\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\ttx = await signData(tx, signer);\n\t}\n\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to create ordinals. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\tScript,\n\ttype TransactionOutput,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type { SendOrdinalsConfig, Utxo, ChangeResult } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Sends ordinals to the given destinations\n * @param {SendOrdinalsConfig} config - Configuration object for sending ordinals\n * @param {Utxo[]} config.paymentUtxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.ordinals - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {string} [config.changeAddress] - Optional. Address to send change to, if any. If not provided, defaults to paymentPk address\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} [config.signer] - Optional. Signer object to sign the transaction\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to include in the transaction\n * @param {boolean} [config.enforceUniformSend] - Optional. Default: true. Enforce that the number of destinations matches the number of ordinals being sent. Sending ordinals requires a 1:1 mapping of destinations to ordinals. This is only used for sub-protocols like BSV21 that manage tokens without sending the inscriptions directly.\n * @returns {Promise<ChangeResult>} Transaction, spent outpoints, and change utxo\n */\nexport const sendOrdinals = async (\n\tconfig: SendOrdinalsConfig,\n): Promise<ChangeResult> => {\n\tif (!config.satsPerKb) {\n\t\tconfig.satsPerKb = DEFAULT_SAT_PER_KB;\n\t}\n\tif (!config.additionalPayments) {\n\t\tconfig.additionalPayments = [];\n\t}\n\tif (config.enforceUniformSend === undefined) {\n\t\tconfig.enforceUniformSend = true;\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(config.satsPerKb);\n\tlet tx = new Transaction();\n\tconst spentOutpoints: string[] = [];\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of config.ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(\n\t\t\tordUtxo,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tconfig.ordPk, \n\t\t\t\t\"all\",\n\t\t\t\ttrue, \n\t\t\t\tordUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(ordUtxo.script, 'base64'))\n\t\t\t),\n\t\t);\n\t\tspentOutpoints.push(`${ordUtxo.txid}_${ordUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// check that ordinals coming in matches ordinals going out if supplied\n\tif (\n\t\tconfig.enforceUniformSend &&\n\t\tconfig.destinations.length !== config.ordinals.length\n\t) {\n\t\tthrow new Error(\n\t\t\t\"Number of destinations must match number of ordinals being sent\",\n\t\t);\n\t}\n\n\t// Add ordinal outputs\n\tfor (const destination of config.destinations) {\n\t\tlet s: Script;\n\t\tif (\n\t\t\tdestination.inscription?.dataB64 &&\n\t\t\tdestination.inscription?.contentType\n\t\t) {\n\t\t\ts = new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription,\n\t\t\t\tstringifyMetaData(config.metaData),\n\t\t\t);\n\t\t} else {\n\t\t\ts = new P2PKH().lock(destination.address);\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: s,\n\t\t});\n\t}\n\n  \n\t// Add additional payments if any\n\tfor (const p of config.additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n  // add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = config.changeAddress || config.paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of config.paymentUtxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tconfig.paymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\tspentOutpoints.push(`${utxo.txid}_${utxo.vout}`);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (totalSatsIn < totalSatsOut) {\n\t\tthrow new Error(\"Not enough ordinals to send\");\n\t}\n\n\tif (config.signer) {\n\t\ttx = await signData(tx, config.signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChange,\n\t};\n};\n","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype TransactionOutput,\n\tUtils,\n\tScript,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type { ChangeResult, SendUtxosConfig, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\n\n/**\n * Sends utxos to the given destination\n * @param {SendUtxosConfig} config - Configuration object for sending utxos\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {Payment[]} config.payments - Array of payments with addresses and amounts\n * @param {number} [config.satsPerKb] - (Optional) Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {string} [config.changeAddress] - (Optional) Address to send change to. If not provided, defaults to paymentPk address\n * @param {string} [config.metaData] - (Optional) Metadata to include in OP_RETURN of the payment output\n * @returns {Promise<ChangeResult>} Transaction with utxo outputs\n */\nexport const sendUtxos = async (\n\tconfig: SendUtxosConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tpayments,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tchangeAddress = paymentPk.toAddress().toString(),\n    metaData,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\t// Outputs\n\tfor (const payment of payments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new OrdP2PKH().lock(payment.to, undefined, metaData),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + (out.satoshis || 0),\n\t\t0,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\ttx.addInput(input);\n\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + fee) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + fee) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to send. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChange: Utxo | undefined;\n\tif (totalSatsIn > totalSatsOut + fee) {\n\t\t// Change\n\t\tconst changeScript = new P2PKH().lock(changeAddress);\n\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t} else if (totalSatsIn < totalSatsOut + fee) {\n\t\tconsole.log(\"No change needed\");\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\t\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\tP2PKH,\n\ttype PrivateKey,\n\tSatoshisPerKilobyte,\n\tScript,\n\tTransaction,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport {\n\tTokenType,\n\ttype TokenUtxo,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferOrdTokensConfig,\n\ttype TokenChangeResult,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n\tTokenInputMode,\n\ttype TokenSplitConfig,\n\ttype PreMAP,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Transfer tokens to a destination\n * @param {TransferOrdTokensConfig} config - Configuration object for transferring tokens\n * @param {TokenType} config.protocol - Token protocol. Must be TokenType.BSV20 or TokenType.BSV21\n * @param {string} config.tokenID - Token ID. Either the tick or id value depending on the protocol\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {TokenUtxo[]} config.inputTokens - Token utxos to spend\n * @param {Distribution[]} config.distributions - Array of destinations with addresses and amounts\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {decimals} config.decimals - Number of decimal places for the token\n * @param {string} [config.changeAddress] - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {string} [config.tokenChangeAddress] - Optional. Address to send token change to, if any. If not provided, defaults to ordPk address\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} [config.signer] - Optional. Signer object to sign the transaction\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to include in the transaction\n * @param {TokenInputMode} [config.tokenInputMode] - Optional. \"all\" or \"needed\". Default is \"needed\"\n * @param {TokenSplitConfig} [config.tokenSplitConfig] - Optional. Configuration object for splitting token change\n * @param {burn} [config.burn] - Optional. Set to true to burn the tokens.\n * @returns {Promise<TokenChangeResult>} Transaction with token transfer outputs\n */\nexport const transferOrdTokens = async (\n\tconfig: TransferOrdTokensConfig,\n): Promise<TokenChangeResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tinputTokens,\n\t\tdistributions,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tchangeAddress,\n\t\ttokenChangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tdecimals,\n\t\tadditionalPayments = [],\n\t\tburn = false,\n\t\ttokenInputMode = TokenInputMode.Needed,\n\t\tsplitConfig = {\n\t\t\toutputs: 1,\n\t\t\tomitMetaData: false,\n\t\t},\n\t} = config;\n\n\t// Ensure these inputs are for the expected token\n\tif (!inputTokens.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\t// calculate change amount\n\tlet changeAmt = 0n;\n\tlet totalAmtIn = 0n;\n\tlet totalAmtOut = 0n;\n\tconst totalAmtNeeded = distributions.reduce(\n\t\t(acc, dist) => acc + BigInt(dist.amt * 10 ** decimals),\n\t\t0n,\n\t);\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Handle token inputs based on tokenInputMode\n\tlet tokensToUse: TokenUtxo[];\n\tif (tokenInputMode === TokenInputMode.All) {\n\t\ttokensToUse = inputTokens;\n\t\ttotalAmtIn = inputTokens.reduce(\n\t\t\t(acc, token) => acc + BigInt(token.amt),\n\t\t\t0n,\n\t\t);\n\t} else {\n\t\ttokensToUse = [];\n\t\tfor (const token of inputTokens) {\n\t\t\ttokensToUse.push(token);\n\t\t\ttotalAmtIn += BigInt(token.amt);\n\t\t\tif (totalAmtIn >= totalAmtNeeded) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (totalAmtIn < totalAmtNeeded) {\n\t\t\tthrow new Error(\"Not enough tokens to satisfy the transfer amount\");\n\t\t}\n\t}\n\n\tfor (const token of tokensToUse) {\n\t\tconst inputScriptBinary = Utils.toArray(token.script, \"base64\");\n\t\tconst inputScript = Script.fromBinary(inputScriptBinary);\n\t\ttx.addInput(\n\t\t\tinputFromB64Utxo(\n\t\t\t\ttoken,\n\t\t\t\tnew OrdP2PKH().unlock(ordPk, \"all\", true, token.satoshis, inputScript),\n\t\t\t),\n\t\t);\n\t}\n\n\t// remove any undefined fields from metadata\n\tif (metaData) {\n\t\tfor (const key of Object.keys(metaData)) {\n\t\t\tif (metaData[key] === undefined) {\n\t\t\t\tdelete metaData[key];\n\t\t\t}\n\t\t}\n\t}\n\n\t// build destination inscriptions\n\tfor (const dest of distributions) {\n\t\tconst bigAmt = BigInt(dest.amt * 10 ** decimals);\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: burn ? \"burn\" : \"transfer\",\n\t\t\tamt: bigAmt.toString(),\n\t\t};\n\t\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\ttick: tokenID,\n\t\t\t} as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\tid: tokenID,\n\t\t\t} as TransferBSV21Inscription;\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid protocol\");\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdest.address,\n\t\t\t\t{\n\t\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\t\t\tcontentType: \"application/bsv-20\",\n\t\t\t\t},\n\t\t\t\t// when present, include metadata on each distribution if omit is not specified\n\t\t\t\tdest.omitMetaData ? undefined : stringifyMetaData(metaData),\n\t\t\t),\n\t\t});\n\t\ttotalAmtOut += bigAmt;\n\t}\n\n\tchangeAmt = totalAmtIn - totalAmtOut;\n\tconsole.log({ changeAmt, totalAmtIn, totalAmtOut });\n\t// check that you have enough tokens to send and return change\n\tif (changeAmt < 0n) {\n\t\tthrow new Error(\"Not enough tokens to send\");\n\t}\n\n\tlet tokenChange: TokenUtxo[] = [];\n\tif (changeAmt > 0n) {\n\t\ttokenChange = splitChangeOutputs(\n\t\t\ttx,\n\t\t\tchangeAmt,\n\t\t\tprotocol,\n\t\t\ttokenID,\n\t\t\ttokenChangeAddress || ordPk.toAddress().toString(),\n\t\t\tordPk,\n\t\t\tmetaData,\n\t\t\tsplitConfig,\n\t\t);\n\t}\n\t// if (changeAmt > 0n) {\n\t//   tokenChange = splitChangeOutputs(\n\t//     tx,\n\t//     inputTokens.length,\n\t//     changeAmt,\n\t//     protocol,\n\t//     tokenID,\n\t//     tokenChangeAddress || ordPk.toAddress().toString(),\n\t//     ordPk,\n\t//     metaData,\n\t//     splitConfig,\n\t//   );\n\t// }\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo,\n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpaymentPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, \"base64\")),\n\t\t\t),\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to transfer tokens. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\tif (signer) {\n\t\ttx = await signData(tx, signer);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// assign txid to tokenChange outputs\n\tconst txid = tx.id(\"hex\") as string;\n\tfor (const change of tokenChange) {\n\t\tchange.txid = txid;\n\t}\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t\ttokenChange,\n\t};\n};\n\n// const splitChangeOutputs = (\n//   tx: Transaction,\n//   numTokenInputs: number,\n//   changeAmt: bigint,\n//   protocol: TokenType,\n//   tokenID: string,\n//   tokenChangeAddress: string,\n//   ordPk: PrivateKey,\n//   metaData: PreMAP | undefined,\n//   splitConfig: TokenSplitConfig\n// ): TokenUtxo[] => {\n//   const tokenChanges: TokenUtxo[] = [];\n//   const shouldSplit = splitConfig.threshold === undefined || numTokenInputs <= BigInt(splitConfig.threshold);\n//   const splitOutputs = shouldSplit ? splitConfig.outputs : 1;\n//   const baseChangeAmount = changeAmt / BigInt(splitOutputs);\n//   let remainder = changeAmt % BigInt(splitOutputs);\n\n//   for (let i = 0; i < splitOutputs; i++) {\n//     let splitAmount = baseChangeAmount;\n//     if (remainder > 0n) {\n//       splitAmount += 1n;\n//       remainder -= 1n;\n//     }\n\n//     const transferInscription: TransferTokenInscription = {\n//       p: \"bsv-20\",\n//       op: \"transfer\",\n//       amt: splitAmount.toString(),\n//     };\n//     let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n//     if (protocol === TokenType.BSV20) {\n//       inscription = {\n//         ...transferInscription,\n//         tick: tokenID,\n//       } as TransferBSV20Inscription;\n//     } else if (protocol === TokenType.BSV21) {\n//       inscription = {\n//         ...transferInscription,\n//         id: tokenID,\n//       } as TransferBSV21Inscription;\n//     } else {\n//       throw new Error(\"Invalid protocol\");\n//     }\n\n//     const lockingScript = new OrdP2PKH().lock(\n//       tokenChangeAddress || ordPk.toAddress().toString(),\n//       {\n//         dataB64: Buffer.from(JSON.stringify(inscription)).toString('base64'),\n//         contentType: \"application/bsv-20\",\n//       },\n//       splitConfig.omitMetaData ? undefined : stringifyMetaData(metaData)\n//     );\n\n//     const vout = tx.outputs.length;\n//     tx.addOutput({ lockingScript, satoshis: 1 });\n//     tokenChanges.push({\n//       id: tokenID,\n//       satoshis: 1,\n//       script: Buffer.from(lockingScript.toBinary()).toString(\"base64\"),\n//       txid: \"\",\n//       vout,\n//       amt: splitAmount.toString(),\n//     });\n//   }\n\n//   return tokenChanges;\n// }\n\nconst splitChangeOutputs = (\n\ttx: Transaction,\n\tchangeAmt: bigint,\n\tprotocol: TokenType,\n\ttokenID: string,\n\ttokenChangeAddress: string,\n\tordPk: PrivateKey,\n\tmetaData: PreMAP | undefined,\n\tsplitConfig: TokenSplitConfig,\n): TokenUtxo[] => {\n\tconst tokenChanges: TokenUtxo[] = [];\n\tconst threshold = BigInt(splitConfig.threshold || 0);\n\tconst maxOutputs = splitConfig.outputs;\n\n\tlet splitOutputs = 1;\n\tif (threshold > 0n) {\n\t\tsplitOutputs = Number(changeAmt / threshold);\n\t\tsplitOutputs = Math.min(splitOutputs, maxOutputs);\n\t\tsplitOutputs = Math.max(splitOutputs, 1);\n\t}\n\n\tconst baseChangeAmount = changeAmt / BigInt(splitOutputs);\n\tlet remainder = changeAmt % BigInt(splitOutputs);\n\n\tfor (let i = 0; i < splitOutputs; i++) {\n\t\tlet splitAmount = baseChangeAmount;\n\t\tif (remainder > 0n) {\n\t\t\tsplitAmount += 1n;\n\t\t\tremainder -= 1n;\n\t\t}\n\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: \"transfer\",\n\t\t\tamt: splitAmount.toString(),\n\t\t};\n\t\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\ttick: tokenID,\n\t\t\t} as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\tid: tokenID,\n\t\t\t} as TransferBSV21Inscription;\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid protocol\");\n\t\t}\n\n\t\tconst lockingScript = new OrdP2PKH().lock(\n\t\t\ttokenChangeAddress || ordPk.toAddress().toString(),\n\t\t\t{\n\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\t\tcontentType: \"application/bsv-20\",\n\t\t\t},\n\t\t\tsplitConfig.omitMetaData ? undefined : stringifyMetaData(metaData),\n\t\t);\n\n\t\tconst vout = tx.outputs.length;\n\t\ttx.addOutput({ lockingScript, satoshis: 1 });\n\t\ttokenChanges.push({\n\t\t\tid: tokenID,\n\t\t\tsatoshis: 1,\n\t\t\tscript: Buffer.from(lockingScript.toBinary()).toString(\"base64\"),\n\t\t\ttxid: \"\",\n\t\t\tvout,\n\t\t\tamt: splitAmount.toString(),\n\t\t});\n\t}\n\n\treturn tokenChanges;\n};\n","import type { CollectionItemSubTypeData, CollectionSubTypeData } from \"./types\";\n\n/**\n * Validates sub type data\n * @param {string} subType - Sub type of the ordinals token\n * @param {string} subTypeData - Sub type data of the ordinals token\n * @returns {Error | undefined} Error if validation fails, undefined if validation passes\n */\nexport const validateSubTypeData = (\n  subType: \"collection\" | \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData | CollectionSubTypeData,\n): Error | undefined => {\n  try {\n    if (subType === \"collection\") {\n      const collectionData = subTypeData as CollectionSubTypeData;\n      if (!collectionData.description) {\n        return new Error(\"Collection description is required\");\n      }\n      if (!collectionData.quantity) {\n        return new Error(\"Collection quantity is required\");\n      }\n      if (collectionData.rarityLabels) {\n        if (!Array.isArray(collectionData.rarityLabels)) {\n          return new Error(\"Rarity labels must be an array\");\n        }\n        // make sure keys and values are strings\n        if (!collectionData.rarityLabels.every((label) => {\n          return Object.values(label).every(value => typeof value === 'string');\n        })) {\n          return new Error(`Invalid rarity labels ${collectionData.rarityLabels}`);\n        }\n      }\n      if (collectionData.traits ) {\n        if (typeof collectionData.traits !== \"object\") {\n        return new Error(\"Collection traits must be an object\");\n        }\n        if (collectionData.traits && !Object.keys(collectionData.traits).every(key => typeof key === 'string' && typeof collectionData.traits[key] === 'object')) {\n          return new Error(\"Collection traits must be a valid CollectionTraits object\");\n        }\n      }\n    }\n    if (subType === \"collectionItem\") {\n      const itemData = subTypeData as CollectionItemSubTypeData;\n      if (!itemData.collectionId) {\n        return new Error(\"Collection id is required\");\n      }\n      if (!itemData.collectionId.includes(\"_\")) {\n        return new Error(\"Collection id must be a valid outpoint\");\n      }\n      if (itemData.collectionId.split(\"_\")[0].length !== 64) {\n        return new Error(\"Collection id must contain a valid txid\");\n      }\n      if (Number.isNaN(Number.parseInt(itemData.collectionId.split(\"_\")[1]))) {\n        return new Error(\"Collection id must contain a valid vout\");\n      }\n\n      if (itemData.mintNumber && typeof itemData.mintNumber !== \"number\") {\n        return new Error(\"Mint number must be a number\");\n      }\n      if (itemData.rank && typeof itemData.rank !== \"number\") {\n        return new Error(\"Rank must be a number\");\n      }\n      if (itemData.rarityLabel && typeof itemData.rarityLabel !== \"string\") {\n        return new Error(\"Rarity label must be a string\");\n      }\n      if (itemData.traits && typeof itemData.traits !== \"object\") {\n        return new Error(\"Traits must be an object\");\n      }\n      if (itemData.attachments && !Array.isArray(itemData.attachments)) {\n        return new Error(\"Attachments must be an array\");\n      }\n    }\n    return undefined;\n  } catch (error) {\n    return new Error(\"Invalid JSON data\");\n  }\n};","import {\n\tBigNumber,\n\ttype LockingScript,\n\tOP,\n\tP2PKH,\n\ttype PrivateKey,\n\tScript,\n\ttype Transaction,\n\tTransactionSignature,\n\tUnlockingScript,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { toHex } from \"../utils/strings\";\nimport type { Inscription } from \"../types\";\n\nexport const oLockPrefix =\n\t\"2097dfd76851bf465e8f715593b217714858bbe9570ff3bd5e33840a34e20ff0262102ba79df5f8ae7604a9830f03c7933028186aede0675a16f025dc4f8be8eec0382201008ce7480da41702918d1ec8e6849ba32b4d65b1e40dc669c31a1e6306b266c0000\";\nexport const oLockSuffix =\n\t\"615179547a75537a537a537a0079537a75527a527a7575615579008763567901c161517957795779210ac407f0e4bd44bfc207355a778b046225a7068fc59ee7eda43ad905aadbffc800206c266b30e6a1319c66dc401e5bd6b432ba49688eecd118297041da8074ce081059795679615679aa0079610079517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01007e81517a75615779567956795679567961537956795479577995939521414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff00517951796151795179970079009f63007952799367007968517a75517a75517a7561527a75517a517951795296a0630079527994527a75517a6853798277527982775379012080517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01205279947f7754537993527993013051797e527e54797e58797e527e53797e52797e57797e0079517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a756100795779ac517a75517a75517a75517a75517a75517a75517a75517a75517a7561517a75517a756169587951797e58797eaa577961007982775179517958947f7551790128947f77517a75517a75618777777777777777777767557951876351795779a9876957795779ac777777777777777767006868\";\n\n/**\n * OrdLock class implementing ScriptTemplate.\n *\n * This class provides methods for interacting with OrdinalLock contract \n */\nexport default class OrdLock {\n\t/**\n\t * Creates a 1Sat Ordinal Lock script\n\t *\n\t * @param {string} ordAddress - An address which can cancel listing.\n\t * @param {string} payAddress - Address which is paid on purchase\n\t * @param {number} price - Listing price in satoshis\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\tlock(\n\t\tordAddress: string,\n\t\tpayAddress: string,\n\t\tprice: number,\n\t\tinscription?: Inscription,\n\t): Script {\n\t\tconst cancelPkh = Utils.fromBase58Check(ordAddress).data as number[];\n\t\tconst payPkh = Utils.fromBase58Check(payAddress).data as number[];\n\n\t\tlet script = new Script()\n\t\tif (inscription?.dataB64 !== undefined && inscription?.contentType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(inscription.dataB64, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(inscription.contentType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tscript = Script.fromASM(`OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`);\n\t\t}\n\n\t\treturn script.writeScript(Script.fromHex(oLockPrefix))\n\t\t\t.writeBin(cancelPkh)\n\t\t\t.writeBin(OrdLock.buildOutput(price, new P2PKH().lock(payPkh).toBinary()))\n\t\t\t.writeScript(Script.fromHex(oLockSuffix))\n\t}\n\n\tcancelListing(\n\t\tprivateKey: PrivateKey,\n\t\tsignOutputs: 'all' | 'none' | 'single' = 'all',\n\t\tanyoneCanPay = false,\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: () => Promise<number>\n\t} {\n\t\tconst p2pkh = new P2PKH().unlock(privateKey, signOutputs, anyoneCanPay, sourceSatoshis, lockingScript)\n\t\treturn {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await p2pkh.sign(tx, inputIndex)).writeOpCode(OP.OP_1)\n\t\t\t},\n\t\t\testimateLength: async () => {\n\t\t\t\treturn 107\n\t\t\t}\n\t\t}\n\t}\n\n\tpurchaseListing(\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>\n\t} {\n\t\tconst purchase = {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\tif (tx.outputs.length < 2) {\n\t\t\t\t\tthrow new Error(\"Malformed transaction\")\n\t\t\t\t}\n\t\t\t\tconst script = new UnlockingScript()\n\t\t\t\t\t.writeBin(OrdLock.buildOutput(\n\t\t\t\t\t\ttx.outputs[0].satoshis || 0,\n\t\t\t\t\t\ttx.outputs[0].lockingScript.toBinary()\n\t\t\t\t\t))\n\t\t\t\tif (tx.outputs.length > 2) {\n\t\t\t\t\tconst writer = new Utils.Writer()\n\t\t\t\t\tfor (const output of tx.outputs.slice(2)) {\n\t\t\t\t\t\twriter.write(OrdLock.buildOutput(output.satoshis || 0, output.lockingScript.toBinary()))\n\t\t\t\t\t}\n\t\t\t\t\tscript.writeBin(writer.toArray())\n\t\t\t\t} else {\n\t\t\t\t\tscript.writeOpCode(OP.OP_0)\n\t\t\t\t}\n\n\t\t\t\tconst input = tx.inputs[inputIndex]\n\t\t\t\tlet sourceSats = sourceSatoshis as number\n\t\t\t\tif (!sourceSats && input.sourceTransaction) {\n\t\t\t\t\tsourceSats = input.sourceTransaction.outputs[input.sourceOutputIndex].satoshis as number\n\t\t\t\t} else if (!sourceSatoshis) {\n\t\t\t\t\tthrow new Error(\"sourceTransaction or sourceSatoshis is required\")\n\t\t\t\t}\n\n\t\t\t\tconst sourceTXID = (input.sourceTXID || input.sourceTransaction?.id('hex')) as string\n\t\t\t\tlet subscript = lockingScript as LockingScript\n\t\t\t\tif (!subscript) {\n\t\t\t\t\tsubscript = input.sourceTransaction?.outputs[input.sourceOutputIndex].lockingScript as LockingScript\n\t\t\t\t}\n\t\t\t\tconst preimage = TransactionSignature.format({\n\t\t\t\t\tsourceTXID,\n\t\t\t\t\tsourceOutputIndex: input.sourceOutputIndex,\n\t\t\t\t\tsourceSatoshis: sourceSats,\n\t\t\t\t\ttransactionVersion: tx.version,\n\t\t\t\t\totherInputs: [],\n\t\t\t\t\tinputIndex,\n\t\t\t\t\toutputs: tx.outputs,\n\t\t\t\t\tinputSequence: input.sequence,\n\t\t\t\t\tsubscript,\n\t\t\t\t\tlockTime: tx.lockTime,\n\t\t\t\t\tscope: TransactionSignature.SIGHASH_ALL |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_ANYONECANPAY |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_FORKID\n\t\t\t\t});\n\n\t\t\t\treturn script.writeBin(preimage).writeOpCode(OP.OP_0)\n\t\t\t},\n\t\t\testimateLength: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await purchase.sign(tx, inputIndex)).toBinary().length\n\t\t\t}\n\t\t}\n\t\treturn purchase\n\t}\n\n\tstatic buildOutput(satoshis: number, script: number[]): number[] {\n\t\tconst writer = new Utils.Writer()\n\t\twriter.writeUInt64LEBn(new BigNumber(satoshis))\n\t\twriter.writeVarIntNum(script.length)\n\t\twriter.write(script)\n\t\treturn writer.toArray()\n\t}\n}\n","import {\n  P2PKH,\n  SatoshisPerKilobyte,\n  Script,\n  Transaction,\n  Utils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport {\n  type TokenChangeResult,\n  TokenType,\n  type CreateOrdListingsConfig,\n  type CreateOrdTokenListingsConfig,\n  type TokenUtxo,\n  type TransferBSV20Inscription,\n  type TransferBSV21Inscription,\n  type TransferTokenInscription,\n  type Utxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nconst { toArray } = Utils;\n\n// TODO: Handle royalty\nexport const createOrdListings = async (config: CreateOrdListingsConfig) => {\n  const {\n    utxos,\n    listings,\n    paymentPk,\n    ordPk,\n    changeAddress,\n    satsPerKb = DEFAULT_SAT_PER_KB,\n    additionalPayments = [],\n  } = config;\n\n  const modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n  const tx = new Transaction();\n\n  // Warn if creating many inscriptions at once\n  if (listings.length > 100) {\n    console.warn(\n      \"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n    );\n  }\n\n  // Outputs\n  // Add listing outputs\n  for (const listing of listings) {\n    tx.addOutput({\n      satoshis: 1,\n      lockingScript: new OrdLock().lock(\n        listing.ordAddress,\n        listing.payAddress,\n        listing.price,\n      ),\n    });\n    const inputScriptBinary = toArray(listing.listingUtxo.script, \"base64\");\n    const inputScript = Script.fromBinary(inputScriptBinary);\n    tx.addInput(inputFromB64Utxo(\n      listing.listingUtxo,\n      new OrdP2PKH().unlock(\n        ordPk,\n        \"all\",\n        true,\n        listing.listingUtxo.satoshis,\n        inputScript,\n      ),\n    ));\n  }\n\n  // Add additional payments if any\n  for (const p of additionalPayments) {\n    tx.addOutput({\n      satoshis: p.amount,\n      lockingScript: new P2PKH().lock(p.to),\n    });\n  }\n\n  // Check if change is needed\n  let payChange: Utxo | undefined;\n  const changeScript = new P2PKH().lock(\n    changeAddress || paymentPk.toAddress().toString(),\n  );\n  const changeOutput = {\n    lockingScript: changeScript,\n    change: true,\n  };\n  tx.addOutput(changeOutput);\n\n  let totalSatsIn = 0n;\n  const totalSatsOut = tx.outputs.reduce(\n    (total, out) => total + BigInt(out.satoshis || 0),\n    0n,\n  );\n  let fee = 0;\n  for (const utxo of utxos) {\n    const input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n      paymentPk,\n      \"all\",\n      true,\n      utxo.satoshis,\n      Script.fromBinary(Utils.toArray(utxo.script, 'base64'))\n    ));\n\n    tx.addInput(input);\n    // stop adding inputs if the total amount is enough\n    totalSatsIn += BigInt(utxo.satoshis);\n    fee = await modelOrFee.computeFee(tx);\n\n    if (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n      break;\n    }\n  }\n\n  // make sure we have enough\n  if (totalSatsIn < totalSatsOut + BigInt(fee)) {\n    throw new Error(\n      `Not enough funds to create ordinal listings. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n    );\n  }\n\n  // Calculate fee\n  await tx.fee(modelOrFee);\n\n  // Sign the transaction\n  await tx.sign();\n\n  // check for change\n  const payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n  if (payChangeOutIdx !== -1) {\n    const changeOutput = tx.outputs[payChangeOutIdx];\n    payChange = {\n      satoshis: changeOutput.satoshis as number,\n      txid: tx.id(\"hex\") as string,\n      vout: payChangeOutIdx,\n      script: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n        \"base64\",\n      ),\n    };\n  }\n\n  if (payChange) {\n    const changeOutput = tx.outputs[tx.outputs.length - 1];\n    payChange.satoshis = changeOutput.satoshis as number;\n    payChange.txid = tx.id(\"hex\") as string;\n  }\n\n  return {\n    tx,\n    spentOutpoints: tx.inputs.map(\n      (i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n    ),\n    payChange,\n  };\n};\n\nexport const createOrdTokenListings = async (\n  config: CreateOrdTokenListingsConfig,\n): Promise<TokenChangeResult> => {\n  const {\n    utxos,\n    protocol,\n    tokenID,\n    ordPk,\n    paymentPk,\n    additionalPayments = [],\n    changeAddress,\n    tokenChangeAddress,\n    inputTokens,\n    listings,\n    decimals,\n    satsPerKb = DEFAULT_SAT_PER_KB,\n  } = config;\n\n\n  // Warn if creating many inscriptions at once\n  if (listings.length > 100) {\n    console.warn(\n      \"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n    );\n  }\n\n  // Ensure these inputs are for the expected token\n  if (!inputTokens.every((token) => token.id === tokenID)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n  // calculate change amount\n  let changeAmt = 0n;\n  let totalAmtIn = 0n;\n  let totalAmtOut = 0n;\n\n  // Ensure these inputs are for the expected token\n  if (!inputTokens.every((token) => token.id === tokenID)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n  const modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n  const tx = new Transaction();\n  // Outputs\n  // Add listing outputs\n  for (const listing of listings) {\n    // NewTokenListing is not adjusted for decimals\n    const bigAmt = BigInt(listing.amt * 10 ** decimals);\n    const transferInscription: TransferTokenInscription = {\n      p: \"bsv-20\",\n      op: \"transfer\",\n      amt: bigAmt.toString(),\n    };\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n    if (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n    } else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n    tx.addOutput({\n      satoshis: 1,\n      lockingScript: new OrdLock().lock(\n        listing.ordAddress,\n        listing.payAddress,\n        listing.price,\n        {\n          dataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n          contentType: \"application/bsv-20\",\n        },\n      ),\n    });\n    totalAmtOut += bigAmt;\n  }\n\n  // Input tokens are already adjusted for decimals\n  for (const token of inputTokens) {\n    tx.addInput(inputFromB64Utxo(\n      token,\n      new OrdP2PKH().unlock(\n        ordPk,\n        \"all\",\n        true,\n        token.satoshis,\n        Script.fromBinary(toArray(token.script, \"base64\")),\n      ),\n    ));\n\n    totalAmtIn += BigInt(token.amt);\n  }\n  changeAmt = totalAmtIn - totalAmtOut;\n\n  let tokenChange: TokenUtxo[] | undefined;\n  // check that you have enough tokens to send and return change\n  if (changeAmt < 0n) {\n    throw new Error(\"Not enough tokens to send\");\n  }\n  if (changeAmt > 0n) {\n    const transferInscription: TransferTokenInscription = {\n      p: \"bsv-20\",\n      op: \"transfer\",\n      amt: changeAmt.toString(),\n    };\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n    if (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n    } else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n    const lockingScript = new OrdP2PKH().lock(tokenChangeAddress, {\n      dataB64: Buffer.from(JSON.stringify(inscription)).toString('base64'),\n      contentType: \"application/bsv-20\",\n    });\n    const vout = tx.outputs.length;\n    tx.addOutput({ lockingScript, satoshis: 1 });\n    tokenChange = [{\n      id: tokenID,\n      satoshis: 1,\n      script: Buffer.from(lockingScript.toBinary()).toString(\"base64\"),\n      txid: \"\",\n      vout,\n      amt: changeAmt.toString(),\n    }];\n  }\n\n  // Add additional payments if any\n  for (const p of additionalPayments) {\n    tx.addOutput({\n      satoshis: p.amount,\n      lockingScript: new P2PKH().lock(p.to),\n    });\n  }\n\n  // add change to the outputs\n  let payChange: Utxo | undefined;\n\n  const change = changeAddress || paymentPk.toAddress().toString();\n  const changeScript = new P2PKH().lock(change);\n  const changeOut = {\n    lockingScript: changeScript,\n    change: true,\n  };\n  tx.addOutput(changeOut);\n\n  let totalSatsIn = 0n;\n  const totalSatsOut = tx.outputs.reduce(\n    (total, out) => total + BigInt(out.satoshis || 0),\n    0n,\n  );\n  let fee = 0;\n  for (const utxo of utxos) {\n    const input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n      paymentPk,\n      \"all\",\n      true,\n      utxo.satoshis,\n      Script.fromBinary(Utils.toArray(utxo.script, 'base64'))\n    ));\n\n    tx.addInput(input);\n    // stop adding inputs if the total amount is enough\n    totalSatsIn += BigInt(utxo.satoshis);\n    fee = await modelOrFee.computeFee(tx);\n\n    if (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n      break;\n    }\n  }\n\n  // make sure we have enough\n  if (totalSatsIn < totalSatsOut + BigInt(fee)) {\n    throw new Error(\n      `Not enough funds to create token listings. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n    );\n  }\n\n  // estimate the cost of the transaction and assign change value\n  await tx.fee(modelOrFee);\n\n  // Sign the transaction\n  await tx.sign();\n\n  const txid = tx.id(\"hex\") as string;\n  if (tokenChange) {\n    tokenChange = tokenChange.map((tc) => ({ ...tc, txid }));\n  }\n  // check for change\n  const payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n  if (payChangeOutIdx !== -1) {\n    const changeOutput = tx.outputs[payChangeOutIdx];\n    payChange = {\n      satoshis: changeOutput.satoshis as number,\n      txid,\n      vout: payChangeOutIdx,\n      script: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n        \"base64\",\n      ),\n    };\n  }\n\n  if (payChange) {\n    const changeOutput = tx.outputs[tx.outputs.length - 1];\n    payChange.satoshis = changeOutput.satoshis as number;\n    payChange.txid = tx.id(\"hex\") as string;\n  }\n\n  return {\n    tx,\n    spentOutpoints: tx.inputs.map(\n      (i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n    ),\n    payChange,\n    tokenChange,\n  };\n};\n","import { P2PKH, SatoshisPerKilobyte, Script, Transaction, Utils } from \"@bsv/sdk\";\nimport {\n\tTokenType,\n\ttype TokenUtxo,\n\ttype CancelOrdListingsConfig,\n\ttype CancelOrdTokenListingsConfig,\n\ttype Destination,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n  type ChangeResult,\n  type TokenChangeResult,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\n\n/**\n * Cancel Ordinal Listings\n * @param {CancelOrdListingsConfig} config - Configuration object for cancelling ordinals\n * @param {PrivateKey} config.paymentPk - Private key to sign payment inputs\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.listingUtxos - Listing utxos to cancel (with base64 encoded scripts)\n * @param {string} [config.changeAddress] - Optional. Address to send change to\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to make\n * @returns {Promise<ChangeResult>} Transaction, spent outpoints, change utxo\n */\nexport const cancelOrdListings = async (config: CancelOrdListingsConfig): Promise<ChangeResult> => {\n\tconst {\n\t\tutxos,\n\t\tlistingUtxos,\n\t\tordPk,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tadditionalPayments = [],\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\n\t// Warn if creating many inscriptions at once\n\tif (listingUtxos.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\t\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinals we're cancelling\n\tfor (const listingUtxo of listingUtxos) {\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().cancelListing(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlistingUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, 'base64'))\n\t\t\t)\n\t\t));\n\t\t// Add cancel outputs returning listed ordinals\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new P2PKH().lock(ordPk.toAddress().toString()),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo, \n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpaymentPk, \n\t\t\t\t\"all\",\n\t\t\t\ttrue, \n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t\t)\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to cancel ordinal listings. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\n/**\n * Cancel Ordinal Token Listings\n * @param {CancelOrdTokenListingsConfig} config - Configuration object for cancelling token ordinals\n * @param {PrivateKey} config.paymentPk - Private key to sign payment inputs\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.listingUtxos - Listing utxos to cancel (with base64 encoded scripts)\n * @param {string} config.tokenID - Token ID of the token to cancel listings for\n * @param {string} config.ordAddress - Address to send the cancelled token to\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to make\n * @returns {Promise<TokenChangeResult>} Transaction, spent outpoints, change utxo, token change utxos\n */\nexport const cancelOrdTokenListings = async (\n\tconfig: CancelOrdTokenListingsConfig,\n): Promise<TokenChangeResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tadditionalPayments,\n\t\tlistingUtxos,\n\t\tutxos,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\t// calculate change amount\n\tlet totalAmtIn = 0;\n\n\tif (listingUtxos.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Ensure these inputs are for the expected token\n\tif (!listingUtxos.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinals we're cancelling\n\tfor (const listingUtxo of listingUtxos) {\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().cancelListing(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlistingUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, 'base64'))\n\t\t\t)\n\t\t));\n\t\ttotalAmtIn += Number.parseInt(listingUtxo.amt);\n\t}\n\n\tconst transferInscription: TransferTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"transfer\",\n\t\tamt: totalAmtIn.toString(),\n\t};\n\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\tif (protocol === TokenType.BSV20) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\ttick: tokenID,\n\t\t} as TransferBSV20Inscription;\n\t} else if (protocol === TokenType.BSV21) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\tid: tokenID,\n\t\t} as TransferBSV21Inscription;\n\t} else {\n\t\tthrow new Error(\"Invalid protocol\");\n\t}\n\n\tconst destination: Destination = {\n\t\taddress: ordAddress || ordPk.toAddress().toString(),\n\t\tinscription: {\n\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t},\n\t};\n\n  const lockingScript = new OrdP2PKH().lock(\n    destination.address,\n    destination.inscription\n  );\n\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript,\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to cancel token listings. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n  const tokenChange: TokenUtxo[] = [{\n    amt: totalAmtIn.toString(),\n    script: Buffer.from(lockingScript.toHex(), 'hex').toString('base64'),\n    txid: tx.id(\"hex\") as string,\n    vout: 0,\n    id: tokenID,\n    satoshis: 1\n  }];\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n    tokenChange,\n\t};\n};","import {\n\tLockingScript,\n\tP2PKH,\n\tSatoshisPerKilobyte,\n\tScript,\n\tTransaction,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport {\n\ttype ChangeResult,\n\tRoytaltyType,\n\tTokenType,\n\ttype PurchaseOrdListingConfig,\n\ttype PurchaseOrdTokenListingConfig,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n\tMAP,\n} from \"./types\";\nimport { resolvePaymail } from \"./utils/paymail\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Purchase a listing\n * @param {PurchaseOrdListingConfig} config - Configuration object for purchasing a listing\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign payment inputs\n * @param {ExistingListing} config.listing - Listing to purchase\n * @param {string} config.ordAddress - Address to send the ordinal to\n * @param {string} [config.changeAddress] - Optional. Address to send change to\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to make\n * @param {Royalty[]} [config.royalties] - Optional. Royalties to pay\n * @param {MAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include on purchased output\n * @returns {Promise<ChangeResult>} Transaction, spent outpoints, change utxo\n */\nexport const purchaseOrdListing = async (\n\tconfig: PurchaseOrdListingConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tlisting,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tadditionalPayments = [],\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\troyalties = [],\n\t\tmetaData,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinal we're purchasing\n\ttx.addInput(\n\t\tinputFromB64Utxo(\n\t\t\tlisting.listingUtxo,\n\t\t\tnew OrdLock().purchaseListing(\n\t\t\t\t1,\n\t\t\t\tScript.fromBinary(Utils.toArray(listing.listingUtxo.script, \"base64\")),\n\t\t\t),\n\t\t),\n\t);\n\n\t// Outputs\n\t// Add the purchased output\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(ordAddress, undefined, metaData),\n\t});\n\n\t// add the payment output\n\tconst reader = new Utils.Reader(Utils.toArray(listing.payout, \"base64\"));\n\tconst satoshis = reader.readUInt64LEBn().toNumber();\n\tconst scriptLength = reader.readVarIntNum();\n\tconst scriptBin = reader.read(scriptLength);\n\tconst lockingScript = LockingScript.fromBinary(scriptBin);\n\ttx.addOutput({\n\t\tsatoshis,\n\t\tlockingScript,\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Add any royalties\n\tfor (const r of royalties) {\n\t\tlet lockingScript: LockingScript | undefined;\n\t\tconst royaltySats = Math.floor(Number(r.percentage) * satoshis);\n\n\t\tswitch (r.type as RoytaltyType) {\n\t\t\tcase RoytaltyType.Paymail:\n\t\t\t\t// resolve paymail address\n\t\t\t\tlockingScript = await resolvePaymail(r.destination, royaltySats);\n\t\t\t\tbreak;\n\t\t\tcase RoytaltyType.Script:\n\t\t\t\tlockingScript = Script.fromBinary(\n\t\t\t\t\tUtils.toArray(r.destination, \"base64\"),\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase RoytaltyType.Address:\n\t\t\t\tlockingScript = new P2PKH().lock(r.destination);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"Invalid royalty type\");\n\t\t}\n\t\tif (!lockingScript) {\n\t\t\tthrow new Error(\"Invalid royalty destination\");\n\t\t}\n\t\ttx.addOutput({\n\t\t\tsatoshis: royaltySats,\n\t\t\tlockingScript,\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo,\n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpaymentPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, \"base64\")),\n\t\t\t),\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase ordinal listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\n/**\n *\n * @param {PurchaseOrdTokenListingConfig} config  - Configuration object for purchasing a token listing\n * @param {TokenType} config.protocol - Token protocol\n * @param {string} config.tokenID - Token ID\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign payment inputs\n * @param {Utxo} config.listingUtxo - Listing UTXO\n * @param {string} config.ordAddress - Address to send the ordinal to\n * @param {string} [config.changeAddress] - Optional. Address to send change to\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to make\n * @param {MAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include on the purchased transfer inscription output\n * @returns {Promise<ChangeResult>} Transaction, spent outpoints, change utxo\n */\nexport const purchaseOrdTokenListing = async (\n\tconfig: PurchaseOrdTokenListingConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tpaymentPk,\n\t\tlistingUtxo,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t\tmetaData,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinal we're purchasing\n\ttx.addInput(\n\t\tinputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().purchaseListing(\n\t\t\t\t1,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, \"base64\")),\n\t\t\t),\n\t\t),\n\t);\n\n\t// Outputs\n\tconst transferInscription: TransferTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"transfer\",\n\t\tamt: listingUtxo.amt,\n\t};\n\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\tif (protocol === TokenType.BSV20) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\ttick: tokenID,\n\t\t} as TransferBSV20Inscription;\n\t} else if (protocol === TokenType.BSV21) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\tid: tokenID,\n\t\t} as TransferBSV21Inscription;\n\t} else {\n\t\tthrow new Error(\"Invalid protocol\");\n\t}\n\tconst dataB64 = Buffer.from(JSON.stringify(inscription)).toString(\"base64\");\n\n\t// Add the purchased output\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\tordAddress,\n\t\t\t{\n\t\t\t\tdataB64,\n\t\t\t\tcontentType: \"application/bsv-20\",\n\t\t\t},\n\t\t\tmetaData,\n\t\t),\n\t});\n\n\tif (!listingUtxo.payout) {\n\t\tthrow new Error(\"Listing UTXO does not have a payout script\");\n\t}\n\n\t// Add the payment output\n\tconst reader = new Utils.Reader(Utils.toArray(listingUtxo.payout, \"base64\"));\n\tconst satoshis = reader.readUInt64LEBn().toNumber();\n\tconst scriptLength = reader.readVarIntNum();\n\tconst scriptBin = reader.read(scriptLength);\n\tconst lockingScript = LockingScript.fromBinary(scriptBin);\n\ttx.addOutput({\n\t\tsatoshis,\n\t\tlockingScript,\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo,\n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpaymentPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, \"base64\")),\n\t\t\t),\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase token listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n","// import { PaymailClient } from \"@bsv/paymail\";\nimport { LockingScript } from \"@bsv/sdk\";\n\n// const client = new PaymailClient();\n\nexport const resolvePaymail = async (paymailAddress: string, amtToReceive: number): Promise<LockingScript> => {\n  // const destinationTx = await client.getP2pPaymentDestination(paymailAddress, amtToReceive);\n  // // TODO: we are assuming only one output but in reality it can be many\n  // return destinationTx.outputs[0].script as LockingScript;\n  throw new Error(\"Not implemented\");\n}","import sizeOf from 'image-size';\nimport type { IconInscription, ImageContentType } from \"../types\";\n\nexport const ErrorOversizedIcon = new Error(\n    \"Image must be a square image with dimensions <= 400x400\",\n);\nexport const ErrorIconProportions = new Error(\"Image must be a square image\");\nexport const ErrorInvalidIconData = new Error(\"Error processing image\");\nexport const ErrorImageDimensionsUndefined = new Error(\n    \"Image dimensions are undefined\",\n);\n\nconst isImageContentType = (value: string): value is ImageContentType => {\n    return (value as ImageContentType) === value;\n};\n\nexport const validIconData = async (\n    icon: IconInscription,\n): Promise<Error | null> => {\n    const { dataB64, contentType } = icon;\n\n    if (contentType === \"image/svg+xml\") {\n        return validateSvg(dataB64);\n    }\n\n    if (!isImageContentType(contentType)) {\n        return ErrorInvalidIconData;\n    }\n\n    try {\n        const buffer = Buffer.from(dataB64, \"base64\");\n        const dimensions = sizeOf(buffer);\n\n        if (dimensions.width === undefined || dimensions.height === undefined) {\n            return ErrorImageDimensionsUndefined;\n        }\n        if (dimensions.width !== dimensions.height) {\n            return ErrorIconProportions;\n        }\n        if (dimensions.width > 400 || dimensions.height > 400) {\n            return ErrorOversizedIcon;\n        }\n\n        return null;\n    } catch (error) {\n        return ErrorInvalidIconData;\n    }\n};\n\nconst validateSvg = (svgBase64: string): Error | null => {\n    const svgString = Buffer.from(svgBase64, \"base64\").toString(\"utf-8\");\n    const widthMatch = svgString.match(/<svg[^>]*\\s+width=\"([^\"]+)\"/);\n    const heightMatch = svgString.match(/<svg[^>]*\\s+height=\"([^\"]+)\"/);\n    \n    if (!widthMatch || !heightMatch) {\n        return ErrorImageDimensionsUndefined;\n    }\n\n    const width = Number.parseInt(widthMatch[1], 10);\n    const height = Number.parseInt(heightMatch[1], 10);\n\n    if (Number.isNaN(width) || Number.isNaN(height)) {\n        return ErrorImageDimensionsUndefined;\n    }\n\n    if (width !== height) {\n        return ErrorIconProportions;\n    }\n    if (width > 400 || height > 400) {\n        return ErrorOversizedIcon;\n    }\n\n    return null;\n}\n\nexport const validIconFormat = (icon: string): boolean => {\n    if (!icon.includes(\"_\") || icon.endsWith(\"_\")) {\n        return false;\n    }\n\n    const iconVout = Number.parseInt(icon.split(\"_\")[1]);\n    if (Number.isNaN(iconVout)) {\n        return false;\n    }\n\n    if (!icon.startsWith(\"_\") && icon.split(\"_\")[0].length !== 64) {\n        return false;\n    }\n\n    return true;\n};","import {\n\tTransaction,\n\tP2PKH,\n\tSatoshisPerKilobyte,\n\ttype TransactionOutput,\n\tUtils,\n\tScript,\n} from \"@bsv/sdk\";\nimport type {\n  ChangeResult,\n\tDeployBsv21TokenConfig,\n\tDeployMintTokenInscription,\n\tInscription,\n\tUtxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { validIconData, validIconFormat } from \"./utils/icon\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\n\n/**\n * Deploys & Mints a BSV21 token to the given destination address\n * @param {DeployBsv21TokenConfig} config - Configuration object for deploying BSV21 token\n * @param {string} config.symbol - Token ticker symbol\n * @param {number} config.decimals - Number of decimal places to display\n * @param {string | IconInscription} config.icon - outpoint (format: txid_vout) or Inscription. If Inscription, must be a valid image type\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {Distribution} config.initialDistribution - Initial distribution with addresses and total supply (not adjusted for decimals, library will add zeros)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {string} config.destinationAddress - Address to deploy token to.\n * @param {string} [config.changeAddress] - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to include in the transaction\n * @returns {Promise<ChangeResult>} Transaction to deploy BSV 2.1 token\n */\nexport const deployBsv21Token = async (\n\tconfig: DeployBsv21TokenConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tsymbol,\n\t\ticon,\n    decimals,\n\t\tutxos,\n\t\tinitialDistribution,\n\t\tpaymentPk,\n\t\tdestinationAddress,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\tlet iconValue: string;\n\tif (typeof icon === \"string\") {\n\t\ticonValue = icon;\n\t} else {\n\t\tconst iconError = await validIconData(icon);\n\t\tif (iconError) {\n\t\t\tthrow iconError;\n\t\t}\n\t\t// add icon inscription to the transaction\n\t\tconst iconScript = new OrdP2PKH().lock(destinationAddress, icon);\n\t\tconst iconOut = {\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: iconScript,\n\t\t};\n\t\ttx.addOutput(iconOut);\n\t\t// relative output index of the icon\n\t\ticonValue = \"_0\";\n\t}\n\n\t// Ensure the icon format\n\tif (!validIconFormat(iconValue)) {\n\t\tthrow new Error(\n\t\t\t\"Invalid icon format. Must be either outpoint (format: txid_vout) or relative output index of the icon (format _vout). examples: ecb483eda58f26da1b1f8f15b782b1186abdf9c6399a1c3e63e0d429d5092a41_0 or _1\",\n\t\t);\n\t}\n  \n\t// Outputs\n  const amt = decimals ? BigInt(initialDistribution.amt) * 10n ** BigInt(decimals) : BigInt(initialDistribution.amt);\n\tconst fileData: DeployMintTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"deploy+mint\",\n\t\tsym: symbol,\n\t\ticon: iconValue,\n\t\tamt: amt.toString(),\n\t};\n\n  if (decimals) {\n    fileData.dec = decimals.toString();\n  }\n\n\tconst b64File = Buffer.from(JSON.stringify(fileData)).toString(\"base64\");\n\tconst sendTxOut = {\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(destinationAddress, {\n\t\t\tdataB64: b64File,\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t} as Inscription),\n\t};\n\ttx.addOutput(sendTxOut);\n\n\t// Additional payments\n\tfor (const payment of additionalPayments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new P2PKH().lock(payment.to),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to deploy token. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tScript,\n\tUtils,\n  PrivateKey,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB, MAP_PREFIX } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n  BaseResult,\n\tBurnOrdinalsConfig,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { toHex } from \"./utils/strings\";\n\n/**\n * Burn ordinals by consuming them as fees\n * @param {BurnOrdinalsConfig} config - Configuration object for sending ordinals\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Utxo} config.ordinals - 1Sat Ordinal Utxos to spend (with base64 encoded scripts)\n * @param {BurnMAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include in an unspendable output OP_FALSE OP_RETURN\n * @returns {Promise<BaseResult>} Transaction, spent outpoints\n */\nexport const burnOrdinals = async (\n\tconfig: BurnOrdinalsConfig,\n): Promise<BaseResult> => {\n\tconst tx = new Transaction();\n\tconst spentOutpoints: string[] = [];\n\tconst { ordinals, metaData } = config;\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(\n\t\t\tordUtxo,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tconfig.ordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tordUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(ordUtxo.script, \"base64\")),\n\t\t\t),\n\t\t);\n\t\tspentOutpoints.push(`${ordUtxo.txid}_${ordUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// Add metadata output\n\n\t// MAP.app and MAP.type keys are required\n\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t}\n\n\tlet metaAsm = \"\";\n\n\tif (metaData?.app && metaData?.type) {\n\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\tconst mapCmdValue = toHex(\"SET\");\n\t\tmetaAsm = `OP_FALSE OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\tif (key !== \"cmd\") {\n\t\t\t\tmetaAsm = `${metaAsm} ${toHex(key)} ${toHex(value as string)}`;\n\t\t\t}\n\t\t}\n\t}\n\n\ttx.addOutput({\n\t\tsatoshis: 0,\n\t\tlockingScript: Script.fromASM(metaAsm || \"OP_FALSE OP_RETURN\"),\n\t});\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t};\n};\n"],"names":["TokenSelectionStrategy","TokenType","RoytaltyType","TokenInputMode","toHex","utf8Str","Buffer","from","toString","MAP_PREFIX","DEFAULT_SAT_PER_KB","API_HOST","OrdP2PKH","_P2PKH","apply","arguments","_inheritsLoose","prototype","lock","address","inscription","metaData","ordAsm","undefined","dataB64","contentType","ordHex","fileHex","trim","Error","fileMediaType","inscriptionAsm","P2PKH","toASM","app","type","mapPrefixHex","_i","_Object$entries","Object","entries","length","_Object$entries$_i","key","value","LockingScript","fromASM","MAX_TOKEN_SUPPLY","Math","pow","fromBase58Check","Utils","inputFromB64Utxo","utxo","unlockScriptTemplate","fromUtxo","_extends","script","fetchPayUtxos","scriptEncoding","payUrl","console","log","Promise","resolve","fetch","then","payRes","ok","json","payUtxos","filter","u","satoshis","isLock","pubKeyHash","p2pkhScript","data","map","txid","vout","toBinary","e","reject","fetchNftUtxos","collectionId","limit","offset","url","JSON","stringify","subTypeData","res","nftUtxos","outpoints","_u$data","list","method","headers","body","concat","nftRes","nfts","Script","fromHex","nftUtxo","origin","outpoint","fetchTokenUtxos","protocol","tokenId","BSV20","tokenUtxos","amt","id","selectTokenUtxos","requiredAmount","decimals","options","_step","_options$inputStrateg","inputStrategy","RetainOrder","_options$outputStrate","outputStrategy","requiredAmountBigInt","BigInt","floor","totalSelected","selectedUtxos","_iterator","_createForOfIteratorHelperLoose","sort","a","b","amtA","amtB","SmallestFirst","Number","LargestFirst","Random","random","done","push","isEnough","signData","tx","signer","_exit","_temp2","_result","idKey","keyHost","_sigma$sign","Sigma","sign","signedTx","_temp","authToken","sigma","remoteSign","_ref","_catch","stringifyMetaData","result","Array","isArray","String","pact","state","s","_Pact","o","bind","v","_settle","observer","onFulfilled","this","_this","onRejected","_isSettledPact","thenable","createOrdinals","config","_temp4","_interrupt","totalSatsIn","totalSatsOut","fee","modelOrFee","payChangeOutIdx","outputs","findIndex","change","changeOutput","payChange","lockingScript","spentOutpoints","utxos","_forOf","input","unlock","paymentPk","fromBinary","toArray","addInput","computeFee","_modelOrFee$computeFe","destinations","changeAddress","_config$satsPerKb","satsPerKb","_config$additionalPay","additionalPayments","warn","SatoshisPerKilobyte","Transaction","destination","_Object$keys","keys","addOutput","_step2","_iterator2","p","amount","to","toAddress","changeScript","reduce","total","out","_temp3","pop","_signData","sendOrdinals","enforceUniformSend","ordinals","ordUtxo","ordPk","_destination$inscript","_destination$inscript2","_step3","_iterator3","array","_cycle","i","check","paymentUtxos","sendUtxos","changeOut","payments","_config$changeAddress","payment","sendTxOut","_iteratorSymbol","Symbol","iterator","callback","transferOrdTokens","tokenChange","inputs","sourceTXID","sourceOutputIndex","tokenID","inputTokens","distributions","tokenChangeAddress","_config$burn","burn","_config$tokenInputMod","tokenInputMode","Needed","_config$splitConfig","splitConfig","omitMetaData","every","token","changeAmt","tokensToUse","totalAmtIn","totalAmtOut","totalAmtNeeded","acc","dist","All","inputScriptBinary","inputScript","_step4","_iterator4","dest","bigAmt","transferInscription","op","tick","BSV21","splitChangeOutputs","_iterator5","_step5","target","step","next","_fixup","TypeError","values","_forTo","tokenChanges","threshold","maxOutputs","splitOutputs","min","max","baseChangeAmount","remainder","splitAmount","validateSubTypeData","subType","collectionData","description","quantity","rarityLabels","label","traits","itemData","includes","split","isNaN","parseInt","mintNumber","rank","rarityLabel","attachments","error","OrdLock","_proto","ordAddress","payAddress","price","cancelPkh","payPkh","writeScript","writeBin","buildOutput","cancelListing","privateKey","signOutputs","anyoneCanPay","sourceSatoshis","p2pkh","inputIndex","_p2pkh$sign","writeOpCode","OP","OP_1","estimateLength","purchaseListing","purchase","_input$sourceTransact","UnlockingScript","writer","Writer","slice","output","write","OP_0","sourceSats","sourceTransaction","_input$sourceTransact2","subscript","preimage","TransactionSignature","format","transactionVersion","version","otherInputs","inputSequence","sequence","lockTime","scope","SIGHASH_ALL","SIGHASH_ANYONECANPAY","SIGHASH_FORKID","_purchase$sign","writeUInt64LEBn","BigNumber","writeVarIntNum","return","createOrdListings","listings","listing","listingUtxo","createOrdTokenListings","_interrupt2","tc","_config$additionalPay2","_config$satsPerKb2","_modelOrFee$computeFe2","cancelOrdListings","listingUtxos","cancelOrdTokenListings","purchaseOrdListing","_temp6","_result2","_config$royalties","royalties","reader","Reader","payout","readUInt64LEBn","toNumber","scriptLength","readVarIntNum","scriptBin","read","_temp5","r","royaltySats","percentage","_switch","Paymail","resolvePaymail","_resolvePaymail","Address","purchaseOrdTokenListing","_temp8","_interrupt3","_temp7","ErrorOversizedIcon","ErrorIconProportions","ErrorInvalidIconData","ErrorImageDimensionsUndefined","deployBsv21Token","iconValue","icon","endsWith","iconVout","startsWith","validIconFormat","initialDistribution","fileData","sym","symbol","dec","b64File","destinationAddress","svgBase64","svgString","widthMatch","match","heightMatch","width","height","validateSvg","buffer","dimensions","sizeOf","validIconData","iconError","iconScript","burnOrdinals","metaAsm","mapCmdValue"],"mappings":"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"}