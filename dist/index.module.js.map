{"version":3,"file":"index.module.js","sources":["../src/utils/strings.ts","../src/types.ts","../src/constants.ts","../src/templates/ordP2pkh.ts","../src/utils/utxo.ts","../src/signData.ts","../src/utils/subtypeData.ts","../src/createOrdinals.ts","../src/sendOrdinals.ts","../src/sendUtxos.ts","../src/transferOrdinals.ts","../src/validate.ts","../src/templates/ordLock.ts","../src/createListings.ts","../src/cancelListings.ts","../src/purchaseOrdListing.ts"],"sourcesContent":["/**\n * Converts a string to its hexadecimal representation\n *\n * @param {string} utf8Str - The string to convert\n * @returns {string} The hexadecimal representation of the input string\n */\nconst toHex = (utf8Str: string): string => {\n  return Buffer.from(utf8Str).toString(\"hex\");\n};\n\nexport { toHex };\n","import type { PrivateKey, Script, Transaction } from \"@bsv/sdk\";\nimport type { AuthToken } from \"sigma-protocol\";\n\n// biome-ignore lint/complexity/noBannedTypes: Reserved for future use\ntype Signer = {};\n\nexport interface LocalSigner extends Signer {\n\tidKey: PrivateKey;\n}\n\nexport interface RemoteSigner extends Signer {\n\tkeyHost: string;\n\tauthToken?: AuthToken;\n}\n\nexport type Destination = {\n\taddress: string;\n\tinscription?: Inscription;\n};\n\n/**\n * @typedef {Object} Listing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n * @property {Utxo} listingUtxo - Utxo of the listing\n */\nexport type Listing = {\n\tpayAddress: string;\n\tprice: number;\n\tordAddress: string;\n\tlistingUtxo: Utxo;\n}\n\n/**\n * @typedef {Object} TokenListing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n * @property {TokenUtxo} listingUtxo - Utxo of the listing\n */\nexport type TokenListing = {\n\tpayAddress: string;\n\tprice: number;\n\tordAddress: string;\n\tlistingUtxo: TokenUtxo;\n}\n\n/**\n * @typedef {Object} Distribution\n * @property {string} address - Destination address. Must be a Ordinals address (BSV address for recieving 1Sat ordinals tokens).\n * @property {string} amt - Number of tokens as a string, considering decimals. Not display format. Ex. 100000000 for 1 token with 8 decimal places.\n */\nexport type Distribution = {\n\taddress: string;\n\tamt: string;\n};\n\n/**\n * @typedef {Object} Utxo\n * @property {number} satoshis - Amount in satoshis\n * @property {string} txid - Transaction id\n * @property {number} vout - Output index\n * @property {string} script - Base64 encoded locking script\n */\nexport type Utxo = {\n\tsatoshis: number;\n\ttxid: string;\n\tvout: number;\n\tscript: string;\n};\n\n/**\n * @typedef {Object} NftUtxo\n * @property {string} collectionId - Optional. Collection id of the NFT\n * @property {string} contentType - Media type of the NFT\n * @property {string} creatorBapId - Optional. Creator BAP id of the NFT\n * @property {string} origin - Origin address of the NFT\n * @property {number} satoshis - Always 1\n */\nexport interface NftUtxo extends Utxo {\n\tcollectionId?: string;\n\tcontentType: string;\n\tcreatorBapId?: string;\n\torigin: string;\n\tsatoshis: 1;\n}\n\n/**\n * @typedef {Object} TokenUtxo\n * @property {string} amt - Number of tokens as a string\n * @property {string} id - Token id -  either tick or id depending on protocol\n * @property {string} satoshis - Always 1\n */\nexport interface TokenUtxo extends Utxo {\n\tamt: string;\n\tid: string;\n\tsatoshis: 1;\n}\n\nexport type Inscription = {\n\tdataB64: string;\n\tcontentType: string;\n};\n\nexport type ImageContentType =\n\t| \"image/png\"\n\t| \"image/jpeg\"\n\t| \"image/gif\"\n\t| \"image/svg+xml\"\n\t| \"image/webp\";\n\n/**\n * @typedef {Object} IconInscription\n * @property {string} dataB64 - Base64 encoded image data. Must be a square image.\n * @property {ImageContentType} contentType - Media type of the image\n */\nexport type IconInscription = {\n\tdataB64: string;\n\tcontentType: ImageContentType;\n};\n\nexport type Payment = {\n\tto: string;\n\tamount: number;\n};\n\nexport type TokenInscription = {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\" | \"mint\" | \"deploy+mint\" | \"burn\";\n};\n\nexport interface MintTokenInscription extends TokenInscription {\n\top: \"mint\";\n}\n\nexport interface DeployMintTokenInscription extends TokenInscription {\n\top: \"deploy+mint\";\n\tsym: string;\n\ticon: string;\n}\n\nexport interface TransferTokenInscription extends TokenInscription {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\" | \"burn\";\n}\n\nexport interface TransferBSV20Inscription extends TransferTokenInscription {\n\ttick: string;\n}\n\nexport interface TransferBSV21Inscription extends TransferTokenInscription {\n\tid: string;\n}\n\nexport enum TokenType {\n\tBSV20 = \"bsv20\",\n\tBSV21 = \"bsv21\",\n}\n\nexport type CreateOrdinalsResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\n/**\n * MAP (Magic Attribute Protocol) metadata object with stringified values for writing to the blockchain\n * @typedef {Object} MAP\n * @property {string} app - Application identifier\n * @property {string} type - Metadata type\n * @property {string} [prop] - Optional. Additional metadata properties\n */\nexport type MAP = {\n\tapp: string;\n\ttype: string;\n\t[prop: string]: string;\n};\n\nexport type PreMAP = {\n\tapp: string;\n\ttype: string;\n\t[prop: string]: unknown;\n\troyalties?: Royalty[];\n\tsubTypeData?: CollectionSubTypeData | CollectionItemSubTypeData;\n};\n\nexport type CreateOrdinalsConfig = {\n\tutxos: Utxo[];\n\tdestinations: Destination[];\n\tpaymentPk: PrivateKey;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: PreMAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n};\n\nexport enum RoytaltyType {\n\tPaymail = \"paymail\",\n\tAddress = \"address\",\n\tScript = \"script\",\n}\n\n/**\n * Royalty object\n * @typedef {Object} Royalty\n * @property {RoytaltyType} type - Royalty type, string, one of \"paymail\", \"address\", \"script\"\n * @property {string} destination - Royalty destination\n * @property {string} percentage - Royalty percentage as a string float 0-1\n */\nexport type Royalty = {\n\ttype: RoytaltyType;\n\tdestination: string;\n\tpercentage: string; // string float 0-1\n};\n\nexport interface CreateOrdinalsMetadata extends PreMAP {\n\ttype: \"ord\",\n\tname: string,\n\tpreviewUrl?: string,\n}\n\nexport interface CreateOrdinalsCollectionMetadata extends CreateOrdinalsMetadata {\n\tsubType: \"collection\",\n\tsubTypeData: CollectionSubTypeData, // JSON stringified CollectionSubTypeData\n\troyalties?: Royalty[],\n};\n\nexport interface CreateOrdinalsCollectionItemMetadata extends CreateOrdinalsMetadata {\n\tsubType: \"collectionItem\",\n\tsubTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n};\n\n/**\n * Configuration object for creating an ordinals collection\n * @typedef {Object} CreateOrdinalsCollectionConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collection\"\n * @property metaData.name - Collection name\n * @property metaData.subTypeData - JSON stringified CollectionSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionConfig extends CreateOrdinalsConfig {\n\tmetaData: CreateOrdinalsCollectionMetadata\n}\n\nexport type CollectionTraits = {\n\t[trait: string]: CollectionTrait;\n};\n\nexport type CollectionTrait = {\n\tvalues: string[];\n\toccurancePercentages: string[];\n};\n\nexport type Rarity = {\n\t[key: string]: string;\n}\n\nexport type RarityLabels = Rarity[]\nexport interface CollectionSubTypeData {\n\tdescription: string;\n\tquantity: number;\n\trarityLabels: RarityLabels;\n\ttraits: CollectionTraits;\n}\n\nexport interface CreateOrdinalsCollectionItemMetadata extends PreMAP {\n\ttype: \"ord\",\n\tname: string,\n\tsubType: \"collectionItem\",\n\tsubTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n\troyalties?: Royalty[],\n\tpreviewUrl?: string,\n}\n\n/**\n * Configuration object for creating an ordinals collection item\n * @typedef {Object} CreateOrdinalsCollectionItemConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection item\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collectionItem\"\n * @property metaData.name - Collection item name\n * @property metaData.subTypeData - JSON stringified CollectionItemSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionItemConfig extends CreateOrdinalsConfig {\n\tmetaData: CreateOrdinalsCollectionItemMetadata\n}\n\n/**\n * Subtype data for an ordinals collection item\n * @typedef {Object} CollectionItemSubTypeData\n * @property {string} collectionId - Collection id\n * @property {number} mintNumner - Mint number\n * @property {number} rank - Rank\n * @property {string} rarityLabel - Rarity label\n * @property {string} traits - traits object\n * @property {string} attachments - array of attachment objects\n */\nexport interface CollectionItemSubTypeData {\n\tcollectionId: string;\n\tmintNumber?: number;\n\trank?: number;\n\trarityLabel?: RarityLabels;\n\ttraits?: CollectionItemTraits;\n\tattachments?: CollectionItemAttachment[];\n}\n\nexport type CollectionItemTraits = {\n\tname: string;\n\tvalue: string;\n\trarityLabel?: string;\n\toccurancePercentrage?: string;\n};\n\nexport type CollectionItemAttachment = {\n\tname: string;\n\tdescription?: string;\n\t\"content-type\": string;\n\turl: string;\n}\n\nexport type SendOrdinalsResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type SendOrdinalsConfig = {\n\tpaymentUtxos: Utxo[];\n\tordinals: Utxo[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tdestinations: Destination[];\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: PreMAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n\tenforceUniformSend?: boolean;\n}\n\nexport type DeployBsv21TokenResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type DeployBsv21TokenConfig = {\n\tsymbol: string;\n\ticon: string | IconInscription;\n\tutxos: Utxo[];\n\tinitialDistribution: Distribution;\n\tpaymentPk: PrivateKey;\n\tdestinationAddress: string;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[];\n};\n\nexport type SendUtxosResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type SendUtxosConfig = {\n\tutxos: Utxo[];\n\tpaymentPk: PrivateKey;\n\tpayments: Payment[];\n\tsatsPerKb?: number;\n\tchangeAddress?: string;\n};\n\nexport interface TransferOrdTokensResult extends SendOrdinalsResult {\n\ttokenChange?: TokenUtxo;\n}\n\nexport type TransferOrdTokensConfig = {\n\tprotocol: TokenType;\n\ttokenID: string;\n\tutxos: Utxo[];\n\tinputTokens: TokenUtxo[];\n\tdistributions: Distribution[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tchangeAddress?: string;\n\ttokenChangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: PreMAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n\tburn?: boolean;\n}\n\nexport type CreateOrdListingsConfig = {\n\tutxos: Utxo[];\n\tlistings: Listing[];\n\troyalty: number;\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey,\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[];\n}\n\nexport type PurchaseOrdListingConfig = {\n\tprotocol: TokenType;\n\ttokenID: string;\n\tutxos: Utxo[];\n\tpaymentPk: PrivateKey;\n\tlisting: TokenListing;\n\tordAddress: string;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[],\n}\n\nexport type PurchaseOrdTokenListingConfig = {\n\tprotocol: TokenType;\n\ttokenID: string;\n\tutxos: Utxo[];\n\tpaymentPk: PrivateKey;\n\tlistingUtxo: TokenUtxo;\n\tordAddress: string;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[],\n}\n\nexport type CancelOrdListingsConfig = {\n\tutxos: Utxo[],\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tlistingUtxos: Utxo[];\n\tadditionalPayments: Payment[];\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n}\n\nexport interface CancelOrdTokenListingsConfig extends CancelOrdListingsConfig {\n\tutxos: Utxo[],\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tlistingUtxos: TokenUtxo[];\n\tadditionalPayments: Payment[];\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tprotocol: TokenType,\n\ttokenID: string;\n\tordAddress?: string;\n}\n\nexport interface CreateOrdTokenListingsConfig {\n\tutxos: Utxo[];\n\tlistings: TokenListing[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey,\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[];\n\tprotocol: TokenType;\n\ttokenID: string;\n\tinputTokens: TokenUtxo[];\n\ttokenChangeAddress: string;\n}\n\n","export const MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\nexport const DEFAULT_SAT_PER_KB = 10;\nexport const API_HOST = \"https://ordinals.gorillapool.io/api\";","import {\n\tLockingScript,\n\tP2PKH,\n\ttype Script,\n} from \"@bsv/sdk\";\nimport type { Inscription, MAP } from \"../types\";\nimport { toHex } from \"../utils/strings\";\nimport { MAP_PREFIX } from \"../constants\";\n\n/**\n * OrdP2PKH (1Sat Ordinal + Pay To Public Key Hash) class implementing ScriptTemplate.\n *\n * This class provides methods to create an Ordinal with Pay To Public Key Hash locking and unlocking scripts. \n * It extends the standard P2PKH script template and provides a custom lock method.\n */\nexport default class OrdP2PKH extends P2PKH {\n\t/**\n\t * Creates a 1Sat Ordinal + P2PKH locking script for a given address string\n\t *\n\t * @param {string} address - An destination address for the Ordinal.\n\t * @param {Object} [inscription] - Base64 encoded file data and Content type of the file.\n\t * @param {MAP} [metaData] - (optional) MAP Metadata to be included in OP_RETURN.\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\t// unlock method inherits from p2pkh\n\tlock(\n\t\taddress: string,\n    inscription?: Inscription,\n\t\tmetaData?: MAP | undefined,\n\t): Script {\n\t\tlet ordAsm = \"\";\n\t\t// This can be omitted for reinscriptions that just update metadata\n\t\tif (inscription?.dataB64 !== undefined && inscription?.contentType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(inscription.dataB64, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(inscription.contentType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`;\n\t\t}\n\n\t\t// Create ordinal output and inscription in a single output\n\t\tconst lockingScript = new P2PKH().lock(address);\n\t\tlet inscriptionAsm = `${ordAsm ? `${ordAsm} ` : \"\"}${lockingScript.toASM()}`;\n\n\t\t// MAP.app and MAP.type keys are required\n\t\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t\t}\n\n\t\tif (metaData?.app && metaData?.type) {\n\t\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\t\tconst mapCmdValue = toHex(\"SET\");\n\t\t\tinscriptionAsm = `${inscriptionAsm} OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\t\tif (key !== \"cmd\") {\n\t\t\t\t\tinscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\n\t\t\t\t\t\tvalue as string,\n\t\t\t\t\t)}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn LockingScript.fromASM(inscriptionAsm);\n\t}\n}\n","import {\n\ttype Transaction,\n\ttype UnlockingScript,\n\tfromUtxo,\n\ttype TransactionInput,\n\tUtils,\n\tP2PKH,\n  Script,\n} from \"@bsv/sdk\";\nimport { type NftUtxo, TokenType, type TokenUtxo, type Utxo } from \"../types\";\nimport { API_HOST } from \"../constants\";\n\nconst { fromBase58Check } = Utils;\n\n/**\n * Converts a Utxo object with a base64 encoded script to a Utxo object with a hex encoded script\n * @param {Utxo} utxo - Utxo object with base64 encoded script\n * @param {Object} unlockScriptTemplate - Object with sign and estimateLength functions\n * @returns {TransactionInput} Utxo object with hex encoded script\n */\nexport const inputFromB64Utxo = (\n\tutxo: Utxo,\n\tunlockScriptTemplate: {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>;\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>;\n\t},\n): TransactionInput => {\n\tconst input = fromUtxo(\n\t\t{\n\t\t\t...utxo,\n\t\t\tscript: Buffer.from(utxo.script, \"base64\").toString(\"hex\"),\n\t\t},\n\t\tunlockScriptTemplate,\n\t);\n\treturn input;\n};\n\n/**\n * Fetches pay utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<Utxo[]>} Array of pay utxos\n */\nexport const fetchPayUtxos = async (address: string, scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\"): Promise<Utxo[]> => {\n\tconst payUrl = `${API_HOST}/txos/address/${address}/unspent?bsv20=false`;\n\tconsole.log({ payUrl });\n\tconst payRes = await fetch(payUrl);\n\tif (!payRes.ok) {\n\t\tthrow new Error(\"Error fetching pay utxos\");\n\t}\n\tlet payUtxos = await payRes.json();\n\t// exclude all 1 satoshi utxos\n\tpayUtxos = payUtxos.filter((u: { satoshis: number }) => u.satoshis !== 1);\n\n\t// Get pubkey hash from address\n\tconst pubKeyHash = fromBase58Check(address);\n\tconst p2pkhScript = new P2PKH().lock(pubKeyHash.data);\n\tpayUtxos = payUtxos.map((utxo: Partial<Utxo>) => ({\n\t\ttxid: utxo.txid,\n\t\tvout: utxo.vout,\n\t\tsatoshis: utxo.satoshis,\n\t\tscript: scriptEncoding === \"hex\" || scriptEncoding === \"base64\" ? Buffer.from(p2pkhScript.toBinary()).toString(scriptEncoding) : p2pkhScript.toASM(),\n\t}));\n\treturn payUtxos as Utxo[];\n};\n\n/**\n * Fetches NFT utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @param {string} [collectionId] - Optional. Collection id (collection insciprtion origin)\n * @param {number} [limit=10] - Optional. Number of utxos to fetch. Default is 10\n * @param {number} [offset=0] - Optional. Offset for fetching utxos. Default is 0\n * @param {string} [scriptEncoding=\"base64\"] - Optional. Encoding for the script. Default is base64. Options are hex, base64, or asm.\n * @returns {Promise<Utxo[]>} Array of NFT utxos\n */\nexport const fetchNftUtxos = async (\n\taddress: string,\n\tcollectionId?: string,\n\tlimit = 10,\n\toffset = 0,\n  scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\",\n): Promise<NftUtxo[]> => {\n\tlet url = `${API_HOST}/txos/address/${address}/unspent?limit=${limit}&offset=${offset}&`;\n\n\tif (collectionId) {\n\t\tconst query = {\n\t\t\tmap: {\n\t\t\t\tsubTypeData: { collectionId },\n\t\t\t},\n\t\t};\n\t\tconst b64Query = Buffer.from(JSON.stringify(query)).toString(\"base64\");\n\t\turl += `q=${b64Query}`;\n\t}\n\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching NFT utxos for ${address}`);\n\t}\n\n\t// Returns a BSV20Txo but we only need a few fields\n\tlet nftUtxos = await res.json();\n\n\t// Only include 1 satoshi outputs, non listings\n\tnftUtxos = nftUtxos.filter(\n\t\t(u: {\n\t\t\tsatoshis: number;\n\t\t\tdata: { list: { price: number; payout: string } | undefined } | null;\n\t\t}) => u.satoshis === 1 && !u.data?.list,\n\t);\n\n\tconst outpoints = nftUtxos.map(\n\t\t(utxo: { txid: string; vout: number }) => `${utxo.txid}_${utxo.vout}`,\n\t);\n\t// Fetch the scripts up to the limit\n\tconst nftRes = await fetch(`${API_HOST}/txos/outpoints?script=true`, {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t\tbody: JSON.stringify([...outpoints]),\n\t});\n\n\tif (!nftRes.ok) {\n\t\tthrow new Error(`Error fetching NFT scripts for ${address}`);\n\t}\n\n\tconst nfts = (await nftRes.json() || [])\n\n\tnftUtxos = nfts.map(\n\t\t(utxo: {\n\t\t\torigin: { outpoint: string };\n\t\t\tscript: string;\n\t\t\tvout: number;\n\t\t\ttxid: string;\n\t\t}) => {\n      let script = utxo.script;\n      if (scriptEncoding === \"hex\") {\n        script = Buffer.from(script, \"base64\").toString(\"hex\");\n      } else if (scriptEncoding === \"asm\") {\n        script = Script.fromHex(Buffer.from(script, \"base64\").toString(\"hex\")).toASM();\n      }\n\t\t\tconst nftUtxo = {\n\t\t\t\torigin: utxo.origin.outpoint,\n\t\t\t\tscript,\n\t\t\t\tvout: utxo.vout,\n\t\t\t\ttxid: utxo.txid,\n\t\t\t\tsatoshis: 1,\n\t\t\t} as NftUtxo;\n\t\t\tif (collectionId) {\n\t\t\t\tnftUtxo.collectionId = collectionId;\n\t\t\t}\n\t\t\treturn nftUtxo;\n\t\t},\n\t);\n\n\treturn nftUtxos as NftUtxo[];\n};\n\n/**\n * Fetches token utxos from the API\n * @param {TokenType} protocol - Token protocol. Either BSV20 or BSV21\n * @param {string} tokenId - Token id. Ticker for BSV20 and id (mint+deploy inscription origin) for BSV21\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<TokenUtxo[]>} Array of token utxos\n */\nexport const fetchTokenUtxos = async (\n\tprotocol: TokenType,\n\ttokenId: string,\n\taddress: string,\n): Promise<TokenUtxo[]> => {\n\tconst url = `${API_HOST}/bsv20/${address}/${protocol === TokenType.BSV20 ? \"tick\" : \"id\"}/${tokenId}?bsv20=true&listing=false`;\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching ${protocol} utxos`);\n\t}\n\n\t// returns a BSV20Txo but we only need a few fields\n\tlet tokenUtxos = await res.json();\n\n\ttokenUtxos = tokenUtxos.map((utxo: Partial<TokenUtxo>) => ({\n\t\tamt: utxo.amt,\n\t\tscript: utxo.script,\n\t\tvout: utxo.vout,\n\t\ttxid: utxo.txid,\n\t\tid: tokenId,\n\t\tsatoshis: 1,\n\t}));\n\n\treturn tokenUtxos as TokenUtxo[];\n};\n","import type { Transaction } from \"@bsv/sdk\";\nimport { Sigma } from \"sigma-protocol\";\nimport type { LocalSigner, RemoteSigner } from \"./types\";\n\n/**\n * Signs data in the transaction with Sigma protocol\n * @param {Transaction} tx - Transaction to sign\n * @param {LocalSigner | RemoteSigner} signer - Local or remote signer (used for data signature)\n * @returns {Transaction} Transaction with signed data\n */\nexport const signData = async (\n\ttx: Transaction,\n\tsigner: LocalSigner | RemoteSigner,\n): Promise<Transaction> => {\n\t// Sign tx if idKey or remote signer like starfish/tokenpass\n\tconst idKey = (signer as LocalSigner)?.idKey;\n\tconst keyHost = (signer as RemoteSigner)?.keyHost;\n\n\tif (idKey) {\n\t\tconst sigma = new Sigma(tx);\n\t\tconst { signedTx } = sigma.sign(idKey);\n\t\treturn signedTx;\n\t}\n\tif (keyHost) {\n\t\tconst authToken = (signer as RemoteSigner)?.authToken;\n\t\tconst sigma = new Sigma(tx);\n\t\ttry {\n\t\t\tconst { signedTx } = await sigma.remoteSign(keyHost, authToken);\n\t\t\treturn signedTx;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthrow new Error(`Remote signing to ${keyHost} failed`);\n\t\t}\n\t}\n\tthrow new Error(\"Signer must be a LocalSigner or RemoteSigner\");\n};\n","import type { MAP, PreMAP } from \"../types\";\n\nconst stringifyMetaData = (metaData?: PreMAP): MAP | undefined => {\n  if (!metaData) return undefined;\n\tconst result: MAP = {\n\t\tapp: metaData.app,\n\t\ttype: metaData.type,\n\t};\n\n\tfor (const [key, value] of Object.entries(metaData)) {\n\t\tif (value !== undefined) {\n\t\t\tif (typeof value === \"string\") {\n\t\t\t\tresult[key] = value;\n\t\t\t} else if (Array.isArray(value) || typeof value === \"object\") {\n\t\t\t\tresult[key] = JSON.stringify(value);\n\t\t\t} else {\n\t\t\t\tresult[key] = String(value);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\nexport default stringifyMetaData;\n","import { Transaction, SatoshisPerKilobyte, P2PKH, Script, Utils } from \"@bsv/sdk\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n\tUtxo,\n\tCreateOrdinalsConfig,\n\tCreateOrdinalsResult,\n\tCreateOrdinalsCollectionConfig,\n\tCreateOrdinalsCollectionItemConfig,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Creates a transaction with inscription outputs\n * @param {CreateOrdinalsConfig | CreateOrdinalsCollectionConfig | CreateOrdinalsCollectionItemConfig} config - Configuration object for creating ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {string} config.changeAddress - Optional. Address to send change to. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Local or remote signer (used for data signature)\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<CreateOrdinalsResult>} Transaction with inscription outputs\n */\nexport const createOrdinals = async (\n\tconfig:\n\t\t| CreateOrdinalsConfig\n\t\t| CreateOrdinalsCollectionConfig\n\t\t| CreateOrdinalsCollectionItemConfig,\n): Promise<CreateOrdinalsResult> => {\n\tconst {\n\t\tutxos,\n\t\tdestinations,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Inputs\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\ttx.addInput(input);\n\t}\n\n\t// Warn if creating many inscriptions at once\n\tif (destinations.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Outputs\n\t// Add inscription outputs\n\tfor (const destination of destinations) {\n\t\tif (!destination.inscription) {\n\t\t\tthrow new Error(\"Inscription is required for all destinations\");\n\t\t}\n\n\t\t// remove any undefined fields from metadata\n\t\tif (metaData) {\n\t\t\tfor(const key of Object.keys(metaData)) {\n\t\t\t\tif (metaData[key] === undefined) {\n\t\t\t\t\tdelete metaData[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription,\n\t\t\t\tstringifyMetaData(metaData),\n\t\t\t),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Calculate total input and output amounts\n\tconst totalInput = utxos.reduce(\n\t\t(sum, utxo) => sum + BigInt(utxo.satoshis),\n\t\t0n,\n\t);\n\tconst totalOutput = tx.outputs.reduce(\n\t\t(sum, output) => sum + BigInt(output.satoshis || 0),\n\t\t0n,\n\t);\n\n\t// Estimate fee\n\tconst estimatedFee = await modelOrFee.computeFee(tx);\n\n\t// Check if change is needed\n\tlet payChange: Utxo | undefined;\n\tif (totalInput > totalOutput + BigInt(estimatedFee)) {\n\t\tconst changeScript = new P2PKH().lock(\n\t\t\tchangeAddress || paymentPk.toAddress().toString(),\n\t\t);\n\t\tconst changeOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\t// Add change output\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet,\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\n\t\ttx.addOutput(changeOutput);\n\t}\n\n\tif (signer) {\n\t\ttx = await signData(tx, signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\tScript,\n\ttype TransactionOutput,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type { SendOrdinalsResult, SendOrdinalsConfig, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Sends ordinals to the given destinations\n * @param {SendOrdinalsConfig} config - Configuration object for sending ordinals\n * @param {Utxo[]} config.paymentUtxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.ordinals - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {string} config.changeAddress - Optional. Address to send change to, if any. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @param {boolean} config.enforceUniformSend - Optional. Default: true. Enforce that the number of destinations matches the number of ordinals being sent. Sending ordinals requires a 1:1 mapping of destinations to ordinals. This is only used for sub-protocols like BSV21 that manage tokens without sending the inscriptions directly.\n * @returns {Promise<SendOrdinalsResult>} Transaction, spent outpoints, and change vout\n */\nexport const sendOrdinals = async (\n\tconfig: SendOrdinalsConfig,\n): Promise<SendOrdinalsResult> => {\n\tif (!config.satsPerKb) {\n\t\tconfig.satsPerKb = DEFAULT_SAT_PER_KB;\n\t}\n\tif (!config.additionalPayments) {\n\t\tconfig.additionalPayments = [];\n\t}\n\tif (config.enforceUniformSend === undefined) {\n\t\tconfig.enforceUniformSend = true;\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(config.satsPerKb);\n\tlet tx = new Transaction();\n\tconst spentOutpoints: string[] = [];\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of config.ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(\n\t\t\tordUtxo,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tconfig.ordPk, \n\t\t\t\t\"all\",\n\t\t\t\ttrue, \n\t\t\t\tordUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(ordUtxo.script, 'base64'))\n\t\t\t),\n\t\t);\n\t\tspentOutpoints.push(`${ordUtxo.txid}_${ordUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// check that ordinals coming in matches ordinals going out if supplied\n\tif (\n\t\tconfig.enforceUniformSend &&\n\t\tconfig.destinations.length !== config.ordinals.length\n\t) {\n\t\tthrow new Error(\n\t\t\t\"Number of destinations must match number of ordinals being sent\",\n\t\t);\n\t}\n\n\t// Add ordinal outputs\n\tfor (const destination of config.destinations) {\n\t\tlet s: Script;\n\t\tif (\n\t\t\tdestination.inscription?.dataB64 &&\n\t\t\tdestination.inscription?.contentType\n\t\t) {\n\t\t\ts = new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription,\n\t\t\t\tstringifyMetaData(config.metaData),\n\t\t\t);\n\t\t} else {\n\t\t\ts = new P2PKH().lock(destination.address);\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: s,\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of config.additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of config.paymentUtxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tconfig.paymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\tspentOutpoints.push(`${utxo.txid}_${utxo.vout}`);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (totalSatsIn < totalSatsOut) {\n\t\tthrow new Error(\"Not enough ordinals to send\");\n\t}\n\n\tlet payChange: Utxo | undefined;\n\tif (totalSatsIn > totalSatsOut + BigInt(fee)) {\n\t\tconst changeScript = new P2PKH().lock(\n\t\t\tconfig.changeAddress || config.paymentPk.toAddress().toString(),\n\t\t);\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not available until the transaction is signed\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t}\n\n\tif (config.signer) {\n\t\ttx = await signData(tx, config.signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChange,\n\t};\n};\n","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype TransactionOutput,\n\tUtils,\n\tScript,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type { SendUtxosConfig, SendUtxosResult, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Sends utxos to the given destination\n * @param {SendUtxosConfig} config - Configuration object for sending utxos\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {Payment[]} config.payments - Array of payments with addresses and amounts\n * @param {number} [config.satsPerKb] - Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {string} [config.changeAddress] - Address to send change to. If not provided, defaults to paymentPk address\n * @returns {Promise<SendUtxosResult>} Transaction with utxo outputs\n */\nexport const sendUtxos = async (\n\tconfig: SendUtxosConfig,\n): Promise<SendUtxosResult> => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tpayments,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tchangeAddress = paymentPk.toAddress().toString(),\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\t// Outputs\n\tfor (const payment of payments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new P2PKH().lock(payment.to),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + (out.satoshis || 0),\n\t\t0,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\ttx.addInput(input);\n\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + fee) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + fee) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to send. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChange: Utxo | undefined;\n\tif (totalSatsIn > totalSatsOut + fee) {\n\t\t// Change\n\t\tconst changeScript = new P2PKH().lock(changeAddress);\n\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t} else if (totalSatsIn < totalSatsOut + fee) {\n\t\tconsole.log(\"No change needed\");\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTokenType,\n\ttype TransferBSV20Inscription,\n\ttype TransferTokenInscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferOrdTokensConfig,\n\ttype TransferOrdTokensResult,\n\ttype TokenUtxo,\n\ttype Utxo,\n} from \"./types\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { P2PKH, SatoshisPerKilobyte, Script, Transaction, Utils } from \"@bsv/sdk\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Transfer tokens to a destination\n * @param {TransferOrdTokensConfig} config - Configuration object for transferring tokens\n * @param {TokenType} config.protocol - Token protocol. Must be TokenType.BSV20 or TokenType.BSV21\n * @param {string} config.tokenID - Token ID. Either the tick or id value depending on the protocol\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {TokenUtxo[]} config.inputTokens - Token utxos to spend\n * @param {Distribution[]} config.distributions - Array of destinations with addresses and amounts\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {string} config.changeAddress - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {string} config.tokenChangeAddress - Optional. Address to send token change to, if any. If not provided, defaults to ordPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @param {burn} config.burn - Optional. Set to true to burn the tokens.\n * @returns {Promise<TransferOrdTokensResult>} Transaction with token transfer outputs\n */\nexport const transferOrdTokens = async (config: TransferOrdTokensConfig): Promise<TransferOrdTokensResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tinputTokens,\n\t\tdistributions,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tchangeAddress,\n\t\ttokenChangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t\tburn = false\n\t} = config;\n\n\t// calculate change amount\n\tlet changeAmt = 0n;\n\tlet totalAmtIn = 0n;\n\tlet totalAmtOut = 0n;\n\n\t// Ensure these inputs are for the expected token\n\tif (!inputTokens.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\tfor (const token of inputTokens) {\n\t\tconst inputScriptBinary = Utils.toArray(token.script, \"base64\");\n\t\tconst inputScript = Script.fromBinary(inputScriptBinary);\n\t\ttx.addInput({\n\t\t\tunlockingScriptTemplate: new OrdP2PKH().unlock(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\ttoken.satoshis,\n\t\t\t\tinputScript,\n\t\t\t),\n\t\t\tsourceTXID: token.txid,\n\t\t\tsourceOutputIndex: token.vout,\n\t\t\tsequence: 0xffffffff,\n\t\t});\n\n\t\ttotalAmtIn += BigInt(token.amt);\n\t}\n\n\t// build destination inscriptions\n\tfor (const dest of distributions) {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: burn ? \"burn\" : \"transfer\",\n\t\t\tamt: dest.amt,\n\t\t}\n\t\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\ttick: tokenID,\n\t\t\t} as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\tid: tokenID,\n\t\t\t} as TransferBSV21Inscription;\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid protocol\");\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdest.address,\n\t\t\t\t{\n\t\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\t\t\tcontentType: \"application/bsv20\",\n\t\t\t\t},\n\t\t\t),\n\t\t});\n\t\ttotalAmtOut += BigInt(dest.amt);\n\t};\n\tchangeAmt = totalAmtIn - totalAmtOut;\n\n\tlet tokenChange: TokenUtxo | undefined;\n\t// check that you have enough tokens to send and return change\n\tif (changeAmt < 0n) {\n\t\tthrow new Error(\"Not enough tokens to send\");\n\t}\n\tif (changeAmt > 0n) {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: \"transfer\",\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\ttick: tokenID,\n\t\t\t} as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\tid: tokenID,\n\t\t\t} as TransferBSV21Inscription;\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid protocol\");\n\t\t}\n\n\t\tconst lockingScript = new OrdP2PKH().lock(\n\t\t\ttokenChangeAddress || ordPk.toAddress().toString(), \n\t\t\t{\n\t\t\t\tdataB64: JSON.stringify(inscription),\n\t\t\t\tcontentType: \"application/bsv-20\",\n\t\t\t}\n\t\t);\n\t\tconst vout = tx.outputs.length;\n\t\ttx.addOutput({ lockingScript, satoshis: 1 });\n\t\ttokenChange = {\n\t\t\tid: tokenID,\n\t\t\tsatoshis: 1,\n\t\t\tscript: Buffer.from(lockingScript.toBinary()).toString(\"base64\"),\n\t\t\ttxid: \"\",\n\t\t\tvout,\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst txid = tx.id(\"hex\") as string;\n\tif (tokenChange) {\n\t\ttokenChange.txid = txid;\n\t}\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t\ttokenChange,\n\t};\n};","import type { CollectionItemSubTypeData, CollectionSubTypeData } from \"./types\";\n\n/**\n * Validates sub type data\n * @param {string} subType - Sub type of the ordinals token\n * @param {string} subTypeData - Sub type data of the ordinals token\n * @returns {Error | undefined} Error if validation fails, undefined if validation passes\n */\nexport const validateSubTypeData = (\n  subType: \"collection\" | \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData | CollectionSubTypeData,\n): Error | undefined => {\n  try {\n    if (subType === \"collection\") {\n      const collectionData = subTypeData as CollectionSubTypeData;\n      if (!collectionData.description) {\n        return new Error(\"Collection description is required\");\n      }\n      if (!collectionData.quantity) {\n        return new Error(\"Collection quantity is required\");\n      }\n      if (collectionData.rarityLabels) {\n        if (!Array.isArray(collectionData.rarityLabels)) {\n          return new Error(\"Rarity labels must be an array\");\n        }\n        // make sure keys and values are strings\n        if (!collectionData.rarityLabels.every((label) => {\n          return Object.values(label).every(value => typeof value === 'string');\n        })) {\n          return new Error(`Invalid rarity labels ${collectionData.rarityLabels}`);\n        }\n      }\n      if (collectionData.traits ) {\n        if (typeof collectionData.traits !== \"object\") {\n        return new Error(\"Collection traits must be an object\");\n        }\n        if (collectionData.traits && !Object.keys(collectionData.traits).every(key => typeof key === 'string' && typeof collectionData.traits[key] === 'object')) {\n          return new Error(\"Collection traits must be a valid CollectionTraits object\");\n        }\n      }\n    }\n    if (subType === \"collectionItem\") {\n      const itemData = subTypeData as CollectionItemSubTypeData;\n      if (!itemData.collectionId) {\n        return new Error(\"Collection id is required\");\n      }\n      if (!itemData.collectionId.includes(\"_\")) {\n        return new Error(\"Collection id must be a valid outpoint\");\n      }\n      if (itemData.collectionId.split(\"_\")[0].length !== 64) {\n        return new Error(\"Collection id must contain a valid txid\");\n      }\n      if (Number.isNaN(Number.parseInt(itemData.collectionId.split(\"_\")[1]))) {\n        return new Error(\"Collection id must contain a valid vout\");\n      }\n\n      if (itemData.mintNumber && typeof itemData.mintNumber !== \"number\") {\n        return new Error(\"Mint number must be a number\");\n      }\n      if (itemData.rank && typeof itemData.rank !== \"number\") {\n        return new Error(\"Rank must be a number\");\n      }\n      if (itemData.rarityLabel && typeof itemData.rarityLabel !== \"string\") {\n        return new Error(\"Rarity label must be a string\");\n      }\n      if (itemData.traits && typeof itemData.traits !== \"object\") {\n        return new Error(\"Traits must be an object\");\n      }\n      if (itemData.attachments && !Array.isArray(itemData.attachments)) {\n        return new Error(\"Attachments must be an array\");\n      }\n    }\n    return undefined;\n  } catch (error) {\n    return new Error(\"Invalid JSON data\");\n  }\n};","import {\n\tBigNumber,\n\ttype LockingScript,\n\tOP,\n\tP2PKH,\n\ttype PrivateKey,\n\tScript,\n\ttype Transaction,\n\tTransactionSignature,\n\tUnlockingScript,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { toHex } from \"../utils/strings\";\nimport type { Inscription } from \"../types\";\n\nexport const oLockPrefix =\n\t\"2097dfd76851bf465e8f715593b217714858bbe9570ff3bd5e33840a34e20ff0262102ba79df5f8ae7604a9830f03c7933028186aede0675a16f025dc4f8be8eec0382201008ce7480da41702918d1ec8e6849ba32b4d65b1e40dc669c31a1e6306b266c0000\";\nexport const oLockSuffix =\n\t\"615179547a75537a537a537a0079537a75527a527a7575615579008763567901c161517957795779210ac407f0e4bd44bfc207355a778b046225a7068fc59ee7eda43ad905aadbffc800206c266b30e6a1319c66dc401e5bd6b432ba49688eecd118297041da8074ce081059795679615679aa0079610079517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01007e81517a75615779567956795679567961537956795479577995939521414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff00517951796151795179970079009f63007952799367007968517a75517a75517a7561527a75517a517951795296a0630079527994527a75517a6853798277527982775379012080517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01205279947f7754537993527993013051797e527e54797e58797e527e53797e52797e57797e0079517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a756100795779ac517a75517a75517a75517a75517a75517a75517a75517a75517a7561517a75517a756169587951797e58797eaa577961007982775179517958947f7551790128947f77517a75517a75618777777777777777777767557951876351795779a9876957795779ac777777777777777767006868\";\n\n/**\n * OrdLock class implementing ScriptTemplate.\n *\n * This class provides methods for interacting with OrdinalLock contract \n */\nexport default class OrdLock {\n\t/**\n\t * Creates a 1Sat Ordinal Lock script\n\t *\n\t * @param {string} ordAddress - An address which can cancel listing.\n\t * @param {string} payAddress - Address which is paid on purchase\n\t * @param {number} price - Listing price in satoshis\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\tlock(\n\t\tordAddress: string,\n\t\tpayAddress: string,\n\t\tprice: number,\n    inscription?: Inscription,\n\t): Script {\n\t\tconst cancelPkh = Utils.fromBase58Check(ordAddress).data as number[];\n\t\tconst payPkh = Utils.fromBase58Check(payAddress).data as number[];\n\n\t\tlet script = new Script()\n\t\tif (inscription?.dataB64 !== undefined && inscription?.contentType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(inscription.dataB64, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(inscription.contentType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tscript = Script.fromASM(`OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`);\n\t\t}\n\t\t\n\t\treturn script.writeScript(Script.fromHex(oLockPrefix))\n\t\t\t.writeBin(cancelPkh)\n\t\t\t.writeBin(OrdLock.buildOutput(price, new P2PKH().lock(payPkh).toBinary()))\n\t\t\t.writeScript(Script.fromHex(oLockSuffix))\n\t}\n\n\tcancelListing(\n\t\tprivateKey: PrivateKey,\n\t\tsignOutputs: 'all' | 'none' | 'single' = 'all',\n\t\tanyoneCanPay = false,\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: () => Promise<number>\n\t} {\n\t\tconst p2pkh = new P2PKH().unlock(privateKey, signOutputs, anyoneCanPay, sourceSatoshis, lockingScript)\n\t\treturn {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await p2pkh.sign(tx, inputIndex)).writeOpCode(OP.OP_1)\n\t\t\t},\n\t\t\testimateLength: async () => {\n\t\t\t\treturn 107\n\t\t\t}\n\t\t}\n\t}\n\n\tpurchaseListing(\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>\n\t} {\n\t\tconst purchase = {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\tif (tx.outputs.length < 2) {\n\t\t\t\t\tthrow new Error(\"Malformed transaction\")\n\t\t\t\t}\n\t\t\t\tconst script = new UnlockingScript()\n\t\t\t\t\t.writeBin(OrdLock.buildOutput(\n\t\t\t\t\t\ttx.outputs[0].satoshis || 0,\n\t\t\t\t\t\ttx.outputs[0].lockingScript.toBinary()\n\t\t\t\t\t))\n\t\t\t\tif(tx.outputs.length > 2) {\n\t\t\t\t\tconst writer = new Utils.Writer()\n\t\t\t\t\tfor(const output of tx.outputs.slice(2)) {\n\t\t\t\t\t\twriter.write(OrdLock.buildOutput(output.satoshis || 0, output.lockingScript.toBinary()))\n\t\t\t\t\t}\n\t\t\t\t\tscript.writeBin(writer.toArray())\n\t\t\t\t} else {\n\t\t\t\t\tscript.writeOpCode(OP.OP_0)\n\t\t\t\t}\n\n        const input = tx.inputs[inputIndex]\n        let sourceSats: number\n        if (!sourceSatoshis && input.sourceTransaction) {\n          sourceSats = input.sourceTransaction.outputs[input.sourceOutputIndex].satoshis as number\n        } else if (!sourceSatoshis) {\n          throw new Error(\"sourceTransaction or sourceSatoshis is required\")\n        }\n        sourceSats = sourceSatoshis as number\n        \n        const sourceTXID = (input.sourceTXID || input.sourceTransaction?.id('hex')) as string\n        let subscript = lockingScript as LockingScript\n        if (!lockingScript) {\n          subscript = input.sourceTransaction?.outputs[input.sourceOutputIndex].lockingScript as LockingScript\n        }\n\t\t\t\tconst preimage = TransactionSignature.format({\n\t\t\t\t\tsourceTXID,\n\t\t\t\t\tsourceOutputIndex: input.sourceOutputIndex,\n\t\t\t\t\tsourceSatoshis: sourceSats,\n\t\t\t\t\ttransactionVersion: tx.version,\n\t\t\t\t\totherInputs: [],\n\t\t\t\t\tinputIndex,\n\t\t\t\t\toutputs: tx.outputs,\n\t\t\t\t\tinputSequence: input.sequence,\n\t\t\t\t\tsubscript,\n\t\t\t\t\tlockTime: tx.lockTime,\n\t\t\t\t\tscope: TransactionSignature.SIGHASH_ALL |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_ANYONECANPAY |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_FORKID\n\t\t\t\t  });\n\n\t\t\t\treturn script.writeBin(preimage).writeOpCode(OP.OP_0)\n\t\t\t},\n\t\t\testimateLength: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await purchase.sign(tx, inputIndex)).toBinary().length\n\t\t\t}\n\t\t}\n\t\treturn purchase\n\t}\n\n\tstatic buildOutput(satoshis: number, script: number[]): number[] {\n\t\tconst writer = new Utils.Writer()\n\t\twriter.writeUInt64LEBn(new BigNumber(satoshis))\n\t\twriter.writeVarIntNum(script.length)\n\t\twriter.write(script)\n\t\treturn writer.toArray()\n\t}\n}\n","import {\n\tP2PKH,\n\tSatoshisPerKilobyte,\n\tScript,\n\tTransaction,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport {\n\ttype CreateOrdTokenListingsConfig,\n\ttype CreateOrdListingsConfig,\n\ttype Utxo,\n\ttype TransferTokenInscription,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\tTokenType,\n\ttype TokenUtxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nconst { toArray } = Utils;\n\n// TODO: Handle royalty\nexport const createOrdListings = async (config: CreateOrdListingsConfig) => {\n\tconst {\n\t\tutxos,\n\t\tlistings,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t\troyalty,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Warn if creating many inscriptions at once\n\tif (listings.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Outputs\n\t// Add listing outputs\n\tfor (const listing of listings) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdLock().lock(\n\t\t\t\tlisting.payAddress,\n\t\t\t\tlisting.ordAddress,\n\t\t\t\tlisting.price,\n\t\t\t),\n\t\t});\n\t\tconst inputScriptBinary = toArray(listing.listingUtxo.script, \"base64\");\n\t\tconst inputScript = Script.fromBinary(inputScriptBinary);\n\t\ttx.addInput({\n\t\t\tunlockingScriptTemplate: new OrdP2PKH().unlock(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlisting.listingUtxo.satoshis,\n\t\t\t\tinputScript,\n\t\t\t),\n\t\t\tsourceTXID: listing.listingUtxo.txid,\n\t\t\tsourceOutputIndex: listing.listingUtxo.vout,\n\t\t\tsequence: 0xffffffff,\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Check if change is needed\n\tlet payChange: Utxo | undefined;\n\tconst changeScript = new P2PKH().lock(\n\t\tchangeAddress || paymentPk.toAddress().toString(),\n\t);\n\tconst changeOutput = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOutput);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\nexport const createOrdTokenListings = async (\n\tconfig: CreateOrdTokenListingsConfig,\n) => {\n\tconst {\n\t\tutxos,\n\t\tprotocol,\n\t\ttokenID,\n\t\tordPk,\n\t\tpaymentPk,\n\t\tadditionalPayments = [],\n\t\tchangeAddress,\n\t\ttokenChangeAddress,\n\t\tinputTokens,\n\t\tlistings,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\n\t// Warn if creating many inscriptions at once\n\tif (listings.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Ensure these inputs are for the expected token\n\tif (!inputTokens.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\t// calculate change amount\n\tlet changeAmt = 0n;\n\tlet totalAmtIn = 0n;\n\tlet totalAmtOut = 0n;\n\n\t// Ensure these inputs are for the expected token\n\tif (!inputTokens.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\t// Outputs\n\t// Add listing outputs\n\tfor (const listing of listings) {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: \"transfer\",\n\t\t\tamt: listing.listingUtxo.amt,\n\t\t};\n\t\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\ttick: tokenID,\n\t\t\t} as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\tid: tokenID,\n\t\t\t} as TransferBSV21Inscription;\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid protocol\");\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdLock().lock(\n\t\t\t\tlisting.payAddress,\n\t\t\t\tlisting.ordAddress,\n\t\t\t\tlisting.price,\n\t\t\t\t{\n\t\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\t\t\tcontentType: \"application/bsv20\",\n\t\t\t\t},\n\t\t\t),\n\t\t});\n\t\ttotalAmtOut += BigInt(listing.listingUtxo.amt);\n\t}\n\n\tfor (const token of inputTokens) {\n\t\tconst inputScriptBinary = toArray(token.script, \"base64\");\n\t\tconst inputScript = Script.fromBinary(inputScriptBinary);\n\t\ttx.addInput({\n\t\t\tunlockingScriptTemplate: new OrdP2PKH().unlock(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\ttoken.satoshis,\n\t\t\t\tinputScript,\n\t\t\t),\n\t\t\tsourceTXID: token.txid,\n\t\t\tsourceOutputIndex: token.vout,\n\t\t\tsequence: 0xffffffff,\n\t\t});\n\n\t\ttotalAmtIn += BigInt(token.amt);\n\t}\n\tchangeAmt = totalAmtIn - totalAmtOut;\n\n\tlet tokenChange: TokenUtxo | undefined;\n\t// check that you have enough tokens to send and return change\n\tif (changeAmt < 0n) {\n\t\tthrow new Error(\"Not enough tokens to send\");\n\t}\n\tif (changeAmt > 0n) {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: \"transfer\",\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\ttick: tokenID,\n\t\t\t} as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\tid: tokenID,\n\t\t\t} as TransferBSV21Inscription;\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid protocol\");\n\t\t}\n\n\t\tconst lockingScript = new OrdP2PKH().lock(tokenChangeAddress, {\n\t\t\tdataB64: JSON.stringify(inscription),\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t});\n\t\tconst vout = tx.outputs.length;\n\t\ttx.addOutput({ lockingScript, satoshis: 1 });\n\t\ttokenChange = {\n\t\t\tid: tokenID,\n\t\t\tsatoshis: 1,\n\t\t\tscript: Buffer.from(lockingScript.toBinary()).toString(\"base64\"),\n\t\t\ttxid: \"\",\n\t\t\tvout,\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst txid = tx.id(\"hex\") as string;\n\tif (tokenChange) {\n\t\ttokenChange.txid = txid;\n\t}\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t\ttokenChange,\n\t};\n};\n","import { P2PKH, SatoshisPerKilobyte, Script, Transaction, Utils } from \"@bsv/sdk\";\nimport {\n\tTokenType,\n\ttype CancelOrdListingsConfig,\n\ttype CancelOrdTokenListingsConfig,\n\ttype Destination,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\n\nexport const cancelOrdListings = async (config: CancelOrdListingsConfig) => {\n\tconst {\n\t\tutxos,\n\t\tlistingUtxos,\n\t\tordPk,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tadditionalPayments,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\n\t// Warn if creating many inscriptions at once\n\tif (listingUtxos.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\t\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinals we're cancelling\n\tfor (const listingUtxo of listingUtxos) {\n\t\ttx.addInput({\n\t\t\tsourceTXID: listingUtxo.txid,\n\t\t\tunlockingScriptTemplate: new OrdLock().cancelListing(ordPk),\n\t\t\tsourceOutputIndex: listingUtxo.vout,\n\t\t\tsequence: 0xffffffff,\n\t\t});\n\t\t// Add cancel outputs returning listed ordinals\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new P2PKH().lock(ordPk.toAddress().toString()),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo, \n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpaymentPk, \n\t\t\t\t\"all\",\n\t\t\t\ttrue, \n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t\t)\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\nexport const cancelOrdTokenListings = async (\n\tconfig: CancelOrdTokenListingsConfig,\n) => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tadditionalPayments,\n\t\tlistingUtxos,\n\t\tutxos,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\t// calculate change amount\n\tlet totalAmtIn = 0;\n\n\tif (listingUtxos.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Ensure these inputs are for the expected token\n\tif (!listingUtxos.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinals we're cancelling\n\tfor (const listingUtxo of listingUtxos) {\n\t\ttx.addInput({\n\t\t\tsourceTXID: listingUtxo.txid,\n\t\t\tsourceOutputIndex: listingUtxo.vout,\n\t\t\tsequence: 0xffffffff,\n\t\t\tunlockingScriptTemplate: new OrdLock().cancelListing(ordPk),\n\t\t});\n\t\ttotalAmtIn += Number.parseInt(listingUtxo.amt);\n\t}\n\n\tconst transferInscription: TransferTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"transfer\",\n\t\tamt: totalAmtIn.toString(),\n\t};\n\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\tif (protocol === TokenType.BSV20) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\ttick: tokenID,\n\t\t} as TransferBSV20Inscription;\n\t} else if (protocol === TokenType.BSV21) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\tid: tokenID,\n\t\t} as TransferBSV21Inscription;\n\t} else {\n\t\tthrow new Error(\"Invalid protocol\");\n\t}\n\n\tconst destination: Destination = {\n\t\taddress: ordAddress || ordPk.toAddress().toString(),\n\t\tinscription: {\n\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t},\n\t};\n\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\tdestination.address,\n\t\t\tdestination.inscription\n\t\t),\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};","import { P2PKH, SatoshisPerKilobyte, Script, Transaction, Utils } from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport {\n\tTokenType,\n\ttype Inscription,\n\ttype PurchaseOrdListingConfig,\n\ttype PurchaseOrdTokenListingConfig,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\n\nexport const purchaseOrdListings = async (config: PurchaseOrdListingConfig) => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tpaymentPk,\n\t\tlisting,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tadditionalPayments = [],\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinal we're purchasing\n\ttx.addInput({\n\t\tunlockingScriptTemplate: new OrdLock().purchaseListing(\n\t\t\tlisting.listingUtxo.satoshis,\n\t\t\tScript.fromHex(Buffer.from(listing.listingUtxo.script, \"base64\").toString(\"hex\")),\n\t\t),\n\t\tsourceTXID: listing.listingUtxo.txid,\n\t\tsourceOutputIndex: listing.listingUtxo.vout,\n\t\tsequence: 0xffffffff,\n\t});\n\n\t// Outputs\n\t// Add the purchased output\n\tconst transferInscription: TransferTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"transfer\",\n\t\tamt: listing.listingUtxo.amt,\n\t};\n\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\tif (protocol === TokenType.BSV20) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\ttick: tokenID,\n\t\t} as TransferBSV20Inscription;\n\t} else if (protocol === TokenType.BSV21) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\tid: tokenID,\n\t\t} as TransferBSV21Inscription;\n\t} else {\n\t\tthrow new Error(\"Invalid protocol\");\n\t}\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(ordAddress, {\n\t\t\tdataB64: JSON.stringify(inscription),\n\t\t\tcontentType: \"application/bsv-20\"\n\t\t}),\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\nexport const purchaseOrdTokenListing = async (\n\tconfig: PurchaseOrdTokenListingConfig,\n) => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tpaymentPk,\n\t\tlistingUtxo,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinal we're purchasing\n\ttx.addInput({\n\t\tunlockingScriptTemplate: new OrdLock().purchaseListing(\n\t\t\t1,\n\t\t\tScript.fromHex(Buffer.from(listingUtxo.script, \"base64\").toString(\"hex\")),\n\t\t),\n\t\tsourceTXID: listingUtxo.txid,\n\t\tsourceOutputIndex: listingUtxo.vout,\n\t\tsequence: 0xffffffff,\n\t});\n\t// Outputs\n\tconst transferInscription: TransferTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"transfer\",\n\t\tamt: listingUtxo.amt,\n\t};\n\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\tif (protocol === TokenType.BSV20) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\ttick: tokenID,\n\t\t} as TransferBSV20Inscription;\n\t} else if (protocol === TokenType.BSV21) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\tid: tokenID,\n\t\t} as TransferBSV21Inscription;\n\t} else {\n\t\tthrow new Error(\"Invalid protocol\");\n\t}\n\tconst dataB64 = Buffer.from(JSON.stringify(inscription)).toString(\"base64\");\n\n\t// Add the purchased output\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(ordAddress, {\n\t\t\tdataB64,\n\t\t\tcontentType: \"bsv-20\",\n\t\t}),\n\t});\n\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase token listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n  return {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n"],"names":["TokenType","RoytaltyType","toHex","utf8Str","Buffer","from","toString","DEFAULT_SAT_PER_KB","API_HOST","OrdP2PKH","_P2PKH","apply","arguments","_inheritsLoose","prototype","lock","address","inscription","metaData","ordAsm","undefined","dataB64","contentType","ordHex","fileHex","trim","Error","fileMediaType","inscriptionAsm","P2PKH","toASM","app","type","_i","_Object$entries","Object","entries","length","_Object$entries$_i","key","value","LockingScript","fromASM","fromBase58Check","Utils","inputFromB64Utxo","utxo","unlockScriptTemplate","fromUtxo","_extends","script","fetchPayUtxos","scriptEncoding","payUrl","console","log","Promise","resolve","fetch","then","payRes","ok","json","payUtxos","filter","u","satoshis","pubKeyHash","p2pkhScript","data","map","txid","vout","toBinary","e","reject","fetchNftUtxos","collectionId","limit","offset","url","JSON","stringify","subTypeData","res","nftUtxos","outpoints","_u$data","list","method","headers","body","concat","nftRes","nfts","Script","fromHex","nftUtxo","origin","outpoint","fetchTokenUtxos","protocol","tokenId","BSV20","tokenUtxos","amt","id","signData","tx","signer","_exit","_temp2","_result","idKey","keyHost","_sigma$sign","Sigma","sign","signedTx","_temp","authToken","sigma","remoteSign","_ref","_catch","stringifyMetaData","result","Array","isArray","String","createOrdinals","config","_step","utxos","destinations","paymentPk","changeAddress","_config$satsPerKb","satsPerKb","_config$additionalPay","additionalPayments","modelOrFee","SatoshisPerKilobyte","Transaction","_iterator","_createForOfIteratorHelperLoose","done","input","unlock","fromBinary","toArray","addInput","warn","_step2","_iterator2","destination","_Object$keys","keys","addOutput","lockingScript","_iterator3","_step3","p","amount","to","totalInput","reduce","sum","BigInt","totalOutput","outputs","output","computeFee","estimatedFee","fee","payChange","spentOutpoints","changeScript","toAddress","changeOutput","change","_signData","_settle","pact","state","s","_Pact","o","bind","v","onFulfilled","this","_this","onRejected","_isSettledPact","thenable","sendOrdinals","_interrupt","_temp4","totalSatsIn","totalSatsOut","changeOut","enforceUniformSend","ordinals","ordUtxo","ordPk","push","_destination$inscript","_destination$inscript2","total","out","_temp3","array","i","_cycle","check","_forOf","paymentUtxos","_modelOrFee$computeFe","observer","sendUtxos","payments","_config$changeAddress","payment","sendTxOut","_iteratorSymbol","Symbol","iterator","transferOrdTokens","tokenChange","payChangeOutIdx","findIndex","inputs","sourceTXID","sourceOutputIndex","tokenID","inputTokens","distributions","tokenChangeAddress","_config$burn","burn","changeAmt","totalAmtIn","totalAmtOut","every","token","inputScriptBinary","inputScript","unlockingScriptTemplate","sequence","dest","transferInscription","op","tick","BSV21","target","step","next","validateSubTypeData","subType","collectionData","description","quantity","rarityLabels","label","values","traits","itemData","includes","split","Number","isNaN","parseInt","mintNumber","rank","rarityLabel","attachments","error","OrdLock","_proto","ordAddress","payAddress","price","cancelPkh","payPkh","writeScript","writeBin","buildOutput","cancelListing","privateKey","signOutputs","anyoneCanPay","sourceSatoshis","p2pkh","inputIndex","_p2pkh$sign","writeOpCode","OP","OP_1","estimateLength","purchaseListing","purchase","_input$sourceTransact","UnlockingScript","writer","Writer","slice","write","OP_0","sourceSats","sourceTransaction","_input$sourceTransact2","subscript","preimage","TransactionSignature","format","transactionVersion","version","otherInputs","inputSequence","lockTime","scope","SIGHASH_ALL","SIGHASH_ANYONECANPAY","SIGHASH_FORKID","_purchase$sign","writeUInt64LEBn","BigNumber","writeVarIntNum","callback","createOrdListings","listings","listing","listingUtxo","return","_fixup","TypeError","_forTo","cancelOrdListings","listingUtxos","purchaseOrdListings"],"mappings":"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"}