{"version":3,"file":"index.module.js","sources":["../src/utils/strings.ts","../src/templates/ordP2pkh.ts","../src/constants.ts","../src/utils/utxo.ts","../src/signData.ts","../src/createOrdinals.ts","../src/sendOrdinals.ts","../src/sendUtxos.ts","../src/types.ts","../src/transferOrdinals.ts"],"sourcesContent":["/**\n * Converts a string to its hexadecimal representation\n *\n * @param {string} utf8Str - The string to convert\n * @returns {string} The hexadecimal representation of the input string\n */\nconst toHex = (utf8Str: string): string => {\n  return Buffer.from(utf8Str).toString(\"hex\");\n};\n\nexport { toHex };\n","import {\n\tLockingScript,\n\tP2PKH,\n\ttype Script,\n} from \"@bsv/sdk\";\nimport type { MAP } from \"../types\";\nimport { toHex } from \"../utils/strings\";\nimport { MAP_PREFIX } from \"../constants\";\n\n/**\n * OrdP2PKH (1Sat Ordinal + Pay To Public Key Hash) class implementing ScriptTemplate.\n *\n * This class provides methods to create an Ordinal with Pay To Public Key Hash locking and unlocking scripts. \n * It extends the standard P2PKH script template and provides a custom lock method.\n */\nexport default class OrdP2PKH extends P2PKH {\n\t/**\n\t * Creates a 1Sat Ordinal + P2PKH locking script for a given address string\n\t *\n\t * @param {string} address - An destination address for the Ordinal.\n\t * @param {string} [b64File] - Base64 encoded file data.\n\t * @param {string} [mediaType] - Media type of the file.\n\t * @param {MAP} [metaData] - (optional) MAP Metadata to be included in OP_RETURN.\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\t// unlock method inherits from p2pkh\n\tlock(\n\t\taddress: string,\n\t\tb64File?: string | undefined,\n\t\tmediaType?: string | undefined,\n\t\tmetaData?: MAP | undefined,\n\t): Script {\n\t\tlet ordAsm = \"\";\n\t\t// This can be omitted for reinscriptions that just update metadata\n\t\tif (b64File !== undefined && mediaType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(b64File, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(mediaType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`;\n\t\t}\n\n\t\t// Create ordinal output and inscription in a single output\n\t\tconst lockingScript = new P2PKH().lock(address);\n\t\tlet inscriptionAsm = `${ordAsm ? `${ordAsm} ` : \"\"}${lockingScript.toASM()}`;\n\n\t\t// MAP.app and MAP.type keys are required\n\t\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t\t}\n\n\t\tif (metaData?.app && metaData?.type) {\n\t\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\t\tconst mapCmdValue = toHex(\"SET\");\n\t\t\tinscriptionAsm = `${inscriptionAsm} OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\t\tif (key !== \"cmd\") {\n\t\t\t\t\tinscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\n\t\t\t\t\t\tvalue as string,\n\t\t\t\t\t)}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn LockingScript.fromASM(inscriptionAsm);\n\t}\n}\n","export const MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\nexport const DEFAULT_SAT_PER_KB = 10;\nexport const API_HOST = \"https://ordinals.gorillapool.io/api\";","import { type Transaction, type UnlockingScript, fromUtxo, type TransactionInput, Utils, P2PKH } from \"@bsv/sdk\";\nimport type { Utxo } from \"../types\";\nimport { API_HOST } from \"../constants\";\n\nconst { fromBase58Check } = Utils;\n\n/**\n * Converts a Utxo object with a base64 encoded script to a Utxo object with a hex encoded script\n * @param {Utxo} utxo - Utxo object with base64 encoded script\n * @param {Object} unlockScriptTemplate - Object with sign and estimateLength functions\n * @returns {TransactionInput} Utxo object with hex encoded script\n */\nexport const inputFromB64Utxo = (\n\tutxo: Utxo,\n\tunlockScriptTemplate: {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>;\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>;\n\t},\n): TransactionInput => {\n\tconst input = fromUtxo(\n\t\t{\n\t\t\t...utxo,\n\t\t\tscript: Buffer.from(utxo.script, \"base64\").toString(\"hex\"),\n\t\t},\n\t\tunlockScriptTemplate,\n\t);\n\tinput.sourceTXID = utxo.txid;\n\treturn input;\n};\n\nexport const fetchPayUtxos = async (address: string) => {\n  const payUrl = `${API_HOST}/txos/address/${address}/unspent?bsv20=false`;\n  console.log({ payUrl });\n  const payRes = await fetch(payUrl);\n  if (!payRes.ok) {\n    console.error(\"Error fetching pay utxos:\", payRes.statusText);\n    return;\n  }\n  let payUtxos = await payRes.json();\n  // exclude all 1 satoshi utxos\n  payUtxos = payUtxos.filter((u: { satoshis: number }) => u.satoshis !== 1)\n\n  // Get pubkey hash from address\n  const pubKeyHash = fromBase58Check(address)\n  const p2pkhScript = new P2PKH().lock(pubKeyHash.data)\n  payUtxos = payUtxos.map((utxo: {\n\t\ttxid: string;\n\t\tvout: number;\n\t\tsatoshis: number;\n\t}) => ({\n      txid: utxo.txid,\n      vout: utxo.vout,\n      satoshis: utxo.satoshis,\n      script: Buffer.from(p2pkhScript.toBinary()).toString(\"base64\"),\n  }))\n  return payUtxos\n}","import type { Transaction } from \"@bsv/sdk\";\nimport { Sigma } from \"sigma-protocol\";\nimport type { LocalSigner, RemoteSigner } from \"./types\";\n\n/**\n * Signs data in the transaction with Sigma protocol\n * @param {Transaction} tx - Transaction to sign\n * @param {LocalSigner | RemoteSigner} signer - Local or remote signer (used for data signature)\n * @returns {Transaction} Transaction with signed data\n */\nexport const signData = async (\n\ttx: Transaction,\n\tsigner: LocalSigner | RemoteSigner,\n): Promise<Transaction> => {\n\t// Sign tx if idKey or remote signer like starfish/tokenpass\n\tconst idKey = (signer as LocalSigner)?.idKey;\n\tconst keyHost = (signer as RemoteSigner)?.keyHost;\n\n\tif (idKey) {\n\t\tconst sigma = new Sigma(tx);\n\t\tconst { signedTx } = sigma.sign(idKey);\n\t\treturn signedTx;\n\t}\n\tif (keyHost) {\n\t\tconst authToken = (signer as RemoteSigner)?.authToken;\n\t\tconst sigma = new Sigma(tx);\n\t\ttry {\n\t\t\tconst { signedTx } = await sigma.remoteSign(keyHost, authToken);\n\t\t\treturn signedTx;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthrow new Error(`Remote signing to ${keyHost} failed`);\n\t\t}\n\t}\n\tthrow new Error(\"Signer must be a LocalSigner or RemoteSigner\");\n};\n","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n} from \"@bsv/sdk\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n\tUtxo,\n\tDestination,\n\tMAP,\n\tLocalSigner,\n\tRemoteSigner,\n\tPayment,\n\tCreateOrdinalsConfig,\n\tCreateOrdinalsResult,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { signData } from \"./signData\";\n\n/**\n * Creates a transaction with inscription outputs\n * @param {CreateOrdinalsConfig} config - Configuration object for creating ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {string} config.changeAddress - Optional. Address to send change to. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {MAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Local or remote signer (used for data signature)\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<CreateOrdinalsResult>} Transaction with inscription outputs\n */\nexport const createOrdinals = async (\n\tconfig: CreateOrdinalsConfig\n): Promise<CreateOrdinalsResult> => {\n\tconst {\n\t\tutxos,\n\t\tdestinations,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Inputs\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\t}\n\n\t// Warn if creating many inscriptions at once\n\tif (destinations.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Outputs\n\t// Add inscription outputs\n\tfor (const destination of destinations) {\n\t\tif (!destination.inscription) {\n\t\t\tthrow new Error(\"Inscription is required for all destinations\");\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription.dataB64,\n\t\t\t\tdestination.inscription.contentType,\n\t\t\t\tmetaData,\n\t\t\t),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\tlet payChangeVout: number | undefined;\n\t\n\t// Calculate total input and output amounts\n\tconst totalInput = utxos.reduce((sum, utxo) => sum + BigInt(utxo.satoshis), 0n);\n\tconst totalOutput = tx.outputs.reduce((sum, output) => sum + BigInt(output.satoshis || 0), 0n);\n\t\n\t// Estimate fee\n\tconst estimatedFee = await modelOrFee.computeFee(tx);\n\t\n\t// Check if change is needed\n\tif (totalInput > totalOutput + BigInt(estimatedFee)) {\n\t\t// Add change output\n\t\ttx.addOutput({\n\t\t\tlockingScript: new P2PKH().lock(\n\t\t\t\tchangeAddress || paymentPk.toAddress().toString(),\n\t\t\t),\n\t\t\tchange: true,\n\t\t});\n\t\tpayChangeVout = tx.outputs.length - 1;\n\t}\n\t\n\tif (signer) {\n\t\ttx = await signData(tx, signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChangeVout,\n\t};\n};","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype Script,\n\ttype TransactionOutput,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n\tSendOrdinalsResult,\n\tSendOrdinalsConfig,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\n\n/**\n * Sends ordinals to the given destinations\n * @param {SendOrdinalsConfig} config - Configuration object for sending ordinals\n * @param {Utxo[]} config.paymentUtxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.ordinals - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {string} config.changeAddress - Optional. Address to send change to, if any. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {MAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @param {boolean} config.enforceUniformSend - Optional. Default: true. Enforce that the number of destinations matches the number of ordinals being sent. Sending ordinals requires a 1:1 mapping of destinations to ordinals. This is only used for sub-protocols like BSV21 that manage tokens without sending the inscriptions directly.\n * @returns {Promise<SendOrdinalsResult>} Transaction, spent outpoints, and change vout\n */\nexport const sendOrdinals = async (config: SendOrdinalsConfig): Promise<SendOrdinalsResult> => {\n\tif (!config.satsPerKb) {\n\t\tconfig.satsPerKb = DEFAULT_SAT_PER_KB;\n\t}\n\tif (!config.additionalPayments) {\n\t\tconfig.additionalPayments = [];\n\t}\n\tif (config.enforceUniformSend === undefined) {\n\t\tconfig.enforceUniformSend = true;\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(config.satsPerKb);\n\tlet tx = new Transaction();\n\tconst spentOutpoints: string[] = [];\n\tlet payChangeVout: number | undefined;\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of config.ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(ordUtxo, new OrdP2PKH().unlock(config.ordPk));\n\t\tspentOutpoints.push(`${ordUtxo.txid}_${ordUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// check that ordinals coming in matches ordinals going out if supplied\n\tif (config.enforceUniformSend && config.destinations.length !== config.ordinals.length) {\n\t\tthrow new Error(\n\t\t\t\"Number of destinations must match number of ordinals being sent\",\n\t\t);\n\t}\n\n\t// Add ordinal outputs\n\tfor (const destination of config.destinations) {\n\t\tlet s: Script;\n\t\tif (\n\t\t\tdestination.inscription?.dataB64 &&\n\t\t\tdestination.inscription?.contentType\n\t\t) {\n\t\t\ts = new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription.dataB64,\n\t\t\t\tdestination.inscription.contentType,\n\t\t\t\tconfig.metaData,\n\t\t\t);\n\t\t} else {\n\t\t\ts = new P2PKH().lock(destination.address);\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: s,\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of config.additionalPayments) {\n\t\tconsole.log(\"Additional payment\", p);\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Add payment inputs\n\tfor (const paymentUtxo of config.paymentUtxos) {\n\t\tconst input = inputFromB64Utxo(paymentUtxo, new P2PKH().unlock(config.paymentPk));\n\t\tspentOutpoints.push(`${paymentUtxo.txid}_${paymentUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Add change output if needed\n\tconst fee = await modelOrFee.computeFee(tx);\n\tconst totalSatsIn = config.paymentUtxos.reduce(\n\t\t(total, utxo) => total + BigInt(utxo.satoshis),\n\t\t0n,\n\t);\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + (out.satoshis || 0),\n\t\t0,\n\t);\n\n\tif (totalSatsIn < totalSatsOut) {\n\t\tthrow new Error(\"Not enough ordinals to send\");\n\t}\n\t\n\tif (totalSatsIn > totalSatsOut + fee) {\n\t\tconst changeScript = new P2PKH().lock(\n\t\t\tconfig.changeAddress || config.paymentPk.toAddress().toString(),\n\t\t);\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChangeVout = tx.outputs.length;\n\t\ttx.addOutput(changeOut);\n\t}\n\n\tif (config.signer) {\n\t\ttx = await signData(tx, config.signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChangeVout,\n\t};\n};","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype TransactionOutput,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type { SendUtxosConfig, SendUtxosResult } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Sends utxos to the given destination\n * @param {SendUtxosConfig} config - Configuration object for sending utxos\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {Payment[]} config.payments - Array of payments with addresses and amounts\n * @param {number} [config.satsPerKb] - Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {string} [config.changeAddress] - Address to send change to. If not provided, defaults to paymentPk address\n * @returns {Promise<SendUtxosResult>} Transaction with utxo outputs\n */\nexport const sendUtxos = async (\n\tconfig: SendUtxosConfig,\n): Promise<SendUtxosResult> => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tpayments,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tchangeAddress = paymentPk.toAddress().toString(),\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\t// Outputs\n\tfor (const payment of payments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new P2PKH().lock(payment.to),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + (out.satoshis || 0),\n\t\t0,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + fee) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + fee) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to send. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChangeVout: number | undefined;\n\tif (totalSatsIn > totalSatsOut + fee) {\n\t\t// Change\n\t\tconst changeScript = new P2PKH().lock(changeAddress);\n\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChangeVout = tx.outputs.length;\n\t\ttx.addOutput(changeOut);\n\t} else if (totalSatsIn < totalSatsOut + fee) {\n\t\tconsole.log(\"No change needed\");\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// we dont want -1 we want undefined in that case\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChangeVout,\n\t};\n};\n","import type { PrivateKey, Transaction } from \"@bsv/sdk\";\nimport type { AuthToken } from \"sigma-protocol\";\n\n// biome-ignore lint/complexity/noBannedTypes: Reserved for future use\ntype Signer = {};\n\nexport interface LocalSigner extends Signer {\n\tidKey: PrivateKey;\n}\n\nexport interface RemoteSigner extends Signer {\n\tkeyHost: string;\n\tauthToken?: AuthToken;\n}\n\nexport type Destination = {\n\taddress: string;\n\tinscription?: Inscription;\n};\n\n/**\n * @typedef {Object} Distribution\n * @property {string} address - Destination address. Must be a Ordinals address (BSV address for recieving 1Sat ordinals tokens).\n * @property {string} amt - Number of tokens as a string, considering decimals. Not display format. Ex. 100000000 for 1 token with 8 decimal places.\n */\nexport type Distribution = {\n\taddress: string;\n\tamt: string;\n};\n\n/**\n * @typedef {Object} Utxo\n * @property {number} satoshis - Amount in satoshis\n * @property {string} txid - Transaction id\n * @property {number} vout - Output index\n * @property {string} script - Base64 encoded locking script\n */\nexport type Utxo = {\n\tsatoshis: number;\n\ttxid: string;\n\tvout: number;\n\tscript: string;\n};\n\n/**\n * @typedef {Object} TokenUtxo\n * @property {string} amt - Number of tokens as a string\n * @property {string} id - Token id -  either tick or id depending on protocol\n * @property {string} satoshis - Always 1\n */\nexport interface TokenUtxo extends Utxo {\n\tamt: string;\n\tid: string;\n\tsatoshis: 1;\n}\n\nexport type Inscription = {\n\tdataB64: string;\n\tcontentType: string;\n};\n\nexport type ImageContentType =\n\t| \"image/png\"\n\t| \"image/jpeg\"\n\t| \"image/gif\"\n\t| \"image/svg+xml\"\n\t| \"image/webp\";\n\n/**\n * @typedef {Object} IconInscription\n * @property {string} dataB64 - Base64 encoded image data. Must be a square image.\n * @property {ImageContentType} contentType - Media type of the image\n */\nexport type IconInscription = {\n\tdataB64: string;\n\tcontentType: ImageContentType;\n};\n\nexport type MAP = {\n\tapp: string;\n\ttype: string;\n\t[prop: string]: string;\n};\n\nexport type Payment = {\n\tto: string;\n\tamount: number;\n};\n\nexport type TokenInscription = {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\" | \"mint\" | \"deploy+mint\";\n};\n\nexport interface MintTokenInscription extends TokenInscription {\n\top: \"mint\";\n}\n\nexport interface DeployMintTokenInscription extends TokenInscription {\n\top: \"deploy+mint\";\n\tsym: string;\n\ticon: string;\n}\n\nexport interface TransferTokenInscription extends TokenInscription {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\";\n}\n\nexport interface TransferBSV20Inscription extends TransferTokenInscription {\n\ttick: string;\n}\n\nexport interface TransferBSV21Inscription extends TransferTokenInscription {\n\tid: string;\n}\n\nexport enum TokenType {\n\tBSV20 = \"bsv20\",\n\tBSV21 = \"bsv21\",\n}\n\n\nexport type CreateOrdinalsResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChangeVout?: number;\n};\n\nexport type CreateOrdinalsConfig = {\n\tutxos: Utxo[];\n\tdestinations: Destination[];\n\tpaymentPk: PrivateKey;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: MAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n};\n\nexport type SendOrdinalsResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChangeVout?: number;\n};\n\nexport type SendOrdinalsConfig = {\n\tpaymentUtxos: Utxo[];\n\tordinals: Utxo[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tdestinations: Destination[];\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: MAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n\tenforceUniformSend?: boolean;\n}\n\nexport type DeployBsv21TokenResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChangeVout: number;\n};\n\nexport type DeployBsv21TokenConfig = {\n\tsymbol: string;\n\ticon: string | IconInscription;\n\tutxos: Utxo[];\n\tinitialDistribution: Distribution;\n\tpaymentPk: PrivateKey;\n\tdestinationAddress: string;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[];\n};\n\nexport type SendUtxosResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChangeVout?: number;\n};\n\nexport type SendUtxosConfig = {\n\tutxos: Utxo[];\n\tpaymentPk: PrivateKey;\n\tpayments: Payment[];\n\tsatsPerKb?: number;\n\tchangeAddress?: string;\n};\n\nexport interface TransferOrdTokensResult extends SendOrdinalsResult {\n\ttokenChangeVout?: number;\n}\n\nexport type TransferOrdTokensConfig = {\n\tprotocol: TokenType;\n\ttokenID: string;\n\tutxos: Utxo[];\n\tinputTokens: TokenUtxo[];\n\tdistributions: Distribution[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tchangeAddress?: string;\n\ttokenChangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: MAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n}","import {\n\ttype Destination,\n\tTokenType,\n\ttype TransferBSV20Inscription,\n\ttype TransferTokenInscription,\n  type TransferBSV21Inscription,\n\ttype TransferOrdTokensConfig,\n\ttype TransferOrdTokensResult,\n\ttype SendOrdinalsConfig,\n} from \"./types\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { sendOrdinals } from \"./sendOrdinals\";\n\n\n/**\n * Transfer tokens to a destination\n * @param {TransferOrdTokensConfig} config - Configuration object for transferring tokens\n * @param {TokenType} config.protocol - Token protocol. Must be TokenType.BSV20 or TokenType.BSV21\n * @param {string} config.tokenID - Token ID. Either the tick or id value depending on the protocol\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {TokenUtxo[]} config.inputTokens - Token utxos to spend\n * @param {Distribution[]} config.distributions - Array of destinations with addresses and amounts\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {string} config.changeAddress - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {string} config.tokenChangeAddress - Optional. Address to send token change to, if any. If not provided, defaults to ordPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {MAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<TransferOrdTokensResult>} Transaction with token transfer outputs\n */\nexport const transferOrdTokens = async (config: TransferOrdTokensConfig): Promise<TransferOrdTokensResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tinputTokens,\n\t\tdistributions,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tchangeAddress,\n\t\ttokenChangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\t// calculate change amount\n\tlet changeAmt = 0n;\n\tlet totalAmtIn = 0n;\n\tlet totalAmtOut = 0n;\n\n  // Ensure these inputs are for the expected token\n\tif(!inputTokens.every(\n\t\t(token) => token.id === tokenID,\n\t)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n\tfor (const token of inputTokens) {\n\t\ttotalAmtIn += BigInt(token.amt);\n\t}\n\n\tfor (const dest of distributions) {\n\t\ttotalAmtOut += BigInt(dest.amt);\n\t}\n\n\t// check that you have enough tokens to send\n\tif (totalAmtIn < totalAmtOut) {\n\t\tthrow new Error(\"Not enough tokens to send\");\n\t}\n\n\tchangeAmt = totalAmtIn - totalAmtOut;\n\n\t// add change to distributions\n\tif (changeAmt > 0n) {\n\t\tconst changeDistribution = {\n\t\t\taddress: tokenChangeAddress || ordPk.toAddress().toString(),\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t\tdistributions.push(changeDistribution);\n\t}\n\n\t// build destination inscriptions\n\tconst destinations: Destination[] = distributions.map((dest) => {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: \"transfer\",\n\t\t\tamt: dest.amt,\n\t\t}\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n\t\treturn {\n\t\t\taddress: dest.address,\n\t\t\tinscription: {\n\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\t\tcontentType: \"application/bsv-20\",\n\t\t\t},\n\t\t};\n\t});\n\n\tconst sendOrdinalsConfig: SendOrdinalsConfig = {\n\t\tpaymentUtxos: utxos,\n\t\tordinals: inputTokens,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tdestinations,\n\t\tchangeAddress: changeAddress || paymentPk.toAddress().toString(),\n\t\tsatsPerKb,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments,\n\t\tenforceUniformSend: false\n\t};\n\n\tconst { tx, spentOutpoints, payChangeVout } = await sendOrdinals(sendOrdinalsConfig);\n\t\n\t// find the tokenChangeVout by looking for the destination with the tokenChangeAddress\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChangeVout,\n\t\ttokenChangeVout: destinations.findIndex(\n\t\t\t(d) => d.address === (tokenChangeAddress || ordPk.toAddress().toString())\n\t\t),\n\t}\n};"],"names":["toHex","utf8Str","Buffer","from","toString","OrdP2PKH","_P2PKH","apply","this","arguments","prototype","lock","address","b64File","mediaType","metaData","ordAsm","undefined","ordHex","fileHex","trim","Error","fileMediaType","inscriptionAsm","P2PKH","toASM","app","type","mapCmdValue","_i","_Object$entries","Object","entries","length","_Object$entries$_i","key","value","LockingScript","fromASM","fromBase58Check","Utils","inputFromB64Utxo","utxo","unlockScriptTemplate","input","fromUtxo","_extends","script","sourceTXID","txid","fetchPayUtxos","payUrl","API_HOST","console","log","Promise","resolve","fetch","then","payRes","ok","json","payUtxos","filter","u","satoshis","pubKeyHash","p2pkhScript","data","map","vout","toBinary","error","statusText","e","reject","signData","tx","signer","_exit","_temp2","_result","idKey","keyHost","_sigma$sign","Sigma","sign","signedTx","_temp","authToken","sigma","remoteSign","_ref","_catch","createOrdinals","config","_step","payChangeVout","utxos","destinations","paymentPk","changeAddress","_config$satsPerKb","satsPerKb","_config$additionalPay","additionalPayments","modelOrFee","SatoshisPerKilobyte","Transaction","_iterator","_createForOfIteratorHelperLoose","done","unlock","addInput","warn","_iterator2","_step2","destination","inscription","addOutput","lockingScript","dataB64","contentType","_step3","_iterator3","p","amount","to","totalInput","reduce","sum","BigInt","totalOutput","outputs","output","computeFee","estimatedFee","fee","spentOutpoints","toAddress","change","_signData","sendOrdinals","enforceUniformSend","ordinals","ordUtxo","ordPk","push","_destination$inscript","_destination$inscript2","s","_iterator4","_step4","paymentUtxos","paymentUtxo","totalSatsIn","total","totalSatsOut","out","changeScript","_settle","pact","state","_Pact","o","v","bind","observer","onFulfilled","onRejected","result","_this","_isSettledPact","thenable","TokenType","sendUtxos","_interrupt","payments","_config$changeAddress","payment","sendTxOut","_forOf","_modelOrFee$computeFe","transferOrdTokens","protocol","tokenID","inputTokens","distributions","tokenChangeAddress","changeAmt","totalAmtIn","totalAmtOut","every","token","id","amt","changeDistribution","dest","transferInscription","op","BSV20","tick","BSV21","JSON","stringify","sendOrdinalsConfig","tokenChangeVout","findIndex","d"],"mappings":"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"}