{"version":3,"file":"index.module.js","sources":["../src/utils/strings.ts","../src/types.ts","../src/constants.ts","../src/templates/ordP2pkh.ts","../src/utils/utxo.ts","../src/signData.ts","../src/utils/subtypeData.ts","../src/createOrdinals.ts","../src/sendOrdinals.ts","../src/sendUtxos.ts","../src/transferOrdinals.ts","../src/validate.ts"],"sourcesContent":["/**\n * Converts a string to its hexadecimal representation\n *\n * @param {string} utf8Str - The string to convert\n * @returns {string} The hexadecimal representation of the input string\n */\nconst toHex = (utf8Str: string): string => {\n  return Buffer.from(utf8Str).toString(\"hex\");\n};\n\nexport { toHex };\n","import type { PrivateKey, Transaction } from \"@bsv/sdk\";\nimport type { AuthToken } from \"sigma-protocol\";\n\n// biome-ignore lint/complexity/noBannedTypes: Reserved for future use\ntype Signer = {};\n\nexport interface LocalSigner extends Signer {\n\tidKey: PrivateKey;\n}\n\nexport interface RemoteSigner extends Signer {\n\tkeyHost: string;\n\tauthToken?: AuthToken;\n}\n\nexport type Destination = {\n\taddress: string;\n\tinscription?: Inscription;\n};\n\n/**\n * @typedef {Object} Distribution\n * @property {string} address - Destination address. Must be a Ordinals address (BSV address for recieving 1Sat ordinals tokens).\n * @property {string} amt - Number of tokens as a string, considering decimals. Not display format. Ex. 100000000 for 1 token with 8 decimal places.\n */\nexport type Distribution = {\n\taddress: string;\n\tamt: string;\n};\n\n/**\n * @typedef {Object} Utxo\n * @property {number} satoshis - Amount in satoshis\n * @property {string} txid - Transaction id\n * @property {number} vout - Output index\n * @property {string} script - Base64 encoded locking script\n */\nexport type Utxo = {\n\tsatoshis: number;\n\ttxid: string;\n\tvout: number;\n\tscript: string;\n};\n\n/**\n * @typedef {Object} NftUtxo\n * @property {string} collectionId - Optional. Collection id of the NFT\n * @property {string} contentType - Media type of the NFT\n * @property {string} creatorBapId - Optional. Creator BAP id of the NFT\n * @property {string} origin - Origin address of the NFT\n * @property {number} satoshis - Always 1\n */\nexport interface NftUtxo extends Utxo {\n\tcollectionId?: string;\n\tcontentType: string;\n\tcreatorBapId?: string;\n\torigin: string;\n\tsatoshis: 1;\n}\n\n/**\n * @typedef {Object} TokenUtxo\n * @property {string} amt - Number of tokens as a string\n * @property {string} id - Token id -  either tick or id depending on protocol\n * @property {string} satoshis - Always 1\n */\nexport interface TokenUtxo extends Utxo {\n\tamt: string;\n\tid: string;\n\tsatoshis: 1;\n}\n\nexport type Inscription = {\n\tdataB64: string;\n\tcontentType: string;\n};\n\nexport type ImageContentType =\n\t| \"image/png\"\n\t| \"image/jpeg\"\n\t| \"image/gif\"\n\t| \"image/svg+xml\"\n\t| \"image/webp\";\n\n/**\n * @typedef {Object} IconInscription\n * @property {string} dataB64 - Base64 encoded image data. Must be a square image.\n * @property {ImageContentType} contentType - Media type of the image\n */\nexport type IconInscription = {\n\tdataB64: string;\n\tcontentType: ImageContentType;\n};\n\nexport type Payment = {\n\tto: string;\n\tamount: number;\n};\n\nexport type TokenInscription = {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\" | \"mint\" | \"deploy+mint\";\n};\n\nexport interface MintTokenInscription extends TokenInscription {\n\top: \"mint\";\n}\n\nexport interface DeployMintTokenInscription extends TokenInscription {\n\top: \"deploy+mint\";\n\tsym: string;\n\ticon: string;\n}\n\nexport interface TransferTokenInscription extends TokenInscription {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\";\n}\n\nexport interface TransferBSV20Inscription extends TransferTokenInscription {\n\ttick: string;\n}\n\nexport interface TransferBSV21Inscription extends TransferTokenInscription {\n\tid: string;\n}\n\nexport enum TokenType {\n\tBSV20 = \"bsv20\",\n\tBSV21 = \"bsv21\",\n}\n\nexport type CreateOrdinalsResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\n/**\n * MAP (Magic Attribute Protocol) metadata object with stringified values for writing to the blockchain\n * @typedef {Object} MAP\n * @property {string} app - Application identifier\n * @property {string} type - Metadata type\n * @property {string} [prop] - Optional. Additional metadata properties\n */\nexport type MAP = {\n\tapp: string;\n\ttype: string;\n\t[prop: string]: string;\n};\n\nexport type PreMAP = {\n\tapp: string;\n\ttype: string;\n\t[prop: string]: unknown;\n\troyalties?: Royalty[];\n\tsubTypeData?: CollectionSubTypeData | CollectionItemSubTypeData;\n};\n\nexport type CreateOrdinalsConfig = {\n\tutxos: Utxo[];\n\tdestinations: Destination[];\n\tpaymentPk: PrivateKey;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: PreMAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n};\n\nexport enum RoytaltyType {\n\tPaymail = \"paymail\",\n\tAddress = \"address\",\n\tScript = \"script\",\n}\n\n/**\n * Royalty object\n * @typedef {Object} Royalty\n * @property {RoytaltyType} type - Royalty type, string, one of \"paymail\", \"address\", \"script\"\n * @property {string} destination - Royalty destination\n * @property {string} percentage - Royalty percentage as a string float 0-1\n */\nexport type Royalty = {\n\ttype: RoytaltyType;\n\tdestination: string;\n\tpercentage: string; // string float 0-1\n};\n\nexport interface CreateOrdinalsMetadata extends PreMAP {\n\ttype: \"ord\",\n\tname: string,\n\tpreviewUrl?: string,\n}\n\nexport interface CreateOrdinalsCollectionMetadata extends CreateOrdinalsMetadata {\n\tsubType: \"collection\",\n\tsubTypeData: CollectionSubTypeData, // JSON stringified CollectionSubTypeData\n\troyalties?: Royalty[],\n};\n\nexport interface CreateOrdinalsCollectionItemMetadata extends CreateOrdinalsMetadata {\n\tsubType: \"collectionItem\",\n\tsubTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n};\n\n/**\n * Configuration object for creating an ordinals collection\n * @typedef {Object} CreateOrdinalsCollectionConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collection\"\n * @property metaData.name - Collection name\n * @property metaData.subTypeData - JSON stringified CollectionSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface  CreateOrdinalsCollectionConfig extends CreateOrdinalsConfig {\n\tmetaData: CreateOrdinalsCollectionMetadata\n}\n\nexport type CollectionTraits = {\n\t[trait: string]: CollectionTrait;\n};\n\nexport type CollectionTrait = {\n\tvalues: string[];\n\toccurancePercentages: string[];\n};\n\nexport type Rarity = {\n  [key:string]: string;\n}\n\nexport type RarityLabels = Rarity[]\nexport interface CollectionSubTypeData {\n\tdescription: string;\n\tquantity: number;\n\trarityLabels: RarityLabels;\n\ttraits: CollectionTraits;\n}\n\nexport interface CreateOrdinalsCollectionItemMetadata extends PreMAP {\n\t\ttype: \"ord\",\n\t\tname: string,\n\t\tsubType: \"collectionItem\",\n\t\tsubTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n\t\troyalties?: Royalty[],\n\t\tpreviewUrl?: string,\t\n}\n\n/**\n * Configuration object for creating an ordinals collection item\n * @typedef {Object} CreateOrdinalsCollectionItemConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection item\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collectionItem\"\n * @property metaData.name - Collection item name\n * @property metaData.subTypeData - JSON stringified CollectionItemSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionItemConfig extends CreateOrdinalsConfig {\n\tmetaData: CreateOrdinalsCollectionItemMetadata\n}\n\n/**\n * Subtype data for an ordinals collection item\n * @typedef {Object} CollectionItemSubTypeData\n * @property {string} collectionId - Collection id\n * @property {number} mintNumner - Mint number\n * @property {number} rank - Rank\n * @property {string} rarityLabel - Rarity label\n * @property {string} traits - traits object\n * @property {string} attachments - array of attachment objects\n */\nexport interface CollectionItemSubTypeData {\n\tcollectionId: string;\n\tmintNumber?: number;\n\trank?: number;\n\trarityLabel?: RarityLabels;\n\ttraits?: CollectionItemTraits;\n\tattachments?: CollectionItemAttachment[];\n}\n\nexport type CollectionItemTraits = {\n\tname: string;\n\tvalue: string;\n\trarityLabel?: string;\n\toccurancePercentrage?: string;\n};\n\nexport type CollectionItemAttachment \t= {\n\tname: string;\n\tdescription?: string;\n\t\"content-type\": string;\n\turl: string;\n}\n\nexport type SendOrdinalsResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type SendOrdinalsConfig = {\n\tpaymentUtxos: Utxo[];\n\tordinals: Utxo[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tdestinations: Destination[];\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: PreMAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n\tenforceUniformSend?: boolean;\n}\n\nexport type DeployBsv21TokenResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type DeployBsv21TokenConfig = {\n\tsymbol: string;\n\ticon: string | IconInscription;\n\tutxos: Utxo[];\n\tinitialDistribution: Distribution;\n\tpaymentPk: PrivateKey;\n\tdestinationAddress: string;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[];\n};\n\nexport type SendUtxosResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type SendUtxosConfig = {\n\tutxos: Utxo[];\n\tpaymentPk: PrivateKey;\n\tpayments: Payment[];\n\tsatsPerKb?: number;\n\tchangeAddress?: string;\n};\n\nexport interface TransferOrdTokensResult extends SendOrdinalsResult {\n\ttokenChange?: TokenUtxo;\n}\n\nexport type TransferOrdTokensConfig = {\n\tprotocol: TokenType;\n\ttokenID: string;\n\tutxos: Utxo[];\n\tinputTokens: TokenUtxo[];\n\tdistributions: Distribution[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tchangeAddress?: string;\n\ttokenChangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: PreMAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n}","export const MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\nexport const DEFAULT_SAT_PER_KB = 10;\nexport const API_HOST = \"https://ordinals.gorillapool.io/api\";","import {\n\tLockingScript,\n\tP2PKH,\n\ttype Script,\n} from \"@bsv/sdk\";\nimport type { MAP } from \"../types\";\nimport { toHex } from \"../utils/strings\";\nimport { MAP_PREFIX } from \"../constants\";\n\n/**\n * OrdP2PKH (1Sat Ordinal + Pay To Public Key Hash) class implementing ScriptTemplate.\n *\n * This class provides methods to create an Ordinal with Pay To Public Key Hash locking and unlocking scripts. \n * It extends the standard P2PKH script template and provides a custom lock method.\n */\nexport default class OrdP2PKH extends P2PKH {\n\t/**\n\t * Creates a 1Sat Ordinal + P2PKH locking script for a given address string\n\t *\n\t * @param {string} address - An destination address for the Ordinal.\n\t * @param {string} [b64File] - Base64 encoded file data.\n\t * @param {string} [mediaType] - Media type of the file.\n\t * @param {MAP} [metaData] - (optional) MAP Metadata to be included in OP_RETURN.\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\t// unlock method inherits from p2pkh\n\tlock(\n\t\taddress: string,\n\t\tb64File?: string | undefined,\n\t\tmediaType?: string | undefined,\n\t\tmetaData?: MAP | undefined,\n\t): Script {\n\t\tlet ordAsm = \"\";\n\t\t// This can be omitted for reinscriptions that just update metadata\n\t\tif (b64File !== undefined && mediaType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(b64File, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(mediaType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`;\n\t\t}\n\n\t\t// Create ordinal output and inscription in a single output\n\t\tconst lockingScript = new P2PKH().lock(address);\n\t\tlet inscriptionAsm = `${ordAsm ? `${ordAsm} ` : \"\"}${lockingScript.toASM()}`;\n\n\t\t// MAP.app and MAP.type keys are required\n\t\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t\t}\n\n\t\tif (metaData?.app && metaData?.type) {\n\t\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\t\tconst mapCmdValue = toHex(\"SET\");\n\t\t\tinscriptionAsm = `${inscriptionAsm} OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\t\tif (key !== \"cmd\") {\n\t\t\t\t\tinscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\n\t\t\t\t\t\tvalue as string,\n\t\t\t\t\t)}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn LockingScript.fromASM(inscriptionAsm);\n\t}\n}\n","import {\n\ttype Transaction,\n\ttype UnlockingScript,\n\tfromUtxo,\n\ttype TransactionInput,\n\tUtils,\n\tP2PKH,\n} from \"@bsv/sdk\";\nimport { type NftUtxo, TokenType, type TokenUtxo, type Utxo } from \"../types\";\nimport { API_HOST } from \"../constants\";\n\nconst { fromBase58Check } = Utils;\n\n/**\n * Converts a Utxo object with a base64 encoded script to a Utxo object with a hex encoded script\n * @param {Utxo} utxo - Utxo object with base64 encoded script\n * @param {Object} unlockScriptTemplate - Object with sign and estimateLength functions\n * @returns {TransactionInput} Utxo object with hex encoded script\n */\nexport const inputFromB64Utxo = (\n\tutxo: Utxo,\n\tunlockScriptTemplate: {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>;\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>;\n\t},\n): TransactionInput => {\n\tconst input = fromUtxo(\n\t\t{\n\t\t\t...utxo,\n\t\t\tscript: Buffer.from(utxo.script, \"base64\").toString(\"hex\"),\n\t\t},\n\t\tunlockScriptTemplate,\n\t);\n\tinput.sourceTXID = utxo.txid;\n\treturn input;\n};\n\n/**\n * Fetches pay utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<Utxo[]>} Array of pay utxos\n */\nexport const fetchPayUtxos = async (address: string): Promise<Utxo[]> => {\n\tconst payUrl = `${API_HOST}/txos/address/${address}/unspent?bsv20=false`;\n\tconsole.log({ payUrl });\n\tconst payRes = await fetch(payUrl);\n\tif (!payRes.ok) {\n\t\tthrow new Error(\"Error fetching pay utxos\");\n\t}\n\tlet payUtxos = await payRes.json();\n\t// exclude all 1 satoshi utxos\n\tpayUtxos = payUtxos.filter((u: { satoshis: number }) => u.satoshis !== 1);\n\n\t// Get pubkey hash from address\n\tconst pubKeyHash = fromBase58Check(address);\n\tconst p2pkhScript = new P2PKH().lock(pubKeyHash.data);\n\tpayUtxos = payUtxos.map((utxo: Partial<Utxo>) => ({\n\t\ttxid: utxo.txid,\n\t\tvout: utxo.vout,\n\t\tsatoshis: utxo.satoshis,\n\t\tscript: Buffer.from(p2pkhScript.toBinary()).toString(\"base64\"),\n\t}));\n\treturn payUtxos as Utxo[];\n};\n\n/**\n * Fetches NFT utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @param {string} [collectionId] - Optional. Collection id (collection insciprtion origin)\n * @param {number} [limit=10] - Optional. Number of utxos to fetch. Default is 10\n * @param {number} [offset=0] - Optional. Offset for fetching utxos. Default is 0\n * @returns {Promise<Utxo[]>} Array of NFT utxos\n */\nexport const fetchNftUtxos = async (\n\taddress: string,\n\tcollectionId?: string,\n\tlimit = 10,\n\toffset = 0,\n): Promise<NftUtxo[]> => {\n\tlet url = `${API_HOST}/txos/address/${address}/unspent?limit=${limit}&offset=${offset}&`;\n\n\tif (collectionId) {\n\t\tconst query = {\n\t\t\tmap: {\n\t\t\t\tsubTypeData: { collectionId },\n\t\t\t},\n\t\t};\n\t\tconst b64Query = Buffer.from(JSON.stringify(query)).toString(\"base64\");\n\t\turl += `q=${b64Query}`;\n\t}\n\n\tconsole.log({ url });\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching NFT utxos for ${address}`);\n\t}\n\n\t// Returns a BSV20Txo but we only need a few fields\n\tlet nftUtxos = await res.json();\n\n\t// Only include 1 satoshi outputs, non listings\n\tnftUtxos = nftUtxos.filter(\n\t\t(u: {\n\t\t\tsatoshis: number;\n\t\t\tdata: { list: { price: number; payout: string } | undefined } | null;\n\t\t}) => u.satoshis === 1 && !u.data?.list,\n\t);\n\n\tconst outpoints = nftUtxos.map(\n\t\t(utxo: { txid: string; vout: number }) => `${utxo.txid}_${utxo.vout}`,\n\t);\n\t// Fetch the scripts up to the limit\n\tconst nftRes = await fetch(`${API_HOST}/txos/outpoints?script=true`, {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t\tbody: JSON.stringify([...outpoints]),\n\t});\n\n\tif (!nftRes.ok) {\n\t\tthrow new Error(`Error fetching NFT scripts for ${address}`);\n\t}\n\n\tconst nfts = (await nftRes.json() || [])\n\n\tnftUtxos = nfts.map(\n\t\t(utxo: {\n\t\t\torigin: { outpoint: string };\n\t\t\tscript: string;\n\t\t\tvout: number;\n\t\t\ttxid: string;\n\t\t}) => {\n\t\t\tconst nftUtxo = {\n\t\t\t\torigin: utxo.origin.outpoint,\n\t\t\t\tscript: utxo.script,\n\t\t\t\tvout: utxo.vout,\n\t\t\t\ttxid: utxo.txid,\n\t\t\t\tsatoshis: 1,\n\t\t\t} as NftUtxo;\n\t\t\tif (collectionId) {\n\t\t\t\tnftUtxo.collectionId = collectionId;\n\t\t\t}\n\t\t\treturn nftUtxo;\n\t\t},\n\t);\n\n\treturn nftUtxos as NftUtxo[];\n};\n\n/**\n * Fetches token utxos from the API\n * @param {TokenType} protocol - Token protocol. Either BSV20 or BSV21\n * @param {string} tokenId - Token id. Ticker for BSV20 and id (mint+deploy inscription origin) for BSV21\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<TokenUtxo[]>} Array of token utxos\n */\nexport const fetchTokenUtxos = async (\n\tprotocol: TokenType,\n\ttokenId: string,\n\taddress: string,\n): Promise<TokenUtxo[]> => {\n\tconst url = `${API_HOST}/bsv20/${address}/${protocol === TokenType.BSV20 ? \"tick\" : \"id\"}/${tokenId}?bsv20=true&listing=false`;\n\tconsole.log({ url });\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching ${protocol} utxos`);\n\t}\n\n\t// returns a BSV20Txo but we only need a few fields\n\tlet tokenUtxos = await res.json();\n\n\ttokenUtxos = tokenUtxos.map((utxo: Partial<TokenUtxo>) => ({\n\t\tamt: utxo.amt,\n\t\tscript: utxo.script,\n\t\tvout: utxo.vout,\n\t\ttxid: utxo.txid,\n\t\tid: tokenId,\n\t\tsatoshis: 1,\n\t}));\n\n\treturn tokenUtxos as TokenUtxo[];\n};\n","import type { Transaction } from \"@bsv/sdk\";\nimport { Sigma } from \"sigma-protocol\";\nimport type { LocalSigner, RemoteSigner } from \"./types\";\n\n/**\n * Signs data in the transaction with Sigma protocol\n * @param {Transaction} tx - Transaction to sign\n * @param {LocalSigner | RemoteSigner} signer - Local or remote signer (used for data signature)\n * @returns {Transaction} Transaction with signed data\n */\nexport const signData = async (\n\ttx: Transaction,\n\tsigner: LocalSigner | RemoteSigner,\n): Promise<Transaction> => {\n\t// Sign tx if idKey or remote signer like starfish/tokenpass\n\tconst idKey = (signer as LocalSigner)?.idKey;\n\tconst keyHost = (signer as RemoteSigner)?.keyHost;\n\n\tif (idKey) {\n\t\tconst sigma = new Sigma(tx);\n\t\tconst { signedTx } = sigma.sign(idKey);\n\t\treturn signedTx;\n\t}\n\tif (keyHost) {\n\t\tconst authToken = (signer as RemoteSigner)?.authToken;\n\t\tconst sigma = new Sigma(tx);\n\t\ttry {\n\t\t\tconst { signedTx } = await sigma.remoteSign(keyHost, authToken);\n\t\t\treturn signedTx;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthrow new Error(`Remote signing to ${keyHost} failed`);\n\t\t}\n\t}\n\tthrow new Error(\"Signer must be a LocalSigner or RemoteSigner\");\n};\n","import type { MAP, PreMAP } from \"../types\";\n\nconst stringifyMetaData = (metaData?: PreMAP): MAP | undefined => {\n  if (!metaData) return undefined;\n\tconst result: MAP = {\n\t\tapp: metaData.app,\n\t\ttype: metaData.type,\n\t};\n\n\tfor (const [key, value] of Object.entries(metaData)) {\n\t\tif (value !== undefined) {\n\t\t\tif (typeof value === \"string\") {\n\t\t\t\tresult[key] = value;\n\t\t\t} else if (Array.isArray(value) || typeof value === \"object\") {\n\t\t\t\tresult[key] = JSON.stringify(value);\n\t\t\t} else {\n\t\t\t\tresult[key] = String(value);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\nexport default stringifyMetaData;\n","import { Transaction, SatoshisPerKilobyte, P2PKH } from \"@bsv/sdk\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n\tUtxo,\n\tCreateOrdinalsConfig,\n\tCreateOrdinalsResult,\n\tCreateOrdinalsCollectionConfig,\n\tCreateOrdinalsCollectionItemConfig,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Creates a transaction with inscription outputs\n * @param {CreateOrdinalsConfig | CreateOrdinalsCollectionConfig | CreateOrdinalsCollectionItemConfig} config - Configuration object for creating ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {string} config.changeAddress - Optional. Address to send change to. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Local or remote signer (used for data signature)\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<CreateOrdinalsResult>} Transaction with inscription outputs\n */\nexport const createOrdinals = async (\n\tconfig:\n\t\t| CreateOrdinalsConfig\n\t\t| CreateOrdinalsCollectionConfig\n\t\t| CreateOrdinalsCollectionItemConfig,\n): Promise<CreateOrdinalsResult> => {\n\tconst {\n\t\tutxos,\n\t\tdestinations,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Inputs\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\t}\n\n\t// Warn if creating many inscriptions at once\n\tif (destinations.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Outputs\n\t// Add inscription outputs\n\tfor (const destination of destinations) {\n\t\tif (!destination.inscription) {\n\t\t\tthrow new Error(\"Inscription is required for all destinations\");\n\t\t}\n\n\t\t// remove any undefined fields from metadata\n\t\tif (metaData) {\n\t\t\tfor(const key of Object.keys(metaData)) {\n\t\t\t\tif (metaData[key] === undefined) {\n\t\t\t\t\tdelete metaData[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription.dataB64,\n\t\t\t\tdestination.inscription.contentType,\n\t\t\t\tstringifyMetaData(metaData),\n\t\t\t),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Calculate total input and output amounts\n\tconst totalInput = utxos.reduce(\n\t\t(sum, utxo) => sum + BigInt(utxo.satoshis),\n\t\t0n,\n\t);\n\tconst totalOutput = tx.outputs.reduce(\n\t\t(sum, output) => sum + BigInt(output.satoshis || 0),\n\t\t0n,\n\t);\n\n\t// Estimate fee\n\tconst estimatedFee = await modelOrFee.computeFee(tx);\n\n\t// Check if change is needed\n\tlet payChange: Utxo | undefined;\n\tif (totalInput > totalOutput + BigInt(estimatedFee)) {\n\t\tconst changeScript = new P2PKH().lock(\n\t\t\tchangeAddress || paymentPk.toAddress().toString(),\n\t\t);\n\t\tconst changeOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\t// Add change output\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet,\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\n\t\ttx.addOutput(changeOutput);\n\t}\n\n\tif (signer) {\n\t\ttx = await signData(tx, signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype Script,\n\ttype TransactionOutput,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type { SendOrdinalsResult, SendOrdinalsConfig, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Sends ordinals to the given destinations\n * @param {SendOrdinalsConfig} config - Configuration object for sending ordinals\n * @param {Utxo[]} config.paymentUtxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.ordinals - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {string} config.changeAddress - Optional. Address to send change to, if any. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @param {boolean} config.enforceUniformSend - Optional. Default: true. Enforce that the number of destinations matches the number of ordinals being sent. Sending ordinals requires a 1:1 mapping of destinations to ordinals. This is only used for sub-protocols like BSV21 that manage tokens without sending the inscriptions directly.\n * @returns {Promise<SendOrdinalsResult>} Transaction, spent outpoints, and change vout\n */\nexport const sendOrdinals = async (\n\tconfig: SendOrdinalsConfig,\n): Promise<SendOrdinalsResult> => {\n\tif (!config.satsPerKb) {\n\t\tconfig.satsPerKb = DEFAULT_SAT_PER_KB;\n\t}\n\tif (!config.additionalPayments) {\n\t\tconfig.additionalPayments = [];\n\t}\n\tif (config.enforceUniformSend === undefined) {\n\t\tconfig.enforceUniformSend = true;\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(config.satsPerKb);\n\tlet tx = new Transaction();\n\tconst spentOutpoints: string[] = [];\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of config.ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(\n\t\t\tordUtxo,\n\t\t\tnew OrdP2PKH().unlock(config.ordPk),\n\t\t);\n\t\tspentOutpoints.push(`${ordUtxo.txid}_${ordUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// check that ordinals coming in matches ordinals going out if supplied\n\tif (\n\t\tconfig.enforceUniformSend &&\n\t\tconfig.destinations.length !== config.ordinals.length\n\t) {\n\t\tthrow new Error(\n\t\t\t\"Number of destinations must match number of ordinals being sent\",\n\t\t);\n\t}\n\n\t// Add ordinal outputs\n\tfor (const destination of config.destinations) {\n\t\tlet s: Script;\n\t\tif (\n\t\t\tdestination.inscription?.dataB64 &&\n\t\t\tdestination.inscription?.contentType\n\t\t) {\n\t\t\ts = new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription.dataB64,\n\t\t\t\tdestination.inscription.contentType,\n\t\t\t\tstringifyMetaData(config.metaData),\n\t\t\t);\n\t\t} else {\n\t\t\ts = new P2PKH().lock(destination.address);\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: s,\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of config.additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of config.paymentUtxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(config.paymentPk));\n\t\tspentOutpoints.push(`${utxo.txid}_${utxo.vout}`);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (totalSatsIn < totalSatsOut) {\n\t\tthrow new Error(\"Not enough ordinals to send\");\n\t}\n\n\tlet payChange: Utxo | undefined;\n\tif (totalSatsIn > totalSatsOut + BigInt(fee)) {\n\t\tconst changeScript = new P2PKH().lock(\n\t\t\tconfig.changeAddress || config.paymentPk.toAddress().toString(),\n\t\t);\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not available until the transaction is signed\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t}\n\n\tif (config.signer) {\n\t\ttx = await signData(tx, config.signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChange,\n\t};\n};\n","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype TransactionOutput,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type { SendUtxosConfig, SendUtxosResult, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Sends utxos to the given destination\n * @param {SendUtxosConfig} config - Configuration object for sending utxos\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {Payment[]} config.payments - Array of payments with addresses and amounts\n * @param {number} [config.satsPerKb] - Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {string} [config.changeAddress] - Address to send change to. If not provided, defaults to paymentPk address\n * @returns {Promise<SendUtxosResult>} Transaction with utxo outputs\n */\nexport const sendUtxos = async (\n\tconfig: SendUtxosConfig,\n): Promise<SendUtxosResult> => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tpayments,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tchangeAddress = paymentPk.toAddress().toString(),\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\t// Outputs\n\tfor (const payment of payments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new P2PKH().lock(payment.to),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + (out.satoshis || 0),\n\t\t0,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + fee) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + fee) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to send. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChange: Utxo | undefined;\n\tif (totalSatsIn > totalSatsOut + fee) {\n\t\t// Change\n\t\tconst changeScript = new P2PKH().lock(changeAddress);\n\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t} else if (totalSatsIn < totalSatsOut + fee) {\n\t\tconsole.log(\"No change needed\");\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\ttype Destination,\n\tTokenType,\n\ttype TransferBSV20Inscription,\n\ttype TransferTokenInscription,\n  type TransferBSV21Inscription,\n\ttype TransferOrdTokensConfig,\n\ttype TransferOrdTokensResult,\n\ttype SendOrdinalsConfig,\n\ttype TokenUtxo,\n} from \"./types\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { sendOrdinals } from \"./sendOrdinals\";\n\n/**\n * Transfer tokens to a destination\n * @param {TransferOrdTokensConfig} config - Configuration object for transferring tokens\n * @param {TokenType} config.protocol - Token protocol. Must be TokenType.BSV20 or TokenType.BSV21\n * @param {string} config.tokenID - Token ID. Either the tick or id value depending on the protocol\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {TokenUtxo[]} config.inputTokens - Token utxos to spend\n * @param {Distribution[]} config.distributions - Array of destinations with addresses and amounts\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {string} config.changeAddress - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {string} config.tokenChangeAddress - Optional. Address to send token change to, if any. If not provided, defaults to ordPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<TransferOrdTokensResult>} Transaction with token transfer outputs\n */\nexport const transferOrdTokens = async (config: TransferOrdTokensConfig): Promise<TransferOrdTokensResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tinputTokens,\n\t\tdistributions,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tchangeAddress,\n\t\ttokenChangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\t// calculate change amount\n\tlet changeAmt = 0n;\n\tlet totalAmtIn = 0n;\n\tlet totalAmtOut = 0n;\n\n  // Ensure these inputs are for the expected token\n\tif(!inputTokens.every(\n\t\t(token) => token.id === tokenID,\n\t)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n\tfor (const token of inputTokens) {\n\t\ttotalAmtIn += BigInt(token.amt);\n\t}\n\n\tfor (const dest of distributions) {\n\t\ttotalAmtOut += BigInt(dest.amt);\n\t}\n\n\t// check that you have enough tokens to send\n\tif (totalAmtIn < totalAmtOut) {\n\t\tthrow new Error(\"Not enough tokens to send\");\n\t}\n\n\tchangeAmt = totalAmtIn - totalAmtOut;\n\n\t// add change to distributions\n\tif (changeAmt > 0n) {\n\t\tconst changeDistribution = {\n\t\t\taddress: tokenChangeAddress || ordPk.toAddress().toString(),\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t\tdistributions.push(changeDistribution);\n\t}\n\n\t// build destination inscriptions\n\tconst destinations: Destination[] = distributions.map((dest) => {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: \"transfer\",\n\t\t\tamt: dest.amt,\n\t\t}\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n\t\treturn {\n\t\t\taddress: dest.address,\n\t\t\tinscription: {\n\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\t\tcontentType: \"application/bsv-20\",\n\t\t\t},\n\t\t};\n\t});\n\n\tconst sendOrdinalsConfig: SendOrdinalsConfig = {\n\t\tpaymentUtxos: utxos,\n\t\tordinals: inputTokens,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tdestinations,\n\t\tchangeAddress: changeAddress || paymentPk.toAddress().toString(),\n\t\tsatsPerKb,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments,\n\t\tenforceUniformSend: false\n\t};\n\n\tconst { tx, spentOutpoints, payChange } = await sendOrdinals(sendOrdinalsConfig);\n\t\n\t// find the tokenChangeVout by looking for the destination with the tokenChangeAddress\n\tconst tokenChangeVout = destinations.findIndex(\n\t\t(d) => d.address === (tokenChangeAddress || ordPk.toAddress().toString())\n\t);\n\t\n\tlet tokenChange: TokenUtxo | undefined;\n\tif (tokenChangeVout !== -1) {\n\t\ttokenChange = {\n\t\t\tid: tokenID,\n\t\t\tamt: changeAmt.toString(),\n\t\t\tsatoshis: 1,\n\t\t\ttxid: tx.id(\"hex\"),\n\t\t\tvout: tokenChangeVout,\n\t\t\tscript: Buffer.from(tx.outputs[tokenChangeVout].lockingScript.toHex(), \"hex\").toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChange,\n\t\ttokenChange,\n\t}\n};","import type { CollectionItemSubTypeData, CollectionSubTypeData } from \"./types\";\n\n/**\n * Validates sub type data\n * @param {string} subType - Sub type of the ordinals token\n * @param {string} subTypeData - Sub type data of the ordinals token\n * @returns {Error | undefined} Error if validation fails, undefined if validation passes\n */\nexport const validateSubTypeData = (\n  subType: \"collection\" | \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData | CollectionSubTypeData,\n): Error | undefined => {\n  try {\n    if (subType === \"collection\") {\n      const collectionData = subTypeData as CollectionSubTypeData;\n      if (!collectionData.description) {\n        return new Error(\"Collection description is required\");\n      }\n      if (!collectionData.quantity) {\n        return new Error(\"Collection quantity is required\");\n      }\n      if (collectionData.rarityLabels) {\n        if (!Array.isArray(collectionData.rarityLabels)) {\n          return new Error(\"Rarity labels must be an array\");\n        }\n        // make sure keys and values are strings\n        if (!collectionData.rarityLabels.every(({ key, value }) => typeof key === \"string\" && typeof value === \"string\")) {\n          return new Error(\"Invalid rarity labels\");\n        }\n      }\n      if (!collectionData.traits) {\n        return new Error(\"Collection traits are required\");\n      }\n    }\n    if (subType === \"collectionItem\") {\n      const itemData = subTypeData as CollectionItemSubTypeData;\n      if (!itemData.collectionId) {\n        return new Error(\"Collection id is required\");\n      }\n      if (!itemData.collectionId.includes(\"_\")) {\n        return new Error(\"Collection id must be a valid outpoint\");\n      }\n      if (itemData.collectionId.split(\"_\")[0].length !== 64) {\n        return new Error(\"Collection id must contain a valid txid\");\n      }\n      if (Number.isNaN(Number.parseInt(itemData.collectionId.split(\"_\")[1]))) {\n        return new Error(\"Collection id must contain a valid vout\");\n      }\n\n      if (itemData.mintNumber && typeof itemData.mintNumber !== \"number\") {\n        return new Error(\"Mint number must be a number\");\n      }\n      if (itemData.rank && typeof itemData.rank !== \"number\") {\n        return new Error(\"Rank must be a number\");\n      }\n      if (itemData.rarityLabel && typeof itemData.rarityLabel !== \"string\") {\n        return new Error(\"Rarity label must be a string\");\n      }\n      if (itemData.traits && typeof itemData.traits !== \"object\") {\n        return new Error(\"Traits must be an object\");\n      }\n      if (itemData.attachments && !Array.isArray(itemData.attachments)) {\n        return new Error(\"Attachments must be an array\");\n      }\n    }\n    return undefined;\n  } catch (error) {\n    return new Error(\"Invalid JSON data\");\n  }\n};"],"names":["TokenType","RoytaltyType","toHex","utf8Str","Buffer","from","toString","API_HOST","OrdP2PKH","_P2PKH","apply","this","arguments","prototype","lock","address","b64File","mediaType","metaData","ordAsm","undefined","ordHex","fileHex","trim","Error","fileMediaType","inscriptionAsm","P2PKH","toASM","app","type","mapCmdValue","_i","_Object$entries","Object","entries","length","_Object$entries$_i","key","value","LockingScript","fromASM","fromBase58Check","Utils","inputFromB64Utxo","utxo","unlockScriptTemplate","input","fromUtxo","_extends","script","sourceTXID","txid","fetchPayUtxos","payUrl","console","log","Promise","resolve","fetch","then","payRes","ok","json","payUtxos","filter","u","satoshis","pubKeyHash","p2pkhScript","data","map","vout","toBinary","e","reject","fetchNftUtxos","collectionId","limit","offset","url","JSON","stringify","subTypeData","res","nftUtxos","outpoints","_u$data","list","method","headers","body","concat","nftRes","nfts","nftUtxo","origin","outpoint","fetchTokenUtxos","protocol","tokenId","BSV20","tokenUtxos","amt","id","signData","tx","signer","_exit","_temp2","_result","idKey","keyHost","_sigma$sign","Sigma","sign","signedTx","_temp","authToken","sigma","remoteSign","_ref","_catch","stringifyMetaData","result","Array","isArray","String","createOrdinals","config","_step","utxos","destinations","paymentPk","changeAddress","_config$satsPerKb","satsPerKb","_config$additionalPay","additionalPayments","modelOrFee","SatoshisPerKilobyte","Transaction","_iterator","_createForOfIteratorHelperLoose","done","unlock","addInput","warn","_step2","_iterator2","destination","inscription","_Object$keys","keys","addOutput","lockingScript","dataB64","contentType","_step3","_iterator3","p","amount","to","totalInput","reduce","sum","BigInt","totalOutput","outputs","output","computeFee","estimatedFee","fee","payChange","spentOutpoints","changeScript","toAddress","changeOutput","change","_signData","_settle","pact","state","s","_Pact","o","bind","v","onFulfilled","_this","onRejected","_isSettledPact","thenable","sendOrdinals","_temp4","_interrupt","totalSatsIn","totalSatsOut","changeOut","enforceUniformSend","ordinals","ordUtxo","ordPk","push","_destination$inscript","_destination$inscript2","total","out","_temp3","array","i","_cycle","check","_forOf","paymentUtxos","_modelOrFee$computeFe","observer","sendUtxos","payments","DEFAULT_SAT_PER_KB","_config$changeAddress","payment","sendTxOut","transferOrdTokens","tokenID","inputTokens","distributions","tokenChangeAddress","changeAmt","totalAmtIn","totalAmtOut","every","token","changeDistribution","dest","transferInscription","op","tick","BSV21","sendOrdinalsConfig","tokenChange","tokenChangeVout","findIndex","d","validateSubTypeData","subType","collectionData","description","quantity","rarityLabels","traits","itemData","includes","split","Number","isNaN","parseInt","mintNumber","rank","rarityLabel","attachments","error"],"mappings":"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"}