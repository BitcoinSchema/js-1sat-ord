{"version":3,"file":"index.module.js","sources":["../src/utils/strings.ts","../src/types.ts","../src/constants.ts","../src/templates/ordP2pkh.ts","../src/utils/utxo.ts","../src/signData.ts","../src/utils/subtypeData.ts","../src/createOrdinals.ts","../src/sendOrdinals.ts","../src/sendUtxos.ts","../src/transferOrdinals.ts","../src/validate.ts","../src/templates/ordLock.ts","../src/createListings.ts","../src/cancelListing.ts","../src/purchaseOrdListing.ts"],"sourcesContent":["/**\n * Converts a string to its hexadecimal representation\n *\n * @param {string} utf8Str - The string to convert\n * @returns {string} The hexadecimal representation of the input string\n */\nconst toHex = (utf8Str: string): string => {\n  return Buffer.from(utf8Str).toString(\"hex\");\n};\n\nexport { toHex };\n","import type { PrivateKey, Script, Transaction } from \"@bsv/sdk\";\nimport type { AuthToken } from \"sigma-protocol\";\n\n// biome-ignore lint/complexity/noBannedTypes: Reserved for future use\ntype Signer = {};\n\nexport interface LocalSigner extends Signer {\n\tidKey: PrivateKey;\n}\n\nexport interface RemoteSigner extends Signer {\n\tkeyHost: string;\n\tauthToken?: AuthToken;\n}\n\nexport type Destination = {\n\taddress: string;\n\tinscription?: Inscription;\n};\n\n//jsdoc\n/**\n * @typedef {Object} Listing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n */\nexport type Listing = {\n  payAddress: string;\n  price: number;\n  ordAddress: string;\n  listingUtxo: Utxo\n}\n\n/**\n * @typedef {Object} Distribution\n * @property {string} address - Destination address. Must be a Ordinals address (BSV address for recieving 1Sat ordinals tokens).\n * @property {string} amt - Number of tokens as a string, considering decimals. Not display format. Ex. 100000000 for 1 token with 8 decimal places.\n */\nexport type Distribution = {\n\taddress: string;\n\tamt: string;\n};\n\n/**\n * @typedef {Object} Utxo\n * @property {number} satoshis - Amount in satoshis\n * @property {string} txid - Transaction id\n * @property {number} vout - Output index\n * @property {string} script - Base64 encoded locking script\n */\nexport type Utxo = {\n\tsatoshis: number;\n\ttxid: string;\n\tvout: number;\n\tscript: string;\n};\n\n/**\n * @typedef {Object} NftUtxo\n * @property {string} collectionId - Optional. Collection id of the NFT\n * @property {string} contentType - Media type of the NFT\n * @property {string} creatorBapId - Optional. Creator BAP id of the NFT\n * @property {string} origin - Origin address of the NFT\n * @property {number} satoshis - Always 1\n */\nexport interface NftUtxo extends Utxo {\n\tcollectionId?: string;\n\tcontentType: string;\n\tcreatorBapId?: string;\n\torigin: string;\n\tsatoshis: 1;\n}\n\n/**\n * @typedef {Object} TokenUtxo\n * @property {string} amt - Number of tokens as a string\n * @property {string} id - Token id -  either tick or id depending on protocol\n * @property {string} satoshis - Always 1\n */\nexport interface TokenUtxo extends Utxo {\n\tamt: string;\n\tid: string;\n\tsatoshis: 1;\n}\n\nexport type Inscription = {\n\tdataB64: string;\n\tcontentType: string;\n};\n\nexport type ImageContentType =\n\t| \"image/png\"\n\t| \"image/jpeg\"\n\t| \"image/gif\"\n\t| \"image/svg+xml\"\n\t| \"image/webp\";\n\n/**\n * @typedef {Object} IconInscription\n * @property {string} dataB64 - Base64 encoded image data. Must be a square image.\n * @property {ImageContentType} contentType - Media type of the image\n */\nexport type IconInscription = {\n\tdataB64: string;\n\tcontentType: ImageContentType;\n};\n\nexport type Payment = {\n\tto: string;\n\tamount: number;\n};\n\nexport type TokenInscription = {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\" | \"mint\" | \"deploy+mint\" | \"burn\";\n};\n\nexport interface MintTokenInscription extends TokenInscription {\n\top: \"mint\";\n}\n\nexport interface DeployMintTokenInscription extends TokenInscription {\n\top: \"deploy+mint\";\n\tsym: string;\n\ticon: string;\n}\n\nexport interface TransferTokenInscription extends TokenInscription {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\" | \"burn\";\n}\n\nexport interface TransferBSV20Inscription extends TransferTokenInscription {\n\ttick: string;\n}\n\nexport interface TransferBSV21Inscription extends TransferTokenInscription {\n\tid: string;\n}\n\nexport enum TokenType {\n\tBSV20 = \"bsv20\",\n\tBSV21 = \"bsv21\",\n}\n\nexport type CreateOrdinalsResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\n/**\n * MAP (Magic Attribute Protocol) metadata object with stringified values for writing to the blockchain\n * @typedef {Object} MAP\n * @property {string} app - Application identifier\n * @property {string} type - Metadata type\n * @property {string} [prop] - Optional. Additional metadata properties\n */\nexport type MAP = {\n\tapp: string;\n\ttype: string;\n\t[prop: string]: string;\n};\n\nexport type PreMAP = {\n\tapp: string;\n\ttype: string;\n\t[prop: string]: unknown;\n\troyalties?: Royalty[];\n\tsubTypeData?: CollectionSubTypeData | CollectionItemSubTypeData;\n};\n\nexport type CreateOrdinalsConfig = {\n\tutxos: Utxo[];\n\tdestinations: Destination[];\n\tpaymentPk: PrivateKey;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: PreMAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n};\n\nexport enum RoytaltyType {\n\tPaymail = \"paymail\",\n\tAddress = \"address\",\n\tScript = \"script\",\n}\n\n/**\n * Royalty object\n * @typedef {Object} Royalty\n * @property {RoytaltyType} type - Royalty type, string, one of \"paymail\", \"address\", \"script\"\n * @property {string} destination - Royalty destination\n * @property {string} percentage - Royalty percentage as a string float 0-1\n */\nexport type Royalty = {\n\ttype: RoytaltyType;\n\tdestination: string;\n\tpercentage: string; // string float 0-1\n};\n\nexport interface CreateOrdinalsMetadata extends PreMAP {\n\ttype: \"ord\",\n\tname: string,\n\tpreviewUrl?: string,\n}\n\nexport interface CreateOrdinalsCollectionMetadata extends CreateOrdinalsMetadata {\n\tsubType: \"collection\",\n\tsubTypeData: CollectionSubTypeData, // JSON stringified CollectionSubTypeData\n\troyalties?: Royalty[],\n};\n\nexport interface CreateOrdinalsCollectionItemMetadata extends CreateOrdinalsMetadata {\n\tsubType: \"collectionItem\",\n\tsubTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n};\n\n/**\n * Configuration object for creating an ordinals collection\n * @typedef {Object} CreateOrdinalsCollectionConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collection\"\n * @property metaData.name - Collection name\n * @property metaData.subTypeData - JSON stringified CollectionSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface  CreateOrdinalsCollectionConfig extends CreateOrdinalsConfig {\n\tmetaData: CreateOrdinalsCollectionMetadata\n}\n\nexport type CollectionTraits = {\n\t[trait: string]: CollectionTrait;\n};\n\nexport type CollectionTrait = {\n\tvalues: string[];\n\toccurancePercentages: string[];\n};\n\nexport type Rarity = {\n  [key:string]: string;\n}\n\nexport type RarityLabels = Rarity[]\nexport interface CollectionSubTypeData {\n\tdescription: string;\n\tquantity: number;\n\trarityLabels: RarityLabels;\n\ttraits: CollectionTraits;\n}\n\nexport interface CreateOrdinalsCollectionItemMetadata extends PreMAP {\n\t\ttype: \"ord\",\n\t\tname: string,\n\t\tsubType: \"collectionItem\",\n\t\tsubTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n\t\troyalties?: Royalty[],\n\t\tpreviewUrl?: string,\t\n}\n\n/**\n * Configuration object for creating an ordinals collection item\n * @typedef {Object} CreateOrdinalsCollectionItemConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection item\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collectionItem\"\n * @property metaData.name - Collection item name\n * @property metaData.subTypeData - JSON stringified CollectionItemSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionItemConfig extends CreateOrdinalsConfig {\n\tmetaData: CreateOrdinalsCollectionItemMetadata\n}\n\n/**\n * Subtype data for an ordinals collection item\n * @typedef {Object} CollectionItemSubTypeData\n * @property {string} collectionId - Collection id\n * @property {number} mintNumner - Mint number\n * @property {number} rank - Rank\n * @property {string} rarityLabel - Rarity label\n * @property {string} traits - traits object\n * @property {string} attachments - array of attachment objects\n */\nexport interface CollectionItemSubTypeData {\n\tcollectionId: string;\n\tmintNumber?: number;\n\trank?: number;\n\trarityLabel?: RarityLabels;\n\ttraits?: CollectionItemTraits;\n\tattachments?: CollectionItemAttachment[];\n}\n\nexport type CollectionItemTraits = {\n\tname: string;\n\tvalue: string;\n\trarityLabel?: string;\n\toccurancePercentrage?: string;\n};\n\nexport type CollectionItemAttachment \t= {\n\tname: string;\n\tdescription?: string;\n\t\"content-type\": string;\n\turl: string;\n}\n\nexport type SendOrdinalsResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type SendOrdinalsConfig = {\n\tpaymentUtxos: Utxo[];\n\tordinals: Utxo[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tdestinations: Destination[];\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: PreMAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n\tenforceUniformSend?: boolean;\n}\n\nexport type DeployBsv21TokenResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type DeployBsv21TokenConfig = {\n\tsymbol: string;\n\ticon: string | IconInscription;\n\tutxos: Utxo[];\n\tinitialDistribution: Distribution;\n\tpaymentPk: PrivateKey;\n\tdestinationAddress: string;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[];\n};\n\nexport type SendUtxosResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type SendUtxosConfig = {\n\tutxos: Utxo[];\n\tpaymentPk: PrivateKey;\n\tpayments: Payment[];\n\tsatsPerKb?: number;\n\tchangeAddress?: string;\n};\n\nexport interface TransferOrdTokensResult extends SendOrdinalsResult {\n\ttokenChange?: TokenUtxo;\n}\n\nexport type TransferOrdTokensConfig = {\n\tprotocol: TokenType;\n\ttokenID: string;\n\tutxos: Utxo[];\n\tinputTokens: TokenUtxo[];\n\tdistributions: Distribution[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tchangeAddress?: string;\n\ttokenChangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: PreMAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n  burn?: boolean;\n}\n\nexport type CreateOrdListingsConfig = {\n\tutxos: Utxo[];\n\tlistings: Listing[];\n  royalty: number;\n\tpaymentPk: PrivateKey;\n  ordPk: PrivateKey,\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[];\n}\n\nexport type PurchaseOrdListingConfig = {\n  utxos: Utxo[];\n  paymentPk: PrivateKey;\n  listingUtxo: Utxo;\n  ordAddress: string;\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[],\n}\n\nexport type CancelOrdListingsConfig = {\n  utxos: Utxo[],\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  listingUtxos: Utxo[];\n  additionalPayments: Payment[];\n  changeAddress?: string;\n  satsPerKb?: number;\n}\n\nexport type CraeteOrdTokenListingsConfig = {\n  protocol: TokenType;\n  tokenID: string;\n  utxos: Utxo[];\n  inputTokens: TokenUtxo[];\n  distributions: Distribution[];\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  changeAddress?: string;\n  tokenChangeAddress: string;\n  satsPerKb?: number;\n  additionalPayments: Payment[];\n}","export const MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\nexport const DEFAULT_SAT_PER_KB = 10;\nexport const API_HOST = \"https://ordinals.gorillapool.io/api\";","import {\n\tLockingScript,\n\tP2PKH,\n\ttype Script,\n} from \"@bsv/sdk\";\nimport type { MAP } from \"../types\";\nimport { toHex } from \"../utils/strings\";\nimport { MAP_PREFIX } from \"../constants\";\n\n/**\n * OrdP2PKH (1Sat Ordinal + Pay To Public Key Hash) class implementing ScriptTemplate.\n *\n * This class provides methods to create an Ordinal with Pay To Public Key Hash locking and unlocking scripts. \n * It extends the standard P2PKH script template and provides a custom lock method.\n */\nexport default class OrdP2PKH extends P2PKH {\n\t/**\n\t * Creates a 1Sat Ordinal + P2PKH locking script for a given address string\n\t *\n\t * @param {string} address - An destination address for the Ordinal.\n\t * @param {string} [b64File] - Base64 encoded file data.\n\t * @param {string} [mediaType] - Media type of the file.\n\t * @param {MAP} [metaData] - (optional) MAP Metadata to be included in OP_RETURN.\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\t// unlock method inherits from p2pkh\n\tlock(\n\t\taddress: string,\n\t\tb64File?: string | undefined,\n\t\tmediaType?: string | undefined,\n\t\tmetaData?: MAP | undefined,\n\t): Script {\n\t\tlet ordAsm = \"\";\n\t\t// This can be omitted for reinscriptions that just update metadata\n\t\tif (b64File !== undefined && mediaType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(b64File, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(mediaType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`;\n\t\t}\n\n\t\t// Create ordinal output and inscription in a single output\n\t\tconst lockingScript = new P2PKH().lock(address);\n\t\tlet inscriptionAsm = `${ordAsm ? `${ordAsm} ` : \"\"}${lockingScript.toASM()}`;\n\n\t\t// MAP.app and MAP.type keys are required\n\t\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t\t}\n\n\t\tif (metaData?.app && metaData?.type) {\n\t\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\t\tconst mapCmdValue = toHex(\"SET\");\n\t\t\tinscriptionAsm = `${inscriptionAsm} OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\t\tif (key !== \"cmd\") {\n\t\t\t\t\tinscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\n\t\t\t\t\t\tvalue as string,\n\t\t\t\t\t)}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn LockingScript.fromASM(inscriptionAsm);\n\t}\n}\n","import {\n\ttype Transaction,\n\ttype UnlockingScript,\n\tfromUtxo,\n\ttype TransactionInput,\n\tUtils,\n\tP2PKH,\n  Script,\n} from \"@bsv/sdk\";\nimport { type NftUtxo, TokenType, type TokenUtxo, type Utxo } from \"../types\";\nimport { API_HOST } from \"../constants\";\n\nconst { fromBase58Check } = Utils;\n\n/**\n * Converts a Utxo object with a base64 encoded script to a Utxo object with a hex encoded script\n * @param {Utxo} utxo - Utxo object with base64 encoded script\n * @param {Object} unlockScriptTemplate - Object with sign and estimateLength functions\n * @returns {TransactionInput} Utxo object with hex encoded script\n */\nexport const inputFromB64Utxo = (\n\tutxo: Utxo,\n\tunlockScriptTemplate: {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>;\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>;\n\t},\n): TransactionInput => {\n\tconst input = fromUtxo(\n\t\t{\n\t\t\t...utxo,\n\t\t\tscript: Buffer.from(utxo.script, \"base64\").toString(\"hex\"),\n\t\t},\n\t\tunlockScriptTemplate,\n\t);\n\treturn input;\n};\n\n/**\n * Fetches pay utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<Utxo[]>} Array of pay utxos\n */\nexport const fetchPayUtxos = async (address: string, scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\"): Promise<Utxo[]> => {\n\tconst payUrl = `${API_HOST}/txos/address/${address}/unspent?bsv20=false`;\n\tconsole.log({ payUrl });\n\tconst payRes = await fetch(payUrl);\n\tif (!payRes.ok) {\n\t\tthrow new Error(\"Error fetching pay utxos\");\n\t}\n\tlet payUtxos = await payRes.json();\n\t// exclude all 1 satoshi utxos\n\tpayUtxos = payUtxos.filter((u: { satoshis: number }) => u.satoshis !== 1);\n\n\t// Get pubkey hash from address\n\tconst pubKeyHash = fromBase58Check(address);\n\tconst p2pkhScript = new P2PKH().lock(pubKeyHash.data);\n\tpayUtxos = payUtxos.map((utxo: Partial<Utxo>) => ({\n\t\ttxid: utxo.txid,\n\t\tvout: utxo.vout,\n\t\tsatoshis: utxo.satoshis,\n\t\tscript: scriptEncoding === \"hex\" || scriptEncoding === \"base64\" ? Buffer.from(p2pkhScript.toBinary()).toString(scriptEncoding) : p2pkhScript.toASM(),\n\t}));\n\treturn payUtxos as Utxo[];\n};\n\n/**\n * Fetches NFT utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @param {string} [collectionId] - Optional. Collection id (collection insciprtion origin)\n * @param {number} [limit=10] - Optional. Number of utxos to fetch. Default is 10\n * @param {number} [offset=0] - Optional. Offset for fetching utxos. Default is 0\n * @param {string} [scriptEncoding=\"base64\"] - Optional. Encoding for the script. Default is base64. Options are hex, base64, or asm.\n * @returns {Promise<Utxo[]>} Array of NFT utxos\n */\nexport const fetchNftUtxos = async (\n\taddress: string,\n\tcollectionId?: string,\n\tlimit = 10,\n\toffset = 0,\n  scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\",\n): Promise<NftUtxo[]> => {\n\tlet url = `${API_HOST}/txos/address/${address}/unspent?limit=${limit}&offset=${offset}&`;\n\n\tif (collectionId) {\n\t\tconst query = {\n\t\t\tmap: {\n\t\t\t\tsubTypeData: { collectionId },\n\t\t\t},\n\t\t};\n\t\tconst b64Query = Buffer.from(JSON.stringify(query)).toString(\"base64\");\n\t\turl += `q=${b64Query}`;\n\t}\n\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching NFT utxos for ${address}`);\n\t}\n\n\t// Returns a BSV20Txo but we only need a few fields\n\tlet nftUtxos = await res.json();\n\n\t// Only include 1 satoshi outputs, non listings\n\tnftUtxos = nftUtxos.filter(\n\t\t(u: {\n\t\t\tsatoshis: number;\n\t\t\tdata: { list: { price: number; payout: string } | undefined } | null;\n\t\t}) => u.satoshis === 1 && !u.data?.list,\n\t);\n\n\tconst outpoints = nftUtxos.map(\n\t\t(utxo: { txid: string; vout: number }) => `${utxo.txid}_${utxo.vout}`,\n\t);\n\t// Fetch the scripts up to the limit\n\tconst nftRes = await fetch(`${API_HOST}/txos/outpoints?script=true`, {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t\tbody: JSON.stringify([...outpoints]),\n\t});\n\n\tif (!nftRes.ok) {\n\t\tthrow new Error(`Error fetching NFT scripts for ${address}`);\n\t}\n\n\tconst nfts = (await nftRes.json() || [])\n\n\tnftUtxos = nfts.map(\n\t\t(utxo: {\n\t\t\torigin: { outpoint: string };\n\t\t\tscript: string;\n\t\t\tvout: number;\n\t\t\ttxid: string;\n\t\t}) => {\n      let script = utxo.script;\n      if (scriptEncoding === \"hex\") {\n        script = Buffer.from(script, \"base64\").toString(\"hex\");\n      } else if (scriptEncoding === \"asm\") {\n        script = Script.fromHex(Buffer.from(script, \"base64\").toString(\"hex\")).toASM();\n      }\n\t\t\tconst nftUtxo = {\n\t\t\t\torigin: utxo.origin.outpoint,\n\t\t\t\tscript,\n\t\t\t\tvout: utxo.vout,\n\t\t\t\ttxid: utxo.txid,\n\t\t\t\tsatoshis: 1,\n\t\t\t} as NftUtxo;\n\t\t\tif (collectionId) {\n\t\t\t\tnftUtxo.collectionId = collectionId;\n\t\t\t}\n\t\t\treturn nftUtxo;\n\t\t},\n\t);\n\n\treturn nftUtxos as NftUtxo[];\n};\n\n/**\n * Fetches token utxos from the API\n * @param {TokenType} protocol - Token protocol. Either BSV20 or BSV21\n * @param {string} tokenId - Token id. Ticker for BSV20 and id (mint+deploy inscription origin) for BSV21\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<TokenUtxo[]>} Array of token utxos\n */\nexport const fetchTokenUtxos = async (\n\tprotocol: TokenType,\n\ttokenId: string,\n\taddress: string,\n): Promise<TokenUtxo[]> => {\n\tconst url = `${API_HOST}/bsv20/${address}/${protocol === TokenType.BSV20 ? \"tick\" : \"id\"}/${tokenId}?bsv20=true&listing=false`;\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching ${protocol} utxos`);\n\t}\n\n\t// returns a BSV20Txo but we only need a few fields\n\tlet tokenUtxos = await res.json();\n\n\ttokenUtxos = tokenUtxos.map((utxo: Partial<TokenUtxo>) => ({\n\t\tamt: utxo.amt,\n\t\tscript: utxo.script,\n\t\tvout: utxo.vout,\n\t\ttxid: utxo.txid,\n\t\tid: tokenId,\n\t\tsatoshis: 1,\n\t}));\n\n\treturn tokenUtxos as TokenUtxo[];\n};\n","import type { Transaction } from \"@bsv/sdk\";\nimport { Sigma } from \"sigma-protocol\";\nimport type { LocalSigner, RemoteSigner } from \"./types\";\n\n/**\n * Signs data in the transaction with Sigma protocol\n * @param {Transaction} tx - Transaction to sign\n * @param {LocalSigner | RemoteSigner} signer - Local or remote signer (used for data signature)\n * @returns {Transaction} Transaction with signed data\n */\nexport const signData = async (\n\ttx: Transaction,\n\tsigner: LocalSigner | RemoteSigner,\n): Promise<Transaction> => {\n\t// Sign tx if idKey or remote signer like starfish/tokenpass\n\tconst idKey = (signer as LocalSigner)?.idKey;\n\tconst keyHost = (signer as RemoteSigner)?.keyHost;\n\n\tif (idKey) {\n\t\tconst sigma = new Sigma(tx);\n\t\tconst { signedTx } = sigma.sign(idKey);\n\t\treturn signedTx;\n\t}\n\tif (keyHost) {\n\t\tconst authToken = (signer as RemoteSigner)?.authToken;\n\t\tconst sigma = new Sigma(tx);\n\t\ttry {\n\t\t\tconst { signedTx } = await sigma.remoteSign(keyHost, authToken);\n\t\t\treturn signedTx;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthrow new Error(`Remote signing to ${keyHost} failed`);\n\t\t}\n\t}\n\tthrow new Error(\"Signer must be a LocalSigner or RemoteSigner\");\n};\n","import type { MAP, PreMAP } from \"../types\";\n\nconst stringifyMetaData = (metaData?: PreMAP): MAP | undefined => {\n  if (!metaData) return undefined;\n\tconst result: MAP = {\n\t\tapp: metaData.app,\n\t\ttype: metaData.type,\n\t};\n\n\tfor (const [key, value] of Object.entries(metaData)) {\n\t\tif (value !== undefined) {\n\t\t\tif (typeof value === \"string\") {\n\t\t\t\tresult[key] = value;\n\t\t\t} else if (Array.isArray(value) || typeof value === \"object\") {\n\t\t\t\tresult[key] = JSON.stringify(value);\n\t\t\t} else {\n\t\t\t\tresult[key] = String(value);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\nexport default stringifyMetaData;\n","import { Transaction, SatoshisPerKilobyte, P2PKH } from \"@bsv/sdk\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n\tUtxo,\n\tCreateOrdinalsConfig,\n\tCreateOrdinalsResult,\n\tCreateOrdinalsCollectionConfig,\n\tCreateOrdinalsCollectionItemConfig,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Creates a transaction with inscription outputs\n * @param {CreateOrdinalsConfig | CreateOrdinalsCollectionConfig | CreateOrdinalsCollectionItemConfig} config - Configuration object for creating ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {string} config.changeAddress - Optional. Address to send change to. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Local or remote signer (used for data signature)\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<CreateOrdinalsResult>} Transaction with inscription outputs\n */\nexport const createOrdinals = async (\n\tconfig:\n\t\t| CreateOrdinalsConfig\n\t\t| CreateOrdinalsCollectionConfig\n\t\t| CreateOrdinalsCollectionItemConfig,\n): Promise<CreateOrdinalsResult> => {\n\tconst {\n\t\tutxos,\n\t\tdestinations,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Inputs\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\t}\n\n\t// Warn if creating many inscriptions at once\n\tif (destinations.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Outputs\n\t// Add inscription outputs\n\tfor (const destination of destinations) {\n\t\tif (!destination.inscription) {\n\t\t\tthrow new Error(\"Inscription is required for all destinations\");\n\t\t}\n\n\t\t// remove any undefined fields from metadata\n\t\tif (metaData) {\n\t\t\tfor(const key of Object.keys(metaData)) {\n\t\t\t\tif (metaData[key] === undefined) {\n\t\t\t\t\tdelete metaData[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription.dataB64,\n\t\t\t\tdestination.inscription.contentType,\n\t\t\t\tstringifyMetaData(metaData),\n\t\t\t),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Calculate total input and output amounts\n\tconst totalInput = utxos.reduce(\n\t\t(sum, utxo) => sum + BigInt(utxo.satoshis),\n\t\t0n,\n\t);\n\tconst totalOutput = tx.outputs.reduce(\n\t\t(sum, output) => sum + BigInt(output.satoshis || 0),\n\t\t0n,\n\t);\n\n\t// Estimate fee\n\tconst estimatedFee = await modelOrFee.computeFee(tx);\n\n\t// Check if change is needed\n\tlet payChange: Utxo | undefined;\n\tif (totalInput > totalOutput + BigInt(estimatedFee)) {\n\t\tconst changeScript = new P2PKH().lock(\n\t\t\tchangeAddress || paymentPk.toAddress().toString(),\n\t\t);\n\t\tconst changeOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\t// Add change output\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet,\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\n\t\ttx.addOutput(changeOutput);\n\t}\n\n\tif (signer) {\n\t\ttx = await signData(tx, signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype Script,\n\ttype TransactionOutput,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type { SendOrdinalsResult, SendOrdinalsConfig, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Sends ordinals to the given destinations\n * @param {SendOrdinalsConfig} config - Configuration object for sending ordinals\n * @param {Utxo[]} config.paymentUtxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.ordinals - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {string} config.changeAddress - Optional. Address to send change to, if any. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @param {boolean} config.enforceUniformSend - Optional. Default: true. Enforce that the number of destinations matches the number of ordinals being sent. Sending ordinals requires a 1:1 mapping of destinations to ordinals. This is only used for sub-protocols like BSV21 that manage tokens without sending the inscriptions directly.\n * @returns {Promise<SendOrdinalsResult>} Transaction, spent outpoints, and change vout\n */\nexport const sendOrdinals = async (\n\tconfig: SendOrdinalsConfig,\n): Promise<SendOrdinalsResult> => {\n\tif (!config.satsPerKb) {\n\t\tconfig.satsPerKb = DEFAULT_SAT_PER_KB;\n\t}\n\tif (!config.additionalPayments) {\n\t\tconfig.additionalPayments = [];\n\t}\n\tif (config.enforceUniformSend === undefined) {\n\t\tconfig.enforceUniformSend = true;\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(config.satsPerKb);\n\tlet tx = new Transaction();\n\tconst spentOutpoints: string[] = [];\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of config.ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(\n\t\t\tordUtxo,\n\t\t\tnew OrdP2PKH().unlock(config.ordPk),\n\t\t);\n\t\tspentOutpoints.push(`${ordUtxo.txid}_${ordUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// check that ordinals coming in matches ordinals going out if supplied\n\tif (\n\t\tconfig.enforceUniformSend &&\n\t\tconfig.destinations.length !== config.ordinals.length\n\t) {\n\t\tthrow new Error(\n\t\t\t\"Number of destinations must match number of ordinals being sent\",\n\t\t);\n\t}\n\n\t// Add ordinal outputs\n\tfor (const destination of config.destinations) {\n\t\tlet s: Script;\n\t\tif (\n\t\t\tdestination.inscription?.dataB64 &&\n\t\t\tdestination.inscription?.contentType\n\t\t) {\n\t\t\ts = new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription.dataB64,\n\t\t\t\tdestination.inscription.contentType,\n\t\t\t\tstringifyMetaData(config.metaData),\n\t\t\t);\n\t\t} else {\n\t\t\ts = new P2PKH().lock(destination.address);\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: s,\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of config.additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of config.paymentUtxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(config.paymentPk));\n\t\tspentOutpoints.push(`${utxo.txid}_${utxo.vout}`);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (totalSatsIn < totalSatsOut) {\n\t\tthrow new Error(\"Not enough ordinals to send\");\n\t}\n\n\tlet payChange: Utxo | undefined;\n\tif (totalSatsIn > totalSatsOut + BigInt(fee)) {\n\t\tconst changeScript = new P2PKH().lock(\n\t\t\tconfig.changeAddress || config.paymentPk.toAddress().toString(),\n\t\t);\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not available until the transaction is signed\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t}\n\n\tif (config.signer) {\n\t\ttx = await signData(tx, config.signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChange,\n\t};\n};\n","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype TransactionOutput,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type { SendUtxosConfig, SendUtxosResult, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Sends utxos to the given destination\n * @param {SendUtxosConfig} config - Configuration object for sending utxos\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {Payment[]} config.payments - Array of payments with addresses and amounts\n * @param {number} [config.satsPerKb] - Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {string} [config.changeAddress] - Address to send change to. If not provided, defaults to paymentPk address\n * @returns {Promise<SendUtxosResult>} Transaction with utxo outputs\n */\nexport const sendUtxos = async (\n\tconfig: SendUtxosConfig,\n): Promise<SendUtxosResult> => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tpayments,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tchangeAddress = paymentPk.toAddress().toString(),\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\t// Outputs\n\tfor (const payment of payments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new P2PKH().lock(payment.to),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + (out.satoshis || 0),\n\t\t0,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + fee) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + fee) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to send. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChange: Utxo | undefined;\n\tif (totalSatsIn > totalSatsOut + fee) {\n\t\t// Change\n\t\tconst changeScript = new P2PKH().lock(changeAddress);\n\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t} else if (totalSatsIn < totalSatsOut + fee) {\n\t\tconsole.log(\"No change needed\");\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\ttype Destination,\n\tTokenType,\n\ttype TransferBSV20Inscription,\n\ttype TransferTokenInscription,\n  type TransferBSV21Inscription,\n\ttype TransferOrdTokensConfig,\n\ttype TransferOrdTokensResult,\n\ttype SendOrdinalsConfig,\n\ttype TokenUtxo,\n} from \"./types\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { sendOrdinals } from \"./sendOrdinals\";\n\n/**\n * Transfer tokens to a destination\n * @param {TransferOrdTokensConfig} config - Configuration object for transferring tokens\n * @param {TokenType} config.protocol - Token protocol. Must be TokenType.BSV20 or TokenType.BSV21\n * @param {string} config.tokenID - Token ID. Either the tick or id value depending on the protocol\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {TokenUtxo[]} config.inputTokens - Token utxos to spend\n * @param {Distribution[]} config.distributions - Array of destinations with addresses and amounts\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {string} config.changeAddress - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {string} config.tokenChangeAddress - Optional. Address to send token change to, if any. If not provided, defaults to ordPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @param {burn} config.burn - Optional. Set to true to burn the tokens.\n * @returns {Promise<TransferOrdTokensResult>} Transaction with token transfer outputs\n */\nexport const transferOrdTokens = async (config: TransferOrdTokensConfig): Promise<TransferOrdTokensResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tinputTokens,\n\t\tdistributions,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tchangeAddress,\n\t\ttokenChangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n    burn = false\n\t} = config;\n\n\t// calculate change amount\n\tlet changeAmt = 0n;\n\tlet totalAmtIn = 0n;\n\tlet totalAmtOut = 0n;\n\n  // Ensure these inputs are for the expected token\n\tif(!inputTokens.every(\n\t\t(token) => token.id === tokenID,\n\t)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n\tfor (const token of inputTokens) {\n\t\ttotalAmtIn += BigInt(token.amt);\n\t}\n\n\tfor (const dest of distributions) {\n\t\ttotalAmtOut += BigInt(dest.amt);\n\t}\n\n\t// check that you have enough tokens to send\n\tif (totalAmtIn < totalAmtOut) {\n\t\tthrow new Error(\"Not enough tokens to send\");\n\t}\n\n\tchangeAmt = totalAmtIn - totalAmtOut;\n\n\t// add change to distributions\n\tif (changeAmt > 0n) {\n\t\tconst changeDistribution = {\n\t\t\taddress: tokenChangeAddress || ordPk.toAddress().toString(),\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t\tdistributions.push(changeDistribution);\n\t}\n\n\t// build destination inscriptions\n\tconst destinations: Destination[] = distributions.map((dest) => {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: burn ? \"burn\" : \"transfer\",\n\t\t\tamt: dest.amt,\n\t\t}\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n\t\treturn {\n\t\t\taddress: dest.address,\n\t\t\tinscription: {\n\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\t\tcontentType: \"application/bsv-20\",\n\t\t\t},\n\t\t};\n\t});\n\n\tconst sendOrdinalsConfig: SendOrdinalsConfig = {\n\t\tpaymentUtxos: utxos,\n\t\tordinals: inputTokens,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tdestinations,\n\t\tchangeAddress: changeAddress || paymentPk.toAddress().toString(),\n\t\tsatsPerKb,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments,\n\t\tenforceUniformSend: false\n\t};\n\n\tconst { tx, spentOutpoints, payChange } = await sendOrdinals(sendOrdinalsConfig);\n\t\n\t// find the tokenChangeVout by looking for the destination with the tokenChangeAddress\n\tconst tokenChangeVout = destinations.findIndex(\n\t\t(d) => d.address === (tokenChangeAddress || ordPk.toAddress().toString())\n\t);\n\t\n\tlet tokenChange: TokenUtxo | undefined;\n\tif (tokenChangeVout !== -1) {\n\t\ttokenChange = {\n\t\t\tid: tokenID,\n\t\t\tamt: changeAmt.toString(),\n\t\t\tsatoshis: 1,\n\t\t\ttxid: tx.id(\"hex\"),\n\t\t\tvout: tokenChangeVout,\n\t\t\tscript: Buffer.from(tx.outputs[tokenChangeVout].lockingScript.toHex(), \"hex\").toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChange,\n\t\ttokenChange,\n\t}\n};","import type { CollectionItemSubTypeData, CollectionSubTypeData } from \"./types\";\n\n/**\n * Validates sub type data\n * @param {string} subType - Sub type of the ordinals token\n * @param {string} subTypeData - Sub type data of the ordinals token\n * @returns {Error | undefined} Error if validation fails, undefined if validation passes\n */\nexport const validateSubTypeData = (\n  subType: \"collection\" | \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData | CollectionSubTypeData,\n): Error | undefined => {\n  try {\n    if (subType === \"collection\") {\n      const collectionData = subTypeData as CollectionSubTypeData;\n      if (!collectionData.description) {\n        return new Error(\"Collection description is required\");\n      }\n      if (!collectionData.quantity) {\n        return new Error(\"Collection quantity is required\");\n      }\n      if (collectionData.rarityLabels) {\n        if (!Array.isArray(collectionData.rarityLabels)) {\n          return new Error(\"Rarity labels must be an array\");\n        }\n        // make sure keys and values are strings\n        if (!collectionData.rarityLabels.every((label) => {\n          return Object.values(label).every(value => typeof value === 'string');\n        })) {\n          return new Error(`Invalid rarity labels ${collectionData.rarityLabels}`);\n        }\n      }\n      if (collectionData.traits ) {\n        if (typeof collectionData.traits !== \"object\") {\n        return new Error(\"Collection traits must be an object\");\n        }\n        if (collectionData.traits && !Object.keys(collectionData.traits).every(key => typeof key === 'string' && typeof collectionData.traits[key] === 'object')) {\n          return new Error(\"Collection traits must be a valid CollectionTraits object\");\n        }\n      }\n    }\n    if (subType === \"collectionItem\") {\n      const itemData = subTypeData as CollectionItemSubTypeData;\n      if (!itemData.collectionId) {\n        return new Error(\"Collection id is required\");\n      }\n      if (!itemData.collectionId.includes(\"_\")) {\n        return new Error(\"Collection id must be a valid outpoint\");\n      }\n      if (itemData.collectionId.split(\"_\")[0].length !== 64) {\n        return new Error(\"Collection id must contain a valid txid\");\n      }\n      if (Number.isNaN(Number.parseInt(itemData.collectionId.split(\"_\")[1]))) {\n        return new Error(\"Collection id must contain a valid vout\");\n      }\n\n      if (itemData.mintNumber && typeof itemData.mintNumber !== \"number\") {\n        return new Error(\"Mint number must be a number\");\n      }\n      if (itemData.rank && typeof itemData.rank !== \"number\") {\n        return new Error(\"Rank must be a number\");\n      }\n      if (itemData.rarityLabel && typeof itemData.rarityLabel !== \"string\") {\n        return new Error(\"Rarity label must be a string\");\n      }\n      if (itemData.traits && typeof itemData.traits !== \"object\") {\n        return new Error(\"Traits must be an object\");\n      }\n      if (itemData.attachments && !Array.isArray(itemData.attachments)) {\n        return new Error(\"Attachments must be an array\");\n      }\n    }\n    return undefined;\n  } catch (error) {\n    return new Error(\"Invalid JSON data\");\n  }\n};","import {\n\tBigNumber,\n\tLockingScript,\n\tOP,\n\tP2PKH,\n\tPrivateKey,\n\tScript,\n\tTransaction,\n\tTransactionSignature,\n\tUnlockingScript,\n\tUtils,\n} from \"@bsv/sdk\";\n\nexport const oLockPrefix =\n\t\"2097dfd76851bf465e8f715593b217714858bbe9570ff3bd5e33840a34e20ff0262102ba79df5f8ae7604a9830f03c7933028186aede0675a16f025dc4f8be8eec0382201008ce7480da41702918d1ec8e6849ba32b4d65b1e40dc669c31a1e6306b266c0000\";\nexport const oLockSuffix =\n\t\"615179547a75537a537a537a0079537a75527a527a7575615579008763567901c161517957795779210ac407f0e4bd44bfc207355a778b046225a7068fc59ee7eda43ad905aadbffc800206c266b30e6a1319c66dc401e5bd6b432ba49688eecd118297041da8074ce081059795679615679aa0079610079517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01007e81517a75615779567956795679567961537956795479577995939521414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff00517951796151795179970079009f63007952799367007968517a75517a75517a7561527a75517a517951795296a0630079527994527a75517a6853798277527982775379012080517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01205279947f7754537993527993013051797e527e54797e58797e527e53797e52797e57797e0079517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a756100795779ac517a75517a75517a75517a75517a75517a75517a75517a75517a7561517a75517a756169587951797e58797eaa577961007982775179517958947f7551790128947f77517a75517a75618777777777777777777767557951876351795779a9876957795779ac777777777777777767006868\";\n\n/**\n * OrdLock class implementing ScriptTemplate.\n *\n * This class provides methods for interacting with OrdinalLock contract \n */\nexport default class OrdLock {\n\t/**\n\t * Creates a 1Sat Ordinal Lock script\n\t *\n\t * @param {string} ordAddress - An address which can cancel listing.\n\t * @param {string} payAddress - Address which is paid on purchase\n\t * @param {number} price - Listing price in satoshis\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\tlock(\n\t\tordAddress: string,\n\t\tpayAddress: string,\n\t\tprice: number,\n\t): Script {\n\t\tconst cancelPkh = Utils.fromBase58Check(ordAddress).data as number[];\n\t\tconst payPkh = Utils.fromBase58Check(payAddress).data as number[];\n\n\t\treturn Script.fromHex(oLockPrefix)\n\t\t\t.writeBin(cancelPkh)\n\t\t\t.writeBin(OrdLock.buildOutput(price, new P2PKH().lock(payPkh).toBinary()))\n\t\t\t.writeScript(Script.fromHex(oLockSuffix))\n\t}\n\n\tcancelListing(\n\t\tprivateKey: PrivateKey,\n\t\tsignOutputs: 'all' | 'none' | 'single' = 'all',\n\t\tanyoneCanPay: boolean = false,\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: () => Promise<number>\n\t} {\n\t\tconst p2pkh = new P2PKH().unlock(privateKey, signOutputs, anyoneCanPay, sourceSatoshis, lockingScript)\n\t\treturn {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await p2pkh.sign(tx, inputIndex)).writeOpCode(OP.OP_1)\n\t\t\t},\n\t\t\testimateLength: async () => {\n\t\t\t\treturn 107\n\t\t\t}\n\t\t}\n\t}\n\n\tpurchaseListing(\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>\n\t} {\n\t\tconst purchase = {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\tif (tx.outputs.length < 2) {\n\t\t\t\t\tthrow new Error(\"Malformed transaction\")\n\t\t\t\t}\n\t\t\t\tconst script = new UnlockingScript()\n\t\t\t\t\t.writeBin(OrdLock.buildOutput(\n\t\t\t\t\t\ttx.outputs[0].satoshis || 0,\n\t\t\t\t\t\ttx.outputs[0].lockingScript.toBinary()\n\t\t\t\t\t))\n\t\t\t\tif(tx.outputs.length > 2) {\n\t\t\t\t\tconst writer = new Utils.Writer()\n\t\t\t\t\tfor(const output of tx.outputs.slice(2)) {\n\t\t\t\t\t\twriter.write(OrdLock.buildOutput(output.satoshis || 0, output.lockingScript.toBinary()))\n\t\t\t\t\t}\n\t\t\t\t\tscript.writeBin(writer.toArray())\n\t\t\t\t} else {\n\t\t\t\t\tscript.writeOpCode(OP.OP_0)\n\t\t\t\t}\n\n\t\t\t\tconst input = tx.inputs[inputIndex]\n\t\t\t\tconst preimage = TransactionSignature.format({\n\t\t\t\t\tsourceTXID: input.sourceTXID || input.sourceTransaction!.id('hex'),\n\t\t\t\t\tsourceOutputIndex: input.sourceOutputIndex,\n\t\t\t\t\tsourceSatoshis: sourceSatoshis || \n\t\t\t\t\tinput.sourceTransaction!.outputs[input.sourceOutputIndex].satoshis!,\n\t\t\t\t\ttransactionVersion: tx.version,\n\t\t\t\t\totherInputs: [],\n\t\t\t\t\tinputIndex,\n\t\t\t\t\toutputs: tx.outputs,\n\t\t\t\t\tinputSequence: input.sequence,\n\t\t\t\t\tsubscript: lockingScript || input.sourceTransaction!.outputs[input.sourceOutputIndex].lockingScript,\n\t\t\t\t\tlockTime: tx.lockTime,\n\t\t\t\t\tscope: TransactionSignature.SIGHASH_ALL |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_ANYONECANPAY |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_FORKID\n\t\t\t\t  });\n\n\t\t\t\treturn script.writeBin(preimage).writeOpCode(OP.OP_0)\n\t\t\t},\n\t\t\testimateLength: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await purchase.sign(tx, inputIndex)).toBinary().length\n\t\t\t}\n\t\t}\n\t\treturn purchase\n\t}\n\n\tstatic buildOutput(satoshis: number, script: number[]): number[] {\n\t\tconst writer = new Utils.Writer()\n\t\twriter.writeUInt64LEBn(new BigNumber(satoshis))\n\t\twriter.writeVarIntNum(script.length)\n\t\twriter.write(script)\n\t\treturn writer.toArray()\n\t}\n}\n","// TODO: Create listing for NFT and FT\n\nimport {\n\tP2PKH,\n\tSatoshisPerKilobyte,\n\tScript,\n\tTransaction,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type {\n\tCraeteOrdTokenListingsConfig,\n\tCreateOrdListingsConfig,\n\tUtxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nconst { toArray } = Utils;\n\nexport const createOrdListings = async (config: CreateOrdListingsConfig) => {\n\tconst {\n\t\tutxos,\n\t\tlistings,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Warn if creating many inscriptions at once\n\tif (listings.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Outputs\n\t// Add listing outputs\n\tfor (const listing of listings) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdLock().lock(\n\t\t\t\tlisting.payAddress,\n\t\t\t\tlisting.ordAddress,\n\t\t\t\tlisting.price,\n\t\t\t),\n\t\t});\n\t\tconst inputScriptBinary = toArray(listing.listingUtxo.script, \"base64\");\n\t\tconst inputScript = Script.fromBinary(inputScriptBinary);\n\t\ttx.addInput({\n\t\t\tunlockingScriptTemplate: new OrdP2PKH().unlock(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlisting.listingUtxo.satoshis,\n\t\t\t\tinputScript,\n\t\t\t),\n\t\t\tsourceTXID: listing.listingUtxo.txid,\n\t\t\tsourceOutputIndex: listing.listingUtxo.vout,\n\t\t\tsequence: 0xffffffff,\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Check if change is needed\n\tlet payChange: Utxo | undefined;\n\tconst changeScript = new P2PKH().lock(\n\t\tchangeAddress || paymentPk.toAddress().toString(),\n\t);\n\tconst changeOutput = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOutput);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\nexport const createOrdTokenListings = async (\n\tconfig: CraeteOrdTokenListingsConfig,\n) => {};\n","// TODO: Cancel listing for NFT and FT\n\nimport { P2PKH, SatoshisPerKilobyte, Script, Transaction } from \"@bsv/sdk\";\nimport type { CancelOrdListingsConfig, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\n\nexport const cancelOrdListings = async (config: CancelOrdListingsConfig) => {\n\tconst {\n\t\tutxos,\n\t\tlistingUtxos,\n\t\tordPk,\n\t\tpaymentPk,\n\t\tchangeAddress,\n    additionalPayments,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinals we're cancelling\n\tfor (const listingUtxo of listingUtxos) {\n\t\ttx.addInput({\n\t\t\tunlockingScript: Script.fromHex(\n\t\t\t\tBuffer.from(listingUtxo.script, \"base64\").toString(\"hex\"),\n\t\t\t),\n\t\t\tunlockingScriptTemplate: new OrdLock().cancelListing(ordPk),\n\t\t\tsourceOutputIndex: listingUtxo.vout,\n\t\t\tsequence: 0xffffffff,\n\t\t});\n\t\t// Add cancel outputs returning listed ordinals\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new P2PKH().lock(ordPk.toAddress().toString()),\n\t\t});\n\t}\n\n  \t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\n\t// Warn if creating many inscriptions at once\n\tif (listingUtxos.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n  // make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map((i) => `${i.sourceTXID}_${i.sourceOutputIndex}`),\n\t\tpayChange,\n\t};\n};\n\n// const cancelTx = new Transaction(1, 0);\n\n// if (listing.id || listing.tick) {\n//   cancelling.value = false;\n//   throw new Error(\"BSV20 listing!\");\n// }\n\n// const cancelInput = new TxIn(\n//   Buffer.from(listing.txid, \"hex\"),\n//   listing.vout,\n//   Script.from_asm_string(\"\")\n// );\n// cancelTx.add_input(cancelInput);\n// const ordinalsAddress = P2PKHAddress.from_string(ordAddress.value);\n\n// const satOutScript = ordinalsAddress.get_locking_script();\n// const transferOut = new TxOut(BigInt(1), satOutScript);\n\n// cancelTx.add_output(transferOut);\n\n// const changeAddress = P2PKHAddress.from_string(fundingAddress.value);\n\n// // dummy outputs - change\n// const dummyChangeOutput = new TxOut(\n//   BigInt(0),\n//   changeAddress.get_locking_script()\n// );\n// cancelTx.add_output(dummyChangeOutput);\n\n// // Calculate the network fee\n// // account for funding input and market output (not added to tx yet)\n// const paymentUtxos: Utxo[] = [];\n// let satsCollected = 0;\n// // initialize fee and satsNeeded (updated with each added payment utxo)\n// let fee = calculateFee(1, cancelTx);\n// let satsNeeded = fee;\n// // collect the required utxos\n// const sortedFundingUtxos = utxos.value.sort((a, b) =>\n//   a.satoshis > b.satoshis ? -1 : 1\n// );\n// for (const utxo of sortedFundingUtxos) {\n//   if (satsCollected < satsNeeded) {\n//     satsCollected += utxo.satoshis;\n//     paymentUtxos.push(utxo);\n\n//     // if we had to add additional\n//     fee = calculateFee(paymentUtxos.length, cancelTx);\n//     satsNeeded = fee + BigInt(indexerBuyFee);\n//   }\n// }\n\n// // add payment utxos to the tx\n// for (const u of paymentUtxos) {\n//   const inx = new TxIn(\n//     Buffer.from(u.txid, \"hex\"),\n//     u.vout,\n//     Script.from_asm_string(\"\")\n//   );\n//   inx.set_satoshis(BigInt(u.satoshis));\n//   cancelTx.add_input(inx);\n// }\n\n// // Replace dummy change output\n// const changeAmt = BigInt(satsCollected) - satsNeeded;\n\n// const changeOutput = new TxOut(\n//   BigInt(changeAmt),\n//   changeAddress.get_locking_script()\n// );\n\n// cancelTx.set_output(1, changeOutput);\n\n// // sign the cancel input\n// const sig = cancelTx.sign(\n//   PrivateKey.from_wif(ordPk.value),\n//   SigHash.InputOutputs,\n//   0,\n//   Script.from_bytes(Buffer.from(listing.script, \"base64\")),\n//   BigInt(1)\n// );\n\n// cancelInput.set_unlocking_script(\n//   Script.from_asm_string(\n//     `${sig.to_hex()} ${PrivateKey.from_wif(ordPk.value)\n//       .to_public_key()\n//       .to_hex()} OP_1`\n//   )\n// );\n\n// cancelTx.set_input(0, cancelInput);\n\n// // sign the funding inputs\n// let idx = 1;\n// for (const u of paymentUtxos) {\n//   const inx = cancelTx.get_input(idx);\n\n//   if (!inx) {\n//     cancelling.value = false;\n//     return;\n//   }\n\n//   const sig = cancelTx.sign(\n//     PrivateKey.from_wif(payPk.value),\n//     SigHash.InputOutputs,\n//     idx,\n//     Script.from_asm_string(u.script),\n//     BigInt(u.satoshis)\n//   );\n\n//   inx.set_unlocking_script(\n//     Script.from_asm_string(\n//       `${sig.to_hex()} ${PrivateKey.from_wif(payPk.value)\n//         .to_public_key()\n//         .to_hex()}`\n//     )\n//   );\n\n//   cancelTx.set_input(idx, inx);\n//   idx++;\n// }\n","import { P2PKH, SatoshisPerKilobyte, Script, Transaction } from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type { PurchaseOrdListingConfig, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport OrdLock from \"./templates/ordLock\";\n\nexport const purchaseOrdListings = async (config: PurchaseOrdListingConfig) => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tlistingUtxo,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tadditionalPayments = [],\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinal we're purchasing\n\ttx.addInput({\n\t\tunlockingScriptTemplate: new OrdLock().purchaseListing(\n\t\t\t1,\n\t\t\tScript.fromHex(Buffer.from(listingUtxo.script, \"base64\").toString(\"hex\")),\n\t\t),\n\t\tsourceTXID: listingUtxo.txid,\n\t\tsourceOutputIndex: listingUtxo.vout,\n\t\tsequence: 0xffffffff,\n\t});\n\n\t// Outputs\n\t// Add the purchased output\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript: new P2PKH().lock(ordAddress),\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n  \n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n  // make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map((i) => `${i.sourceTXID}_${i.sourceOutputIndex}`),\n\t\tpayChange,\n\t};\n};"],"names":["TokenType","RoytaltyType","toHex","utf8Str","Buffer","from","toString","DEFAULT_SAT_PER_KB","API_HOST","OrdP2PKH","_P2PKH","apply","this","arguments","prototype","lock","address","b64File","mediaType","metaData","ordAsm","undefined","ordHex","fileHex","trim","Error","fileMediaType","inscriptionAsm","P2PKH","toASM","app","type","mapCmdValue","_i","_Object$entries","Object","entries","length","_Object$entries$_i","key","value","LockingScript","fromASM","fromBase58Check","Utils","inputFromB64Utxo","utxo","unlockScriptTemplate","fromUtxo","_extends","script","fetchPayUtxos","scriptEncoding","payUrl","console","log","Promise","resolve","fetch","then","payRes","ok","json","payUtxos","filter","u","satoshis","pubKeyHash","p2pkhScript","data","map","txid","vout","toBinary","e","reject","fetchNftUtxos","collectionId","limit","offset","url","JSON","stringify","subTypeData","res","nftUtxos","outpoints","_u$data","list","method","headers","body","concat","nftRes","nfts","Script","fromHex","nftUtxo","origin","outpoint","fetchTokenUtxos","protocol","tokenId","BSV20","tokenUtxos","amt","id","signData","tx","signer","_exit","_temp2","_result","idKey","keyHost","_sigma$sign","Sigma","sign","signedTx","_temp","authToken","sigma","remoteSign","_ref","_catch","stringifyMetaData","result","Array","isArray","String","createOrdinals","config","_step","utxos","destinations","paymentPk","changeAddress","_config$satsPerKb","satsPerKb","_config$additionalPay","additionalPayments","modelOrFee","SatoshisPerKilobyte","Transaction","_iterator","_createForOfIteratorHelperLoose","done","input","unlock","addInput","warn","_step2","_iterator2","destination","inscription","_Object$keys","keys","addOutput","lockingScript","dataB64","contentType","_step3","_iterator3","p","amount","to","totalInput","reduce","sum","BigInt","totalOutput","outputs","output","computeFee","estimatedFee","fee","payChange","spentOutpoints","changeScript","toAddress","changeOutput","change","_signData","_settle","pact","state","s","_Pact","o","bind","v","onFulfilled","_this","onRejected","_isSettledPact","thenable","sendOrdinals","_temp4","_interrupt","totalSatsIn","totalSatsOut","changeOut","enforceUniformSend","ordinals","ordUtxo","ordPk","push","_destination$inscript","_destination$inscript2","total","out","_temp3","array","i","_cycle","check","_forOf","paymentUtxos","_modelOrFee$computeFe","observer","sendUtxos","payments","_config$changeAddress","payment","sendTxOut","transferOrdTokens","tokenID","inputTokens","distributions","tokenChangeAddress","_config$burn","burn","changeAmt","totalAmtIn","totalAmtOut","every","token","changeDistribution","dest","transferInscription","op","tick","BSV21","sendOrdinalsConfig","tokenChange","tokenChangeVout","findIndex","d","validateSubTypeData","subType","collectionData","description","quantity","rarityLabels","label","values","traits","itemData","includes","split","Number","isNaN","parseInt","mintNumber","rank","rarityLabel","attachments","error","OrdLock","_proto","ordAddress","payAddress","price","cancelPkh","payPkh","writeBin","buildOutput","writeScript","cancelListing","privateKey","signOutputs","anyoneCanPay","sourceSatoshis","p2pkh","inputIndex","_p2pkh$sign","writeOpCode","OP","OP_1","estimateLength","purchaseListing","purchase","UnlockingScript","writer","Writer","slice","write","toArray","OP_0","inputs","preimage","TransactionSignature","format","sourceTXID","sourceTransaction","sourceOutputIndex","transactionVersion","version","otherInputs","inputSequence","sequence","subscript","lockTime","scope","SIGHASH_ALL","SIGHASH_ANYONECANPAY","SIGHASH_FORKID","_purchase$sign","writeUInt64LEBn","BigNumber","writeVarIntNum","callback","createOrdListings","payChangeOutIdx","listings","listing","inputScriptBinary","listingUtxo","inputScript","fromBinary","unlockingScriptTemplate","_iteratorSymbol","Symbol","iterator","cancelOrdListings","listingUtxos","unlockingScript","target","step","next","purchaseOrdListings"],"mappings":"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"}