{"version":3,"file":"index.module.js","sources":["../src/utils/strings.ts","../src/types.ts","../src/constants.ts","../src/templates/ordP2pkh.ts","../src/utils/utxo.ts","../src/signData.ts","../src/utils/subtypeData.ts","../src/createOrdinals.ts","../src/sendOrdinals.ts","../src/sendUtxos.ts","../src/transferOrdinals.ts","../src/validate.ts","../src/templates/ordLock.ts","../src/createListings.ts","../src/cancelListings.ts","../src/purchaseOrdListing.ts","../src/utils/paymail.ts","../src/utils/icon.ts","../src/deployBsv21.ts","../src/burnOrdinals.ts"],"sourcesContent":["/**\n * Converts a string to its hexadecimal representation\n *\n * @param {string} utf8Str - The string to convert\n * @returns {string} The hexadecimal representation of the input string\n */\nconst toHex = (utf8Str: string): string => {\n  return Buffer.from(utf8Str).toString(\"hex\");\n};\n\nexport { toHex };\n","import type { PrivateKey, Transaction } from \"@bsv/sdk\";\nimport type { AuthToken } from \"sigma-protocol\";\n\n// biome-ignore lint/complexity/noBannedTypes: Reserved for future use\ntype Signer = {};\n\nexport interface LocalSigner extends Signer {\n  idKey: PrivateKey;\n}\n\nexport interface RemoteSigner extends Signer {\n  keyHost: string;\n  authToken?: AuthToken;\n}\n\nexport type Destination = {\n  address: string;\n  inscription?: Inscription;\n};\n\n/**\n * @typedef {Object} Listing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n * @property {Utxo} listingUtxo - Utxo of the listing\n */\nexport type NewListing = {\n  payAddress: string;\n  price: number;\n  ordAddress: string;\n  listingUtxo: Utxo;\n}\n\n/**\n * @typedef {Object} ExistingListing\n * @property {string} payout - Payment output script base64 encoded\n * @property {Utxo} listingUtxo - Utxo of the listing\n */\nexport type ExistingListing = {\n  payout: string;\n  listingUtxo: Utxo;\n}\n\n/**\n * @typedef {Object} NewTokenListing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n * @property {number} amt - Number of tokens as a number. Not adjusted for decimals (library will add zeros according to dec value).\n */\nexport type NewTokenListing = {\n  payAddress: string;\n  price: number;\n  amt: number;\n  ordAddress: string;\n}\n\n/**\n * @typedef {Object} Distribution\n * @property {string} address - Destination address. Must be a Ordinals address (BSV address for recieving 1Sat ordinals tokens).\n * @property {number} amt - Number of tokens as a string, considering decimals. Not display format. Ex. 100000000 for 1 token with 8 decimal places.\n */\nexport type Distribution = {\n  address: string;\n  amt: number;\n};\n\n/**\n * @typedef {Object} Utxo\n * @property {number} satoshis - Amount in satoshis\n * @property {string} txid - Transaction id\n * @property {number} vout - Output index\n * @property {string} script - Base64 encoded locking script\n */\nexport type Utxo = {\n  satoshis: number;\n  txid: string;\n  vout: number;\n  script: string;\n};\n\n/**\n * @typedef {Object} NftUtxo\n * @property {string} collectionId - Optional. Collection id of the NFT\n * @property {string} contentType - Media type of the NFT\n * @property {string} creatorBapId - Optional. Creator BAP id of the NFT\n * @property {string} origin - Origin address of the NFT\n * @property {number} satoshis - Always 1\n */\nexport interface NftUtxo extends Utxo {\n  collectionId?: string;\n  contentType: string;\n  creatorBapId?: string;\n  origin: string;\n  satoshis: 1;\n}\n\n/**\n * @typedef {Object} TokenUtxo\n * @property {string} amt - Number of tokens as a string, adjusted for decimals. Ex. 100000000 for 1 token with 8 decimal places.\n * @property {string} id - Token id -  either tick or id depending on protocol\n * @property {string} satoshis - Always 1\n * @property {string} [payout] - Optional. Payment output script base64 encoded\n * @property {number} [price] - Optional. Listing price in satoshis\n * @property {boolean} [isListing] - Optional. True if the token is a listing\n */\nexport interface TokenUtxo extends Utxo {\n  amt: string;\n  id: string;\n  satoshis: 1;\n  payout?: string;\n  price?: number;\n  isListing?: boolean;\n}\n\nexport type Inscription = {\n  dataB64: string;\n  contentType: string;\n};\n\nexport type ImageContentType =\n  | \"image/png\"\n  | \"image/jpeg\"\n  | \"image/gif\"\n  | \"image/svg+xml\"\n  | \"image/webp\";\n\n/**\n * @typedef {Object} IconInscription\n * @property {string} dataB64 - Base64 encoded image data. Must be a square image.\n * @property {ImageContentType} contentType - Media type of the image\n */\nexport type IconInscription = {\n  dataB64: string;\n  contentType: ImageContentType;\n};\n\nexport type Payment = {\n  to: string;\n  amount: number;\n};\n\nexport type TokenInscription = {\n  p: \"bsv-20\";\n  amt: string;\n  op: \"transfer\" | \"mint\" | \"deploy+mint\" | \"burn\";\n  dec?: string;\n};\n\nexport interface MintTokenInscription extends TokenInscription {\n  op: \"mint\";\n}\n\nexport interface DeployMintTokenInscription extends TokenInscription {\n  op: \"deploy+mint\";\n  sym: string;\n  icon: string;\n}\n\nexport interface TransferTokenInscription extends TokenInscription {\n  p: \"bsv-20\";\n  amt: string;\n  op: \"transfer\" | \"burn\";\n}\n\nexport interface TransferBSV20Inscription extends TransferTokenInscription {\n  tick: string;\n}\n\nexport interface TransferBSV21Inscription extends TransferTokenInscription {\n  id: string;\n}\n\nexport enum TokenType {\n  BSV20 = \"bsv20\",\n  BSV21 = \"bsv21\",\n}\n\nexport type BaseResult = {\n  tx: Transaction;\n  spentOutpoints: string[];\n};\n\nexport interface ChangeResult extends BaseResult {\n  payChange?: Utxo;\n};\n\n/**\n * MAP (Magic Attribute Protocol) metadata object with stringified values for writing to the blockchain\n * @typedef {Object} MAP\n * @property {string} app - Application identifier\n * @property {string} type - Metadata type\n * @property {string} [prop] - Optional. Additional metadata properties\n */\nexport type MAP = {\n  app: string;\n  type: string;\n  [prop: string]: string;\n};\n\nexport type PreMAP = {\n  app: string;\n  type: string;\n  [prop: string]: unknown;\n  royalties?: Royalty[];\n  subTypeData?: CollectionSubTypeData | CollectionItemSubTypeData;\n};\n\nexport type CreateOrdinalsConfig = {\n  utxos: Utxo[];\n  destinations: Destination[];\n  paymentPk: PrivateKey;\n  changeAddress?: string;\n  satsPerKb?: number;\n  metaData?: PreMAP;\n  signer?: LocalSigner | RemoteSigner;\n  additionalPayments?: Payment[];\n};\n\nexport enum RoytaltyType {\n  Paymail = \"paymail\",\n  Address = \"address\",\n  Script = \"script\",\n}\n\n/**\n * Royalty object\n * @typedef {Object} Royalty\n * @property {RoytaltyType} type - Royalty type, string, one of \"paymail\", \"address\", \"script\"\n * @property {string} destination - Royalty destination\n * @property {string} percentage - Royalty percentage as a string float 0-1 (0.01 = 1%)\n */\nexport type Royalty = {\n  type: RoytaltyType;\n  destination: string;\n  percentage: string; // string float 0-1\n};\n\nexport interface CreateOrdinalsMetadata extends PreMAP {\n  type: \"ord\",\n  name: string,\n  previewUrl?: string,\n}\n\nexport interface CreateOrdinalsCollectionMetadata extends CreateOrdinalsMetadata {\n  subType: \"collection\",\n  subTypeData: CollectionSubTypeData, // JSON stringified CollectionSubTypeData\n  royalties?: Royalty[],\n};\n\nexport interface CreateOrdinalsCollectionItemMetadata extends CreateOrdinalsMetadata {\n  subType: \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n};\n\n/**\n * Configuration object for creating an ordinals collection\n * @typedef {Object} CreateOrdinalsCollectionConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collection\"\n * @property metaData.name - Collection name\n * @property metaData.subTypeData - JSON stringified CollectionSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionConfig extends CreateOrdinalsConfig {\n  metaData: CreateOrdinalsCollectionMetadata\n}\n\nexport type CollectionTraits = {\n  [trait: string]: CollectionTrait;\n};\n\nexport type CollectionTrait = {\n  values: string[];\n  occurancePercentages: string[];\n};\n\nexport type Rarity = {\n  [key: string]: string;\n}\n\nexport type RarityLabels = Rarity[]\nexport interface CollectionSubTypeData {\n  description: string;\n  quantity: number;\n  rarityLabels: RarityLabels;\n  traits: CollectionTraits;\n}\n\nexport interface CreateOrdinalsCollectionItemMetadata extends PreMAP {\n  type: \"ord\",\n  name: string,\n  subType: \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n  royalties?: Royalty[],\n  previewUrl?: string,\n}\n\n/**\n * Configuration object for creating an ordinals collection item\n * @typedef {Object} CreateOrdinalsCollectionItemConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection item\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collectionItem\"\n * @property metaData.name - Collection item name\n * @property metaData.subTypeData - JSON stringified CollectionItemSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionItemConfig extends CreateOrdinalsConfig {\n  metaData: CreateOrdinalsCollectionItemMetadata\n}\n\n/**\n * Subtype data for an ordinals collection item\n * @typedef {Object} CollectionItemSubTypeData\n * @property {string} collectionId - Collection id\n * @property {number} mintNumner - Mint number\n * @property {number} rank - Rank\n * @property {string} rarityLabel - Rarity label\n * @property {string} traits - traits object\n * @property {string} attachments - array of attachment objects\n */\nexport interface CollectionItemSubTypeData {\n  collectionId: string;\n  mintNumber?: number;\n  rank?: number;\n  rarityLabel?: RarityLabels;\n  traits?: CollectionItemTrait[];\n  attachments?: CollectionItemAttachment[];\n}\n\nexport type CollectionItemTrait = {\n  name: string;\n  value: string;\n  rarityLabel?: string;\n  occurancePercentrage?: string;\n};\n\nexport type CollectionItemAttachment = {\n  name: string;\n  description?: string;\n  \"content-type\": string;\n  url: string;\n}\n\nexport interface BurnMAP extends MAP {\n  type: \"ord\";\n  op: \"burn\";\n}\n\nexport type BurnOrdinalsConfig = {\n  ordPk: PrivateKey;\n  ordinals: Utxo[];\n  metaData?: BurnMAP;\n}\n\nexport type SendOrdinalsConfig = {\n  paymentUtxos: Utxo[];\n  ordinals: Utxo[];\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  destinations: Destination[];\n  changeAddress?: string;\n  satsPerKb?: number;\n  metaData?: PreMAP;\n  signer?: LocalSigner | RemoteSigner;\n  additionalPayments?: Payment[];\n  enforceUniformSend?: boolean;\n}\n\nexport type DeployBsv21TokenConfig = {\n  symbol: string;\n  decimals?: number;\n  icon: string | IconInscription;\n  utxos: Utxo[];\n  initialDistribution: Distribution;\n  paymentPk: PrivateKey;\n  destinationAddress: string;\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[];\n};\n\nexport type SendUtxosConfig = {\n  utxos: Utxo[];\n  paymentPk: PrivateKey;\n  payments: Payment[];\n  satsPerKb?: number;\n  changeAddress?: string;\n  metaData?: MAP;\n};\n\nexport interface TokenChangeResult extends ChangeResult {\n  tokenChange?: TokenUtxo;\n}\n\nexport type TransferOrdTokensConfig = {\n  protocol: TokenType;\n  tokenID: string;\n  decimals: number;\n  utxos: Utxo[];\n  inputTokens: TokenUtxo[];\n  distributions: Distribution[];\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  changeAddress?: string;\n  tokenChangeAddress?: string;\n  satsPerKb?: number;\n  metaData?: PreMAP;\n  signer?: LocalSigner | RemoteSigner;\n  additionalPayments?: Payment[];\n  burn?: boolean;\n}\n\nexport type CreateOrdListingsConfig = {\n  utxos: Utxo[];\n  listings: NewListing[];\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey,\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[];\n}\n\nexport type PurchaseOrdListingConfig = {\n  utxos: Utxo[];\n  paymentPk: PrivateKey;\n  listing: ExistingListing;\n  ordAddress: string;\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[],\n  royalties?: Royalty[],\n  metaData?: MAP,\n}\n\nexport type PurchaseOrdTokenListingConfig = {\n  protocol: TokenType;\n  tokenID: string;\n  utxos: Utxo[];\n  paymentPk: PrivateKey;\n  listingUtxo: TokenUtxo;\n  ordAddress: string;\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[],\n  metaData?: MAP,\n}\n\nexport type CancelOrdListingsConfig = {\n  utxos: Utxo[],\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  listingUtxos: Utxo[];\n  additionalPayments?: Payment[];\n  changeAddress?: string;\n  satsPerKb?: number;\n}\n\nexport interface CancelOrdTokenListingsConfig extends CancelOrdListingsConfig {\n  utxos: Utxo[],\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  listingUtxos: TokenUtxo[];\n  additionalPayments: Payment[];\n  changeAddress?: string;\n  satsPerKb?: number;\n  protocol: TokenType,\n  tokenID: string;\n  ordAddress?: string;\n}\n\n/**\n * Configuration object for creating a token listing\n * @typedef {Object} CreateOrdTokenListingsConfig\n * @property {Utxo[]} utxos - Array of payment Utxos\n * @property {TokenUtxo[]} inputTokens - Array of TokenUtxos to be listed\n * @property {NewTokenListing[]} listings - Array of NewTokenListings\n * @property {PrivateKey} paymentPk - Private key of the payment address\n * @property {PrivateKey} ordPk - Private key of the ord address\n * @property {string} tokenChangeAddress - Address to send the token change\n * @property {number} [satsPerKb] - Optional. Satoshis per kilobyte\n * @property {Payment[]} [additionalPayments] - Optional. Array of additional payments\n * @property {TokenType} protocol - Token protocol\n * @property {string} tokenID - Token id\n * @property {number} decimals - Number of decimal places for this token.\n */\nexport interface CreateOrdTokenListingsConfig {\n  utxos: Utxo[];\n  listings: NewTokenListing[];\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey,\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[];\n  protocol: TokenType;\n  tokenID: string;\n  decimals: number;\n  inputTokens: TokenUtxo[];\n  tokenChangeAddress: string;\n}\n\nexport const MAX_TOKEN_SUPPLY = 2n ** 64n - 1n;","export const MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\nexport const DEFAULT_SAT_PER_KB = 10;\nexport const API_HOST = \"https://ordinals.gorillapool.io/api\";","import {\n\tLockingScript,\n\tP2PKH,\n\ttype Script,\n} from \"@bsv/sdk\";\nimport type { Inscription, MAP } from \"../types\";\nimport { toHex } from \"../utils/strings\";\nimport { MAP_PREFIX } from \"../constants\";\n\n/**\n * OrdP2PKH (1Sat Ordinal + Pay To Public Key Hash) class implementing ScriptTemplate.\n *\n * This class provides methods to create an Ordinal with Pay To Public Key Hash locking and unlocking scripts. \n * It extends the standard P2PKH script template and provides a custom lock method.\n */\nexport default class OrdP2PKH extends P2PKH {\n\t/**\n\t * Creates a 1Sat Ordinal + P2PKH locking script for a given address string\n\t *\n\t * @param {string} address - An destination address for the Ordinal.\n\t * @param {Object} [inscription] - Base64 encoded file data and Content type of the file.\n\t * @param {MAP} [metaData] - (optional) MAP Metadata to be included in OP_RETURN.\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\t// unlock method inherits from p2pkh\n\tlock(\n\t\taddress: string,\n    inscription?: Inscription,\n\t\tmetaData?: MAP | undefined,\n\t): Script {\n\t\tlet ordAsm = \"\";\n\t\t// This can be omitted for reinscriptions that just update metadata\n\t\tif (inscription?.dataB64 !== undefined && inscription?.contentType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(inscription.dataB64, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(inscription.contentType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`;\n\t\t}\n\n\t\t// Create ordinal output and inscription in a single output\n\t\tconst lockingScript = new P2PKH().lock(address);\n\t\tlet inscriptionAsm = `${ordAsm ? `${ordAsm} ` : \"\"}${lockingScript.toASM()}`;\n\n\t\t// MAP.app and MAP.type keys are required\n\t\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t\t}\n\n\t\tif (metaData?.app && metaData?.type) {\n\t\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\t\tconst mapCmdValue = toHex(\"SET\");\n\t\t\tinscriptionAsm = `${inscriptionAsm ? `${inscriptionAsm} `: \"\"}OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\t\tif (key !== \"cmd\") {\n\t\t\t\t\tinscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\n\t\t\t\t\t\tvalue as string,\n\t\t\t\t\t)}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn LockingScript.fromASM(inscriptionAsm);\n\t}\n}\n","import {\n\ttype Transaction,\n\ttype UnlockingScript,\n\tfromUtxo,\n\ttype TransactionInput,\n\tUtils,\n\tP2PKH,\n  Script,\n} from \"@bsv/sdk\";\nimport { type NftUtxo, TokenType, type TokenUtxo, type Utxo } from \"../types\";\nimport { API_HOST } from \"../constants\";\n\nconst { fromBase58Check } = Utils;\n\n/**\n * Converts a Utxo object with a base64 encoded script to a Utxo object with a hex encoded script\n * @param {Utxo} utxo - Utxo object with base64 encoded script\n * @param {Object} unlockScriptTemplate - Object with sign and estimateLength functions\n * @returns {TransactionInput} Utxo object with hex encoded script\n */\nexport const inputFromB64Utxo = (\n\tutxo: Utxo,\n\tunlockScriptTemplate: {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>;\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>;\n\t},\n): TransactionInput => {\n\tconst input = fromUtxo(\n\t\t{\n\t\t\t...utxo,\n\t\t\tscript: Buffer.from(utxo.script, \"base64\").toString(\"hex\"),\n\t\t},\n\t\tunlockScriptTemplate,\n\t);\n\treturn input;\n};\n\n/**\n * Fetches pay utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<Utxo[]>} Array of pay utxos\n */\nexport const fetchPayUtxos = async (address: string, scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\"): Promise<Utxo[]> => {\n\tconst payUrl = `${API_HOST}/txos/address/${address}/unspent?bsv20=false`;\n\tconsole.log({ payUrl });\n\tconst payRes = await fetch(payUrl);\n\tif (!payRes.ok) {\n\t\tthrow new Error(\"Error fetching pay utxos\");\n\t}\n\tlet payUtxos = await payRes.json();\n\t// exclude all 1 satoshi utxos\n\tpayUtxos = payUtxos.filter((u: { satoshis: number }) => u.satoshis !== 1);\n\n\t// Get pubkey hash from address\n\tconst pubKeyHash = fromBase58Check(address);\n\tconst p2pkhScript = new P2PKH().lock(pubKeyHash.data);\n\tpayUtxos = payUtxos.map((utxo: Partial<Utxo>) => ({\n\t\ttxid: utxo.txid,\n\t\tvout: utxo.vout,\n\t\tsatoshis: utxo.satoshis,\n\t\tscript: scriptEncoding === \"hex\" || scriptEncoding === \"base64\" ? Buffer.from(p2pkhScript.toBinary()).toString(scriptEncoding) : p2pkhScript.toASM(),\n\t}));\n\treturn payUtxos as Utxo[];\n};\n\n/**\n * Fetches NFT utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @param {string} [collectionId] - Optional. Collection id (collection insciprtion origin)\n * @param {number} [limit=10] - Optional. Number of utxos to fetch. Default is 10\n * @param {number} [offset=0] - Optional. Offset for fetching utxos. Default is 0\n * @param {string} [scriptEncoding=\"base64\"] - Optional. Encoding for the script. Default is base64. Options are hex, base64, or asm.\n * @returns {Promise<Utxo[]>} Array of NFT utxos\n */\nexport const fetchNftUtxos = async (\n\taddress: string,\n\tcollectionId?: string,\n\tlimit = 10,\n\toffset = 0,\n  scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\",\n): Promise<NftUtxo[]> => {\n\tlet url = `${API_HOST}/txos/address/${address}/unspent?limit=${limit}&offset=${offset}&`;\n\n\tif (collectionId) {\n\t\tconst query = {\n\t\t\tmap: {\n\t\t\t\tsubTypeData: { collectionId },\n\t\t\t},\n\t\t};\n\t\tconst b64Query = Buffer.from(JSON.stringify(query)).toString(\"base64\");\n\t\turl += `q=${b64Query}`;\n\t}\n\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching NFT utxos for ${address}`);\n\t}\n\n\t// Returns a BSV20Txo but we only need a few fields\n\tlet nftUtxos = await res.json();\n\n\t// Only include 1 satoshi outputs, non listings\n\tnftUtxos = nftUtxos.filter(\n\t\t(u: {\n\t\t\tsatoshis: number;\n\t\t\tdata: { list: { price: number; payout: string } | undefined } | null;\n\t\t}) => u.satoshis === 1 && !u.data?.list,\n\t);\n\n\tconst outpoints = nftUtxos.map(\n\t\t(utxo: { txid: string; vout: number }) => `${utxo.txid}_${utxo.vout}`,\n\t);\n\t// Fetch the scripts up to the limit\n\tconst nftRes = await fetch(`${API_HOST}/txos/outpoints?script=true`, {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t\tbody: JSON.stringify([...outpoints]),\n\t});\n\n\tif (!nftRes.ok) {\n\t\tthrow new Error(`Error fetching NFT scripts for ${address}`);\n\t}\n\n\tconst nfts = (await nftRes.json() || [])\n\n\tnftUtxos = nfts.map(\n\t\t(utxo: {\n\t\t\torigin: { outpoint: string };\n\t\t\tscript: string;\n\t\t\tvout: number;\n\t\t\ttxid: string;\n\t\t}) => {\n      let script = utxo.script;\n      if (scriptEncoding === \"hex\") {\n        script = Buffer.from(script, \"base64\").toString(\"hex\");\n      } else if (scriptEncoding === \"asm\") {\n        script = Script.fromHex(Buffer.from(script, \"base64\").toString(\"hex\")).toASM();\n      }\n\t\t\tconst nftUtxo = {\n\t\t\t\torigin: utxo.origin.outpoint,\n\t\t\t\tscript,\n\t\t\t\tvout: utxo.vout,\n\t\t\t\ttxid: utxo.txid,\n\t\t\t\tsatoshis: 1,\n\t\t\t} as NftUtxo;\n\t\t\tif (collectionId) {\n\t\t\t\tnftUtxo.collectionId = collectionId;\n\t\t\t}\n\t\t\treturn nftUtxo;\n\t\t},\n\t);\n\n\treturn nftUtxos as NftUtxo[];\n};\n\n/**\n * Fetches token utxos from the API\n * @param {TokenType} protocol - Token protocol. Either BSV20 or BSV21\n * @param {string} tokenId - Token id. Ticker for BSV20 and id (mint+deploy inscription origin) for BSV21\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<TokenUtxo[]>} Array of token utxos\n */\nexport const fetchTokenUtxos = async (\n\tprotocol: TokenType,\n\ttokenId: string,\n\taddress: string,\n): Promise<TokenUtxo[]> => {\n\tconst url = `${API_HOST}/bsv20/${address}/${protocol === TokenType.BSV20 ? \"tick\" : \"id\"}/${tokenId}?bsv20=true&listing=false`;\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching ${protocol} utxos`);\n\t}\n\n\t// returns a BSV20Txo but we only need a few fields\n\tlet tokenUtxos = await res.json();\n\n\ttokenUtxos = tokenUtxos.map((utxo: Partial<TokenUtxo>) => ({\n\t\tamt: utxo.amt,\n\t\tscript: utxo.script,\n\t\tvout: utxo.vout,\n\t\ttxid: utxo.txid,\n\t\tid: tokenId,\n\t\tsatoshis: 1,\n\t}));\n\n\treturn tokenUtxos as TokenUtxo[];\n};\n","import type { Transaction } from \"@bsv/sdk\";\nimport { Sigma } from \"sigma-protocol\";\nimport type { LocalSigner, RemoteSigner } from \"./types\";\n\n/**\n * Signs data in the transaction with Sigma protocol\n * @param {Transaction} tx - Transaction to sign\n * @param {LocalSigner | RemoteSigner} signer - Local or remote signer (used for data signature)\n * @returns {Transaction} Transaction with signed data\n */\nexport const signData = async (\n\ttx: Transaction,\n\tsigner: LocalSigner | RemoteSigner,\n): Promise<Transaction> => {\n\t// Sign tx if idKey or remote signer like starfish/tokenpass\n\tconst idKey = (signer as LocalSigner)?.idKey;\n\tconst keyHost = (signer as RemoteSigner)?.keyHost;\n\n\tif (idKey) {\n\t\tconst sigma = new Sigma(tx);\n\t\tconst { signedTx } = sigma.sign(idKey);\n\t\treturn signedTx;\n\t}\n\tif (keyHost) {\n\t\tconst authToken = (signer as RemoteSigner)?.authToken;\n\t\tconst sigma = new Sigma(tx);\n\t\ttry {\n\t\t\tconst { signedTx } = await sigma.remoteSign(keyHost, authToken);\n\t\t\treturn signedTx;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthrow new Error(`Remote signing to ${keyHost} failed`);\n\t\t}\n\t}\n\tthrow new Error(\"Signer must be a LocalSigner or RemoteSigner\");\n};\n","import type { MAP, PreMAP } from \"../types\";\n\nconst stringifyMetaData = (metaData?: PreMAP): MAP | undefined => {\n  if (!metaData) return undefined;\n\tconst result: MAP = {\n\t\tapp: metaData.app,\n\t\ttype: metaData.type,\n\t};\n\n\tfor (const [key, value] of Object.entries(metaData)) {\n\t\tif (value !== undefined) {\n\t\t\tif (typeof value === \"string\") {\n\t\t\t\tresult[key] = value;\n\t\t\t} else if (Array.isArray(value) || typeof value === \"object\") {\n\t\t\t\tresult[key] = JSON.stringify(value);\n\t\t\t} else {\n\t\t\t\tresult[key] = String(value);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\nexport default stringifyMetaData;\n","import { Transaction, SatoshisPerKilobyte, P2PKH, Script, Utils } from \"@bsv/sdk\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n\tUtxo,\n\tCreateOrdinalsConfig,\n\tCreateOrdinalsCollectionConfig,\n\tCreateOrdinalsCollectionItemConfig,\n  ChangeResult,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Creates a transaction with inscription outputs\n * @param {CreateOrdinalsConfig | CreateOrdinalsCollectionConfig | CreateOrdinalsCollectionItemConfig} config - Configuration object for creating ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {string} config.changeAddress - Optional. Address to send change to. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Local or remote signer (used for data signature)\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<ChangeResult>} Transaction with inscription outputs\n */\nexport const createOrdinals = async (\n\tconfig:\n\t\t| CreateOrdinalsConfig\n\t\t| CreateOrdinalsCollectionConfig\n\t\t| CreateOrdinalsCollectionItemConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tutxos,\n\t\tdestinations,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t} = config;\n\t\n\t// Warn if creating many inscriptions at once\n\tif (destinations.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Outputs\n\t// Add inscription outputs\n\tfor (const destination of destinations) {\n\t\tif (!destination.inscription) {\n\t\t\tthrow new Error(\"Inscription is required for all destinations\");\n\t\t}\n\n\t\t// remove any undefined fields from metadata\n\t\tif (metaData) {\n\t\t\tfor(const key of Object.keys(metaData)) {\n\t\t\t\tif (metaData[key] === undefined) {\n\t\t\t\t\tdelete metaData[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription,\n\t\t\t\tstringifyMetaData(metaData),\n\t\t\t),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\tlet payChange: Utxo | undefined;\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\n\tif(signer) {\n\t\tconst utxo = utxos.pop() as Utxo\n\t\ttx.addInput(inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t)));\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\ttx = await signData(tx, signer);\n\t}\n\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to create ordinals. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\tScript,\n\ttype TransactionOutput,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type { SendOrdinalsConfig, Utxo, ChangeResult } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Sends ordinals to the given destinations\n * @param {SendOrdinalsConfig} config - Configuration object for sending ordinals\n * @param {Utxo[]} config.paymentUtxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.ordinals - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {string} [config.changeAddress] - Optional. Address to send change to, if any. If not provided, defaults to paymentPk address\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} [config.signer] - Optional. Signer object to sign the transaction\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to include in the transaction\n * @param {boolean} [config.enforceUniformSend] - Optional. Default: true. Enforce that the number of destinations matches the number of ordinals being sent. Sending ordinals requires a 1:1 mapping of destinations to ordinals. This is only used for sub-protocols like BSV21 that manage tokens without sending the inscriptions directly.\n * @returns {Promise<ChangeResult>} Transaction, spent outpoints, and change utxo\n */\nexport const sendOrdinals = async (\n\tconfig: SendOrdinalsConfig,\n): Promise<ChangeResult> => {\n\tif (!config.satsPerKb) {\n\t\tconfig.satsPerKb = DEFAULT_SAT_PER_KB;\n\t}\n\tif (!config.additionalPayments) {\n\t\tconfig.additionalPayments = [];\n\t}\n\tif (config.enforceUniformSend === undefined) {\n\t\tconfig.enforceUniformSend = true;\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(config.satsPerKb);\n\tlet tx = new Transaction();\n\tconst spentOutpoints: string[] = [];\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of config.ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(\n\t\t\tordUtxo,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tconfig.ordPk, \n\t\t\t\t\"all\",\n\t\t\t\ttrue, \n\t\t\t\tordUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(ordUtxo.script, 'base64'))\n\t\t\t),\n\t\t);\n\t\tspentOutpoints.push(`${ordUtxo.txid}_${ordUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// check that ordinals coming in matches ordinals going out if supplied\n\tif (\n\t\tconfig.enforceUniformSend &&\n\t\tconfig.destinations.length !== config.ordinals.length\n\t) {\n\t\tthrow new Error(\n\t\t\t\"Number of destinations must match number of ordinals being sent\",\n\t\t);\n\t}\n\n\t// Add ordinal outputs\n\tfor (const destination of config.destinations) {\n\t\tlet s: Script;\n\t\tif (\n\t\t\tdestination.inscription?.dataB64 &&\n\t\t\tdestination.inscription?.contentType\n\t\t) {\n\t\t\ts = new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription,\n\t\t\t\tstringifyMetaData(config.metaData),\n\t\t\t);\n\t\t} else {\n\t\t\ts = new P2PKH().lock(destination.address);\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: s,\n\t\t});\n\t}\n\n  \n\t// Add additional payments if any\n\tfor (const p of config.additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n  // add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = config.changeAddress || config.paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of config.paymentUtxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tconfig.paymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\tspentOutpoints.push(`${utxo.txid}_${utxo.vout}`);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (totalSatsIn < totalSatsOut) {\n\t\tthrow new Error(\"Not enough ordinals to send\");\n\t}\n\n\tif (config.signer) {\n\t\ttx = await signData(tx, config.signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChange,\n\t};\n};\n","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype TransactionOutput,\n\tUtils,\n\tScript,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type { ChangeResult, SendUtxosConfig, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\n\n/**\n * Sends utxos to the given destination\n * @param {SendUtxosConfig} config - Configuration object for sending utxos\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {Payment[]} config.payments - Array of payments with addresses and amounts\n * @param {number} [config.satsPerKb] - (Optional) Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {string} [config.changeAddress] - (Optional) Address to send change to. If not provided, defaults to paymentPk address\n * @param {string} [config.metaData] - (Optional) Metadata to include in OP_RETURN of the payment output\n * @returns {Promise<ChangeResult>} Transaction with utxo outputs\n */\nexport const sendUtxos = async (\n\tconfig: SendUtxosConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tpayments,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tchangeAddress = paymentPk.toAddress().toString(),\n    metaData,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\t// Outputs\n\tfor (const payment of payments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new OrdP2PKH().lock(payment.to, undefined, metaData),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + (out.satoshis || 0),\n\t\t0,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\ttx.addInput(input);\n\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + fee) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + fee) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to send. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChange: Utxo | undefined;\n\tif (totalSatsIn > totalSatsOut + fee) {\n\t\t// Change\n\t\tconst changeScript = new P2PKH().lock(changeAddress);\n\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t} else if (totalSatsIn < totalSatsOut + fee) {\n\t\tconsole.log(\"No change needed\");\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\t\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import { P2PKH, SatoshisPerKilobyte, Script, Transaction, Utils } from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport {\n  TokenType,\n  type TokenUtxo,\n  type TransferBSV20Inscription,\n  type TransferBSV21Inscription,\n  type TransferOrdTokensConfig,\n  type TokenChangeResult,\n  type TransferTokenInscription,\n  type Utxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Transfer tokens to a destination\n * @param {TransferOrdTokensConfig} config - Configuration object for transferring tokens\n * @param {TokenType} config.protocol - Token protocol. Must be TokenType.BSV20 or TokenType.BSV21\n * @param {string} config.tokenID - Token ID. Either the tick or id value depending on the protocol\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {TokenUtxo[]} config.inputTokens - Token utxos to spend\n * @param {Distribution[]} config.distributions - Array of destinations with addresses and amounts\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {decimals} config.decimals - Number of decimal places for the token\n * @param {string} [config.changeAddress] - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {string} [config.tokenChangeAddress] - Optional. Address to send token change to, if any. If not provided, defaults to ordPk address\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} [config.signer] - Optional. Signer object to sign the transaction\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to include in the transaction\n * @param {burn} [config.burn] - Optional. Set to true to burn the tokens.\n * @returns {Promise<TokenChangeResult>} Transaction with token transfer outputs\n */\nexport const transferOrdTokens = async (config: TransferOrdTokensConfig): Promise<TokenChangeResult> => {\n  const {\n    protocol,\n    tokenID,\n    utxos,\n    inputTokens,\n    distributions,\n    paymentPk,\n    ordPk,\n    changeAddress,\n    tokenChangeAddress,\n    satsPerKb = DEFAULT_SAT_PER_KB,\n    metaData,\n    signer,\n    decimals,\n    additionalPayments = [],\n    burn = false\n  } = config;\n\n  // calculate change amount\n  let changeAmt = 0n;\n  let totalAmtIn = 0n;\n  let totalAmtOut = 0n;\n\n  // Ensure these inputs are for the expected token\n  if (!inputTokens.every((token) => token.id === tokenID)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n  for (const token of inputTokens) {\n    const inputScriptBinary = Utils.toArray(token.script, \"base64\");\n    const inputScript = Script.fromBinary(inputScriptBinary);\n    tx.addInput(inputFromB64Utxo(\n      token,\n      new OrdP2PKH().unlock(\n        ordPk,\n        \"all\",\n        true,\n        token.satoshis,\n        inputScript,\n      ),\n    ));\n\n    totalAmtIn += BigInt(token.amt);\n  }\n\n  // build destination inscriptions\n  for (const dest of distributions) {\n    const bigAmt = BigInt(dest.amt * 10 ** decimals);\n    const transferInscription: TransferTokenInscription = {\n      p: \"bsv-20\",\n      op: burn ? \"burn\" : \"transfer\",\n      amt: bigAmt.toString(),\n    }\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n    if (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n    } else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n    tx.addOutput({\n      satoshis: 1,\n      lockingScript: new OrdP2PKH().lock(\n        dest.address,\n        {\n          dataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n          contentType: \"application/bsv-20\",\n        },\n      ),\n    });\n    totalAmtOut += bigAmt;\n  };\n  changeAmt = totalAmtIn - totalAmtOut;\n\n  let tokenChange: TokenUtxo | undefined;\n  // check that you have enough tokens to send and return change\n  if (changeAmt < 0n) {\n    throw new Error(\"Not enough tokens to send\");\n  }\n  if (changeAmt > 0n) {\n    const transferInscription: TransferTokenInscription = {\n      p: \"bsv-20\",\n      op: \"transfer\",\n      amt: changeAmt.toString(),\n    };\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n    if (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n    } else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n    // remove any undefined fields from metadata\n\t\tif (metaData) {\n\t\t\tfor(const key of Object.keys(metaData)) {\n\t\t\t\tif (metaData[key] === undefined) {\n\t\t\t\t\tdelete metaData[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst lockingScript = new OrdP2PKH().lock(\n\t\t\ttokenChangeAddress || ordPk.toAddress().toString(), \n\t\t\t{\n\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString('base64'),\n\t\t\t\tcontentType: \"application/bsv-20\",\n\t\t\t},\n      stringifyMetaData(metaData)\n\t\t);\n    \n\t\tconst vout = tx.outputs.length;\n\t\ttx.addOutput({ lockingScript, satoshis: 1 });\n\t\ttokenChange = {\n\t\t\tid: tokenID,\n\t\t\tsatoshis: 1,\n\t\t\tscript: Buffer.from(lockingScript.toBinary()).toString(\"base64\"),\n\t\t\ttxid: \"\",\n\t\t\tvout,\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t}\n\n  // Add additional payments if any\n  for (const p of additionalPayments) {\n    tx.addOutput({\n      satoshis: p.amount,\n      lockingScript: new P2PKH().lock(p.to),\n    });\n  }\n\n  // add change to the outputs\n  let payChange: Utxo | undefined;\n\n  const change = changeAddress || paymentPk.toAddress().toString();\n  const changeScript = new P2PKH().lock(change);\n  const changeOut = {\n    lockingScript: changeScript,\n    change: true,\n  };\n  tx.addOutput(changeOut);\n\n  let totalSatsIn = 0n;\n  const totalSatsOut = tx.outputs.reduce(\n    (total, out) => total + BigInt(out.satoshis || 0),\n    0n,\n  );\n  let fee = 0;\n  for (const utxo of utxos) {\n    const input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n      paymentPk,\n      \"all\",\n      true,\n      utxo.satoshis,\n      Script.fromBinary(Utils.toArray(utxo.script, 'base64'))\n    ));\n\n    tx.addInput(input);\n    // stop adding inputs if the total amount is enough\n    totalSatsIn += BigInt(utxo.satoshis);\n    fee = await modelOrFee.computeFee(tx);\n\n    if (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n      break;\n    }\n  }\n\n  // make sure we have enough\n  if (totalSatsIn < totalSatsOut + BigInt(fee)) {\n    throw new Error(\n      `Not enough funds to transfer tokens. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n    );\n  }\n\n  if (config.signer) {\n\t\ttx = await signData(tx, config.signer);\n\t}\n  \n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n  // Sign the transaction\n  await tx.sign();\n\n  const txid = tx.id(\"hex\") as string;\n  if (tokenChange) {\n    tokenChange.txid = txid;\n  }\n  // check for change\n  const payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n  if (payChangeOutIdx !== -1) {\n    const changeOutput = tx.outputs[payChangeOutIdx];\n    payChange = {\n      satoshis: changeOutput.satoshis as number,\n      txid,\n      vout: payChangeOutIdx,\n      script: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n        \"base64\",\n      ),\n    };\n  }\n\n  if (payChange) {\n    const changeOutput = tx.outputs[tx.outputs.length - 1];\n    payChange.satoshis = changeOutput.satoshis as number;\n    payChange.txid = tx.id(\"hex\") as string;\n  }\n\n  return {\n    tx,\n    spentOutpoints: tx.inputs.map(\n      (i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n    ),\n    payChange,\n    tokenChange,\n  };\n};","import type { CollectionItemSubTypeData, CollectionSubTypeData } from \"./types\";\n\n/**\n * Validates sub type data\n * @param {string} subType - Sub type of the ordinals token\n * @param {string} subTypeData - Sub type data of the ordinals token\n * @returns {Error | undefined} Error if validation fails, undefined if validation passes\n */\nexport const validateSubTypeData = (\n  subType: \"collection\" | \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData | CollectionSubTypeData,\n): Error | undefined => {\n  try {\n    if (subType === \"collection\") {\n      const collectionData = subTypeData as CollectionSubTypeData;\n      if (!collectionData.description) {\n        return new Error(\"Collection description is required\");\n      }\n      if (!collectionData.quantity) {\n        return new Error(\"Collection quantity is required\");\n      }\n      if (collectionData.rarityLabels) {\n        if (!Array.isArray(collectionData.rarityLabels)) {\n          return new Error(\"Rarity labels must be an array\");\n        }\n        // make sure keys and values are strings\n        if (!collectionData.rarityLabels.every((label) => {\n          return Object.values(label).every(value => typeof value === 'string');\n        })) {\n          return new Error(`Invalid rarity labels ${collectionData.rarityLabels}`);\n        }\n      }\n      if (collectionData.traits ) {\n        if (typeof collectionData.traits !== \"object\") {\n        return new Error(\"Collection traits must be an object\");\n        }\n        if (collectionData.traits && !Object.keys(collectionData.traits).every(key => typeof key === 'string' && typeof collectionData.traits[key] === 'object')) {\n          return new Error(\"Collection traits must be a valid CollectionTraits object\");\n        }\n      }\n    }\n    if (subType === \"collectionItem\") {\n      const itemData = subTypeData as CollectionItemSubTypeData;\n      if (!itemData.collectionId) {\n        return new Error(\"Collection id is required\");\n      }\n      if (!itemData.collectionId.includes(\"_\")) {\n        return new Error(\"Collection id must be a valid outpoint\");\n      }\n      if (itemData.collectionId.split(\"_\")[0].length !== 64) {\n        return new Error(\"Collection id must contain a valid txid\");\n      }\n      if (Number.isNaN(Number.parseInt(itemData.collectionId.split(\"_\")[1]))) {\n        return new Error(\"Collection id must contain a valid vout\");\n      }\n\n      if (itemData.mintNumber && typeof itemData.mintNumber !== \"number\") {\n        return new Error(\"Mint number must be a number\");\n      }\n      if (itemData.rank && typeof itemData.rank !== \"number\") {\n        return new Error(\"Rank must be a number\");\n      }\n      if (itemData.rarityLabel && typeof itemData.rarityLabel !== \"string\") {\n        return new Error(\"Rarity label must be a string\");\n      }\n      if (itemData.traits && typeof itemData.traits !== \"object\") {\n        return new Error(\"Traits must be an object\");\n      }\n      if (itemData.attachments && !Array.isArray(itemData.attachments)) {\n        return new Error(\"Attachments must be an array\");\n      }\n    }\n    return undefined;\n  } catch (error) {\n    return new Error(\"Invalid JSON data\");\n  }\n};","import {\n\tBigNumber,\n\ttype LockingScript,\n\tOP,\n\tP2PKH,\n\ttype PrivateKey,\n\tScript,\n\ttype Transaction,\n\tTransactionSignature,\n\tUnlockingScript,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { toHex } from \"../utils/strings\";\nimport type { Inscription } from \"../types\";\n\nexport const oLockPrefix =\n\t\"2097dfd76851bf465e8f715593b217714858bbe9570ff3bd5e33840a34e20ff0262102ba79df5f8ae7604a9830f03c7933028186aede0675a16f025dc4f8be8eec0382201008ce7480da41702918d1ec8e6849ba32b4d65b1e40dc669c31a1e6306b266c0000\";\nexport const oLockSuffix =\n\t\"615179547a75537a537a537a0079537a75527a527a7575615579008763567901c161517957795779210ac407f0e4bd44bfc207355a778b046225a7068fc59ee7eda43ad905aadbffc800206c266b30e6a1319c66dc401e5bd6b432ba49688eecd118297041da8074ce081059795679615679aa0079610079517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01007e81517a75615779567956795679567961537956795479577995939521414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff00517951796151795179970079009f63007952799367007968517a75517a75517a7561527a75517a517951795296a0630079527994527a75517a6853798277527982775379012080517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01205279947f7754537993527993013051797e527e54797e58797e527e53797e52797e57797e0079517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a756100795779ac517a75517a75517a75517a75517a75517a75517a75517a75517a7561517a75517a756169587951797e58797eaa577961007982775179517958947f7551790128947f77517a75517a75618777777777777777777767557951876351795779a9876957795779ac777777777777777767006868\";\n\n/**\n * OrdLock class implementing ScriptTemplate.\n *\n * This class provides methods for interacting with OrdinalLock contract \n */\nexport default class OrdLock {\n\t/**\n\t * Creates a 1Sat Ordinal Lock script\n\t *\n\t * @param {string} ordAddress - An address which can cancel listing.\n\t * @param {string} payAddress - Address which is paid on purchase\n\t * @param {number} price - Listing price in satoshis\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\tlock(\n\t\tordAddress: string,\n\t\tpayAddress: string,\n\t\tprice: number,\n\t\tinscription?: Inscription,\n\t): Script {\n\t\tconst cancelPkh = Utils.fromBase58Check(ordAddress).data as number[];\n\t\tconst payPkh = Utils.fromBase58Check(payAddress).data as number[];\n\n\t\tlet script = new Script()\n\t\tif (inscription?.dataB64 !== undefined && inscription?.contentType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(inscription.dataB64, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(inscription.contentType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tscript = Script.fromASM(`OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`);\n\t\t}\n\n\t\treturn script.writeScript(Script.fromHex(oLockPrefix))\n\t\t\t.writeBin(cancelPkh)\n\t\t\t.writeBin(OrdLock.buildOutput(price, new P2PKH().lock(payPkh).toBinary()))\n\t\t\t.writeScript(Script.fromHex(oLockSuffix))\n\t}\n\n\tcancelListing(\n\t\tprivateKey: PrivateKey,\n\t\tsignOutputs: 'all' | 'none' | 'single' = 'all',\n\t\tanyoneCanPay = false,\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: () => Promise<number>\n\t} {\n\t\tconst p2pkh = new P2PKH().unlock(privateKey, signOutputs, anyoneCanPay, sourceSatoshis, lockingScript)\n\t\treturn {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await p2pkh.sign(tx, inputIndex)).writeOpCode(OP.OP_1)\n\t\t\t},\n\t\t\testimateLength: async () => {\n\t\t\t\treturn 107\n\t\t\t}\n\t\t}\n\t}\n\n\tpurchaseListing(\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>\n\t} {\n\t\tconst purchase = {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\tif (tx.outputs.length < 2) {\n\t\t\t\t\tthrow new Error(\"Malformed transaction\")\n\t\t\t\t}\n\t\t\t\tconst script = new UnlockingScript()\n\t\t\t\t\t.writeBin(OrdLock.buildOutput(\n\t\t\t\t\t\ttx.outputs[0].satoshis || 0,\n\t\t\t\t\t\ttx.outputs[0].lockingScript.toBinary()\n\t\t\t\t\t))\n\t\t\t\tif (tx.outputs.length > 2) {\n\t\t\t\t\tconst writer = new Utils.Writer()\n\t\t\t\t\tfor (const output of tx.outputs.slice(2)) {\n\t\t\t\t\t\twriter.write(OrdLock.buildOutput(output.satoshis || 0, output.lockingScript.toBinary()))\n\t\t\t\t\t}\n\t\t\t\t\tscript.writeBin(writer.toArray())\n\t\t\t\t} else {\n\t\t\t\t\tscript.writeOpCode(OP.OP_0)\n\t\t\t\t}\n\n\t\t\t\tconst input = tx.inputs[inputIndex]\n\t\t\t\tlet sourceSats = sourceSatoshis as number\n\t\t\t\tif (!sourceSats && input.sourceTransaction) {\n\t\t\t\t\tsourceSats = input.sourceTransaction.outputs[input.sourceOutputIndex].satoshis as number\n\t\t\t\t} else if (!sourceSatoshis) {\n\t\t\t\t\tthrow new Error(\"sourceTransaction or sourceSatoshis is required\")\n\t\t\t\t}\n\n\t\t\t\tconst sourceTXID = (input.sourceTXID || input.sourceTransaction?.id('hex')) as string\n\t\t\t\tlet subscript = lockingScript as LockingScript\n\t\t\t\tif (!subscript) {\n\t\t\t\t\tsubscript = input.sourceTransaction?.outputs[input.sourceOutputIndex].lockingScript as LockingScript\n\t\t\t\t}\n\t\t\t\tconst preimage = TransactionSignature.format({\n\t\t\t\t\tsourceTXID,\n\t\t\t\t\tsourceOutputIndex: input.sourceOutputIndex,\n\t\t\t\t\tsourceSatoshis: sourceSats,\n\t\t\t\t\ttransactionVersion: tx.version,\n\t\t\t\t\totherInputs: [],\n\t\t\t\t\tinputIndex,\n\t\t\t\t\toutputs: tx.outputs,\n\t\t\t\t\tinputSequence: input.sequence,\n\t\t\t\t\tsubscript,\n\t\t\t\t\tlockTime: tx.lockTime,\n\t\t\t\t\tscope: TransactionSignature.SIGHASH_ALL |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_ANYONECANPAY |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_FORKID\n\t\t\t\t});\n\n\t\t\t\treturn script.writeBin(preimage).writeOpCode(OP.OP_0)\n\t\t\t},\n\t\t\testimateLength: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await purchase.sign(tx, inputIndex)).toBinary().length\n\t\t\t}\n\t\t}\n\t\treturn purchase\n\t}\n\n\tstatic buildOutput(satoshis: number, script: number[]): number[] {\n\t\tconst writer = new Utils.Writer()\n\t\twriter.writeUInt64LEBn(new BigNumber(satoshis))\n\t\twriter.writeVarIntNum(script.length)\n\t\twriter.write(script)\n\t\treturn writer.toArray()\n\t}\n}\n","import {\n  P2PKH,\n  SatoshisPerKilobyte,\n  Script,\n  Transaction,\n  Utils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport {\n  TokenType,\n  type CreateOrdListingsConfig,\n  type CreateOrdTokenListingsConfig,\n  type TokenUtxo,\n  type TransferBSV20Inscription,\n  type TransferBSV21Inscription,\n  type TransferTokenInscription,\n  type Utxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nconst { toArray } = Utils;\n\n// TODO: Handle royalty\nexport const createOrdListings = async (config: CreateOrdListingsConfig) => {\n  const {\n    utxos,\n    listings,\n    paymentPk,\n    ordPk,\n    changeAddress,\n    satsPerKb = DEFAULT_SAT_PER_KB,\n    additionalPayments = [],\n  } = config;\n\n  const modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n  const tx = new Transaction();\n\n  // Warn if creating many inscriptions at once\n  if (listings.length > 100) {\n    console.warn(\n      \"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n    );\n  }\n\n  // Outputs\n  // Add listing outputs\n  for (const listing of listings) {\n    tx.addOutput({\n      satoshis: 1,\n      lockingScript: new OrdLock().lock(\n        listing.ordAddress,\n        listing.payAddress,\n        listing.price,\n      ),\n    });\n    const inputScriptBinary = toArray(listing.listingUtxo.script, \"base64\");\n    const inputScript = Script.fromBinary(inputScriptBinary);\n    tx.addInput(inputFromB64Utxo(\n      listing.listingUtxo,\n      new OrdP2PKH().unlock(\n        ordPk,\n        \"all\",\n        true,\n        listing.listingUtxo.satoshis,\n        inputScript,\n      ),\n    ));\n  }\n\n  // Add additional payments if any\n  for (const p of additionalPayments) {\n    tx.addOutput({\n      satoshis: p.amount,\n      lockingScript: new P2PKH().lock(p.to),\n    });\n  }\n\n  // Check if change is needed\n  let payChange: Utxo | undefined;\n  const changeScript = new P2PKH().lock(\n    changeAddress || paymentPk.toAddress().toString(),\n  );\n  const changeOutput = {\n    lockingScript: changeScript,\n    change: true,\n  };\n  tx.addOutput(changeOutput);\n\n  let totalSatsIn = 0n;\n  const totalSatsOut = tx.outputs.reduce(\n    (total, out) => total + BigInt(out.satoshis || 0),\n    0n,\n  );\n  let fee = 0;\n  for (const utxo of utxos) {\n    const input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n      paymentPk,\n      \"all\",\n      true,\n      utxo.satoshis,\n      Script.fromBinary(Utils.toArray(utxo.script, 'base64'))\n    ));\n\n    tx.addInput(input);\n    // stop adding inputs if the total amount is enough\n    totalSatsIn += BigInt(utxo.satoshis);\n    fee = await modelOrFee.computeFee(tx);\n\n    if (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n      break;\n    }\n  }\n\n  // make sure we have enough\n  if (totalSatsIn < totalSatsOut + BigInt(fee)) {\n    throw new Error(\n      `Not enough funds to create ordinal listings. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n    );\n  }\n\n  // Calculate fee\n  await tx.fee(modelOrFee);\n\n  // Sign the transaction\n  await tx.sign();\n\n  // check for change\n  const payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n  if (payChangeOutIdx !== -1) {\n    const changeOutput = tx.outputs[payChangeOutIdx];\n    payChange = {\n      satoshis: changeOutput.satoshis as number,\n      txid: tx.id(\"hex\") as string,\n      vout: payChangeOutIdx,\n      script: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n        \"base64\",\n      ),\n    };\n  }\n\n  if (payChange) {\n    const changeOutput = tx.outputs[tx.outputs.length - 1];\n    payChange.satoshis = changeOutput.satoshis as number;\n    payChange.txid = tx.id(\"hex\") as string;\n  }\n\n  return {\n    tx,\n    spentOutpoints: tx.inputs.map(\n      (i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n    ),\n    payChange,\n  };\n};\n\nexport const createOrdTokenListings = async (\n  config: CreateOrdTokenListingsConfig,\n) => {\n  const {\n    utxos,\n    protocol,\n    tokenID,\n    ordPk,\n    paymentPk,\n    additionalPayments = [],\n    changeAddress,\n    tokenChangeAddress,\n    inputTokens,\n    listings,\n    decimals,\n    satsPerKb = DEFAULT_SAT_PER_KB,\n  } = config;\n\n\n  // Warn if creating many inscriptions at once\n  if (listings.length > 100) {\n    console.warn(\n      \"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n    );\n  }\n\n  // Ensure these inputs are for the expected token\n  if (!inputTokens.every((token) => token.id === tokenID)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n  // calculate change amount\n  let changeAmt = 0n;\n  let totalAmtIn = 0n;\n  let totalAmtOut = 0n;\n\n  // Ensure these inputs are for the expected token\n  if (!inputTokens.every((token) => token.id === tokenID)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n  const modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n  const tx = new Transaction();\n  // Outputs\n  // Add listing outputs\n  for (const listing of listings) {\n    // NewTokenListing is not adjusted for decimals\n    const bigAmt = BigInt(listing.amt * 10 ** decimals);\n    const transferInscription: TransferTokenInscription = {\n      p: \"bsv-20\",\n      op: \"transfer\",\n      amt: bigAmt.toString(),\n    };\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n    if (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n    } else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n    tx.addOutput({\n      satoshis: 1,\n      lockingScript: new OrdLock().lock(\n        listing.ordAddress,\n        listing.payAddress,\n        listing.price,\n        {\n          dataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n          contentType: \"application/bsv-20\",\n        },\n      ),\n    });\n    totalAmtOut += bigAmt;\n  }\n\n  // Input tokens are already adjusted for decimals\n  for (const token of inputTokens) {\n    tx.addInput(inputFromB64Utxo(\n      token,\n      new OrdP2PKH().unlock(\n        ordPk,\n        \"all\",\n        true,\n        token.satoshis,\n        Script.fromBinary(toArray(token.script, \"base64\")),\n      ),\n    ));\n\n    totalAmtIn += BigInt(token.amt);\n  }\n  changeAmt = totalAmtIn - totalAmtOut;\n\n  let tokenChange: TokenUtxo | undefined;\n  // check that you have enough tokens to send and return change\n  if (changeAmt < 0n) {\n    throw new Error(\"Not enough tokens to send\");\n  }\n  if (changeAmt > 0n) {\n    const transferInscription: TransferTokenInscription = {\n      p: \"bsv-20\",\n      op: \"transfer\",\n      amt: changeAmt.toString(),\n    };\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n    if (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n    } else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n    const lockingScript = new OrdP2PKH().lock(tokenChangeAddress, {\n      dataB64: Buffer.from(JSON.stringify(inscription)).toString('base64'),\n      contentType: \"application/bsv-20\",\n    });\n    const vout = tx.outputs.length;\n    tx.addOutput({ lockingScript, satoshis: 1 });\n    tokenChange = {\n      id: tokenID,\n      satoshis: 1,\n      script: Buffer.from(lockingScript.toBinary()).toString(\"base64\"),\n      txid: \"\",\n      vout,\n      amt: changeAmt.toString(),\n    };\n  }\n\n  // Add additional payments if any\n  for (const p of additionalPayments) {\n    tx.addOutput({\n      satoshis: p.amount,\n      lockingScript: new P2PKH().lock(p.to),\n    });\n  }\n\n  // add change to the outputs\n  let payChange: Utxo | undefined;\n\n  const change = changeAddress || paymentPk.toAddress().toString();\n  const changeScript = new P2PKH().lock(change);\n  const changeOut = {\n    lockingScript: changeScript,\n    change: true,\n  };\n  tx.addOutput(changeOut);\n\n  let totalSatsIn = 0n;\n  const totalSatsOut = tx.outputs.reduce(\n    (total, out) => total + BigInt(out.satoshis || 0),\n    0n,\n  );\n  let fee = 0;\n  for (const utxo of utxos) {\n    const input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n      paymentPk,\n      \"all\",\n      true,\n      utxo.satoshis,\n      Script.fromBinary(Utils.toArray(utxo.script, 'base64'))\n    ));\n\n    tx.addInput(input);\n    // stop adding inputs if the total amount is enough\n    totalSatsIn += BigInt(utxo.satoshis);\n    fee = await modelOrFee.computeFee(tx);\n\n    if (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n      break;\n    }\n  }\n\n  // make sure we have enough\n  if (totalSatsIn < totalSatsOut + BigInt(fee)) {\n    throw new Error(\n      `Not enough funds to create token listings. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n    );\n  }\n\n  // estimate the cost of the transaction and assign change value\n  await tx.fee(modelOrFee);\n\n  // Sign the transaction\n  await tx.sign();\n\n  const txid = tx.id(\"hex\") as string;\n  if (tokenChange) {\n    tokenChange.txid = txid;\n  }\n  // check for change\n  const payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n  if (payChangeOutIdx !== -1) {\n    const changeOutput = tx.outputs[payChangeOutIdx];\n    payChange = {\n      satoshis: changeOutput.satoshis as number,\n      txid,\n      vout: payChangeOutIdx,\n      script: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n        \"base64\",\n      ),\n    };\n  }\n\n  if (payChange) {\n    const changeOutput = tx.outputs[tx.outputs.length - 1];\n    payChange.satoshis = changeOutput.satoshis as number;\n    payChange.txid = tx.id(\"hex\") as string;\n  }\n\n  return {\n    tx,\n    spentOutpoints: tx.inputs.map(\n      (i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n    ),\n    payChange,\n    tokenChange,\n  };\n};\n","import { P2PKH, SatoshisPerKilobyte, Script, Transaction, Utils } from \"@bsv/sdk\";\nimport {\n\tTokenType,\n\ttype TokenUtxo,\n\ttype CancelOrdListingsConfig,\n\ttype CancelOrdTokenListingsConfig,\n\ttype Destination,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n  type ChangeResult,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\n\n/**\n * Cancel Ordinal Listings\n * @param {CancelOrdListingsConfig} config - Configuration object for cancelling ordinals\n * @param {PrivateKey} config.paymentPk - Private key to sign payment inputs\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.listingUtxos - Listing utxos to cancel (with base64 encoded scripts)\n * @param {string} [config.changeAddress] - Optional. Address to send change to\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to make\n * @returns {Promise<ChangeResult>} Transaction, spent outpoints, change utxo\n */\nexport const cancelOrdListings = async (config: CancelOrdListingsConfig): Promise<ChangeResult> => {\n\tconst {\n\t\tutxos,\n\t\tlistingUtxos,\n\t\tordPk,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tadditionalPayments = [],\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\n\t// Warn if creating many inscriptions at once\n\tif (listingUtxos.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\t\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinals we're cancelling\n\tfor (const listingUtxo of listingUtxos) {\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().cancelListing(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlistingUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, 'base64'))\n\t\t\t)\n\t\t));\n\t\t// Add cancel outputs returning listed ordinals\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new P2PKH().lock(ordPk.toAddress().toString()),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo, \n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpaymentPk, \n\t\t\t\t\"all\",\n\t\t\t\ttrue, \n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t\t)\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to cancel ordinal listings. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\nexport const cancelOrdTokenListings = async (\n\tconfig: CancelOrdTokenListingsConfig,\n) => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tadditionalPayments,\n\t\tlistingUtxos,\n\t\tutxos,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\t// calculate change amount\n\tlet totalAmtIn = 0;\n\n\tif (listingUtxos.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Ensure these inputs are for the expected token\n\tif (!listingUtxos.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinals we're cancelling\n\tfor (const listingUtxo of listingUtxos) {\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().cancelListing(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlistingUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, 'base64'))\n\t\t\t)\n\t\t));\n\t\ttotalAmtIn += Number.parseInt(listingUtxo.amt);\n\t}\n\n\tconst transferInscription: TransferTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"transfer\",\n\t\tamt: totalAmtIn.toString(),\n\t};\n\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\tif (protocol === TokenType.BSV20) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\ttick: tokenID,\n\t\t} as TransferBSV20Inscription;\n\t} else if (protocol === TokenType.BSV21) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\tid: tokenID,\n\t\t} as TransferBSV21Inscription;\n\t} else {\n\t\tthrow new Error(\"Invalid protocol\");\n\t}\n\n\tconst destination: Destination = {\n\t\taddress: ordAddress || ordPk.toAddress().toString(),\n\t\tinscription: {\n\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t},\n\t};\n\n  const lockingScript = new OrdP2PKH().lock(\n    destination.address,\n    destination.inscription\n  );\n\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript,\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to cancel token listings. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n  const tokenChange: TokenUtxo = {\n    amt: totalAmtIn.toString(),\n    script: Buffer.from(lockingScript.toHex(), 'hex').toString('base64'),\n    txid: tx.id(\"hex\") as string,\n    vout: 0,\n    id: tokenID,\n    satoshis: 1\n  };\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n    tokenChange\n\t};\n};","import {\n\tLockingScript,\n\tP2PKH,\n\tSatoshisPerKilobyte,\n\tScript,\n\tTransaction,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport {\n\ttype ChangeResult,\n\tRoytaltyType,\n\tTokenType,\n\ttype PurchaseOrdListingConfig,\n\ttype PurchaseOrdTokenListingConfig,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n\tMAP,\n} from \"./types\";\nimport { resolvePaymail } from \"./utils/paymail\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Purchase a listing\n * @param {PurchaseOrdListingConfig} config - Configuration object for purchasing a listing\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign payment inputs\n * @param {ExistingListing} config.listing - Listing to purchase\n * @param {string} config.ordAddress - Address to send the ordinal to\n * @param {string} [config.changeAddress] - Optional. Address to send change to\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to make\n * @param {Royalty[]} [config.royalties] - Optional. Royalties to pay\n * @param {MAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include on purchased output\n * @returns {Promise<ChangeResult>} Transaction, spent outpoints, change utxo\n */\nexport const purchaseOrdListing = async (\n\tconfig: PurchaseOrdListingConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tlisting,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tadditionalPayments = [],\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\troyalties = [],\n\t\tmetaData,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinal we're purchasing\n\ttx.addInput(\n\t\tinputFromB64Utxo(\n\t\t\tlisting.listingUtxo,\n\t\t\tnew OrdLock().purchaseListing(\n\t\t\t\t1,\n\t\t\t\tScript.fromBinary(Utils.toArray(listing.listingUtxo.script, \"base64\")),\n\t\t\t),\n\t\t),\n\t);\n\n\t// Outputs\n\t// Add the purchased output\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(ordAddress, undefined, metaData),\n\t});\n\n\t// add the payment output\n\tconst reader = new Utils.Reader(Utils.toArray(listing.payout, \"base64\"));\n\tconst satoshis = reader.readUInt64LEBn().toNumber();\n\tconst scriptLength = reader.readVarIntNum();\n\tconst scriptBin = reader.read(scriptLength);\n\tconst lockingScript = LockingScript.fromBinary(scriptBin);\n\ttx.addOutput({\n\t\tsatoshis,\n\t\tlockingScript,\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Add any royalties\n\tfor (const r of royalties) {\n\t\tlet lockingScript: LockingScript | undefined;\n\t\tconst royaltySats = Math.floor(Number(r.percentage) * satoshis);\n\n\t\tswitch (r.type as RoytaltyType) {\n\t\t\tcase RoytaltyType.Paymail:\n\t\t\t\t// resolve paymail address\n\t\t\t\tlockingScript = await resolvePaymail(r.destination, royaltySats);\n\t\t\t\tbreak;\n\t\t\tcase RoytaltyType.Script:\n\t\t\t\tlockingScript = Script.fromBinary(\n\t\t\t\t\tUtils.toArray(r.destination, \"base64\"),\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase RoytaltyType.Address:\n\t\t\t\tlockingScript = new P2PKH().lock(r.destination);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"Invalid royalty type\");\n\t\t}\n\t\tif (!lockingScript) {\n\t\t\tthrow new Error(\"Invalid royalty destination\");\n\t\t}\n\t\ttx.addOutput({\n\t\t\tsatoshis: royaltySats,\n\t\t\tlockingScript,\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo,\n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpaymentPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, \"base64\")),\n\t\t\t),\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase ordinal listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\n/**\n *\n * @param {PurchaseOrdTokenListingConfig} config  - Configuration object for purchasing a token listing\n * @param {TokenType} config.protocol - Token protocol\n * @param {string} config.tokenID - Token ID\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign payment inputs\n * @param {Utxo} config.listingUtxo - Listing UTXO\n * @param {string} config.ordAddress - Address to send the ordinal to\n * @param {string} [config.changeAddress] - Optional. Address to send change to\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to make\n * @param {MAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include on the purchased transfer inscription output\n * @returns {Promise<ChangeResult>} Transaction, spent outpoints, change utxo\n */\nexport const purchaseOrdTokenListing = async (\n\tconfig: PurchaseOrdTokenListingConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tpaymentPk,\n\t\tlistingUtxo,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t\tmetaData,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinal we're purchasing\n\ttx.addInput(\n\t\tinputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().purchaseListing(\n\t\t\t\t1,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, \"base64\")),\n\t\t\t),\n\t\t),\n\t);\n\n\t// Outputs\n\tconst transferInscription: TransferTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"transfer\",\n\t\tamt: listingUtxo.amt,\n\t};\n\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\tif (protocol === TokenType.BSV20) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\ttick: tokenID,\n\t\t} as TransferBSV20Inscription;\n\t} else if (protocol === TokenType.BSV21) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\tid: tokenID,\n\t\t} as TransferBSV21Inscription;\n\t} else {\n\t\tthrow new Error(\"Invalid protocol\");\n\t}\n\tconst dataB64 = Buffer.from(JSON.stringify(inscription)).toString(\"base64\");\n\n\t// Add the purchased output\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\tordAddress,\n\t\t\t{\n\t\t\t\tdataB64,\n\t\t\t\tcontentType: \"application/bsv-20\",\n\t\t\t},\n\t\t\tmetaData,\n\t\t),\n\t});\n\n\tif (!listingUtxo.payout) {\n\t\tthrow new Error(\"Listing UTXO does not have a payout script\");\n\t}\n\n\t// Add the payment output\n\tconst reader = new Utils.Reader(Utils.toArray(listingUtxo.payout, \"base64\"));\n\tconst satoshis = reader.readUInt64LEBn().toNumber();\n\tconst scriptLength = reader.readVarIntNum();\n\tconst scriptBin = reader.read(scriptLength);\n\tconst lockingScript = LockingScript.fromBinary(scriptBin);\n\ttx.addOutput({\n\t\tsatoshis,\n\t\tlockingScript,\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo,\n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpaymentPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, \"base64\")),\n\t\t\t),\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase token listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n","// import { PaymailClient } from \"@bsv/paymail\";\nimport { LockingScript } from \"@bsv/sdk\";\n\n// const client = new PaymailClient();\n\nexport const resolvePaymail = async (paymailAddress: string, amtToReceive: number): Promise<LockingScript> => {\n  // const destinationTx = await client.getP2pPaymentDestination(paymailAddress, amtToReceive);\n  // // TODO: we are assuming only one output but in reality it can be many\n  // return destinationTx.outputs[0].script as LockingScript;\n  throw new Error(\"Not implemented\");\n}","import Jimp from \"jimp\";\n\nimport type { IconInscription, ImageContentType } from \"../types\";\n\nexport const ErrorOversizedIcon = new Error(\n\t\"Image must be a square image with dimensions <= 400x400\",\n);\nexport const ErrorIconProportions = new Error(\"Image must be a square image\");\nexport const ErrorInvalidIconData = new Error(\"Error processing image\");\nexport const ErrorImageDimensionsUndefined = new Error(\n\t\"Image dimensions are undefined\",\n);\n\nconst isImageContentType = (value: string): value is ImageContentType => {\n  console.log({value})\n\treturn (value as ImageContentType) === value;\n};\n\nexport const validIconData = async (\n\ticon: IconInscription,\n): Promise<Error | null> => {\n\tconst { dataB64, contentType } = icon;\n\n\tif (contentType === \"image/svg+xml\") {\n\t\treturn validateSvg(dataB64);\n\t}\n\n\t// make sure the contentType is one of ImageContentType\n\tif (!isImageContentType(contentType)) {\n\t\treturn ErrorInvalidIconData;\n\t}\n\n\ttry {\n\t\tconst buffer = Buffer.from(dataB64, \"base64\");\n\t\tconst image = await Jimp.read(buffer);\n\n\t\tconst width = image.getWidth();\n\t\tconst height = image.getHeight();\n\n\t\tif (width === undefined || height === undefined) {\n\t\t\treturn ErrorImageDimensionsUndefined;\n\t\t}\n\t\tif (width !== height) {\n\t\t\treturn ErrorIconProportions;\n\t\t}\n\t\tif (width > 400 || height > 400) {\n\t\t\treturn ErrorOversizedIcon;\n\t\t}\n\n\t\treturn null;\n\t} catch (error) {\n\t\treturn ErrorInvalidIconData;\n\t}\n};\n\nconst validateSvg = (svgBase64: string): Error | null => {\n  const svgString = Buffer.from(svgBase64, \"base64\").toString(\"utf-8\");\n  const widthMatch = svgString.match(/<svg[^>]*\\s+width=\"([^\"]+)\"/);\n  const heightMatch = svgString.match(/<svg[^>]*\\s+height=\"([^\"]+)\"/);\n  console.log({widthMatch, heightMatch})\n  if (!widthMatch || !heightMatch) {\n    return ErrorImageDimensionsUndefined;\n  }\n\n\tconst width = Number.parseInt(widthMatch[1], 10);\n\tconst height = Number.parseInt(heightMatch[1], 10);\n\n\tif (Number.isNaN(width) || Number.isNaN(height)) {\n\t\treturn ErrorImageDimensionsUndefined;\n\t}\n\n\tif (width !== height) {\n\t\treturn ErrorIconProportions;\n\t}\n\tif (width > 400 || height > 400) {\n\t\treturn ErrorOversizedIcon;\n\t}\n\n\treturn null;\n}\n\nexport const validIconFormat = (icon: string): boolean => {\n\tif (!icon.includes(\"_\") || icon.endsWith(\"_\")) {\n\t\treturn false;\n\t}\n\n\t// use parseint to validate the vout\n\tconst iconVout = Number.parseInt(icon.split(\"_\")[1]);\n\tif (Number.isNaN(iconVout)) {\n\t\treturn false;\n\t}\n\n\tif (!icon.startsWith(\"_\") && icon.split(\"_\")[0].length !== 64) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n","import {\n\tTransaction,\n\tP2PKH,\n\tSatoshisPerKilobyte,\n\ttype TransactionOutput,\n\tUtils,\n\tScript,\n} from \"@bsv/sdk\";\nimport type {\n  ChangeResult,\n\tDeployBsv21TokenConfig,\n\tDeployMintTokenInscription,\n\tInscription,\n\tUtxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { validIconData, validIconFormat } from \"./utils/icon\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\n\n/**\n * Deploys & Mints a BSV21 token to the given destination address\n * @param {DeployBsv21TokenConfig} config - Configuration object for deploying BSV21 token\n * @param {string} config.symbol - Token ticker symbol\n * @param {number} config.decimals - Number of decimal places to display\n * @param {string | IconInscription} config.icon - outpoint (format: txid_vout) or Inscription. If Inscription, must be a valid image type\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {Distribution} config.initialDistribution - Initial distribution with addresses and total supply (not adjusted for decimals, library will add zeros)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {string} config.destinationAddress - Address to deploy token to.\n * @param {string} [config.changeAddress] - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to include in the transaction\n * @returns {Promise<ChangeResult>} Transaction to deploy BSV 2.1 token\n */\nexport const deployBsv21Token = async (\n\tconfig: DeployBsv21TokenConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tsymbol,\n\t\ticon,\n    decimals,\n\t\tutxos,\n\t\tinitialDistribution,\n\t\tpaymentPk,\n\t\tdestinationAddress,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\tlet iconValue: string;\n\tif (typeof icon === \"string\") {\n\t\ticonValue = icon;\n\t} else {\n\t\tconst iconError = await validIconData(icon);\n\t\tif (iconError) {\n\t\t\tthrow iconError;\n\t\t}\n\t\t// add icon inscription to the transaction\n\t\tconst iconScript = new OrdP2PKH().lock(destinationAddress, icon);\n\t\tconst iconOut = {\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: iconScript,\n\t\t};\n\t\ttx.addOutput(iconOut);\n\t\t// relative output index of the icon\n\t\ticonValue = \"_0\";\n\t}\n\n\t// Ensure the icon format\n\tif (!validIconFormat(iconValue)) {\n\t\tthrow new Error(\n\t\t\t\"Invalid icon format. Must be either outpoint (format: txid_vout) or relative output index of the icon (format _vout). examples: ecb483eda58f26da1b1f8f15b782b1186abdf9c6399a1c3e63e0d429d5092a41_0 or _1\",\n\t\t);\n\t}\n  \n\t// Outputs\n  const amt = decimals ? BigInt(initialDistribution.amt) * 10n ** BigInt(decimals) : BigInt(initialDistribution.amt);\n\tconst fileData: DeployMintTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"deploy+mint\",\n\t\tsym: symbol,\n\t\ticon: iconValue,\n\t\tamt: amt.toString(),\n\t};\n\n  if (decimals) {\n    fileData.dec = decimals.toString();\n  }\n\n\tconst b64File = Buffer.from(JSON.stringify(fileData)).toString(\"base64\");\n\tconst sendTxOut = {\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(destinationAddress, {\n\t\t\tdataB64: b64File,\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t} as Inscription),\n\t};\n\ttx.addOutput(sendTxOut);\n\n\t// Additional payments\n\tfor (const payment of additionalPayments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new P2PKH().lock(payment.to),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to deploy token. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tScript,\n\tUtils,\n  PrivateKey,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB, MAP_PREFIX } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n  BaseResult,\n\tBurnOrdinalsConfig,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { toHex } from \"./utils/strings\";\n\n/**\n * Burn ordinals by consuming them as fees\n * @param {BurnOrdinalsConfig} config - Configuration object for sending ordinals\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Utxo} config.ordinals - 1Sat Ordinal Utxos to spend (with base64 encoded scripts)\n * @param {BurnMAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include in an unspendable output OP_FALSE OP_RETURN\n * @returns {Promise<BaseResult>} Transaction, spent outpoints\n */\nexport const burnOrdinals = async (\n\tconfig: BurnOrdinalsConfig,\n): Promise<BaseResult> => {\n\tconst tx = new Transaction();\n\tconst spentOutpoints: string[] = [];\n\tconst { ordinals, metaData } = config;\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(\n\t\t\tordUtxo,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tconfig.ordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tordUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(ordUtxo.script, \"base64\")),\n\t\t\t),\n\t\t);\n\t\tspentOutpoints.push(`${ordUtxo.txid}_${ordUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// Add metadata output\n\n\t// MAP.app and MAP.type keys are required\n\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t}\n\n\tlet metaAsm = \"\";\n\n\tif (metaData?.app && metaData?.type) {\n\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\tconst mapCmdValue = toHex(\"SET\");\n\t\tmetaAsm = `OP_FALSE OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\tif (key !== \"cmd\") {\n\t\t\t\tmetaAsm = `${metaAsm} ${toHex(key)} ${toHex(value as string)}`;\n\t\t\t}\n\t\t}\n\t}\n\n\ttx.addOutput({\n\t\tsatoshis: 0,\n\t\tlockingScript: Script.fromASM(metaAsm || \"OP_FALSE OP_RETURN\"),\n\t});\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t};\n};\n"],"names":["TokenType","RoytaltyType","toHex","utf8Str","Buffer","from","toString","MAP_PREFIX","DEFAULT_SAT_PER_KB","API_HOST","OrdP2PKH","_P2PKH","apply","arguments","_inheritsLoose","prototype","lock","address","inscription","metaData","ordAsm","undefined","dataB64","contentType","ordHex","fileHex","trim","Error","fileMediaType","inscriptionAsm","P2PKH","toASM","app","type","mapPrefixHex","_i","_Object$entries","Object","entries","length","_Object$entries$_i","key","value","LockingScript","fromASM","MAX_TOKEN_SUPPLY","Math","pow","fromBase58Check","Utils","inputFromB64Utxo","utxo","unlockScriptTemplate","fromUtxo","_extends","script","fetchPayUtxos","scriptEncoding","payUrl","console","log","Promise","resolve","fetch","then","payRes","ok","json","payUtxos","filter","u","satoshis","pubKeyHash","p2pkhScript","data","map","txid","vout","toBinary","e","reject","fetchNftUtxos","collectionId","limit","offset","url","JSON","stringify","subTypeData","res","nftUtxos","outpoints","_u$data","list","method","headers","body","concat","nftRes","nfts","Script","fromHex","nftUtxo","origin","outpoint","fetchTokenUtxos","protocol","tokenId","BSV20","tokenUtxos","amt","id","signData","tx","signer","_exit","_temp2","_result","idKey","keyHost","_sigma$sign","Sigma","sign","signedTx","_temp","authToken","sigma","remoteSign","_ref","_catch","stringifyMetaData","result","Array","isArray","String","pact","state","s","_Pact","o","bind","v","_settle","observer","onFulfilled","this","_this","onRejected","_isSettledPact","thenable","createOrdinals","config","_temp4","_interrupt","totalSatsIn","totalSatsOut","BigInt","fee","modelOrFee","payChangeOutIdx","outputs","findIndex","change","changeOutput","payChange","lockingScript","spentOutpoints","utxos","_forOf","input","unlock","paymentPk","fromBinary","toArray","addInput","computeFee","_modelOrFee$computeFe","destinations","changeAddress","_config$satsPerKb","satsPerKb","_config$additionalPay","additionalPayments","warn","_step","SatoshisPerKilobyte","Transaction","_iterator","_createForOfIteratorHelperLoose","done","destination","_Object$keys","keys","addOutput","_step2","_iterator2","p","amount","to","toAddress","changeScript","reduce","total","out","_temp3","pop","_signData","sendOrdinals","enforceUniformSend","ordinals","ordUtxo","ordPk","push","_destination$inscript","_destination$inscript2","_step3","_iterator3","array","_cycle","i","check","paymentUtxos","sendUtxos","changeOut","payments","_config$changeAddress","payment","sendTxOut","_iteratorSymbol","Symbol","iterator","callback","transferOrdTokens","tokenChange","inputs","sourceTXID","sourceOutputIndex","tokenID","inputTokens","distributions","tokenChangeAddress","decimals","_config$burn","burn","changeAmt","totalAmtIn","totalAmtOut","every","token","inputScriptBinary","inputScript","dest","bigAmt","transferInscription","op","tick","BSV21","target","step","next","_fixup","validateSubTypeData","subType","collectionData","description","quantity","rarityLabels","label","values","traits","itemData","includes","split","Number","isNaN","parseInt","mintNumber","rank","rarityLabel","attachments","error","OrdLock","_proto","ordAddress","payAddress","price","cancelPkh","payPkh","writeScript","writeBin","buildOutput","cancelListing","privateKey","signOutputs","anyoneCanPay","sourceSatoshis","p2pkh","inputIndex","_p2pkh$sign","writeOpCode","OP","OP_1","estimateLength","purchaseListing","purchase","_input$sourceTransact","UnlockingScript","writer","Writer","slice","output","write","OP_0","sourceSats","sourceTransaction","_input$sourceTransact2","subscript","preimage","TransactionSignature","format","transactionVersion","version","otherInputs","inputSequence","sequence","lockTime","scope","SIGHASH_ALL","SIGHASH_ANYONECANPAY","SIGHASH_FORKID","_purchase$sign","writeUInt64LEBn","BigNumber","writeVarIntNum","return","TypeError","_forTo","createOrdListings","listings","listing","listingUtxo","createOrdTokenListings","_interrupt2","_config$additionalPay2","_config$satsPerKb2","_step4","_iterator4","_step5","_iterator5","_modelOrFee$computeFe2","cancelOrdListings","listingUtxos","cancelOrdTokenListings","purchaseOrdListing","_temp6","_result2","_config$royalties","royalties","reader","Reader","payout","readUInt64LEBn","toNumber","scriptLength","readVarIntNum","scriptBin","read","_temp5","r","royaltySats","floor","percentage","_switch","Paymail","resolvePaymail","_resolvePaymail","Address","purchaseOrdTokenListing","_temp8","_interrupt3","_temp7","ErrorOversizedIcon","ErrorIconProportions","ErrorInvalidIconData","ErrorImageDimensionsUndefined","deployBsv21Token","iconValue","icon","endsWith","iconVout","startsWith","validIconFormat","initialDistribution","fileData","sym","symbol","dec","b64File","destinationAddress","svgBase64","svgString","widthMatch","match","heightMatch","width","height","validateSvg","buffer","Jimp","image","getWidth","getHeight","validIconData","iconError","iconScript","burnOrdinals","metaAsm","mapCmdValue"],"mappings":"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"}