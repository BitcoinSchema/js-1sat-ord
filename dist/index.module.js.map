{"version":3,"file":"index.module.js","sources":["../src/utils/strings.ts","../src/types.ts","../src/constants.ts","../src/templates/ordP2pkh.ts","../src/utils/utxo.ts","../src/signData.ts","../src/utils/subtypeData.ts","../src/createOrdinals.ts","../src/sendOrdinals.ts","../src/sendUtxos.ts","../src/transferOrdinals.ts","../src/validate.ts","../src/templates/ordLock.ts","../src/createListings.ts","../src/cancelListings.ts","../src/purchaseOrdListing.ts"],"sourcesContent":["/**\n * Converts a string to its hexadecimal representation\n *\n * @param {string} utf8Str - The string to convert\n * @returns {string} The hexadecimal representation of the input string\n */\nconst toHex = (utf8Str: string): string => {\n  return Buffer.from(utf8Str).toString(\"hex\");\n};\n\nexport { toHex };\n","import type { PrivateKey, Script, Transaction } from \"@bsv/sdk\";\nimport type { AuthToken } from \"sigma-protocol\";\n\n// biome-ignore lint/complexity/noBannedTypes: Reserved for future use\ntype Signer = {};\n\nexport interface LocalSigner extends Signer {\n\tidKey: PrivateKey;\n}\n\nexport interface RemoteSigner extends Signer {\n\tkeyHost: string;\n\tauthToken?: AuthToken;\n}\n\nexport type Destination = {\n\taddress: string;\n\tinscription?: Inscription;\n};\n\n/**\n * @typedef {Object} Listing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n * @property {Utxo} listingUtxo - Utxo of the listing\n */\nexport type Listing = {\n\tpayAddress: string;\n\tprice: number;\n\tordAddress: string;\n\tlistingUtxo: Utxo;\n}\n\n/**\n * @typedef {Object} TokenListing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n */\nexport type TokenListing = {\n\tpayAddress: string;\n\tprice: number;\n\tamt: bigint;\n\tordAddress: string;\n}\n\n/**\n * @typedef {Object} Distribution\n * @property {string} address - Destination address. Must be a Ordinals address (BSV address for recieving 1Sat ordinals tokens).\n * @property {string} amt - Number of tokens as a string, considering decimals. Not display format. Ex. 100000000 for 1 token with 8 decimal places.\n */\nexport type Distribution = {\n\taddress: string;\n\tamt: string;\n};\n\n/**\n * @typedef {Object} Utxo\n * @property {number} satoshis - Amount in satoshis\n * @property {string} txid - Transaction id\n * @property {number} vout - Output index\n * @property {string} script - Base64 encoded locking script\n */\nexport type Utxo = {\n\tsatoshis: number;\n\ttxid: string;\n\tvout: number;\n\tscript: string;\n};\n\n/**\n * @typedef {Object} NftUtxo\n * @property {string} collectionId - Optional. Collection id of the NFT\n * @property {string} contentType - Media type of the NFT\n * @property {string} creatorBapId - Optional. Creator BAP id of the NFT\n * @property {string} origin - Origin address of the NFT\n * @property {number} satoshis - Always 1\n */\nexport interface NftUtxo extends Utxo {\n\tcollectionId?: string;\n\tcontentType: string;\n\tcreatorBapId?: string;\n\torigin: string;\n\tsatoshis: 1;\n}\n\n/**\n * @typedef {Object} TokenUtxo\n * @property {string} amt - Number of tokens as a string\n * @property {string} id - Token id -  either tick or id depending on protocol\n * @property {string} satoshis - Always 1\n */\nexport interface TokenUtxo extends Utxo {\n\tamt: string;\n\tid: string;\n\tsatoshis: 1;\n}\n\nexport type Inscription = {\n\tdataB64: string;\n\tcontentType: string;\n};\n\nexport type ImageContentType =\n\t| \"image/png\"\n\t| \"image/jpeg\"\n\t| \"image/gif\"\n\t| \"image/svg+xml\"\n\t| \"image/webp\";\n\n/**\n * @typedef {Object} IconInscription\n * @property {string} dataB64 - Base64 encoded image data. Must be a square image.\n * @property {ImageContentType} contentType - Media type of the image\n */\nexport type IconInscription = {\n\tdataB64: string;\n\tcontentType: ImageContentType;\n};\n\nexport type Payment = {\n\tto: string;\n\tamount: number;\n};\n\nexport type TokenInscription = {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\" | \"mint\" | \"deploy+mint\" | \"burn\";\n  dec?: string;\n};\n\nexport interface MintTokenInscription extends TokenInscription {\n\top: \"mint\";\n}\n\nexport interface DeployMintTokenInscription extends TokenInscription {\n\top: \"deploy+mint\";\n\tsym: string;\n\ticon: string;\n}\n\nexport interface TransferTokenInscription extends TokenInscription {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\" | \"burn\";\n}\n\nexport interface TransferBSV20Inscription extends TransferTokenInscription {\n\ttick: string;\n}\n\nexport interface TransferBSV21Inscription extends TransferTokenInscription {\n\tid: string;\n}\n\nexport enum TokenType {\n\tBSV20 = \"bsv20\",\n\tBSV21 = \"bsv21\",\n}\n\nexport type CreateOrdinalsResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\n/**\n * MAP (Magic Attribute Protocol) metadata object with stringified values for writing to the blockchain\n * @typedef {Object} MAP\n * @property {string} app - Application identifier\n * @property {string} type - Metadata type\n * @property {string} [prop] - Optional. Additional metadata properties\n */\nexport type MAP = {\n\tapp: string;\n\ttype: string;\n\t[prop: string]: string;\n};\n\nexport type PreMAP = {\n\tapp: string;\n\ttype: string;\n\t[prop: string]: unknown;\n\troyalties?: Royalty[];\n\tsubTypeData?: CollectionSubTypeData | CollectionItemSubTypeData;\n};\n\nexport type CreateOrdinalsConfig = {\n\tutxos: Utxo[];\n\tdestinations: Destination[];\n\tpaymentPk: PrivateKey;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: PreMAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n};\n\nexport enum RoytaltyType {\n\tPaymail = \"paymail\",\n\tAddress = \"address\",\n\tScript = \"script\",\n}\n\n/**\n * Royalty object\n * @typedef {Object} Royalty\n * @property {RoytaltyType} type - Royalty type, string, one of \"paymail\", \"address\", \"script\"\n * @property {string} destination - Royalty destination\n * @property {string} percentage - Royalty percentage as a string float 0-1\n */\nexport type Royalty = {\n\ttype: RoytaltyType;\n\tdestination: string;\n\tpercentage: string; // string float 0-1\n};\n\nexport interface CreateOrdinalsMetadata extends PreMAP {\n\ttype: \"ord\",\n\tname: string,\n\tpreviewUrl?: string,\n}\n\nexport interface CreateOrdinalsCollectionMetadata extends CreateOrdinalsMetadata {\n\tsubType: \"collection\",\n\tsubTypeData: CollectionSubTypeData, // JSON stringified CollectionSubTypeData\n\troyalties?: Royalty[],\n};\n\nexport interface CreateOrdinalsCollectionItemMetadata extends CreateOrdinalsMetadata {\n\tsubType: \"collectionItem\",\n\tsubTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n};\n\n/**\n * Configuration object for creating an ordinals collection\n * @typedef {Object} CreateOrdinalsCollectionConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collection\"\n * @property metaData.name - Collection name\n * @property metaData.subTypeData - JSON stringified CollectionSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionConfig extends CreateOrdinalsConfig {\n\tmetaData: CreateOrdinalsCollectionMetadata\n}\n\nexport type CollectionTraits = {\n\t[trait: string]: CollectionTrait;\n};\n\nexport type CollectionTrait = {\n\tvalues: string[];\n\toccurancePercentages: string[];\n};\n\nexport type Rarity = {\n\t[key: string]: string;\n}\n\nexport type RarityLabels = Rarity[]\nexport interface CollectionSubTypeData {\n\tdescription: string;\n\tquantity: number;\n\trarityLabels: RarityLabels;\n\ttraits: CollectionTraits;\n}\n\nexport interface CreateOrdinalsCollectionItemMetadata extends PreMAP {\n\ttype: \"ord\",\n\tname: string,\n\tsubType: \"collectionItem\",\n\tsubTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n\troyalties?: Royalty[],\n\tpreviewUrl?: string,\n}\n\n/**\n * Configuration object for creating an ordinals collection item\n * @typedef {Object} CreateOrdinalsCollectionItemConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection item\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collectionItem\"\n * @property metaData.name - Collection item name\n * @property metaData.subTypeData - JSON stringified CollectionItemSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionItemConfig extends CreateOrdinalsConfig {\n\tmetaData: CreateOrdinalsCollectionItemMetadata\n}\n\n/**\n * Subtype data for an ordinals collection item\n * @typedef {Object} CollectionItemSubTypeData\n * @property {string} collectionId - Collection id\n * @property {number} mintNumner - Mint number\n * @property {number} rank - Rank\n * @property {string} rarityLabel - Rarity label\n * @property {string} traits - traits object\n * @property {string} attachments - array of attachment objects\n */\nexport interface CollectionItemSubTypeData {\n\tcollectionId: string;\n\tmintNumber?: number;\n\trank?: number;\n\trarityLabel?: RarityLabels;\n\ttraits?: CollectionItemTraits;\n\tattachments?: CollectionItemAttachment[];\n}\n\nexport type CollectionItemTraits = {\n\tname: string;\n\tvalue: string;\n\trarityLabel?: string;\n\toccurancePercentrage?: string;\n};\n\nexport type CollectionItemAttachment = {\n\tname: string;\n\tdescription?: string;\n\t\"content-type\": string;\n\turl: string;\n}\n\nexport type SendOrdinalsResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type SendOrdinalsConfig = {\n\tpaymentUtxos: Utxo[];\n\tordinals: Utxo[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tdestinations: Destination[];\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: PreMAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n\tenforceUniformSend?: boolean;\n}\n\nexport type DeployBsv21TokenResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type DeployBsv21TokenConfig = {\n\tsymbol: string;\n  decimals: number;\n\ticon: string | IconInscription;\n\tutxos: Utxo[];\n\tinitialDistribution: Distribution;\n\tpaymentPk: PrivateKey;\n\tdestinationAddress: string;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[];\n};\n\nexport type SendUtxosResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type SendUtxosConfig = {\n\tutxos: Utxo[];\n\tpaymentPk: PrivateKey;\n\tpayments: Payment[];\n\tsatsPerKb?: number;\n\tchangeAddress?: string;\n};\n\nexport interface TransferOrdTokensResult extends SendOrdinalsResult {\n\ttokenChange?: TokenUtxo;\n}\n\nexport type TransferOrdTokensConfig = {\n\tprotocol: TokenType;\n\ttokenID: string;\n\tutxos: Utxo[];\n\tinputTokens: TokenUtxo[];\n\tdistributions: Distribution[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tchangeAddress?: string;\n\ttokenChangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: PreMAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n\tburn?: boolean;\n}\n\nexport type CreateOrdListingsConfig = {\n\tutxos: Utxo[];\n\tlistings: Listing[];\n\troyalty: number;\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey,\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[];\n}\n\nexport type PurchaseOrdListingConfig = {\n\tutxos: Utxo[];\n\tpaymentPk: PrivateKey;\n\tlistingUtxo: Utxo;\n\tordAddress: string;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[],\n}\n\nexport type PurchaseOrdTokenListingConfig = {\n\tprotocol: TokenType;\n\ttokenID: string;\n\tutxos: Utxo[];\n\tpaymentPk: PrivateKey;\n\tlistingUtxo: TokenUtxo;\n\tordAddress: string;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[],\n}\n\nexport type CancelOrdListingsConfig = {\n\tutxos: Utxo[],\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tlistingUtxos: Utxo[];\n\tadditionalPayments?: Payment[];\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n}\n\nexport interface CancelOrdTokenListingsConfig extends CancelOrdListingsConfig {\n\tutxos: Utxo[],\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tlistingUtxos: TokenUtxo[];\n\tadditionalPayments: Payment[];\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tprotocol: TokenType,\n\ttokenID: string;\n\tordAddress?: string;\n}\n\nexport interface CreateOrdTokenListingsConfig {\n\tutxos: Utxo[];\n\tlistings: TokenListing[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey,\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[];\n\tprotocol: TokenType;\n\ttokenID: string;\n\tinputTokens: TokenUtxo[];\n\ttokenChangeAddress: string;\n}\n\n","export const MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\nexport const DEFAULT_SAT_PER_KB = 10;\nexport const API_HOST = \"https://ordinals.gorillapool.io/api\";","import {\n\tLockingScript,\n\tP2PKH,\n\ttype Script,\n} from \"@bsv/sdk\";\nimport type { Inscription, MAP } from \"../types\";\nimport { toHex } from \"../utils/strings\";\nimport { MAP_PREFIX } from \"../constants\";\n\n/**\n * OrdP2PKH (1Sat Ordinal + Pay To Public Key Hash) class implementing ScriptTemplate.\n *\n * This class provides methods to create an Ordinal with Pay To Public Key Hash locking and unlocking scripts. \n * It extends the standard P2PKH script template and provides a custom lock method.\n */\nexport default class OrdP2PKH extends P2PKH {\n\t/**\n\t * Creates a 1Sat Ordinal + P2PKH locking script for a given address string\n\t *\n\t * @param {string} address - An destination address for the Ordinal.\n\t * @param {Object} [inscription] - Base64 encoded file data and Content type of the file.\n\t * @param {MAP} [metaData] - (optional) MAP Metadata to be included in OP_RETURN.\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\t// unlock method inherits from p2pkh\n\tlock(\n\t\taddress: string,\n    inscription?: Inscription,\n\t\tmetaData?: MAP | undefined,\n\t): Script {\n\t\tlet ordAsm = \"\";\n\t\t// This can be omitted for reinscriptions that just update metadata\n\t\tif (inscription?.dataB64 !== undefined && inscription?.contentType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(inscription.dataB64, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(inscription.contentType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`;\n\t\t}\n\n\t\t// Create ordinal output and inscription in a single output\n\t\tconst lockingScript = new P2PKH().lock(address);\n\t\tlet inscriptionAsm = `${ordAsm ? `${ordAsm} ` : \"\"}${lockingScript.toASM()}`;\n\n\t\t// MAP.app and MAP.type keys are required\n\t\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t\t}\n\n\t\tif (metaData?.app && metaData?.type) {\n\t\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\t\tconst mapCmdValue = toHex(\"SET\");\n\t\t\tinscriptionAsm = `${inscriptionAsm} OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\t\tif (key !== \"cmd\") {\n\t\t\t\t\tinscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\n\t\t\t\t\t\tvalue as string,\n\t\t\t\t\t)}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn LockingScript.fromASM(inscriptionAsm);\n\t}\n}\n","import {\n\ttype Transaction,\n\ttype UnlockingScript,\n\tfromUtxo,\n\ttype TransactionInput,\n\tUtils,\n\tP2PKH,\n  Script,\n} from \"@bsv/sdk\";\nimport { type NftUtxo, TokenType, type TokenUtxo, type Utxo } from \"../types\";\nimport { API_HOST } from \"../constants\";\n\nconst { fromBase58Check } = Utils;\n\n/**\n * Converts a Utxo object with a base64 encoded script to a Utxo object with a hex encoded script\n * @param {Utxo} utxo - Utxo object with base64 encoded script\n * @param {Object} unlockScriptTemplate - Object with sign and estimateLength functions\n * @returns {TransactionInput} Utxo object with hex encoded script\n */\nexport const inputFromB64Utxo = (\n\tutxo: Utxo,\n\tunlockScriptTemplate: {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>;\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>;\n\t},\n): TransactionInput => {\n\tconst input = fromUtxo(\n\t\t{\n\t\t\t...utxo,\n\t\t\tscript: Buffer.from(utxo.script, \"base64\").toString(\"hex\"),\n\t\t},\n\t\tunlockScriptTemplate,\n\t);\n\treturn input;\n};\n\n/**\n * Fetches pay utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<Utxo[]>} Array of pay utxos\n */\nexport const fetchPayUtxos = async (address: string, scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\"): Promise<Utxo[]> => {\n\tconst payUrl = `${API_HOST}/txos/address/${address}/unspent?bsv20=false`;\n\tconsole.log({ payUrl });\n\tconst payRes = await fetch(payUrl);\n\tif (!payRes.ok) {\n\t\tthrow new Error(\"Error fetching pay utxos\");\n\t}\n\tlet payUtxos = await payRes.json();\n\t// exclude all 1 satoshi utxos\n\tpayUtxos = payUtxos.filter((u: { satoshis: number }) => u.satoshis !== 1);\n\n\t// Get pubkey hash from address\n\tconst pubKeyHash = fromBase58Check(address);\n\tconst p2pkhScript = new P2PKH().lock(pubKeyHash.data);\n\tpayUtxos = payUtxos.map((utxo: Partial<Utxo>) => ({\n\t\ttxid: utxo.txid,\n\t\tvout: utxo.vout,\n\t\tsatoshis: utxo.satoshis,\n\t\tscript: scriptEncoding === \"hex\" || scriptEncoding === \"base64\" ? Buffer.from(p2pkhScript.toBinary()).toString(scriptEncoding) : p2pkhScript.toASM(),\n\t}));\n\treturn payUtxos as Utxo[];\n};\n\n/**\n * Fetches NFT utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @param {string} [collectionId] - Optional. Collection id (collection insciprtion origin)\n * @param {number} [limit=10] - Optional. Number of utxos to fetch. Default is 10\n * @param {number} [offset=0] - Optional. Offset for fetching utxos. Default is 0\n * @param {string} [scriptEncoding=\"base64\"] - Optional. Encoding for the script. Default is base64. Options are hex, base64, or asm.\n * @returns {Promise<Utxo[]>} Array of NFT utxos\n */\nexport const fetchNftUtxos = async (\n\taddress: string,\n\tcollectionId?: string,\n\tlimit = 10,\n\toffset = 0,\n  scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\",\n): Promise<NftUtxo[]> => {\n\tlet url = `${API_HOST}/txos/address/${address}/unspent?limit=${limit}&offset=${offset}&`;\n\n\tif (collectionId) {\n\t\tconst query = {\n\t\t\tmap: {\n\t\t\t\tsubTypeData: { collectionId },\n\t\t\t},\n\t\t};\n\t\tconst b64Query = Buffer.from(JSON.stringify(query)).toString(\"base64\");\n\t\turl += `q=${b64Query}`;\n\t}\n\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching NFT utxos for ${address}`);\n\t}\n\n\t// Returns a BSV20Txo but we only need a few fields\n\tlet nftUtxos = await res.json();\n\n\t// Only include 1 satoshi outputs, non listings\n\tnftUtxos = nftUtxos.filter(\n\t\t(u: {\n\t\t\tsatoshis: number;\n\t\t\tdata: { list: { price: number; payout: string } | undefined } | null;\n\t\t}) => u.satoshis === 1 && !u.data?.list,\n\t);\n\n\tconst outpoints = nftUtxos.map(\n\t\t(utxo: { txid: string; vout: number }) => `${utxo.txid}_${utxo.vout}`,\n\t);\n\t// Fetch the scripts up to the limit\n\tconst nftRes = await fetch(`${API_HOST}/txos/outpoints?script=true`, {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t\tbody: JSON.stringify([...outpoints]),\n\t});\n\n\tif (!nftRes.ok) {\n\t\tthrow new Error(`Error fetching NFT scripts for ${address}`);\n\t}\n\n\tconst nfts = (await nftRes.json() || [])\n\n\tnftUtxos = nfts.map(\n\t\t(utxo: {\n\t\t\torigin: { outpoint: string };\n\t\t\tscript: string;\n\t\t\tvout: number;\n\t\t\ttxid: string;\n\t\t}) => {\n      let script = utxo.script;\n      if (scriptEncoding === \"hex\") {\n        script = Buffer.from(script, \"base64\").toString(\"hex\");\n      } else if (scriptEncoding === \"asm\") {\n        script = Script.fromHex(Buffer.from(script, \"base64\").toString(\"hex\")).toASM();\n      }\n\t\t\tconst nftUtxo = {\n\t\t\t\torigin: utxo.origin.outpoint,\n\t\t\t\tscript,\n\t\t\t\tvout: utxo.vout,\n\t\t\t\ttxid: utxo.txid,\n\t\t\t\tsatoshis: 1,\n\t\t\t} as NftUtxo;\n\t\t\tif (collectionId) {\n\t\t\t\tnftUtxo.collectionId = collectionId;\n\t\t\t}\n\t\t\treturn nftUtxo;\n\t\t},\n\t);\n\n\treturn nftUtxos as NftUtxo[];\n};\n\n/**\n * Fetches token utxos from the API\n * @param {TokenType} protocol - Token protocol. Either BSV20 or BSV21\n * @param {string} tokenId - Token id. Ticker for BSV20 and id (mint+deploy inscription origin) for BSV21\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<TokenUtxo[]>} Array of token utxos\n */\nexport const fetchTokenUtxos = async (\n\tprotocol: TokenType,\n\ttokenId: string,\n\taddress: string,\n): Promise<TokenUtxo[]> => {\n\tconst url = `${API_HOST}/bsv20/${address}/${protocol === TokenType.BSV20 ? \"tick\" : \"id\"}/${tokenId}?bsv20=true&listing=false`;\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching ${protocol} utxos`);\n\t}\n\n\t// returns a BSV20Txo but we only need a few fields\n\tlet tokenUtxos = await res.json();\n\n\ttokenUtxos = tokenUtxos.map((utxo: Partial<TokenUtxo>) => ({\n\t\tamt: utxo.amt,\n\t\tscript: utxo.script,\n\t\tvout: utxo.vout,\n\t\ttxid: utxo.txid,\n\t\tid: tokenId,\n\t\tsatoshis: 1,\n\t}));\n\n\treturn tokenUtxos as TokenUtxo[];\n};\n","import type { Transaction } from \"@bsv/sdk\";\nimport { Sigma } from \"sigma-protocol\";\nimport type { LocalSigner, RemoteSigner } from \"./types\";\n\n/**\n * Signs data in the transaction with Sigma protocol\n * @param {Transaction} tx - Transaction to sign\n * @param {LocalSigner | RemoteSigner} signer - Local or remote signer (used for data signature)\n * @returns {Transaction} Transaction with signed data\n */\nexport const signData = async (\n\ttx: Transaction,\n\tsigner: LocalSigner | RemoteSigner,\n): Promise<Transaction> => {\n\t// Sign tx if idKey or remote signer like starfish/tokenpass\n\tconst idKey = (signer as LocalSigner)?.idKey;\n\tconst keyHost = (signer as RemoteSigner)?.keyHost;\n\n\tif (idKey) {\n\t\tconst sigma = new Sigma(tx);\n\t\tconst { signedTx } = sigma.sign(idKey);\n\t\treturn signedTx;\n\t}\n\tif (keyHost) {\n\t\tconst authToken = (signer as RemoteSigner)?.authToken;\n\t\tconst sigma = new Sigma(tx);\n\t\ttry {\n\t\t\tconst { signedTx } = await sigma.remoteSign(keyHost, authToken);\n\t\t\treturn signedTx;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthrow new Error(`Remote signing to ${keyHost} failed`);\n\t\t}\n\t}\n\tthrow new Error(\"Signer must be a LocalSigner or RemoteSigner\");\n};\n","import type { MAP, PreMAP } from \"../types\";\n\nconst stringifyMetaData = (metaData?: PreMAP): MAP | undefined => {\n  if (!metaData) return undefined;\n\tconst result: MAP = {\n\t\tapp: metaData.app,\n\t\ttype: metaData.type,\n\t};\n\n\tfor (const [key, value] of Object.entries(metaData)) {\n\t\tif (value !== undefined) {\n\t\t\tif (typeof value === \"string\") {\n\t\t\t\tresult[key] = value;\n\t\t\t} else if (Array.isArray(value) || typeof value === \"object\") {\n\t\t\t\tresult[key] = JSON.stringify(value);\n\t\t\t} else {\n\t\t\t\tresult[key] = String(value);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\nexport default stringifyMetaData;\n","import { Transaction, SatoshisPerKilobyte, P2PKH, Script, Utils } from \"@bsv/sdk\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n\tUtxo,\n\tCreateOrdinalsConfig,\n\tCreateOrdinalsResult,\n\tCreateOrdinalsCollectionConfig,\n\tCreateOrdinalsCollectionItemConfig,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Creates a transaction with inscription outputs\n * @param {CreateOrdinalsConfig | CreateOrdinalsCollectionConfig | CreateOrdinalsCollectionItemConfig} config - Configuration object for creating ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {string} config.changeAddress - Optional. Address to send change to. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Local or remote signer (used for data signature)\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<CreateOrdinalsResult>} Transaction with inscription outputs\n */\nexport const createOrdinals = async (\n\tconfig:\n\t\t| CreateOrdinalsConfig\n\t\t| CreateOrdinalsCollectionConfig\n\t\t| CreateOrdinalsCollectionItemConfig,\n): Promise<CreateOrdinalsResult> => {\n\tconst {\n\t\tutxos,\n\t\tdestinations,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t} = config;\n\t\n\t// Warn if creating many inscriptions at once\n\tif (destinations.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Outputs\n\t// Add inscription outputs\n\tfor (const destination of destinations) {\n\t\tif (!destination.inscription) {\n\t\t\tthrow new Error(\"Inscription is required for all destinations\");\n\t\t}\n\n\t\t// remove any undefined fields from metadata\n\t\tif (metaData) {\n\t\t\tfor(const key of Object.keys(metaData)) {\n\t\t\t\tif (metaData[key] === undefined) {\n\t\t\t\t\tdelete metaData[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription,\n\t\t\t\tstringifyMetaData(metaData),\n\t\t\t),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\tlet payChange: Utxo | undefined;\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\n\tif(signer) {\n\t\tconst utxo = utxos.pop() as Utxo\n\t\ttx.addInput(inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t)));\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\ttx = await signData(tx, signer);\n\t}\n\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\tScript,\n\ttype TransactionOutput,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type { SendOrdinalsResult, SendOrdinalsConfig, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Sends ordinals to the given destinations\n * @param {SendOrdinalsConfig} config - Configuration object for sending ordinals\n * @param {Utxo[]} config.paymentUtxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.ordinals - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {string} config.changeAddress - Optional. Address to send change to, if any. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @param {boolean} config.enforceUniformSend - Optional. Default: true. Enforce that the number of destinations matches the number of ordinals being sent. Sending ordinals requires a 1:1 mapping of destinations to ordinals. This is only used for sub-protocols like BSV21 that manage tokens without sending the inscriptions directly.\n * @returns {Promise<SendOrdinalsResult>} Transaction, spent outpoints, and change vout\n */\nexport const sendOrdinals = async (\n\tconfig: SendOrdinalsConfig,\n): Promise<SendOrdinalsResult> => {\n\tif (!config.satsPerKb) {\n\t\tconfig.satsPerKb = DEFAULT_SAT_PER_KB;\n\t}\n\tif (!config.additionalPayments) {\n\t\tconfig.additionalPayments = [];\n\t}\n\tif (config.enforceUniformSend === undefined) {\n\t\tconfig.enforceUniformSend = true;\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(config.satsPerKb);\n\tlet tx = new Transaction();\n\tconst spentOutpoints: string[] = [];\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of config.ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(\n\t\t\tordUtxo,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tconfig.ordPk, \n\t\t\t\t\"all\",\n\t\t\t\ttrue, \n\t\t\t\tordUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(ordUtxo.script, 'base64'))\n\t\t\t),\n\t\t);\n\t\tspentOutpoints.push(`${ordUtxo.txid}_${ordUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// check that ordinals coming in matches ordinals going out if supplied\n\tif (\n\t\tconfig.enforceUniformSend &&\n\t\tconfig.destinations.length !== config.ordinals.length\n\t) {\n\t\tthrow new Error(\n\t\t\t\"Number of destinations must match number of ordinals being sent\",\n\t\t);\n\t}\n\n\t// Add ordinal outputs\n\tfor (const destination of config.destinations) {\n\t\tlet s: Script;\n\t\tif (\n\t\t\tdestination.inscription?.dataB64 &&\n\t\t\tdestination.inscription?.contentType\n\t\t) {\n\t\t\ts = new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription,\n\t\t\t\tstringifyMetaData(config.metaData),\n\t\t\t);\n\t\t} else {\n\t\t\ts = new P2PKH().lock(destination.address);\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: s,\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of config.additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of config.paymentUtxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tconfig.paymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\tspentOutpoints.push(`${utxo.txid}_${utxo.vout}`);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (totalSatsIn < totalSatsOut) {\n\t\tthrow new Error(\"Not enough ordinals to send\");\n\t}\n\n\tlet payChange: Utxo | undefined;\n\tif (totalSatsIn > totalSatsOut + BigInt(fee)) {\n\t\tconst changeScript = new P2PKH().lock(\n\t\t\tconfig.changeAddress || config.paymentPk.toAddress().toString(),\n\t\t);\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not available until the transaction is signed\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t}\n\n\tif (config.signer) {\n\t\ttx = await signData(tx, config.signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChange,\n\t};\n};\n","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype TransactionOutput,\n\tUtils,\n\tScript,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type { SendUtxosConfig, SendUtxosResult, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Sends utxos to the given destination\n * @param {SendUtxosConfig} config - Configuration object for sending utxos\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {Payment[]} config.payments - Array of payments with addresses and amounts\n * @param {number} [config.satsPerKb] - Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {string} [config.changeAddress] - Address to send change to. If not provided, defaults to paymentPk address\n * @returns {Promise<SendUtxosResult>} Transaction with utxo outputs\n */\nexport const sendUtxos = async (\n\tconfig: SendUtxosConfig,\n): Promise<SendUtxosResult> => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tpayments,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tchangeAddress = paymentPk.toAddress().toString(),\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\t// Outputs\n\tfor (const payment of payments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new P2PKH().lock(payment.to),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + (out.satoshis || 0),\n\t\t0,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\ttx.addInput(input);\n\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + fee) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + fee) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to send. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChange: Utxo | undefined;\n\tif (totalSatsIn > totalSatsOut + fee) {\n\t\t// Change\n\t\tconst changeScript = new P2PKH().lock(changeAddress);\n\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t} else if (totalSatsIn < totalSatsOut + fee) {\n\t\tconsole.log(\"No change needed\");\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\t\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTokenType,\n\ttype TransferBSV20Inscription,\n\ttype TransferTokenInscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferOrdTokensConfig,\n\ttype TransferOrdTokensResult,\n\ttype TokenUtxo,\n\ttype Utxo,\n} from \"./types\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { P2PKH, SatoshisPerKilobyte, Script, Transaction, Utils } from \"@bsv/sdk\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Transfer tokens to a destination\n * @param {TransferOrdTokensConfig} config - Configuration object for transferring tokens\n * @param {TokenType} config.protocol - Token protocol. Must be TokenType.BSV20 or TokenType.BSV21\n * @param {string} config.tokenID - Token ID. Either the tick or id value depending on the protocol\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {TokenUtxo[]} config.inputTokens - Token utxos to spend\n * @param {Distribution[]} config.distributions - Array of destinations with addresses and amounts\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {string} config.changeAddress - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {string} config.tokenChangeAddress - Optional. Address to send token change to, if any. If not provided, defaults to ordPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @param {burn} config.burn - Optional. Set to true to burn the tokens.\n * @returns {Promise<TransferOrdTokensResult>} Transaction with token transfer outputs\n */\nexport const transferOrdTokens = async (config: TransferOrdTokensConfig): Promise<TransferOrdTokensResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tinputTokens,\n\t\tdistributions,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tchangeAddress,\n\t\ttokenChangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t\tburn = false\n\t} = config;\n\n\t// calculate change amount\n\tlet changeAmt = 0n;\n\tlet totalAmtIn = 0n;\n\tlet totalAmtOut = 0n;\n\n\t// Ensure these inputs are for the expected token\n\tif (!inputTokens.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\tfor (const token of inputTokens) {\n\t\tconst inputScriptBinary = Utils.toArray(token.script, \"base64\");\n\t\tconst inputScript = Script.fromBinary(inputScriptBinary);\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\ttoken,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\ttoken.satoshis,\n\t\t\t\tinputScript,\n\t\t\t),\n\t\t));\n\t\n\t\ttotalAmtIn += BigInt(token.amt);\n\t}\n\n\t// build destination inscriptions\n\tfor (const dest of distributions) {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: burn ? \"burn\" : \"transfer\",\n\t\t\tamt: dest.amt,\n\t\t}\n\t\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\ttick: tokenID,\n\t\t\t} as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\tid: tokenID,\n\t\t\t} as TransferBSV21Inscription;\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid protocol\");\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdest.address,\n\t\t\t\t{\n\t\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\t\t\tcontentType: \"application/bsv20\",\n\t\t\t\t},\n\t\t\t),\n\t\t});\n\t\ttotalAmtOut += BigInt(dest.amt);\n\t};\n\tchangeAmt = totalAmtIn - totalAmtOut;\n\n\tlet tokenChange: TokenUtxo | undefined;\n\t// check that you have enough tokens to send and return change\n\tif (changeAmt < 0n) {\n\t\tthrow new Error(\"Not enough tokens to send\");\n\t}\n\tif (changeAmt > 0n) {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: \"transfer\",\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\ttick: tokenID,\n\t\t\t} as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\tid: tokenID,\n\t\t\t} as TransferBSV21Inscription;\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid protocol\");\n\t\t}\n\n\t\tconst lockingScript = new OrdP2PKH().lock(\n\t\t\ttokenChangeAddress || ordPk.toAddress().toString(), \n\t\t\t{\n\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString('base64'),\n\t\t\t\tcontentType: \"application/bsv-20\",\n\t\t\t}\n\t\t);\n\t\tconst vout = tx.outputs.length;\n\t\ttx.addOutput({ lockingScript, satoshis: 1 });\n\t\ttokenChange = {\n\t\t\tid: tokenID,\n\t\t\tsatoshis: 1,\n\t\t\tscript: Buffer.from(lockingScript.toBinary()).toString(\"base64\"),\n\t\t\ttxid: \"\",\n\t\t\tvout,\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst txid = tx.id(\"hex\") as string;\n\tif (tokenChange) {\n\t\ttokenChange.txid = txid;\n\t}\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t\ttokenChange,\n\t};\n};","import type { CollectionItemSubTypeData, CollectionSubTypeData } from \"./types\";\n\n/**\n * Validates sub type data\n * @param {string} subType - Sub type of the ordinals token\n * @param {string} subTypeData - Sub type data of the ordinals token\n * @returns {Error | undefined} Error if validation fails, undefined if validation passes\n */\nexport const validateSubTypeData = (\n  subType: \"collection\" | \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData | CollectionSubTypeData,\n): Error | undefined => {\n  try {\n    if (subType === \"collection\") {\n      const collectionData = subTypeData as CollectionSubTypeData;\n      if (!collectionData.description) {\n        return new Error(\"Collection description is required\");\n      }\n      if (!collectionData.quantity) {\n        return new Error(\"Collection quantity is required\");\n      }\n      if (collectionData.rarityLabels) {\n        if (!Array.isArray(collectionData.rarityLabels)) {\n          return new Error(\"Rarity labels must be an array\");\n        }\n        // make sure keys and values are strings\n        if (!collectionData.rarityLabels.every((label) => {\n          return Object.values(label).every(value => typeof value === 'string');\n        })) {\n          return new Error(`Invalid rarity labels ${collectionData.rarityLabels}`);\n        }\n      }\n      if (collectionData.traits ) {\n        if (typeof collectionData.traits !== \"object\") {\n        return new Error(\"Collection traits must be an object\");\n        }\n        if (collectionData.traits && !Object.keys(collectionData.traits).every(key => typeof key === 'string' && typeof collectionData.traits[key] === 'object')) {\n          return new Error(\"Collection traits must be a valid CollectionTraits object\");\n        }\n      }\n    }\n    if (subType === \"collectionItem\") {\n      const itemData = subTypeData as CollectionItemSubTypeData;\n      if (!itemData.collectionId) {\n        return new Error(\"Collection id is required\");\n      }\n      if (!itemData.collectionId.includes(\"_\")) {\n        return new Error(\"Collection id must be a valid outpoint\");\n      }\n      if (itemData.collectionId.split(\"_\")[0].length !== 64) {\n        return new Error(\"Collection id must contain a valid txid\");\n      }\n      if (Number.isNaN(Number.parseInt(itemData.collectionId.split(\"_\")[1]))) {\n        return new Error(\"Collection id must contain a valid vout\");\n      }\n\n      if (itemData.mintNumber && typeof itemData.mintNumber !== \"number\") {\n        return new Error(\"Mint number must be a number\");\n      }\n      if (itemData.rank && typeof itemData.rank !== \"number\") {\n        return new Error(\"Rank must be a number\");\n      }\n      if (itemData.rarityLabel && typeof itemData.rarityLabel !== \"string\") {\n        return new Error(\"Rarity label must be a string\");\n      }\n      if (itemData.traits && typeof itemData.traits !== \"object\") {\n        return new Error(\"Traits must be an object\");\n      }\n      if (itemData.attachments && !Array.isArray(itemData.attachments)) {\n        return new Error(\"Attachments must be an array\");\n      }\n    }\n    return undefined;\n  } catch (error) {\n    return new Error(\"Invalid JSON data\");\n  }\n};","import {\n\tBigNumber,\n\ttype LockingScript,\n\tOP,\n\tP2PKH,\n\ttype PrivateKey,\n\tScript,\n\ttype Transaction,\n\tTransactionSignature,\n\tUnlockingScript,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { toHex } from \"../utils/strings\";\nimport type { Inscription } from \"../types\";\n\nexport const oLockPrefix =\n\t\"2097dfd76851bf465e8f715593b217714858bbe9570ff3bd5e33840a34e20ff0262102ba79df5f8ae7604a9830f03c7933028186aede0675a16f025dc4f8be8eec0382201008ce7480da41702918d1ec8e6849ba32b4d65b1e40dc669c31a1e6306b266c0000\";\nexport const oLockSuffix =\n\t\"615179547a75537a537a537a0079537a75527a527a7575615579008763567901c161517957795779210ac407f0e4bd44bfc207355a778b046225a7068fc59ee7eda43ad905aadbffc800206c266b30e6a1319c66dc401e5bd6b432ba49688eecd118297041da8074ce081059795679615679aa0079610079517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01007e81517a75615779567956795679567961537956795479577995939521414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff00517951796151795179970079009f63007952799367007968517a75517a75517a7561527a75517a517951795296a0630079527994527a75517a6853798277527982775379012080517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01205279947f7754537993527993013051797e527e54797e58797e527e53797e52797e57797e0079517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a756100795779ac517a75517a75517a75517a75517a75517a75517a75517a75517a7561517a75517a756169587951797e58797eaa577961007982775179517958947f7551790128947f77517a75517a75618777777777777777777767557951876351795779a9876957795779ac777777777777777767006868\";\n\n/**\n * OrdLock class implementing ScriptTemplate.\n *\n * This class provides methods for interacting with OrdinalLock contract \n */\nexport default class OrdLock {\n\t/**\n\t * Creates a 1Sat Ordinal Lock script\n\t *\n\t * @param {string} ordAddress - An address which can cancel listing.\n\t * @param {string} payAddress - Address which is paid on purchase\n\t * @param {number} price - Listing price in satoshis\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\tlock(\n\t\tordAddress: string,\n\t\tpayAddress: string,\n\t\tprice: number,\n    inscription?: Inscription,\n\t): Script {\n\t\tconst cancelPkh = Utils.fromBase58Check(ordAddress).data as number[];\n\t\tconst payPkh = Utils.fromBase58Check(payAddress).data as number[];\n\n\t\tlet script = new Script()\n\t\tif (inscription?.dataB64 !== undefined && inscription?.contentType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(inscription.dataB64, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(inscription.contentType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tscript = Script.fromASM(`OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`);\n\t\t}\n\t\t\n\t\treturn script.writeScript(Script.fromHex(oLockPrefix))\n\t\t\t.writeBin(cancelPkh)\n\t\t\t.writeBin(OrdLock.buildOutput(price, new P2PKH().lock(payPkh).toBinary()))\n\t\t\t.writeScript(Script.fromHex(oLockSuffix))\n\t}\n\n\tcancelListing(\n\t\tprivateKey: PrivateKey,\n\t\tsignOutputs: 'all' | 'none' | 'single' = 'all',\n\t\tanyoneCanPay = false,\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: () => Promise<number>\n\t} {\n\t\tconst p2pkh = new P2PKH().unlock(privateKey, signOutputs, anyoneCanPay, sourceSatoshis, lockingScript)\n\t\treturn {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await p2pkh.sign(tx, inputIndex)).writeOpCode(OP.OP_1)\n\t\t\t},\n\t\t\testimateLength: async () => {\n\t\t\t\treturn 107\n\t\t\t}\n\t\t}\n\t}\n\n\tpurchaseListing(\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>\n\t} {\n\t\tconst purchase = {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\tif (tx.outputs.length < 2) {\n\t\t\t\t\tthrow new Error(\"Malformed transaction\")\n\t\t\t\t}\n\t\t\t\tconst script = new UnlockingScript()\n\t\t\t\t\t.writeBin(OrdLock.buildOutput(\n\t\t\t\t\t\ttx.outputs[0].satoshis || 0,\n\t\t\t\t\t\ttx.outputs[0].lockingScript.toBinary()\n\t\t\t\t\t))\n\t\t\t\tif(tx.outputs.length > 2) {\n\t\t\t\t\tconst writer = new Utils.Writer()\n\t\t\t\t\tfor(const output of tx.outputs.slice(2)) {\n\t\t\t\t\t\twriter.write(OrdLock.buildOutput(output.satoshis || 0, output.lockingScript.toBinary()))\n\t\t\t\t\t}\n\t\t\t\t\tscript.writeBin(writer.toArray())\n\t\t\t\t} else {\n\t\t\t\t\tscript.writeOpCode(OP.OP_0)\n\t\t\t\t}\n\n        const input = tx.inputs[inputIndex]\n        let sourceSats: number\n        if (!sourceSatoshis && input.sourceTransaction) {\n          sourceSats = input.sourceTransaction.outputs[input.sourceOutputIndex].satoshis as number\n        } else if (!sourceSatoshis) {\n          throw new Error(\"sourceTransaction or sourceSatoshis is required\")\n        }\n        sourceSats = sourceSatoshis as number\n        \n        const sourceTXID = (input.sourceTXID || input.sourceTransaction?.id('hex')) as string\n        let subscript = lockingScript as LockingScript\n        if (!lockingScript) {\n          subscript = input.sourceTransaction?.outputs[input.sourceOutputIndex].lockingScript as LockingScript\n        }\n\t\t\t\tconst preimage = TransactionSignature.format({\n\t\t\t\t\tsourceTXID,\n\t\t\t\t\tsourceOutputIndex: input.sourceOutputIndex,\n\t\t\t\t\tsourceSatoshis: sourceSats,\n\t\t\t\t\ttransactionVersion: tx.version,\n\t\t\t\t\totherInputs: [],\n\t\t\t\t\tinputIndex,\n\t\t\t\t\toutputs: tx.outputs,\n\t\t\t\t\tinputSequence: input.sequence,\n\t\t\t\t\tsubscript,\n\t\t\t\t\tlockTime: tx.lockTime,\n\t\t\t\t\tscope: TransactionSignature.SIGHASH_ALL |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_ANYONECANPAY |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_FORKID\n\t\t\t\t  });\n\n\t\t\t\treturn script.writeBin(preimage).writeOpCode(OP.OP_0)\n\t\t\t},\n\t\t\testimateLength: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await purchase.sign(tx, inputIndex)).toBinary().length\n\t\t\t}\n\t\t}\n\t\treturn purchase\n\t}\n\n\tstatic buildOutput(satoshis: number, script: number[]): number[] {\n\t\tconst writer = new Utils.Writer()\n\t\twriter.writeUInt64LEBn(new BigNumber(satoshis))\n\t\twriter.writeVarIntNum(script.length)\n\t\twriter.write(script)\n\t\treturn writer.toArray()\n\t}\n}\n","import {\n\tP2PKH,\n\tSatoshisPerKilobyte,\n\tScript,\n\tTransaction,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport {\n\ttype CreateOrdTokenListingsConfig,\n\ttype CreateOrdListingsConfig,\n\ttype Utxo,\n\ttype TransferTokenInscription,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\tTokenType,\n\ttype TokenUtxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nconst { toArray } = Utils;\n\n// TODO: Handle royalty\nexport const createOrdListings = async (config: CreateOrdListingsConfig) => {\n\tconst {\n\t\tutxos,\n\t\tlistings,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t\troyalty,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Warn if creating many inscriptions at once\n\tif (listings.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Outputs\n\t// Add listing outputs\n\tfor (const listing of listings) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdLock().lock(\n\t\t\t\tlisting.payAddress,\n\t\t\t\tlisting.ordAddress,\n\t\t\t\tlisting.price,\n\t\t\t),\n\t\t});\n\t\tconst inputScriptBinary = toArray(listing.listingUtxo.script, \"base64\");\n\t\tconst inputScript = Script.fromBinary(inputScriptBinary);\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\tlisting.listingUtxo,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlisting.listingUtxo.satoshis,\n\t\t\t\tinputScript,\n\t\t\t),\n\t\t));\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Check if change is needed\n\tlet payChange: Utxo | undefined;\n\tconst changeScript = new P2PKH().lock(\n\t\tchangeAddress || paymentPk.toAddress().toString(),\n\t);\n\tconst changeOutput = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOutput);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\nexport const createOrdTokenListings = async (\n\tconfig: CreateOrdTokenListingsConfig,\n) => {\n\tconst {\n\t\tutxos,\n\t\tprotocol,\n\t\ttokenID,\n\t\tordPk,\n\t\tpaymentPk,\n\t\tadditionalPayments = [],\n\t\tchangeAddress,\n\t\ttokenChangeAddress,\n\t\tinputTokens,\n\t\tlistings,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\n\t// Warn if creating many inscriptions at once\n\tif (listings.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Ensure these inputs are for the expected token\n\tif (!inputTokens.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\t// calculate change amount\n\tlet changeAmt = 0n;\n\tlet totalAmtIn = 0n;\n\tlet totalAmtOut = 0n;\n\n\t// Ensure these inputs are for the expected token\n\tif (!inputTokens.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\t// Outputs\n\t// Add listing outputs\n\tfor (const listing of listings) {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: \"transfer\",\n\t\t\tamt: listing.amt.toString(),\n\t\t};\n\t\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\ttick: tokenID,\n\t\t\t} as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\tid: tokenID,\n\t\t\t} as TransferBSV21Inscription;\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid protocol\");\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdLock().lock(\n\t\t\t\tlisting.payAddress,\n\t\t\t\tlisting.ordAddress,\n\t\t\t\tlisting.price,\n\t\t\t\t{\n\t\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\t\t\tcontentType: \"application/bsv20\",\n\t\t\t\t},\n\t\t\t),\n\t\t});\n\t\ttotalAmtOut += listing.amt;\n\t}\n\n\tfor (const token of inputTokens) {\n\t\tconst inputScriptBinary = toArray(token.script, \"base64\");\n\t\tconst inputScript = Script.fromBinary(inputScriptBinary);\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\ttoken,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\ttoken.satoshis,\n\t\t\t\tinputScript,\n\t\t\t),\n\t\t));\n\n\t\ttotalAmtIn += BigInt(token.amt);\n\t}\n\tchangeAmt = totalAmtIn - totalAmtOut;\n\n\tlet tokenChange: TokenUtxo | undefined;\n\t// check that you have enough tokens to send and return change\n\tif (changeAmt < 0n) {\n\t\tthrow new Error(\"Not enough tokens to send\");\n\t}\n\tif (changeAmt > 0n) {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: \"transfer\",\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\ttick: tokenID,\n\t\t\t} as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\tid: tokenID,\n\t\t\t} as TransferBSV21Inscription;\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid protocol\");\n\t\t}\n\n\t\tconst lockingScript = new OrdP2PKH().lock(tokenChangeAddress, {\n\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString('base64'),\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t});\n\t\tconst vout = tx.outputs.length;\n\t\ttx.addOutput({ lockingScript, satoshis: 1 });\n\t\ttokenChange = {\n\t\t\tid: tokenID,\n\t\t\tsatoshis: 1,\n\t\t\tscript: Buffer.from(lockingScript.toBinary()).toString(\"base64\"),\n\t\t\ttxid: \"\",\n\t\t\tvout,\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst txid = tx.id(\"hex\") as string;\n\tif (tokenChange) {\n\t\ttokenChange.txid = txid;\n\t}\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t\ttokenChange,\n\t};\n};\n","import { P2PKH, SatoshisPerKilobyte, Script, Transaction, Utils } from \"@bsv/sdk\";\nimport {\n\tTokenType,\n\ttype CancelOrdListingsConfig,\n\ttype CancelOrdTokenListingsConfig,\n\ttype Destination,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\n\nexport const cancelOrdListings = async (config: CancelOrdListingsConfig) => {\n\tconst {\n\t\tutxos,\n\t\tlistingUtxos,\n\t\tordPk,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tadditionalPayments = [],\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\n\t// Warn if creating many inscriptions at once\n\tif (listingUtxos.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\t\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinals we're cancelling\n\tfor (const listingUtxo of listingUtxos) {\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().cancelListing(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlistingUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, 'base64'))\n\t\t\t)\n\t\t));\n\t\t// Add cancel outputs returning listed ordinals\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new P2PKH().lock(ordPk.toAddress().toString()),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo, \n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpaymentPk, \n\t\t\t\t\"all\",\n\t\t\t\ttrue, \n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t\t)\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\nexport const cancelOrdTokenListings = async (\n\tconfig: CancelOrdTokenListingsConfig,\n) => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tadditionalPayments,\n\t\tlistingUtxos,\n\t\tutxos,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\t// calculate change amount\n\tlet totalAmtIn = 0;\n\n\tif (listingUtxos.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Ensure these inputs are for the expected token\n\tif (!listingUtxos.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinals we're cancelling\n\tfor (const listingUtxo of listingUtxos) {\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().cancelListing(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlistingUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, 'base64'))\n\t\t\t)\n\t\t));\n\t\ttotalAmtIn += Number.parseInt(listingUtxo.amt);\n\t}\n\n\tconst transferInscription: TransferTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"transfer\",\n\t\tamt: totalAmtIn.toString(),\n\t};\n\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\tif (protocol === TokenType.BSV20) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\ttick: tokenID,\n\t\t} as TransferBSV20Inscription;\n\t} else if (protocol === TokenType.BSV21) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\tid: tokenID,\n\t\t} as TransferBSV21Inscription;\n\t} else {\n\t\tthrow new Error(\"Invalid protocol\");\n\t}\n\n\tconst destination: Destination = {\n\t\taddress: ordAddress || ordPk.toAddress().toString(),\n\t\tinscription: {\n\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t},\n\t};\n\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\tdestination.address,\n\t\t\tdestination.inscription\n\t\t),\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};","import { P2PKH, SatoshisPerKilobyte, Script, Transaction, Utils } from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport {\n\tTokenType,\n\ttype Inscription,\n\ttype PurchaseOrdListingConfig,\n\ttype PurchaseOrdTokenListingConfig,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\n\nexport const purchaseOrdListing = async (config: PurchaseOrdListingConfig) => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tlistingUtxo,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tadditionalPayments = [],\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinal we're purchasing\n  tx.addInput({\n\t\tunlockingScriptTemplate: new OrdLock().purchaseListing(\n\t\t\t1,\n\t\t\tScript.fromHex(Buffer.from(listingUtxo.script, \"base64\").toString(\"hex\")),\n\t\t),\n\t\tsourceTXID: listingUtxo.txid,\n\t\tsourceOutputIndex: listingUtxo.vout,\n\t\tsequence: 0xffffffff,\n\t});\n\n\t// Outputs\n\t// Add the purchased output\n  tx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript: new P2PKH().lock(ordAddress),\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\nexport const purchaseOrdTokenListing = async (\n\tconfig: PurchaseOrdTokenListingConfig,\n) => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tpaymentPk,\n\t\tlistingUtxo,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinal we're purchasing\n\ttx.addInput(inputFromB64Utxo(\n\t\tlistingUtxo,\n\t\tnew OrdLock().purchaseListing(\n\t\t\t1,\n\t\t\tScript.fromHex(Buffer.from(listingUtxo.script, \"base64\").toString(\"hex\")),\n\t\t),\n\t));\n\n\t// Outputs\n\tconst transferInscription: TransferTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"transfer\",\n\t\tamt: listingUtxo.amt,\n\t};\n\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\tif (protocol === TokenType.BSV20) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\ttick: tokenID,\n\t\t} as TransferBSV20Inscription;\n\t} else if (protocol === TokenType.BSV21) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\tid: tokenID,\n\t\t} as TransferBSV21Inscription;\n\t} else {\n\t\tthrow new Error(\"Invalid protocol\");\n\t}\n\tconst dataB64 = Buffer.from(JSON.stringify(inscription)).toString(\"base64\");\n\n\t// Add the purchased output\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(ordAddress, {\n\t\t\tdataB64,\n\t\t\tcontentType: \"bsv-20\",\n\t\t}),\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase token listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n  return {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map((i) => `${i.sourceTXID}_${i.sourceOutputIndex}`),\n\t\tpayChange,\n\t};\n};\n"],"names":["TokenType","RoytaltyType","toHex","utf8Str","Buffer","from","toString","DEFAULT_SAT_PER_KB","API_HOST","OrdP2PKH","_P2PKH","apply","arguments","_inheritsLoose","prototype","lock","address","inscription","metaData","ordAsm","undefined","dataB64","contentType","ordHex","fileHex","trim","Error","fileMediaType","inscriptionAsm","P2PKH","toASM","app","type","_i","_Object$entries","Object","entries","length","_Object$entries$_i","key","value","LockingScript","fromASM","fromBase58Check","Utils","inputFromB64Utxo","utxo","unlockScriptTemplate","fromUtxo","_extends","script","fetchPayUtxos","scriptEncoding","payUrl","console","log","Promise","resolve","fetch","then","payRes","ok","json","payUtxos","filter","u","satoshis","pubKeyHash","p2pkhScript","data","map","txid","vout","toBinary","e","reject","fetchNftUtxos","collectionId","limit","offset","url","JSON","stringify","subTypeData","res","nftUtxos","outpoints","_u$data","list","method","headers","body","concat","nftRes","nfts","Script","fromHex","nftUtxo","origin","outpoint","fetchTokenUtxos","protocol","tokenId","BSV20","tokenUtxos","amt","id","signData","tx","signer","_exit","_temp2","_result","idKey","keyHost","_sigma$sign","Sigma","sign","signedTx","_temp","authToken","sigma","remoteSign","_ref","_catch","stringifyMetaData","result","Array","isArray","String","pact","state","s","_Pact","o","bind","v","_settle","observer","onFulfilled","this","_this","onRejected","_isSettledPact","thenable","createOrdinals","config","_temp4","_interrupt","totalSatsIn","totalSatsOut","BigInt","fee","modelOrFee","payChangeOutIdx","outputs","findIndex","change","changeOutput","payChange","lockingScript","spentOutpoints","utxos","_forOf","input","unlock","paymentPk","fromBinary","toArray","addInput","computeFee","_modelOrFee$computeFe","destinations","changeAddress","_config$satsPerKb","satsPerKb","_config$additionalPay","additionalPayments","warn","_step","SatoshisPerKilobyte","Transaction","_iterator","_createForOfIteratorHelperLoose","done","destination","_Object$keys","keys","addOutput","_step2","_iterator2","p","amount","to","toAddress","changeScript","reduce","total","out","_temp3","pop","_signData","sendOrdinals","changeOut","enforceUniformSend","ordinals","ordUtxo","ordPk","push","_destination$inscript","_destination$inscript2","_step3","_iterator3","array","check","_cycle","i","paymentUtxos","sendUtxos","payments","_config$changeAddress","payment","sendTxOut","_iteratorSymbol","Symbol","iterator","transferOrdTokens","tokenChange","inputs","sourceTXID","sourceOutputIndex","tokenID","inputTokens","distributions","tokenChangeAddress","_config$burn","burn","changeAmt","totalAmtIn","totalAmtOut","every","token","inputScriptBinary","inputScript","dest","transferInscription","op","tick","BSV21","target","step","next","validateSubTypeData","subType","collectionData","description","quantity","rarityLabels","label","values","traits","itemData","includes","split","Number","isNaN","parseInt","mintNumber","rank","rarityLabel","attachments","error","OrdLock","_proto","ordAddress","payAddress","price","cancelPkh","payPkh","writeScript","writeBin","buildOutput","cancelListing","privateKey","signOutputs","anyoneCanPay","sourceSatoshis","p2pkh","inputIndex","_p2pkh$sign","writeOpCode","OP","OP_1","estimateLength","purchaseListing","purchase","_input$sourceTransact","UnlockingScript","writer","Writer","slice","output","write","OP_0","sourceSats","sourceTransaction","_input$sourceTransact2","subscript","preimage","TransactionSignature","format","transactionVersion","version","otherInputs","inputSequence","sequence","lockTime","scope","SIGHASH_ALL","SIGHASH_ANYONECANPAY","SIGHASH_FORKID","_purchase$sign","writeUInt64LEBn","BigNumber","writeVarIntNum","callback","return","_fixup","TypeError","_forTo","createOrdListings","listings","listing","listingUtxo","createOrdTokenListings","_interrupt2","_config$additionalPay2","_config$satsPerKb2","_iterator4","_step4","_step5","_iterator5","_modelOrFee$computeFe2","cancelOrdListings","listingUtxos","cancelOrdTokenListings","purchaseOrdListing","unlockingScriptTemplate","purchaseOrdTokenListing"],"mappings":"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"}