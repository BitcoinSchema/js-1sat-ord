{"version":3,"file":"index.cjs","sources":["../src/utils/strings.ts","../src/types.ts","../src/constants.ts","../src/templates/ordP2pkh.ts","../src/utils/utxo.ts","../src/signData.ts","../src/utils/subtypeData.ts","../src/sendOrdinals.ts","../src/sendUtxos.ts","../src/transferOrdinals.ts","../src/templates/ordLock.ts","../src/createListings.ts","../src/cancelListings.ts","../src/purchaseOrdListing.ts","../src/createOrdinals.ts","../src/validate.ts"],"sourcesContent":["/**\n * Converts a string to its hexadecimal representation\n *\n * @param {string} utf8Str - The string to convert\n * @returns {string} The hexadecimal representation of the input string\n */\nconst toHex = (utf8Str: string): string => {\n  return Buffer.from(utf8Str).toString(\"hex\");\n};\n\nexport { toHex };\n","import type { PrivateKey, Script, Transaction } from \"@bsv/sdk\";\nimport type { AuthToken } from \"sigma-protocol\";\n\n// biome-ignore lint/complexity/noBannedTypes: Reserved for future use\ntype Signer = {};\n\nexport interface LocalSigner extends Signer {\n\tidKey: PrivateKey;\n}\n\nexport interface RemoteSigner extends Signer {\n\tkeyHost: string;\n\tauthToken?: AuthToken;\n}\n\nexport type Destination = {\n\taddress: string;\n\tinscription?: Inscription;\n};\n\n/**\n * @typedef {Object} Listing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n * @property {Utxo} listingUtxo - Utxo of the listing\n */\nexport type Listing = {\n\tpayAddress: string;\n\tprice: number;\n\tordAddress: string;\n\tlistingUtxo: Utxo;\n}\n\n/**\n * @typedef {Object} TokenListing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n * @property {TokenUtxo} listingUtxo - Utxo of the listing\n */\nexport type TokenListing = {\n\tpayAddress: string;\n\tprice: number;\n\tordAddress: string;\n\tlistingUtxo: TokenUtxo;\n}\n\n/**\n * @typedef {Object} Distribution\n * @property {string} address - Destination address. Must be a Ordinals address (BSV address for recieving 1Sat ordinals tokens).\n * @property {string} amt - Number of tokens as a string, considering decimals. Not display format. Ex. 100000000 for 1 token with 8 decimal places.\n */\nexport type Distribution = {\n\taddress: string;\n\tamt: string;\n};\n\n/**\n * @typedef {Object} Utxo\n * @property {number} satoshis - Amount in satoshis\n * @property {string} txid - Transaction id\n * @property {number} vout - Output index\n * @property {string} script - Base64 encoded locking script\n */\nexport type Utxo = {\n\tsatoshis: number;\n\ttxid: string;\n\tvout: number;\n\tscript: string;\n};\n\n/**\n * @typedef {Object} NftUtxo\n * @property {string} collectionId - Optional. Collection id of the NFT\n * @property {string} contentType - Media type of the NFT\n * @property {string} creatorBapId - Optional. Creator BAP id of the NFT\n * @property {string} origin - Origin address of the NFT\n * @property {number} satoshis - Always 1\n */\nexport interface NftUtxo extends Utxo {\n\tcollectionId?: string;\n\tcontentType: string;\n\tcreatorBapId?: string;\n\torigin: string;\n\tsatoshis: 1;\n}\n\n/**\n * @typedef {Object} TokenUtxo\n * @property {string} amt - Number of tokens as a string\n * @property {string} id - Token id -  either tick or id depending on protocol\n * @property {string} satoshis - Always 1\n */\nexport interface TokenUtxo extends Utxo {\n\tamt: string;\n\tid: string;\n\tsatoshis: 1;\n}\n\nexport type Inscription = {\n\tdataB64: string;\n\tcontentType: string;\n};\n\nexport type ImageContentType =\n\t| \"image/png\"\n\t| \"image/jpeg\"\n\t| \"image/gif\"\n\t| \"image/svg+xml\"\n\t| \"image/webp\";\n\n/**\n * @typedef {Object} IconInscription\n * @property {string} dataB64 - Base64 encoded image data. Must be a square image.\n * @property {ImageContentType} contentType - Media type of the image\n */\nexport type IconInscription = {\n\tdataB64: string;\n\tcontentType: ImageContentType;\n};\n\nexport type Payment = {\n\tto: string;\n\tamount: number;\n};\n\nexport type TokenInscription = {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\" | \"mint\" | \"deploy+mint\" | \"burn\";\n};\n\nexport interface MintTokenInscription extends TokenInscription {\n\top: \"mint\";\n}\n\nexport interface DeployMintTokenInscription extends TokenInscription {\n\top: \"deploy+mint\";\n\tsym: string;\n\ticon: string;\n}\n\nexport interface TransferTokenInscription extends TokenInscription {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\" | \"burn\";\n}\n\nexport interface TransferBSV20Inscription extends TransferTokenInscription {\n\ttick: string;\n}\n\nexport interface TransferBSV21Inscription extends TransferTokenInscription {\n\tid: string;\n}\n\nexport enum TokenType {\n\tBSV20 = \"bsv20\",\n\tBSV21 = \"bsv21\",\n}\n\nexport type CreateOrdinalsResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\n/**\n * MAP (Magic Attribute Protocol) metadata object with stringified values for writing to the blockchain\n * @typedef {Object} MAP\n * @property {string} app - Application identifier\n * @property {string} type - Metadata type\n * @property {string} [prop] - Optional. Additional metadata properties\n */\nexport type MAP = {\n\tapp: string;\n\ttype: string;\n\t[prop: string]: string;\n};\n\nexport type PreMAP = {\n\tapp: string;\n\ttype: string;\n\t[prop: string]: unknown;\n\troyalties?: Royalty[];\n\tsubTypeData?: CollectionSubTypeData | CollectionItemSubTypeData;\n};\n\nexport type CreateOrdinalsConfig = {\n\tutxos: Utxo[];\n\tdestinations: Destination[];\n\tpaymentPk: PrivateKey;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: PreMAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n};\n\nexport enum RoytaltyType {\n\tPaymail = \"paymail\",\n\tAddress = \"address\",\n\tScript = \"script\",\n}\n\n/**\n * Royalty object\n * @typedef {Object} Royalty\n * @property {RoytaltyType} type - Royalty type, string, one of \"paymail\", \"address\", \"script\"\n * @property {string} destination - Royalty destination\n * @property {string} percentage - Royalty percentage as a string float 0-1\n */\nexport type Royalty = {\n\ttype: RoytaltyType;\n\tdestination: string;\n\tpercentage: string; // string float 0-1\n};\n\nexport interface CreateOrdinalsMetadata extends PreMAP {\n\ttype: \"ord\",\n\tname: string,\n\tpreviewUrl?: string,\n}\n\nexport interface CreateOrdinalsCollectionMetadata extends CreateOrdinalsMetadata {\n\tsubType: \"collection\",\n\tsubTypeData: CollectionSubTypeData, // JSON stringified CollectionSubTypeData\n\troyalties?: Royalty[],\n};\n\nexport interface CreateOrdinalsCollectionItemMetadata extends CreateOrdinalsMetadata {\n\tsubType: \"collectionItem\",\n\tsubTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n};\n\n/**\n * Configuration object for creating an ordinals collection\n * @typedef {Object} CreateOrdinalsCollectionConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collection\"\n * @property metaData.name - Collection name\n * @property metaData.subTypeData - JSON stringified CollectionSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionConfig extends CreateOrdinalsConfig {\n\tmetaData: CreateOrdinalsCollectionMetadata\n}\n\nexport type CollectionTraits = {\n\t[trait: string]: CollectionTrait;\n};\n\nexport type CollectionTrait = {\n\tvalues: string[];\n\toccurancePercentages: string[];\n};\n\nexport type Rarity = {\n\t[key: string]: string;\n}\n\nexport type RarityLabels = Rarity[]\nexport interface CollectionSubTypeData {\n\tdescription: string;\n\tquantity: number;\n\trarityLabels: RarityLabels;\n\ttraits: CollectionTraits;\n}\n\nexport interface CreateOrdinalsCollectionItemMetadata extends PreMAP {\n\ttype: \"ord\",\n\tname: string,\n\tsubType: \"collectionItem\",\n\tsubTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n\troyalties?: Royalty[],\n\tpreviewUrl?: string,\n}\n\n/**\n * Configuration object for creating an ordinals collection item\n * @typedef {Object} CreateOrdinalsCollectionItemConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection item\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collectionItem\"\n * @property metaData.name - Collection item name\n * @property metaData.subTypeData - JSON stringified CollectionItemSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionItemConfig extends CreateOrdinalsConfig {\n\tmetaData: CreateOrdinalsCollectionItemMetadata\n}\n\n/**\n * Subtype data for an ordinals collection item\n * @typedef {Object} CollectionItemSubTypeData\n * @property {string} collectionId - Collection id\n * @property {number} mintNumner - Mint number\n * @property {number} rank - Rank\n * @property {string} rarityLabel - Rarity label\n * @property {string} traits - traits object\n * @property {string} attachments - array of attachment objects\n */\nexport interface CollectionItemSubTypeData {\n\tcollectionId: string;\n\tmintNumber?: number;\n\trank?: number;\n\trarityLabel?: RarityLabels;\n\ttraits?: CollectionItemTraits;\n\tattachments?: CollectionItemAttachment[];\n}\n\nexport type CollectionItemTraits = {\n\tname: string;\n\tvalue: string;\n\trarityLabel?: string;\n\toccurancePercentrage?: string;\n};\n\nexport type CollectionItemAttachment = {\n\tname: string;\n\tdescription?: string;\n\t\"content-type\": string;\n\turl: string;\n}\n\nexport type SendOrdinalsResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type SendOrdinalsConfig = {\n\tpaymentUtxos: Utxo[];\n\tordinals: Utxo[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tdestinations: Destination[];\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: PreMAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n\tenforceUniformSend?: boolean;\n}\n\nexport type DeployBsv21TokenResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type DeployBsv21TokenConfig = {\n\tsymbol: string;\n\ticon: string | IconInscription;\n\tutxos: Utxo[];\n\tinitialDistribution: Distribution;\n\tpaymentPk: PrivateKey;\n\tdestinationAddress: string;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[];\n};\n\nexport type SendUtxosResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type SendUtxosConfig = {\n\tutxos: Utxo[];\n\tpaymentPk: PrivateKey;\n\tpayments: Payment[];\n\tsatsPerKb?: number;\n\tchangeAddress?: string;\n};\n\nexport interface TransferOrdTokensResult extends SendOrdinalsResult {\n\ttokenChange?: TokenUtxo;\n}\n\nexport type TransferOrdTokensConfig = {\n\tprotocol: TokenType;\n\ttokenID: string;\n\tutxos: Utxo[];\n\tinputTokens: TokenUtxo[];\n\tdistributions: Distribution[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tchangeAddress?: string;\n\ttokenChangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: PreMAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n\tburn?: boolean;\n}\n\nexport type CreateOrdListingsConfig = {\n\tutxos: Utxo[];\n\tlistings: Listing[];\n\troyalty: number;\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey,\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[];\n}\n\nexport type PurchaseOrdListingConfig = {\n\tprotocol: TokenType;\n\ttokenID: string;\n\tutxos: Utxo[];\n\tpaymentPk: PrivateKey;\n\tlisting: TokenListing;\n\tordAddress: string;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[],\n}\n\nexport type PurchaseOrdTokenListingConfig = {\n\tprotocol: TokenType;\n\ttokenID: string;\n\tutxos: Utxo[];\n\tpaymentPk: PrivateKey;\n\tlistingUtxo: TokenUtxo;\n\tordAddress: string;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[],\n}\n\nexport type CancelOrdListingsConfig = {\n\tutxos: Utxo[],\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tlistingUtxos: Utxo[];\n\tadditionalPayments: Payment[];\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n}\n\nexport interface CancelOrdTokenListingsConfig extends CancelOrdListingsConfig {\n\tutxos: Utxo[],\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tlistingUtxos: TokenUtxo[];\n\tadditionalPayments: Payment[];\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tprotocol: TokenType,\n\ttokenID: string;\n\tordAddress?: string;\n}\n\nexport interface CreateOrdTokenListingsConfig {\n\tutxos: Utxo[];\n\tlistings: TokenListing[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey,\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[];\n\tprotocol: TokenType;\n\ttokenID: string;\n\tinputTokens: TokenUtxo[];\n\ttokenChangeAddress: string;\n}\n\n","export const MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\nexport const DEFAULT_SAT_PER_KB = 10;\nexport const API_HOST = \"https://ordinals.gorillapool.io/api\";","import {\n\tLockingScript,\n\tP2PKH,\n\ttype Script,\n} from \"@bsv/sdk\";\nimport type { Inscription, MAP } from \"../types\";\nimport { toHex } from \"../utils/strings\";\nimport { MAP_PREFIX } from \"../constants\";\n\n/**\n * OrdP2PKH (1Sat Ordinal + Pay To Public Key Hash) class implementing ScriptTemplate.\n *\n * This class provides methods to create an Ordinal with Pay To Public Key Hash locking and unlocking scripts. \n * It extends the standard P2PKH script template and provides a custom lock method.\n */\nexport default class OrdP2PKH extends P2PKH {\n\t/**\n\t * Creates a 1Sat Ordinal + P2PKH locking script for a given address string\n\t *\n\t * @param {string} address - An destination address for the Ordinal.\n\t * @param {Object} [inscription] - Base64 encoded file data and Content type of the file.\n\t * @param {MAP} [metaData] - (optional) MAP Metadata to be included in OP_RETURN.\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\t// unlock method inherits from p2pkh\n\tlock(\n\t\taddress: string,\n    inscription?: Inscription,\n\t\tmetaData?: MAP | undefined,\n\t): Script {\n\t\tlet ordAsm = \"\";\n\t\t// This can be omitted for reinscriptions that just update metadata\n\t\tif (inscription?.dataB64 !== undefined && inscription?.contentType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(inscription.dataB64, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(inscription.contentType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`;\n\t\t}\n\n\t\t// Create ordinal output and inscription in a single output\n\t\tconst lockingScript = new P2PKH().lock(address);\n\t\tlet inscriptionAsm = `${ordAsm ? `${ordAsm} ` : \"\"}${lockingScript.toASM()}`;\n\n\t\t// MAP.app and MAP.type keys are required\n\t\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t\t}\n\n\t\tif (metaData?.app && metaData?.type) {\n\t\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\t\tconst mapCmdValue = toHex(\"SET\");\n\t\t\tinscriptionAsm = `${inscriptionAsm} OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\t\tif (key !== \"cmd\") {\n\t\t\t\t\tinscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\n\t\t\t\t\t\tvalue as string,\n\t\t\t\t\t)}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn LockingScript.fromASM(inscriptionAsm);\n\t}\n}\n","import {\n\ttype Transaction,\n\ttype UnlockingScript,\n\tfromUtxo,\n\ttype TransactionInput,\n\tUtils,\n\tP2PKH,\n  Script,\n} from \"@bsv/sdk\";\nimport { type NftUtxo, TokenType, type TokenUtxo, type Utxo } from \"../types\";\nimport { API_HOST } from \"../constants\";\n\nconst { fromBase58Check } = Utils;\n\n/**\n * Converts a Utxo object with a base64 encoded script to a Utxo object with a hex encoded script\n * @param {Utxo} utxo - Utxo object with base64 encoded script\n * @param {Object} unlockScriptTemplate - Object with sign and estimateLength functions\n * @returns {TransactionInput} Utxo object with hex encoded script\n */\nexport const inputFromB64Utxo = (\n\tutxo: Utxo,\n\tunlockScriptTemplate: {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>;\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>;\n\t},\n): TransactionInput => {\n\tconst input = fromUtxo(\n\t\t{\n\t\t\t...utxo,\n\t\t\tscript: Buffer.from(utxo.script, \"base64\").toString(\"hex\"),\n\t\t},\n\t\tunlockScriptTemplate,\n\t);\n\treturn input;\n};\n\n/**\n * Fetches pay utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<Utxo[]>} Array of pay utxos\n */\nexport const fetchPayUtxos = async (address: string, scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\"): Promise<Utxo[]> => {\n\tconst payUrl = `${API_HOST}/txos/address/${address}/unspent?bsv20=false`;\n\tconsole.log({ payUrl });\n\tconst payRes = await fetch(payUrl);\n\tif (!payRes.ok) {\n\t\tthrow new Error(\"Error fetching pay utxos\");\n\t}\n\tlet payUtxos = await payRes.json();\n\t// exclude all 1 satoshi utxos\n\tpayUtxos = payUtxos.filter((u: { satoshis: number }) => u.satoshis !== 1);\n\n\t// Get pubkey hash from address\n\tconst pubKeyHash = fromBase58Check(address);\n\tconst p2pkhScript = new P2PKH().lock(pubKeyHash.data);\n\tpayUtxos = payUtxos.map((utxo: Partial<Utxo>) => ({\n\t\ttxid: utxo.txid,\n\t\tvout: utxo.vout,\n\t\tsatoshis: utxo.satoshis,\n\t\tscript: scriptEncoding === \"hex\" || scriptEncoding === \"base64\" ? Buffer.from(p2pkhScript.toBinary()).toString(scriptEncoding) : p2pkhScript.toASM(),\n\t}));\n\treturn payUtxos as Utxo[];\n};\n\n/**\n * Fetches NFT utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @param {string} [collectionId] - Optional. Collection id (collection insciprtion origin)\n * @param {number} [limit=10] - Optional. Number of utxos to fetch. Default is 10\n * @param {number} [offset=0] - Optional. Offset for fetching utxos. Default is 0\n * @param {string} [scriptEncoding=\"base64\"] - Optional. Encoding for the script. Default is base64. Options are hex, base64, or asm.\n * @returns {Promise<Utxo[]>} Array of NFT utxos\n */\nexport const fetchNftUtxos = async (\n\taddress: string,\n\tcollectionId?: string,\n\tlimit = 10,\n\toffset = 0,\n  scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\",\n): Promise<NftUtxo[]> => {\n\tlet url = `${API_HOST}/txos/address/${address}/unspent?limit=${limit}&offset=${offset}&`;\n\n\tif (collectionId) {\n\t\tconst query = {\n\t\t\tmap: {\n\t\t\t\tsubTypeData: { collectionId },\n\t\t\t},\n\t\t};\n\t\tconst b64Query = Buffer.from(JSON.stringify(query)).toString(\"base64\");\n\t\turl += `q=${b64Query}`;\n\t}\n\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching NFT utxos for ${address}`);\n\t}\n\n\t// Returns a BSV20Txo but we only need a few fields\n\tlet nftUtxos = await res.json();\n\n\t// Only include 1 satoshi outputs, non listings\n\tnftUtxos = nftUtxos.filter(\n\t\t(u: {\n\t\t\tsatoshis: number;\n\t\t\tdata: { list: { price: number; payout: string } | undefined } | null;\n\t\t}) => u.satoshis === 1 && !u.data?.list,\n\t);\n\n\tconst outpoints = nftUtxos.map(\n\t\t(utxo: { txid: string; vout: number }) => `${utxo.txid}_${utxo.vout}`,\n\t);\n\t// Fetch the scripts up to the limit\n\tconst nftRes = await fetch(`${API_HOST}/txos/outpoints?script=true`, {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t\tbody: JSON.stringify([...outpoints]),\n\t});\n\n\tif (!nftRes.ok) {\n\t\tthrow new Error(`Error fetching NFT scripts for ${address}`);\n\t}\n\n\tconst nfts = (await nftRes.json() || [])\n\n\tnftUtxos = nfts.map(\n\t\t(utxo: {\n\t\t\torigin: { outpoint: string };\n\t\t\tscript: string;\n\t\t\tvout: number;\n\t\t\ttxid: string;\n\t\t}) => {\n      let script = utxo.script;\n      if (scriptEncoding === \"hex\") {\n        script = Buffer.from(script, \"base64\").toString(\"hex\");\n      } else if (scriptEncoding === \"asm\") {\n        script = Script.fromHex(Buffer.from(script, \"base64\").toString(\"hex\")).toASM();\n      }\n\t\t\tconst nftUtxo = {\n\t\t\t\torigin: utxo.origin.outpoint,\n\t\t\t\tscript,\n\t\t\t\tvout: utxo.vout,\n\t\t\t\ttxid: utxo.txid,\n\t\t\t\tsatoshis: 1,\n\t\t\t} as NftUtxo;\n\t\t\tif (collectionId) {\n\t\t\t\tnftUtxo.collectionId = collectionId;\n\t\t\t}\n\t\t\treturn nftUtxo;\n\t\t},\n\t);\n\n\treturn nftUtxos as NftUtxo[];\n};\n\n/**\n * Fetches token utxos from the API\n * @param {TokenType} protocol - Token protocol. Either BSV20 or BSV21\n * @param {string} tokenId - Token id. Ticker for BSV20 and id (mint+deploy inscription origin) for BSV21\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<TokenUtxo[]>} Array of token utxos\n */\nexport const fetchTokenUtxos = async (\n\tprotocol: TokenType,\n\ttokenId: string,\n\taddress: string,\n): Promise<TokenUtxo[]> => {\n\tconst url = `${API_HOST}/bsv20/${address}/${protocol === TokenType.BSV20 ? \"tick\" : \"id\"}/${tokenId}?bsv20=true&listing=false`;\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching ${protocol} utxos`);\n\t}\n\n\t// returns a BSV20Txo but we only need a few fields\n\tlet tokenUtxos = await res.json();\n\n\ttokenUtxos = tokenUtxos.map((utxo: Partial<TokenUtxo>) => ({\n\t\tamt: utxo.amt,\n\t\tscript: utxo.script,\n\t\tvout: utxo.vout,\n\t\ttxid: utxo.txid,\n\t\tid: tokenId,\n\t\tsatoshis: 1,\n\t}));\n\n\treturn tokenUtxos as TokenUtxo[];\n};\n","import type { Transaction } from \"@bsv/sdk\";\nimport { Sigma } from \"sigma-protocol\";\nimport type { LocalSigner, RemoteSigner } from \"./types\";\n\n/**\n * Signs data in the transaction with Sigma protocol\n * @param {Transaction} tx - Transaction to sign\n * @param {LocalSigner | RemoteSigner} signer - Local or remote signer (used for data signature)\n * @returns {Transaction} Transaction with signed data\n */\nexport const signData = async (\n\ttx: Transaction,\n\tsigner: LocalSigner | RemoteSigner,\n): Promise<Transaction> => {\n\t// Sign tx if idKey or remote signer like starfish/tokenpass\n\tconst idKey = (signer as LocalSigner)?.idKey;\n\tconst keyHost = (signer as RemoteSigner)?.keyHost;\n\n\tif (idKey) {\n\t\tconst sigma = new Sigma(tx);\n\t\tconst { signedTx } = sigma.sign(idKey);\n\t\treturn signedTx;\n\t}\n\tif (keyHost) {\n\t\tconst authToken = (signer as RemoteSigner)?.authToken;\n\t\tconst sigma = new Sigma(tx);\n\t\ttry {\n\t\t\tconst { signedTx } = await sigma.remoteSign(keyHost, authToken);\n\t\t\treturn signedTx;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthrow new Error(`Remote signing to ${keyHost} failed`);\n\t\t}\n\t}\n\tthrow new Error(\"Signer must be a LocalSigner or RemoteSigner\");\n};\n","import type { MAP, PreMAP } from \"../types\";\n\nconst stringifyMetaData = (metaData?: PreMAP): MAP | undefined => {\n  if (!metaData) return undefined;\n\tconst result: MAP = {\n\t\tapp: metaData.app,\n\t\ttype: metaData.type,\n\t};\n\n\tfor (const [key, value] of Object.entries(metaData)) {\n\t\tif (value !== undefined) {\n\t\t\tif (typeof value === \"string\") {\n\t\t\t\tresult[key] = value;\n\t\t\t} else if (Array.isArray(value) || typeof value === \"object\") {\n\t\t\t\tresult[key] = JSON.stringify(value);\n\t\t\t} else {\n\t\t\t\tresult[key] = String(value);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\nexport default stringifyMetaData;\n","import {\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\tScript,\n\ttype TransactionOutput,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type { SendOrdinalsResult, SendOrdinalsConfig, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Sends ordinals to the given destinations\n * @param {SendOrdinalsConfig} config - Configuration object for sending ordinals\n * @param {Utxo[]} config.paymentUtxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.ordinals - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {string} config.changeAddress - Optional. Address to send change to, if any. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @param {boolean} config.enforceUniformSend - Optional. Default: true. Enforce that the number of destinations matches the number of ordinals being sent. Sending ordinals requires a 1:1 mapping of destinations to ordinals. This is only used for sub-protocols like BSV21 that manage tokens without sending the inscriptions directly.\n * @returns {Promise<SendOrdinalsResult>} Transaction, spent outpoints, and change vout\n */\nexport const sendOrdinals = async (\n\tconfig: SendOrdinalsConfig,\n): Promise<SendOrdinalsResult> => {\n\tif (!config.satsPerKb) {\n\t\tconfig.satsPerKb = DEFAULT_SAT_PER_KB;\n\t}\n\tif (!config.additionalPayments) {\n\t\tconfig.additionalPayments = [];\n\t}\n\tif (config.enforceUniformSend === undefined) {\n\t\tconfig.enforceUniformSend = true;\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(config.satsPerKb);\n\tlet tx = new Transaction();\n\tconst spentOutpoints: string[] = [];\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of config.ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(\n\t\t\tordUtxo,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tconfig.ordPk, \n\t\t\t\t\"all\",\n\t\t\t\ttrue, \n\t\t\t\tordUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(ordUtxo.script, 'base64'))\n\t\t\t),\n\t\t);\n\t\tspentOutpoints.push(`${ordUtxo.txid}_${ordUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// check that ordinals coming in matches ordinals going out if supplied\n\tif (\n\t\tconfig.enforceUniformSend &&\n\t\tconfig.destinations.length !== config.ordinals.length\n\t) {\n\t\tthrow new Error(\n\t\t\t\"Number of destinations must match number of ordinals being sent\",\n\t\t);\n\t}\n\n\t// Add ordinal outputs\n\tfor (const destination of config.destinations) {\n\t\tlet s: Script;\n\t\tif (\n\t\t\tdestination.inscription?.dataB64 &&\n\t\t\tdestination.inscription?.contentType\n\t\t) {\n\t\t\ts = new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription,\n\t\t\t\tstringifyMetaData(config.metaData),\n\t\t\t);\n\t\t} else {\n\t\t\ts = new P2PKH().lock(destination.address);\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: s,\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of config.additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of config.paymentUtxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tconfig.paymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\tspentOutpoints.push(`${utxo.txid}_${utxo.vout}`);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (totalSatsIn < totalSatsOut) {\n\t\tthrow new Error(\"Not enough ordinals to send\");\n\t}\n\n\tlet payChange: Utxo | undefined;\n\tif (totalSatsIn > totalSatsOut + BigInt(fee)) {\n\t\tconst changeScript = new P2PKH().lock(\n\t\t\tconfig.changeAddress || config.paymentPk.toAddress().toString(),\n\t\t);\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not available until the transaction is signed\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t}\n\n\tif (config.signer) {\n\t\ttx = await signData(tx, config.signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChange,\n\t};\n};\n","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype TransactionOutput,\n\tUtils,\n\tScript,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type { SendUtxosConfig, SendUtxosResult, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Sends utxos to the given destination\n * @param {SendUtxosConfig} config - Configuration object for sending utxos\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {Payment[]} config.payments - Array of payments with addresses and amounts\n * @param {number} [config.satsPerKb] - Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {string} [config.changeAddress] - Address to send change to. If not provided, defaults to paymentPk address\n * @returns {Promise<SendUtxosResult>} Transaction with utxo outputs\n */\nexport const sendUtxos = async (\n\tconfig: SendUtxosConfig,\n): Promise<SendUtxosResult> => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tpayments,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tchangeAddress = paymentPk.toAddress().toString(),\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\t// Outputs\n\tfor (const payment of payments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new P2PKH().lock(payment.to),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + (out.satoshis || 0),\n\t\t0,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\ttx.addInput(input);\n\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + fee) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + fee) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to send. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChange: Utxo | undefined;\n\tif (totalSatsIn > totalSatsOut + fee) {\n\t\t// Change\n\t\tconst changeScript = new P2PKH().lock(changeAddress);\n\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t} else if (totalSatsIn < totalSatsOut + fee) {\n\t\tconsole.log(\"No change needed\");\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTokenType,\n\ttype TransferBSV20Inscription,\n\ttype TransferTokenInscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferOrdTokensConfig,\n\ttype TransferOrdTokensResult,\n\ttype TokenUtxo,\n\ttype Utxo,\n} from \"./types\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { P2PKH, SatoshisPerKilobyte, Script, Transaction, Utils } from \"@bsv/sdk\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Transfer tokens to a destination\n * @param {TransferOrdTokensConfig} config - Configuration object for transferring tokens\n * @param {TokenType} config.protocol - Token protocol. Must be TokenType.BSV20 or TokenType.BSV21\n * @param {string} config.tokenID - Token ID. Either the tick or id value depending on the protocol\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {TokenUtxo[]} config.inputTokens - Token utxos to spend\n * @param {Distribution[]} config.distributions - Array of destinations with addresses and amounts\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {string} config.changeAddress - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {string} config.tokenChangeAddress - Optional. Address to send token change to, if any. If not provided, defaults to ordPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @param {burn} config.burn - Optional. Set to true to burn the tokens.\n * @returns {Promise<TransferOrdTokensResult>} Transaction with token transfer outputs\n */\nexport const transferOrdTokens = async (config: TransferOrdTokensConfig): Promise<TransferOrdTokensResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tinputTokens,\n\t\tdistributions,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tchangeAddress,\n\t\ttokenChangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t\tburn = false\n\t} = config;\n\n\t// calculate change amount\n\tlet changeAmt = 0n;\n\tlet totalAmtIn = 0n;\n\tlet totalAmtOut = 0n;\n\n\t// Ensure these inputs are for the expected token\n\tif (!inputTokens.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\tfor (const token of inputTokens) {\n\t\tconst inputScriptBinary = Utils.toArray(token.script, \"base64\");\n\t\tconst inputScript = Script.fromBinary(inputScriptBinary);\n\t\ttx.addInput({\n\t\t\tunlockingScriptTemplate: new OrdP2PKH().unlock(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\ttoken.satoshis,\n\t\t\t\tinputScript,\n\t\t\t),\n\t\t\tsourceTXID: token.txid,\n\t\t\tsourceOutputIndex: token.vout,\n\t\t\tsequence: 0xffffffff,\n\t\t});\n\n\t\ttotalAmtIn += BigInt(token.amt);\n\t}\n\n\t// build destination inscriptions\n\tfor (const dest of distributions) {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: burn ? \"burn\" : \"transfer\",\n\t\t\tamt: dest.amt,\n\t\t}\n\t\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\ttick: tokenID,\n\t\t\t} as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\tid: tokenID,\n\t\t\t} as TransferBSV21Inscription;\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid protocol\");\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdest.address,\n\t\t\t\t{\n\t\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\t\t\tcontentType: \"application/bsv20\",\n\t\t\t\t},\n\t\t\t),\n\t\t});\n\t\ttotalAmtOut += BigInt(dest.amt);\n\t};\n\tchangeAmt = totalAmtIn - totalAmtOut;\n\n\tlet tokenChange: TokenUtxo | undefined;\n\t// check that you have enough tokens to send and return change\n\tif (changeAmt < 0n) {\n\t\tthrow new Error(\"Not enough tokens to send\");\n\t}\n\tif (changeAmt > 0n) {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: \"transfer\",\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\ttick: tokenID,\n\t\t\t} as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\tid: tokenID,\n\t\t\t} as TransferBSV21Inscription;\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid protocol\");\n\t\t}\n\n\t\tconst lockingScript = new OrdP2PKH().lock(\n\t\t\ttokenChangeAddress || ordPk.toAddress().toString(), \n\t\t\t{\n\t\t\t\tdataB64: JSON.stringify(inscription),\n\t\t\t\tcontentType: \"application/bsv-20\",\n\t\t\t}\n\t\t);\n\t\tconst vout = tx.outputs.length;\n\t\ttx.addOutput({ lockingScript, satoshis: 1 });\n\t\ttokenChange = {\n\t\t\tid: tokenID,\n\t\t\tsatoshis: 1,\n\t\t\tscript: Buffer.from(lockingScript.toBinary()).toString(\"base64\"),\n\t\t\ttxid: \"\",\n\t\t\tvout,\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst txid = tx.id(\"hex\") as string;\n\tif (tokenChange) {\n\t\ttokenChange.txid = txid;\n\t}\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t\ttokenChange,\n\t};\n};","import {\n\tBigNumber,\n\ttype LockingScript,\n\tOP,\n\tP2PKH,\n\ttype PrivateKey,\n\tScript,\n\ttype Transaction,\n\tTransactionSignature,\n\tUnlockingScript,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { toHex } from \"../utils/strings\";\nimport type { Inscription } from \"../types\";\n\nexport const oLockPrefix =\n\t\"2097dfd76851bf465e8f715593b217714858bbe9570ff3bd5e33840a34e20ff0262102ba79df5f8ae7604a9830f03c7933028186aede0675a16f025dc4f8be8eec0382201008ce7480da41702918d1ec8e6849ba32b4d65b1e40dc669c31a1e6306b266c0000\";\nexport const oLockSuffix =\n\t\"615179547a75537a537a537a0079537a75527a527a7575615579008763567901c161517957795779210ac407f0e4bd44bfc207355a778b046225a7068fc59ee7eda43ad905aadbffc800206c266b30e6a1319c66dc401e5bd6b432ba49688eecd118297041da8074ce081059795679615679aa0079610079517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01007e81517a75615779567956795679567961537956795479577995939521414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff00517951796151795179970079009f63007952799367007968517a75517a75517a7561527a75517a517951795296a0630079527994527a75517a6853798277527982775379012080517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01205279947f7754537993527993013051797e527e54797e58797e527e53797e52797e57797e0079517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a756100795779ac517a75517a75517a75517a75517a75517a75517a75517a75517a7561517a75517a756169587951797e58797eaa577961007982775179517958947f7551790128947f77517a75517a75618777777777777777777767557951876351795779a9876957795779ac777777777777777767006868\";\n\n/**\n * OrdLock class implementing ScriptTemplate.\n *\n * This class provides methods for interacting with OrdinalLock contract \n */\nexport default class OrdLock {\n\t/**\n\t * Creates a 1Sat Ordinal Lock script\n\t *\n\t * @param {string} ordAddress - An address which can cancel listing.\n\t * @param {string} payAddress - Address which is paid on purchase\n\t * @param {number} price - Listing price in satoshis\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\tlock(\n\t\tordAddress: string,\n\t\tpayAddress: string,\n\t\tprice: number,\n    inscription?: Inscription,\n\t): Script {\n\t\tconst cancelPkh = Utils.fromBase58Check(ordAddress).data as number[];\n\t\tconst payPkh = Utils.fromBase58Check(payAddress).data as number[];\n\n\t\tlet script = new Script()\n\t\tif (inscription?.dataB64 !== undefined && inscription?.contentType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(inscription.dataB64, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(inscription.contentType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tscript = Script.fromASM(`OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`);\n\t\t}\n\t\t\n\t\treturn script.writeScript(Script.fromHex(oLockPrefix))\n\t\t\t.writeBin(cancelPkh)\n\t\t\t.writeBin(OrdLock.buildOutput(price, new P2PKH().lock(payPkh).toBinary()))\n\t\t\t.writeScript(Script.fromHex(oLockSuffix))\n\t}\n\n\tcancelListing(\n\t\tprivateKey: PrivateKey,\n\t\tsignOutputs: 'all' | 'none' | 'single' = 'all',\n\t\tanyoneCanPay = false,\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: () => Promise<number>\n\t} {\n\t\tconst p2pkh = new P2PKH().unlock(privateKey, signOutputs, anyoneCanPay, sourceSatoshis, lockingScript)\n\t\treturn {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await p2pkh.sign(tx, inputIndex)).writeOpCode(OP.OP_1)\n\t\t\t},\n\t\t\testimateLength: async () => {\n\t\t\t\treturn 107\n\t\t\t}\n\t\t}\n\t}\n\n\tpurchaseListing(\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>\n\t} {\n\t\tconst purchase = {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\tif (tx.outputs.length < 2) {\n\t\t\t\t\tthrow new Error(\"Malformed transaction\")\n\t\t\t\t}\n\t\t\t\tconst script = new UnlockingScript()\n\t\t\t\t\t.writeBin(OrdLock.buildOutput(\n\t\t\t\t\t\ttx.outputs[0].satoshis || 0,\n\t\t\t\t\t\ttx.outputs[0].lockingScript.toBinary()\n\t\t\t\t\t))\n\t\t\t\tif(tx.outputs.length > 2) {\n\t\t\t\t\tconst writer = new Utils.Writer()\n\t\t\t\t\tfor(const output of tx.outputs.slice(2)) {\n\t\t\t\t\t\twriter.write(OrdLock.buildOutput(output.satoshis || 0, output.lockingScript.toBinary()))\n\t\t\t\t\t}\n\t\t\t\t\tscript.writeBin(writer.toArray())\n\t\t\t\t} else {\n\t\t\t\t\tscript.writeOpCode(OP.OP_0)\n\t\t\t\t}\n\n        const input = tx.inputs[inputIndex]\n        let sourceSats: number\n        if (!sourceSatoshis && input.sourceTransaction) {\n          sourceSats = input.sourceTransaction.outputs[input.sourceOutputIndex].satoshis as number\n        } else if (!sourceSatoshis) {\n          throw new Error(\"sourceTransaction or sourceSatoshis is required\")\n        }\n        sourceSats = sourceSatoshis as number\n        \n        const sourceTXID = (input.sourceTXID || input.sourceTransaction?.id('hex')) as string\n        let subscript = lockingScript as LockingScript\n        if (!lockingScript) {\n          subscript = input.sourceTransaction?.outputs[input.sourceOutputIndex].lockingScript as LockingScript\n        }\n\t\t\t\tconst preimage = TransactionSignature.format({\n\t\t\t\t\tsourceTXID,\n\t\t\t\t\tsourceOutputIndex: input.sourceOutputIndex,\n\t\t\t\t\tsourceSatoshis: sourceSats,\n\t\t\t\t\ttransactionVersion: tx.version,\n\t\t\t\t\totherInputs: [],\n\t\t\t\t\tinputIndex,\n\t\t\t\t\toutputs: tx.outputs,\n\t\t\t\t\tinputSequence: input.sequence,\n\t\t\t\t\tsubscript,\n\t\t\t\t\tlockTime: tx.lockTime,\n\t\t\t\t\tscope: TransactionSignature.SIGHASH_ALL |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_ANYONECANPAY |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_FORKID\n\t\t\t\t  });\n\n\t\t\t\treturn script.writeBin(preimage).writeOpCode(OP.OP_0)\n\t\t\t},\n\t\t\testimateLength: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await purchase.sign(tx, inputIndex)).toBinary().length\n\t\t\t}\n\t\t}\n\t\treturn purchase\n\t}\n\n\tstatic buildOutput(satoshis: number, script: number[]): number[] {\n\t\tconst writer = new Utils.Writer()\n\t\twriter.writeUInt64LEBn(new BigNumber(satoshis))\n\t\twriter.writeVarIntNum(script.length)\n\t\twriter.write(script)\n\t\treturn writer.toArray()\n\t}\n}\n","import {\n\tP2PKH,\n\tSatoshisPerKilobyte,\n\tScript,\n\tTransaction,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport {\n\ttype CreateOrdTokenListingsConfig,\n\ttype CreateOrdListingsConfig,\n\ttype Utxo,\n\ttype TransferTokenInscription,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\tTokenType,\n\ttype TokenUtxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nconst { toArray } = Utils;\n\n// TODO: Handle royalty\nexport const createOrdListings = async (config: CreateOrdListingsConfig) => {\n\tconst {\n\t\tutxos,\n\t\tlistings,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t\troyalty,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Warn if creating many inscriptions at once\n\tif (listings.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Outputs\n\t// Add listing outputs\n\tfor (const listing of listings) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdLock().lock(\n\t\t\t\tlisting.payAddress,\n\t\t\t\tlisting.ordAddress,\n\t\t\t\tlisting.price,\n\t\t\t),\n\t\t});\n\t\tconst inputScriptBinary = toArray(listing.listingUtxo.script, \"base64\");\n\t\tconst inputScript = Script.fromBinary(inputScriptBinary);\n\t\ttx.addInput({\n\t\t\tunlockingScriptTemplate: new OrdP2PKH().unlock(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlisting.listingUtxo.satoshis,\n\t\t\t\tinputScript,\n\t\t\t),\n\t\t\tsourceTXID: listing.listingUtxo.txid,\n\t\t\tsourceOutputIndex: listing.listingUtxo.vout,\n\t\t\tsequence: 0xffffffff,\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Check if change is needed\n\tlet payChange: Utxo | undefined;\n\tconst changeScript = new P2PKH().lock(\n\t\tchangeAddress || paymentPk.toAddress().toString(),\n\t);\n\tconst changeOutput = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOutput);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\nexport const createOrdTokenListings = async (\n\tconfig: CreateOrdTokenListingsConfig,\n) => {\n\tconst {\n\t\tutxos,\n\t\tprotocol,\n\t\ttokenID,\n\t\tordPk,\n\t\tpaymentPk,\n\t\tadditionalPayments = [],\n\t\tchangeAddress,\n\t\ttokenChangeAddress,\n\t\tinputTokens,\n\t\tlistings,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\n\t// Warn if creating many inscriptions at once\n\tif (listings.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Ensure these inputs are for the expected token\n\tif (!inputTokens.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\t// calculate change amount\n\tlet changeAmt = 0n;\n\tlet totalAmtIn = 0n;\n\tlet totalAmtOut = 0n;\n\n\t// Ensure these inputs are for the expected token\n\tif (!inputTokens.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\t// Outputs\n\t// Add listing outputs\n\tfor (const listing of listings) {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: \"transfer\",\n\t\t\tamt: listing.listingUtxo.amt,\n\t\t};\n\t\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\ttick: tokenID,\n\t\t\t} as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\tid: tokenID,\n\t\t\t} as TransferBSV21Inscription;\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid protocol\");\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdLock().lock(\n\t\t\t\tlisting.payAddress,\n\t\t\t\tlisting.ordAddress,\n\t\t\t\tlisting.price,\n\t\t\t\t{\n\t\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\t\t\tcontentType: \"application/bsv20\",\n\t\t\t\t},\n\t\t\t),\n\t\t});\n\t\ttotalAmtOut += BigInt(listing.listingUtxo.amt);\n\t}\n\n\tfor (const token of inputTokens) {\n\t\tconst inputScriptBinary = toArray(token.script, \"base64\");\n\t\tconst inputScript = Script.fromBinary(inputScriptBinary);\n\t\ttx.addInput({\n\t\t\tunlockingScriptTemplate: new OrdP2PKH().unlock(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\ttoken.satoshis,\n\t\t\t\tinputScript,\n\t\t\t),\n\t\t\tsourceTXID: token.txid,\n\t\t\tsourceOutputIndex: token.vout,\n\t\t\tsequence: 0xffffffff,\n\t\t});\n\n\t\ttotalAmtIn += BigInt(token.amt);\n\t}\n\tchangeAmt = totalAmtIn - totalAmtOut;\n\n\tlet tokenChange: TokenUtxo | undefined;\n\t// check that you have enough tokens to send and return change\n\tif (changeAmt < 0n) {\n\t\tthrow new Error(\"Not enough tokens to send\");\n\t}\n\tif (changeAmt > 0n) {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: \"transfer\",\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\ttick: tokenID,\n\t\t\t} as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\tid: tokenID,\n\t\t\t} as TransferBSV21Inscription;\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid protocol\");\n\t\t}\n\n\t\tconst lockingScript = new OrdP2PKH().lock(tokenChangeAddress, {\n\t\t\tdataB64: JSON.stringify(inscription),\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t});\n\t\tconst vout = tx.outputs.length;\n\t\ttx.addOutput({ lockingScript, satoshis: 1 });\n\t\ttokenChange = {\n\t\t\tid: tokenID,\n\t\t\tsatoshis: 1,\n\t\t\tscript: Buffer.from(lockingScript.toBinary()).toString(\"base64\"),\n\t\t\ttxid: \"\",\n\t\t\tvout,\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst txid = tx.id(\"hex\") as string;\n\tif (tokenChange) {\n\t\ttokenChange.txid = txid;\n\t}\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t\ttokenChange,\n\t};\n};\n","import { P2PKH, SatoshisPerKilobyte, Script, Transaction, Utils } from \"@bsv/sdk\";\nimport {\n\tTokenType,\n\ttype CancelOrdListingsConfig,\n\ttype CancelOrdTokenListingsConfig,\n\ttype Destination,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\n\nexport const cancelOrdListings = async (config: CancelOrdListingsConfig) => {\n\tconst {\n\t\tutxos,\n\t\tlistingUtxos,\n\t\tordPk,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tadditionalPayments,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\n\t// Warn if creating many inscriptions at once\n\tif (listingUtxos.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\t\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinals we're cancelling\n\tfor (const listingUtxo of listingUtxos) {\n\t\ttx.addInput({\n\t\t\tsourceTXID: listingUtxo.txid,\n\t\t\tunlockingScriptTemplate: new OrdLock().cancelListing(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlistingUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, 'base64'))\n\t\t\t),\n\t\t\tsourceOutputIndex: listingUtxo.vout,\n\t\t\tsequence: 0xffffffff,\n\t\t});\n\t\t// Add cancel outputs returning listed ordinals\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new P2PKH().lock(ordPk.toAddress().toString()),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo, \n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpaymentPk, \n\t\t\t\t\"all\",\n\t\t\t\ttrue, \n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t\t)\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\nexport const cancelOrdTokenListings = async (\n\tconfig: CancelOrdTokenListingsConfig,\n) => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tadditionalPayments,\n\t\tlistingUtxos,\n\t\tutxos,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\t// calculate change amount\n\tlet totalAmtIn = 0;\n\n\tif (listingUtxos.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Ensure these inputs are for the expected token\n\tif (!listingUtxos.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinals we're cancelling\n\tfor (const listingUtxo of listingUtxos) {\n\t\ttx.addInput({\n\t\t\tsourceTXID: listingUtxo.txid,\n\t\t\tsourceOutputIndex: listingUtxo.vout,\n\t\t\tsequence: 0xffffffff,\n\t\t\tunlockingScriptTemplate: new OrdLock().cancelListing(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlistingUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, 'base64'))\n\t\t\t),\n\t\t});\n\t\ttotalAmtIn += Number.parseInt(listingUtxo.amt);\n\t}\n\n\tconst transferInscription: TransferTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"transfer\",\n\t\tamt: totalAmtIn.toString(),\n\t};\n\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\tif (protocol === TokenType.BSV20) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\ttick: tokenID,\n\t\t} as TransferBSV20Inscription;\n\t} else if (protocol === TokenType.BSV21) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\tid: tokenID,\n\t\t} as TransferBSV21Inscription;\n\t} else {\n\t\tthrow new Error(\"Invalid protocol\");\n\t}\n\n\tconst destination: Destination = {\n\t\taddress: ordAddress || ordPk.toAddress().toString(),\n\t\tinscription: {\n\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t},\n\t};\n\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\tdestination.address,\n\t\t\tdestination.inscription\n\t\t),\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};","import { P2PKH, SatoshisPerKilobyte, Script, Transaction, Utils } from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport {\n\tTokenType,\n\ttype Inscription,\n\ttype PurchaseOrdListingConfig,\n\ttype PurchaseOrdTokenListingConfig,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\n\nexport const purchaseOrdListings = async (config: PurchaseOrdListingConfig) => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tpaymentPk,\n\t\tlisting,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tadditionalPayments = [],\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinal we're purchasing\n\ttx.addInput({\n\t\tunlockingScriptTemplate: new OrdLock().purchaseListing(\n\t\t\tlisting.listingUtxo.satoshis,\n\t\t\tScript.fromHex(Buffer.from(listing.listingUtxo.script, \"base64\").toString(\"hex\")),\n\t\t),\n\t\tsourceTXID: listing.listingUtxo.txid,\n\t\tsourceOutputIndex: listing.listingUtxo.vout,\n\t\tsequence: 0xffffffff,\n\t});\n\n\t// Outputs\n\t// Add the purchased output\n\tconst transferInscription: TransferTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"transfer\",\n\t\tamt: listing.listingUtxo.amt,\n\t};\n\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\tif (protocol === TokenType.BSV20) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\ttick: tokenID,\n\t\t} as TransferBSV20Inscription;\n\t} else if (protocol === TokenType.BSV21) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\tid: tokenID,\n\t\t} as TransferBSV21Inscription;\n\t} else {\n\t\tthrow new Error(\"Invalid protocol\");\n\t}\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(ordAddress, {\n\t\t\tdataB64: JSON.stringify(inscription),\n\t\t\tcontentType: \"application/bsv-20\"\n\t\t}),\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\nexport const purchaseOrdTokenListing = async (\n\tconfig: PurchaseOrdTokenListingConfig,\n) => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tpaymentPk,\n\t\tlistingUtxo,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinal we're purchasing\n\ttx.addInput({\n\t\tunlockingScriptTemplate: new OrdLock().purchaseListing(\n\t\t\t1,\n\t\t\tScript.fromHex(Buffer.from(listingUtxo.script, \"base64\").toString(\"hex\")),\n\t\t),\n\t\tsourceTXID: listingUtxo.txid,\n\t\tsourceOutputIndex: listingUtxo.vout,\n\t\tsequence: 0xffffffff,\n\t});\n\t// Outputs\n\tconst transferInscription: TransferTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"transfer\",\n\t\tamt: listingUtxo.amt,\n\t};\n\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\tif (protocol === TokenType.BSV20) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\ttick: tokenID,\n\t\t} as TransferBSV20Inscription;\n\t} else if (protocol === TokenType.BSV21) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\tid: tokenID,\n\t\t} as TransferBSV21Inscription;\n\t} else {\n\t\tthrow new Error(\"Invalid protocol\");\n\t}\n\tconst dataB64 = Buffer.from(JSON.stringify(inscription)).toString(\"base64\");\n\n\t// Add the purchased output\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(ordAddress, {\n\t\t\tdataB64,\n\t\t\tcontentType: \"bsv-20\",\n\t\t}),\n\t});\n\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase token listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n  return {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import { Transaction, SatoshisPerKilobyte, P2PKH, Script, Utils } from \"@bsv/sdk\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n\tUtxo,\n\tCreateOrdinalsConfig,\n\tCreateOrdinalsResult,\n\tCreateOrdinalsCollectionConfig,\n\tCreateOrdinalsCollectionItemConfig,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Creates a transaction with inscription outputs\n * @param {CreateOrdinalsConfig | CreateOrdinalsCollectionConfig | CreateOrdinalsCollectionItemConfig} config - Configuration object for creating ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {string} config.changeAddress - Optional. Address to send change to. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Local or remote signer (used for data signature)\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<CreateOrdinalsResult>} Transaction with inscription outputs\n */\nexport const createOrdinals = async (\n\tconfig:\n\t\t| CreateOrdinalsConfig\n\t\t| CreateOrdinalsCollectionConfig\n\t\t| CreateOrdinalsCollectionItemConfig,\n): Promise<CreateOrdinalsResult> => {\n\tconst {\n\t\tutxos,\n\t\tdestinations,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Inputs\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\ttx.addInput(input);\n\t}\n\n\t// Warn if creating many inscriptions at once\n\tif (destinations.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Outputs\n\t// Add inscription outputs\n\tfor (const destination of destinations) {\n\t\tif (!destination.inscription) {\n\t\t\tthrow new Error(\"Inscription is required for all destinations\");\n\t\t}\n\n\t\t// remove any undefined fields from metadata\n\t\tif (metaData) {\n\t\t\tfor(const key of Object.keys(metaData)) {\n\t\t\t\tif (metaData[key] === undefined) {\n\t\t\t\t\tdelete metaData[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription,\n\t\t\t\tstringifyMetaData(metaData),\n\t\t\t),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Calculate total input and output amounts\n\tconst totalInput = utxos.reduce(\n\t\t(sum, utxo) => sum + BigInt(utxo.satoshis),\n\t\t0n,\n\t);\n\tconst totalOutput = tx.outputs.reduce(\n\t\t(sum, output) => sum + BigInt(output.satoshis || 0),\n\t\t0n,\n\t);\n\n\t// Estimate fee\n\tconst estimatedFee = await modelOrFee.computeFee(tx);\n\n\t// Check if change is needed\n\tlet payChange: Utxo | undefined;\n\tif (totalInput > totalOutput + BigInt(estimatedFee)) {\n\t\tconst changeScript = new P2PKH().lock(\n\t\t\tchangeAddress || paymentPk.toAddress().toString(),\n\t\t);\n\t\tconst changeOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\t// Add change output\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet,\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\n\t\ttx.addOutput(changeOutput);\n\t}\n\n\tif (signer) {\n\t\ttx = await signData(tx, signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import type { CollectionItemSubTypeData, CollectionSubTypeData } from \"./types\";\n\n/**\n * Validates sub type data\n * @param {string} subType - Sub type of the ordinals token\n * @param {string} subTypeData - Sub type data of the ordinals token\n * @returns {Error | undefined} Error if validation fails, undefined if validation passes\n */\nexport const validateSubTypeData = (\n  subType: \"collection\" | \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData | CollectionSubTypeData,\n): Error | undefined => {\n  try {\n    if (subType === \"collection\") {\n      const collectionData = subTypeData as CollectionSubTypeData;\n      if (!collectionData.description) {\n        return new Error(\"Collection description is required\");\n      }\n      if (!collectionData.quantity) {\n        return new Error(\"Collection quantity is required\");\n      }\n      if (collectionData.rarityLabels) {\n        if (!Array.isArray(collectionData.rarityLabels)) {\n          return new Error(\"Rarity labels must be an array\");\n        }\n        // make sure keys and values are strings\n        if (!collectionData.rarityLabels.every((label) => {\n          return Object.values(label).every(value => typeof value === 'string');\n        })) {\n          return new Error(`Invalid rarity labels ${collectionData.rarityLabels}`);\n        }\n      }\n      if (collectionData.traits ) {\n        if (typeof collectionData.traits !== \"object\") {\n        return new Error(\"Collection traits must be an object\");\n        }\n        if (collectionData.traits && !Object.keys(collectionData.traits).every(key => typeof key === 'string' && typeof collectionData.traits[key] === 'object')) {\n          return new Error(\"Collection traits must be a valid CollectionTraits object\");\n        }\n      }\n    }\n    if (subType === \"collectionItem\") {\n      const itemData = subTypeData as CollectionItemSubTypeData;\n      if (!itemData.collectionId) {\n        return new Error(\"Collection id is required\");\n      }\n      if (!itemData.collectionId.includes(\"_\")) {\n        return new Error(\"Collection id must be a valid outpoint\");\n      }\n      if (itemData.collectionId.split(\"_\")[0].length !== 64) {\n        return new Error(\"Collection id must contain a valid txid\");\n      }\n      if (Number.isNaN(Number.parseInt(itemData.collectionId.split(\"_\")[1]))) {\n        return new Error(\"Collection id must contain a valid vout\");\n      }\n\n      if (itemData.mintNumber && typeof itemData.mintNumber !== \"number\") {\n        return new Error(\"Mint number must be a number\");\n      }\n      if (itemData.rank && typeof itemData.rank !== \"number\") {\n        return new Error(\"Rank must be a number\");\n      }\n      if (itemData.rarityLabel && typeof itemData.rarityLabel !== \"string\") {\n        return new Error(\"Rarity label must be a string\");\n      }\n      if (itemData.traits && typeof itemData.traits !== \"object\") {\n        return new Error(\"Traits must be an object\");\n      }\n      if (itemData.attachments && !Array.isArray(itemData.attachments)) {\n        return new Error(\"Attachments must be an array\");\n      }\n    }\n    return undefined;\n  } catch (error) {\n    return new Error(\"Invalid JSON data\");\n  }\n};"],"names":["TokenType","RoytaltyType","toHex","utf8Str","Buffer","from","toString","DEFAULT_SAT_PER_KB","API_HOST","OrdP2PKH","_P2PKH","apply","arguments","_inheritsLoose","prototype","lock","address","inscription","metaData","ordAsm","undefined","dataB64","contentType","ordHex","fileHex","trim","Error","fileMediaType","inscriptionAsm","P2PKH","toASM","app","type","_i","_Object$entries","Object","entries","length","_Object$entries$_i","key","value","LockingScript","fromASM","fromBase58Check","Utils","inputFromB64Utxo","utxo","unlockScriptTemplate","fromUtxo","_extends","script","signData","tx","signer","_exit","_temp2","_result","idKey","keyHost","_sigma$sign","Sigma","sign","Promise","resolve","signedTx","_temp","authToken","sigma","remoteSign","then","_ref","_catch","e","console","log","reject","stringifyMetaData","result","Array","isArray","JSON","stringify","String","_settle","pact","state","s","_Pact","o","bind","v","onFulfilled","this","_this","onRejected","_isSettledPact","thenable","observer","_iteratorSymbol","Symbol","iterator","OrdLock","_proto","ordAddress","payAddress","price","cancelPkh","data","payPkh","Script","writeScript","fromHex","writeBin","buildOutput","toBinary","cancelListing","privateKey","signOutputs","anyoneCanPay","sourceSatoshis","lockingScript","p2pkh","unlock","inputIndex","_p2pkh$sign","writeOpCode","OP","OP_1","estimateLength","purchaseListing","purchase","_input$sourceTransact","outputs","UnlockingScript","satoshis","_step","writer","Writer","_iterator","_createForOfIteratorHelperLoose","slice","done","output","write","toArray","OP_0","sourceSats","input","inputs","sourceTransaction","sourceOutputIndex","_input$sourceTransact2","sourceTXID","id","subscript","preimage","TransactionSignature","format","transactionVersion","version","otherInputs","inputSequence","sequence","lockTime","scope","SIGHASH_ALL","SIGHASH_ANYONECANPAY","SIGHASH_FORKID","_purchase$sign","writeUInt64LEBn","BigNumber","writeVarIntNum","callback","config","_interrupt","totalSatsIn","totalSatsOut","BigInt","fee","modelOrFee","payChangeOutIdx","findIndex","change","changeOutput","payChange","txid","vout","spentOutpoints","map","i","utxos","listingUtxos","ordPk","paymentPk","changeAddress","additionalPayments","_config$satsPerKb","satsPerKb","warn","SatoshisPerKilobyte","Transaction","listingUtxo","addInput","unlockingScriptTemplate","fromBinary","addOutput","toAddress","_iterator2","_step2","p","amount","to","changeScript","reduce","total","out","target","body","step","_cycle","next","check","array","_forOf","computeFee","_modelOrFee$computeFe","listings","_config$additionalPay","listing","inputScriptBinary","inputScript","return","_fixup","TypeError","values","push","_forTo","destinations","destination","_Object$keys","keys","_iterator3","_step3","totalInput","sum","totalOutput","estimatedFee","_signData","collectionId","limit","offset","scriptEncoding","url","subTypeData","fetch","res","ok","json","nftUtxos","outpoints","filter","u","_u$data","list","method","headers","concat","nftRes","nfts","nftUtxo","origin","outpoint","payUrl","payRes","payUtxos","pubKeyHash","p2pkhScript","protocol","tokenId","BSV20","tokenUtxos","amt","tokenID","transferInscription","op","tick","BSV21","_temp4","changeOut","enforceUniformSend","ordinals","ordUtxo","_destination$inscript","_destination$inscript2","_temp3","paymentUtxos","payments","_config$changeAddress","payment","sendTxOut","tokenChange","inputTokens","distributions","tokenChangeAddress","_config$burn","burn","changeAmt","totalAmtIn","totalAmtOut","every","token","dest","subType","collectionData","description","quantity","rarityLabels","label","traits","itemData","includes","split","Number","isNaN","parseInt","mintNumber","rank","rarityLabel","attachments","error"],"mappings":"2qCAMA,ICuJYA,EA2CAC,EDlMNC,EAAQ,SAACC,GACb,OAAOC,OAAOC,KAAKF,GAASG,SAAS,MACvC,EEPaC,EAAqB,GACrBC,EAAW,sCCaHC,eAASC,SAAAA,YAAAD,IAAA,OAAAC,EAAAC,MAAAC,KAAAA,YAAAC,IAAAA,kBAAAH,KAAAD,yEAAAA,EAAAK,UAU7BC,KAAA,SACCC,EACEC,EACFC,GAEA,IAAIC,EAAS,GAEb,QAA6BC,KAAzBH,MAAAA,OAAAA,EAAAA,EAAaI,eAAsDD,WAA7BH,SAAAA,EAAaK,aAA2B,CACjF,IAAMC,EAASrB,EAAM,OAEfsB,EADWpB,OAAOC,KAAKY,EAAYI,QAAS,UACzBf,SAAS,OAAOmB,OACzC,IAAKD,EACJ,UAAUE,MAAM,qBAEjB,IAAMC,EAAgBzB,EAAMe,EAAYK,aACxC,IAAKK,EACJ,UAAUD,MAAM,sBAEjBP,gBAAuBI,EAAM,SAASI,EAAsBH,SAAAA,aAC7D,CAGA,IACII,GAAoBT,EAAYA,EAAY,IAAA,KAD1B,IAAIU,SAAQd,KAAKC,GAC4Bc,QAGnE,GAAIZ,KAAcA,EAASa,MAAQb,EAASc,MAC3C,MAAM,IAAIN,MAAM,4CAGjB,GAAIR,MAAAA,GAAAA,EAAUa,KAAOb,MAAAA,GAAAA,EAAUc,KAAM,CAGpCJ,EAAoBA,EAAc,cAFb1B,EDxDE,sCC0DqC,IADxCA,EAAM,OAG1B,IAAA,IAAA+B,EAAA,EAAAC,EAA2BC,OAAOC,QAAQlB,GAASe,EAAAC,EAAAG,OAAAJ,IAAE,CAAhD,IAAAK,EAAAJ,EAAAD,GAAOM,EAAGD,EAAEE,GAAAA,EAAKF,KACT,QAARC,IACHX,EAAoBA,MAAkB1B,EAAMqC,GAAI,IAAIrC,EACnDsC,GAGH,CACD,CAEA,OAAOC,EAAaA,cAACC,QAAQd,EAC9B,EAACnB,CAAA,CAvD4BC,CAAQmB,EAAKA,OF8I/B7B,QAAAA,eAAAA,GAAAA,EAAAA,QAASA,YAATA,QAASA,UAGpB,CAAA,IAFA,MAAA,QACAA,EAAA,MAAA,QAyCWC,6BAAAA,EAAAA,QAAAA,eAAAA,QAAAA,aAIX,CAAA,IAHA,QAAA,UACAA,EAAA,QAAA,UACAA,EAAA,OAAA,SG/LD,IAAQ0C,EAAoBC,EAAKA,MAAzBD,gBAQKE,EAAmB,SAC/BC,EACAC,GAYA,OAPcC,EAAAA,SAAQC,KAEjBH,EAAI,CACPI,OAAQ9C,OAAOC,KAAKyC,EAAKI,OAAQ,UAAU5C,SAAS,SAErDyC,EAGF,ECzBaI,WACZC,EACAC,GACyB,IAAA,IAqBuCC,EArBvCC,EAAA,SAAAC,GAAAF,GAAAA,EAAAE,OAAAA,EAqBzB,MAAU,IAAA9B,MAAM,+CAAgD,EAnB1D+B,EAASJ,MAAAA,OAAAA,EAAAA,EAAwBI,MACjCC,EAAWL,MAAAA,OAAAA,EAAAA,EAAyBK,QAE1C,GAAID,EAAO,CACV,IACAE,EADc,IAAIC,QAAMR,GACGS,KAAKJ,GAChC,OAAAK,QAAAC,QADgBJ,EAARK,SAET,CAAC,IAAAC,EAAA,WAAA,GACGP,EAAO,CACV,IAAMQ,EAAoC,MAAvBb,OAAuB,EAAvBA,EAAyBa,UACtCC,EAAQ,IAAIP,EAAKA,MAACR,GAAI,+BACxBU,QAAAC,QACwBI,EAAMC,WAAWV,EAASQ,IAAUG,KAAAC,SAAAA,GAA/C,OAAAhB,EAAA,EAAAgB,EAARN,QACO,4DAHYO,CAAA,EAInBC,SAAAA,GAER,MADAC,QAAQC,IAAIF,GACF,IAAA9C,MAAK,qBAAsBgC,EAAO,UAC7C,EAACI,CAAAA,CAVD,GAUCA,OAAAA,QAAAC,QAAAE,GAAAA,EAAAI,KAAAJ,EAAAI,KAAAd,GAAAA,EAAAU,GAGH,CAAC,MAAAO,GAAAV,OAAAA,QAAAa,OAAAH,EAAA,CAAA,ECjCKI,EAAoB,SAAC1D,GACzB,GAAKA,EAAL,CAMD,IALA,IAAM2D,EAAc,CACnB9C,IAAKb,EAASa,IACdC,KAAMd,EAASc,MAGhBC,EAAAC,EAAAA,EAA2BC,OAAOC,QAAQlB,GAASe,EAAAC,EAAAG,OAAAJ,IAAE,CAAhD,IAAAK,EAAAJ,EAAAD,GAAYO,EAAKF,EACrB,QAAclB,IAAVoB,IAEFqC,EAHYvC,EAAA,IAEQ,iBAAVE,EACIA,EACJsC,MAAMC,QAAQvC,IAA2B,iBAAVA,EAC3BwC,KAAKC,UAAUzC,GAEf0C,OAAO1C,GAGxB,CAEA,OAAOqC,CAlByB,CAmBjC,+GC8BG,SAAAM,EAAUC,EAAMC,EAAA7C,SAChB8C,EAAA,CAED,GAAA9C,aAAA+C,EAAc,CAUd,IAAA/C,EAAA8C,EAUA,cAFME,EAAAL,EAAaM,KAAA,KAAOL,EAAKC,IAP5B,EAAHA,IACAA,EAAA7C,EAAA8C,GAGD9C,EAAuEA,EAAAkD,EAWvE,GAAAlD,GAAWA,EAAW6B,KAErB,YADA7B,EAAA6B,KAAcc,EAAAM,KAAA,KAAAL,EAAAC,GAAAF,EAAAM,KAAA,KAAAL,EAAA,cAUb5C,QAAO4C,EAAAI,OAEPJ,EAGA,CACA,CA1FI,IAAEG,eAA0B,WAC5B,SAAAA,IAAc,QAErBA,EAAOzE,UAAEuD,KAAA,SAAwBsB,KACjC,IAASd,EAAQ,IAAAU,EACVF,EAAAO,KAAAN,EAEP,GAAAD,EAAA,iFA8BC,8BAfE,IAAA7C,EAAAqD,EAAAH,EACsB,IAAAJ,EAGxBH,EAAKN,EAAO,EAAAc,EAAYA,EAAAnD,GAAAA,GAChBsD,EACPX,EAAAN,EAAA,EAAAiB,EAAAtD,IAEA2C,EAAAN,EAAO,EAAArC,EAER,CAAA,SACC2C,EAAAN,EAAO,EAAAL,KAIFK,KArC4B,GA4FjC,SAAAkB,EAAAC,UAEgCA,aAAAT,GAAA,EAAAS,EAAAV,CACjC,8GC9B2B,SAAAH,EAAAC,EAAAC,EAAA7C,GAC3B,IAAA4C,qBACOG,EACuC,KAE7C/C,EAAA8C,EASC,YADD9C,EAAAgD,EAAML,OAA+B,KAAAC,EAAAC,IANa,EAAAA,IACnDA,IAAgCC,KAEtB9C,EAAAkD,EAOT,GAAAlD,GAAAA,EAAY6B,KAEX,mBADIc,EAAMM,KAAwB,KAAAL,EAAAC,GAAAF,EAAAM,KAAA,KAAAL,EAAA,IAGlCA,EAAAE,EAAAD,MACC7C,EACF,IAAAyD,EAAGb,EAAUI,EACbS,GAAMA,EAAAb,IAxFD,IAAEG,eAA0B,WAEnC,SAAAA,IAEAA,CAuDE,OAvDFA,EAAAzE,UAAAuD,KAAA,SAAAsB,EAAAG,gFASGX,EAAAN,EAAA,EAAAL,EACG,CAGL,OAAMK,CAQN,CAEA,WAGA,CA0BC,OAzBAe,KAAAJ,EAAA,sBAEcK,EAAAH,EACZ,IAAAJ,EACFH,EAAGN,EAAU,EAAAc,EAAWA,EAAAnD,GAAAA,GACxBsD,EAEQX,EAAAN,EAAA,EAAAiB,EAAAtD,IAEH2C,EAAAN,EAAA,EAAerC,EAKrB,CAAA,MAAWgC,GACVW,EAAAN,EAAc,EAAAL,EAOd,GAGAK,GAGAU,EA3DiC,GA+FX,SAAAQ,EAAAC,GACvB,OAAAA,aAAaT,GAAG,EAAAS,EAAAV,ECyHG,MAAAY,EAAA,oBAAAC,OAAAA,OAAAC,WAAAD,OAAAC,SAAAD,OAAA,oBAAA,wBA9JNf,EAAAC,EAAA7C,GACX,IAAA4C,EAAAE,EAAA,mBAOkB,OACDA,EASlB,YADD9C,EAAWgD,EAAAL,EAAQM,KAAA,KAAAL,EAAgBC,IAPjC,EAAAA,IACAA,EAAE7C,EAAA8C,GAGJ9C,EAACA,EAAAkD,QAOIlD,EAAM6B,KAEV,cADCA,KAAAc,EAAAM,KAAA,KAAAL,EAAAC,GAAAF,EAAAM,KAAA,KAAAL,EAAA,IAGAA,EAAAE,EAAAD,EACCD,EAAAM,EAAAlD,EACA,IAAAyD,EAAAb,EAAaI,OAEdJ,EACA,CACC,CAzFG,IAAEG,eAA0B,WACnC,SAAAA,IACOA,CAmDN,OAnDMA,EAAAzE,UAAcuD,KAAA,SAAAsB,EAAuBG,GAC5C,IAASjB,EAAA,IAAAU,EAETF,EAAAO,KAAAN,sIAkBGH,EAAAN,EAAA,EAAAc,EAAAA,EAAAnD,GAAAA,GAC2BsD,EAC7BX,EACSN,EAAA,EACDiB,MAgBJX,EAAAN,EAAY,EAAGrC,GAEf,MAAAgC,GAEJW,EAAiDN,EAAA,EAAAL,EACjD,CACC,EACAK,CAED,EACAU,CAEA,CAvDkC,cA2FFS,UAC/BA,aAACT,GAAA,EAAAS,EAAAV,EApEU,ICTQe,eAAO,WAAA,SAAAA,IAAAC,CAAAA,IAAAA,EAAAD,EAAAvF,iBAAAwF,EAS3BvF,KAAA,SACCwF,EACAC,EACAC,EACExF,GAEF,IAAMyF,EAAY9D,EAAAA,MAAMD,gBAAgB4D,GAAYI,KAC9CC,EAAShE,EAAAA,MAAMD,gBAAgB6D,GAAYG,KAE7CzD,EAAS,IAAI2D,EAAQA,OACzB,QAA6BzF,KAAd,MAAXH,OAAW,EAAXA,EAAaI,eAAsDD,KAAlB,MAAXH,OAAW,EAAXA,EAAaK,aAA2B,CACjF,IAAMC,EAASrB,EAAM,OAEfsB,EADWpB,OAAOC,KAAKY,EAAYI,QAAS,UACzBf,SAAS,OAAOmB,OACzC,IAAKD,EACJ,MAAU,IAAAE,MAAM,qBAEjB,IAAMC,EAAgBzB,EAAMe,EAAYK,aACxC,IAAKK,EACJ,MAAM,IAAID,MAAM,sBAEjBwB,EAAS2D,EAAMA,OAACnE,QAAO,cAAenB,EAAM,SAASI,EAAsBH,SAAAA,EAAkB,YAC9F,CAEA,OAAO0B,EAAO4D,YAAYD,EAAMA,OAACE,QA1ClC,iNA2CGC,SAASN,GACTM,SAASX,EAAQY,YAAYR,GAAO,IAAI5E,EAAKA,OAAGd,KAAK6F,GAAQM,aAC7DJ,YAAYD,EAAAA,OAAOE,QA3CtB,g4CA4CA,EAACT,EAEDa,cAAA,SACCC,EACAC,EACAC,EACAC,EACAC,QAHAH,IAAAA,IAAAA,EAAyC,YAC7B,IAAZC,IAAAA,GAAe,GAOf,IAAMG,GAAQ,IAAI5F,EAAAA,OAAQ6F,OAAON,EAAYC,EAAaC,EAAcC,EAAgBC,GACxF,MAAO,CACN3D,KAAIA,SAAST,EAAiBuE,GAAsB,IAAA,OAAA7D,QAAAC,QACrC0D,EAAM5D,KAAKT,EAAIuE,IAAWtD,KAAAuD,SAAAA,GAAxC,OAAOA,EAAmCC,YAAYC,EAAEA,GAACC,KAAK,EAC/D,CAAC,MAAAvD,GAAAV,OAAAA,QAAAa,OAAAH,KACDwD,eAAc,WACb,OAAAlE,QAAAC,QAAO,IACR,EAEF,EAACuC,EAED2B,gBAAA,SACCV,EACAC,GAKA,IAAMU,EAAW,CAChBrE,KAAI,SAAST,EAAiBuE,GAAkB,IAAIQ,IAAAA,EACnD,GAAI/E,EAAGgF,QAAQ/F,OAAS,EACvB,MAAU,IAAAX,MAAM,yBAEjB,IAAMwB,GAAS,IAAImF,EAAeA,iBAChCrB,SAASX,EAAQY,YACjB7D,EAAGgF,QAAQ,GAAGE,UAAY,EAC1BlF,EAAGgF,QAAQ,GAAGZ,cAAcN,aAE9B,GAAG9D,EAAGgF,QAAQ/F,OAAS,EAAG,CAEzB,IADA,IACuCkG,EADjCC,EAAS,IAAI5F,EAAKA,MAAC6F,OACzBC,EAAAC,EAAoBvF,EAAGgF,QAAQQ,MAAM,MAAEL,EAAAG,KAAAG,MAAE,CAAA,IAA/BC,EAAMP,EAAA/F,MACfgG,EAAOO,MAAM1C,EAAQY,YAAY6B,EAAOR,UAAY,EAAGQ,EAAOtB,cAAcN,YAC7E,CACAhE,EAAO8D,SAASwB,EAAOQ,UACxB,MACC9F,EAAO2E,YAAYC,EAAAA,GAAGmB,MAGnB,IACIC,EADEC,EAAQ/F,EAAGgG,OAAOzB,GAExB,IAAKJ,GAAkB4B,EAAME,kBAC3BH,EAAaC,EAAME,kBAAkBjB,QAAQe,EAAMG,mBAAmBhB,cACjE,IAAKf,EACV,MAAU,IAAA7F,MAAM,mDAElBwH,EAAa3B,EAEb,IAEoBgC,EAFdC,EAAcL,EAAMK,aAAqC,OAA3BrB,EAAIgB,EAAME,wBAAiB,EAAvBlB,EAAyBsB,GAAG,QAChEC,EAAYlC,EACXA,IACHkC,EAAYH,OAAHA,EAAGJ,EAAME,wBAANE,EAAAA,EAAyBnB,QAAQe,EAAMG,mBAAmB9B,eAE5E,IAAMmC,EAAWC,EAAoBA,qBAACC,OAAO,CAC5CL,WAAAA,EACAF,kBAAmBH,EAAMG,kBACzB/B,eAAgB2B,EAChBY,mBAAoB1G,EAAG2G,QACvBC,YAAa,GACbrC,WAAAA,EACAS,QAAShF,EAAGgF,QACZ6B,cAAed,EAAMe,SACrBR,UAAAA,EACAS,SAAU/G,EAAG+G,SACbC,MAAOR,EAAAA,qBAAqBS,YAC3BT,EAAoBA,qBAACU,qBACrBV,EAAoBA,qBAACW,iBAGvB,OAAAzG,QAAAC,QAAOb,EAAO8D,SAAS2C,GAAU9B,YAAYC,EAAAA,GAAGmB,MACjD,CAAC,MAAAzE,GAAAV,OAAAA,QAAAa,OAAAH,EAAA,CAAA,EACDwD,eAAc,SAAS5E,EAAiBuE,GAAkB,IAAI7D,OAAAA,QAAAC,QAC/CmE,EAASrE,KAAKT,EAAIuE,IAAWtD,KAAA,SAAAmG,GAA3C,OAAOA,EAAsCtD,WAAW7E,MAAM,EAC/D,CAAC,MAAAmC,GAAA,OAAAV,QAAAa,OAAAH,MAEF,OAAO0D,CACR,EAAC7B,EAEMY,YAAP,SAAmBqB,EAAkBpF,GACpC,IAAMsF,EAAS,IAAI5F,EAAKA,MAAC6F,OAIzB,OAHAD,EAAOiC,gBAAgB,IAAIC,EAASA,UAACpC,IACrCE,EAAOmC,eAAezH,EAAOb,QAC7BmG,EAAOO,MAAM7F,GACNsF,EAAOQ,SACf,EAAC3C,CAAA,CApI0B,GCkPzBH,EAAyB,oBAAAC,OAAAA,OAAAC,WAAAD,OAAAC,SAAAD,OAAA,oBAAA,aA1LC,SAAAhB,EAAAC,EAAAC,EAAA7C,GAC5B,IAAA4C,KACA,GAAA5C,aAAqB+C,GAGrB,IAAA/C,IAWA,YAJAA,EAAMgD,EAAYL,EAAAM,KAAK,KAAQL,EAAOC,IANrC,EAAAA,IACAA,EAAA7C,EAAY8C,GAEb9C,EAAGA,EAAUkD,CASZ,CAQA,GAAAlD,GAAGA,EAAS6B,KAEZ,cADmDA,KAAAc,EAAAM,KAAA,KAAAL,EAAAC,GAAAF,EAAAM,KAAA,KAAAL,EAAA,QAI/CC,YAEJY,EAACb,EAAAI,EACDS,KAE0Bb,QA9GnBG,eAA0B,WACnC,SAAAA,YAUAA,EAAOzE,UAAEuD,KAAA,SAAwBsB,KAC1B,IAAAd,EAAa,IAAAU,EACbF,EAAcO,KAAAN,EACrB,GAAMD,EAAE,CAEe,IAAAuF,EAAA,EAAAvF,EAAAM,EAAAG,EACjB,GAAC8E,EAAuB,CAC7B,IAWAzF,IAAmB,EAAAyF,UACnB,CAAA,MAAQpG,GAEqCW,EAAAN,EAAA,EAAAL,EAC7C,CACC,OAAAK,EAKD,WAEA,CA0BA,cAzBI,SAASgB,GACX,IACA,IAAArD,EAAAqD,EAAAH,EAKE,EAAFG,EAAEP,EACHH,EAAAN,EAAuB,EAAAc,EAAUA,EAASnD,GAAWA,GAC/CsD,MACM,EAAAA,EAAAtD,IAQX2C,EAAAN,EAAA,EAAYrC,EAEZ,CAAA,MAAAgC,GACAW,EAAEN,EAAA,EAAAL,KAICK,KAnE6B,GAsHlC,SAAYkB,EAAaC,UAEFA,aAAAT,GAAA,EAAAS,EAAAV,CACvB,CA0GE,IArNK0D,EAAYpG,QAAZoG,QC+ON,MAAA9C,EAAuD,oBAAdC,OAEnCA,kBAEAA,OACCC,gBAAY,oBAAyB,aAlMvC,SAAAjB,EAAeC,EAASC,EAAG7C,GACjC,IAAA4C,KACC,GAAA5C,aAAA+C,EAA2B,CAC3B,IAAA/C,EAAA8C,EAWA,YADD9C,EAAWgD,EAAAL,EAAQM,KAAA,KAAQL,EAAAC,IATzB,EAAAA,IACFA,EAAG7C,EAAU8C,GAGb9C,EAAkBA,EAAAkD,EAmBjB,GAAAlD,GAAAA,qBACG6B,KAAGc,EAAgBM,KAAA,UAAgBN,EAAAM,KAAA,KAAAL,EAAA,QAIrCC,IACDK,EAAAlD,MAE0ByD,EAAAb,EAAAI,EACvBS,KACGb,GAMP,CAjHM,IACNG,0BASD,SAAAA,YACAA,EAAOzE,UAAEuD,KAAA,SAAoBsB,KACtB,IAAAd,EAAa,IAAAU,EACbF,EAAcO,KAAAN,EAEf,GAAAD,EAAO,CACZ,IAAAuF,MAGCjF,EACSG,KAMmC8E,EAAA,CAC7C,IACCzF,EAAAN,EACC,EAAA+F,EAAAhF,KAAAF,GAEF,CAAC,MAAAlB,GAEDW,IAAmB,EAAAX,EACnB,CAEA,OAASK,EAET,OAAWe,YAGTA,KAAAJ,EAAA,SAAAK,OAQA,IAAArD,EAAAqD,EAAoBH,EAClB,EAAFG,EAAEP,IAC4CT,EAAA,EAAAc,EAAAA,EAAAnD,GAAAA,KAE9C2C,EAAAN,IAAWiB,EAAAtD,IAEX2C,EAAEN,EAAA,EAAArC,GAG6B,MAAAgC,GACjCW,EAAWN,EAAK,EAAAL,MAId,OAqDF,SAAAuB,EAAgBC,UAEGA,aAAAT,GAAA,EAAAS,EAAAV,CACnB,CC8HC,MAAGY,EAAgB,oBAAAC,OAAAA,OAAAC,WAAAD,OAAAC,SAAAD,OAAA,oBAAA,aAvLnB,SAAAhB,EAAgBC,EAAAC,EAAA7C,OAChB4C,EAAAE,EAAA,IACC9C,eAAW,CACZ,IAAAA,EAAA8C,EAQD,YADA9C,EAAiCgD,EAAAL,EAAAM,KAAA,KAAAL,EAAAC,IANnB,EAAbA,IACCA,EAAA7C,EAAO8C,KAEN9C,EAAAkD,QAOYlD,EAAA6B,iBACb7B,EAAA6B,KAAEc,EAAAM,KAAA,KAAAL,EAAAC,GAAAF,EAAAM,KAAA,KAAAL,EAAA,IAIJA,EAAAE,MAEMI,EAAAlD,MACAyD,EAAAb,EAAeI,EACrBS,GACCA,EAAAb,GAGD,CAzFM,IAAEG,eAA0B,WACnC,SAAAA,IACU,CAyDP,OAhDHA,EAAOzE,UAAEuD,KAAA,SAAwBsB,KAC1B,IAAAd,EAAa,IAAAU,EACbF,EAAcO,KAAAN,EAEf,GAAAD,EAAO,KACNuF,EAEE,EADCvF,IAGRS,EAQD,GAAA8E,GACA,IAESzF,EAAAN,EAAA,EAAA+F,EAAAhF,KAAAF,GACT,CAA0C,MAAAlB,GACxCW,IAAU,EAAAX,EACX,CAIA,OAAAK,CACA,CACA,OACAe,KAgBA,YAb0BJ,EAAA,SAAAK,GAC3B,IACC,MAAWA,EAAAH,EACG,EAAdG,EAAcP,EACdH,EAAKN,EAAQ,EAAAc,EAAeA,EAAAnD,GAAAA,GAC3BsD,EACFX,IAAqE,EAAAW,EAAAtD,IAEpE2C,EAAAN,EAAc,EAAArC,EAEb,CAAA,MAAAgC,KAC6BK,EAAA,EAAAL,GACxB,EACNK,CACC,EACAU,EA3DgC,GA4FlC,SAAAQ,EAA+BC,UAI3BA,aAAQT,GAAA,EAAAS,EAAAV,CACZ,gEDlF6B,SAAUuF,GAA+B,QAiIpEC,EAjIwEvH,EAAA,WA2F1E,GAAIwH,EAAcC,EAAeC,OAAOC,GACvC,MAAM,IAAIxJ,8DAC+CqJ,EAAW,qBAAqBC,EAAY,UAAUE,GAE/G,OAAApH,QAAAC,QAGKX,EAAG8H,IAAIC,IAAW9G,KAAA,WAAA,OAAAP,QAAAC,QAGlBX,EAAGS,QAAMQ,KAAA,WAGf,IAAM+G,EAAkBhI,EAAGgF,QAAQiD,UAAU,SAAC7F,GAAM,OAAAA,EAAE8F,MAAM,GAC5D,IAAyB,IAArBF,EAAwB,CAC3B,IAAMG,EAAenI,EAAGgF,QAAQgD,GAChCI,EAAY,CACXlD,SAAUiD,EAAajD,SACvBmD,KAAMrI,EAAGqG,GAAG,OACZiC,KAAMN,EACNlI,OAAQ9C,OAAOC,KAAKkL,EAAa/D,cAAcN,YAAY5G,SAC1D,UAGH,CAQA,OANIkL,IAEHA,EAAUlD,SADWlF,EAAGgF,QAAQhF,EAAGgF,QAAQ/F,OAAS,GAClBiG,SAClCkD,EAAUC,KAAOrI,EAAGqG,GAAG,QAGjB,CACNrG,GAAAA,EACAuI,eAAgBvI,EAAGgG,OAAOwC,IACzB,SAACC,UAASA,EAAErC,eAAcqC,EAAEvC,iBAAiB,GAE9CkC,UAAAA,EACC,EAAAV,EAAAA,EA/HDgB,EAOGjB,EAPHiB,MACAC,EAMGlB,EANHkB,aACAC,EAKGnB,EALHmB,MACAC,EAIGpB,EAJHoB,UACAC,EAGGrB,EAHHqB,cACAC,EAEGtB,EAFHsB,mBAAkBC,EAEfvB,EADHwB,UAAAA,OAAS,IAAAD,EAAG7L,EAAkB6L,EAI3BL,EAAa1J,OAAS,KACzBoC,QAAQ6H,KACP,iGASF,IALA,IAKsC/D,EA6BlCiD,EAlCEL,EAAa,IAAIoB,sBAAoBF,GACrCjJ,EAAK,IAAIoJ,cAIf9D,EAAAC,EAA0BoD,KAAYxD,EAAAG,KAAAG,MAAE,CAA7B,IAAA4D,EAAWlE,EAAA/F,MACrBY,EAAGsJ,SAAS,CACXlD,WAAYiD,EAAYhB,KACxBkB,yBAAyB,IAAItG,GAAUc,cACtC6E,EACA,OACA,EACAS,EAAYnE,SACZzB,EAAMA,OAAC+F,WAAWhK,EAAAA,MAAMoG,QAAQyD,EAAYvJ,OAAQ,YAErDoG,kBAAmBmD,EAAYf,KAC/BxB,SAAU,aAGX9G,EAAGyJ,UAAU,CACZvE,SAAU,EACVd,eAAe,IAAI3F,SAAQd,KAAKiL,EAAMc,YAAYxM,aAEpD,CAGA,IAAAyM,IAAkCC,EAAlCD,EAAApE,EAAgBwD,KAAkBa,EAAAD,KAAAlE,MAAE,CAAA,IAAzBoE,EAACD,EAAAxK,MACXY,EAAGyJ,UAAU,CACZvE,SAAU2E,EAAEC,OACZ1F,eAAe,IAAI3F,SAAQd,KAAKkM,EAAEE,KAEpC,CAKA,IAAM7B,EAASY,GAAiBD,EAAUa,YAAYxM,WAChD8M,GAAe,IAAIvL,EAAKA,OAAGd,KAAKuK,GAKtClI,EAAGyJ,UAJe,CACjBrF,cAAe4F,EACf9B,QAAQ,IAIT,IAAIP,EAAc,GACZC,EAAe5H,EAAGgF,QAAQiF,OAC/B,SAACC,EAAOC,GAAG,OAAKD,EAAQrC,OAAOsC,EAAIjF,UAAY,EAAE,EACjD,IAEG4C,EAAM,EAAEjH,WA4LWuJ,EAACC,QAEQ,mBAA3BD,EAAAtH,GAAwC,CAAA,IACrCwH,EAAAtI,EAAAT,IAAA6I,EAAAtH,KAiCP,YAhCCyH,EAAA9I,OAGF,QAA2B6I,EAAAtH,EAAAwH,QAAA/E,MAAAgF,GAAAA,UACvBhJ,EAAA4I,EAAWC,EAAelL,SACdqC,EAC0CR,KAAA,CAEzD,IAAA0B,EAAAlB,GAMD,YADuBA,EAAAR,KAAAsJ,EAAAhJ,IAAAA,EAAAQ,EAAAM,KAAA,KAAAL,EAAA,IAAAG,EAAA,KAHwCV,EAAAA,EAAAa,CAO/D,CAECN,EACAD,EAAAC,EAAY,EAAAP,GAEXO,EAAAP,CAEA,CAAA,MAAAL,KAGCY,IAAAA,EAAA,IAAAG,GAAA,EAAAf,IAIFmJ,GACAvH,EAAkB,OAAA,OACT,SAAQ5D,GAClB,IAEOkL,EAAA7E,uBAKGrE,GAAA,CAET,OAAAhC,2LAtHA,SAAcsL,EAAAL,EAAAI,GACd,IAAKzI,EAAAT,EAALkH,GAAA,kBACC8B,EAAA9I,GACF,IACA,SAAYiJ,EAAKzL,UAAUwL,IAAQA,MAEjC,IADDhJ,EAAA4I,EAAA5B,KACuBhH,EAAAR,KAAA,CACtB,IAAA0B,EAAalB,GAGd,YADMA,EAAIR,OAAaM,IAAUA,EAAQQ,EAAAM,KAAA,KAAAL,EAAA,IAAAG,EAAA,OADXV,EAAAa,CAI7B,CAEDN,IAAOA,EAAA,EAAAP,GAERO,EAACP,QAGOL,GACPW,EAAAC,IAAaA,EAAA,IAAAG,GAAA,EAAAf,EACZ,CACA,CACAmJ,GACAvI,oCA7IU2I,CACOjC,WAARhJ,GACV,IAAMqG,EAAQtG,EACbC,GACA,IAAIjB,SAAQ6F,OACXuE,EACA,OACA,EACAnJ,EAAKwF,SACLzB,SAAO+F,WAAWhK,EAAKA,MAACoG,QAAQlG,EAAKI,OAAQ,aAMV,OAFrCE,EAAGsJ,SAASvD,GAEZ4B,GAAeE,OAAOnI,EAAKwF,UAAUxE,QAAAC,QACzBoH,EAAW6C,WAAW5K,IAAGiB,KAAA,SAAA4J,GAArC/C,EAAG+C,EAEClD,GAAeC,EAAeC,OAAOC,KAAIJ,EAG9C,EAAA,EAAA,oBAACA,CAAA,GAAA,OAAAhH,QAAAC,QAAAE,GAAAA,EAAAI,KAAAJ,EAAAI,KAAAd,GAAAA,IA0CF,CAAC,MAAAiB,GAAA,OAAAV,QAAAa,OAAAH,EAED,CAAA,4BD5Ha,SAA2BqG,OAAmCtH,IAoIxEuH,EA1EEU,EA1DsEjI,aA8F1E,GAAIwH,EAAcC,EAAeC,OAAOC,GACvC,MAAM,IAAIxJ,MAAK,wDAC0CqJ,EAAgCC,qBAAAA,YAAsBE,GAE/G,OAAApH,QAAAC,QAGKX,EAAG8H,IAAIC,IAAW9G,KAAAP,WAAAA,OAAAA,QAAAC,QAGlBX,EAAGS,QAAMQ,KAAA,WAGf,IAAM+G,EAAkBhI,EAAGgF,QAAQiD,UAAU,SAAC7F,GAAM,OAAAA,EAAE8F,MAAM,GAC5D,IAAyB,IAArBF,EAAwB,CAC3B,IAAMG,EAAenI,EAAGgF,QAAQgD,GAChCI,EAAY,CACXlD,SAAUiD,EAAajD,SACvBmD,KAAMrI,EAAGqG,GAAG,OACZiC,KAAMN,EACNlI,OAAQ9C,OAAOC,KAAKkL,EAAa/D,cAAcN,YAAY5G,SAC1D,UAGH,CAQA,OANIkL,IAEHA,EAAUlD,SADWlF,EAAGgF,QAAQhF,EAAGgF,QAAQ/F,OAAS,GAClBiG,SAClCkD,EAAUC,KAAOrI,EAAGqG,GAAG,QAGjB,CACNrG,GAAAA,EACAuI,eAAgBvI,EAAGgG,OAAOwC,IACzB,SAACC,UAASA,EAAErC,eAAcqC,EAAEvC,iBAAiB,GAE9CkC,UAAAA,EACC,MAlIDM,EAQGjB,EARHiB,MACAoC,EAOGrD,EAPHqD,SACAjC,EAMGpB,EANHoB,UACAD,EAKGnB,EALHmB,MACAE,EAIGrB,EAJHqB,cAAaE,EAIVvB,EAHHwB,UAA8B8B,EAG3BtD,EAFHsB,mBAAAA,WAAkBgC,EAAG,GAAEA,EAIlBhD,EAAa,IAAIoB,EAAmBA,6BALhCH,EAAG7L,EAAkB6L,GAMzBhJ,EAAK,IAAIoJ,EAAAA,YAGX0B,EAAS7L,OAAS,KACrBoC,QAAQ6H,KACP,iGAMF,QAA8B/D,EAA9BG,EAAAC,EAAsBuF,KAAQ3F,EAAAG,KAAAG,MAAE,CAArB,IAAAuF,EAAO7F,EAAA/F,MACjBY,EAAGyJ,UAAU,CACZvE,SAAU,EACVd,eAAe,IAAInB,GAAUtF,KAC5BqN,EAAQ5H,WACR4H,EAAQ7H,WACR6H,EAAQ3H,SAGV,IAAM4H,EAAoBrF,EAAQoF,EAAQ3B,YAAYvJ,OAAQ,UACxDoL,EAAczH,SAAO+F,WAAWyB,GACtCjL,EAAGsJ,SAAS,CACXC,yBAAyB,IAAIlM,GAAWiH,OACvCsE,EACA,OACA,EACAoC,EAAQ3B,YAAYnE,SACpBgG,GAED9E,WAAY4E,EAAQ3B,YAAYhB,KAChCnC,kBAAmB8E,EAAQ3B,YAAYf,KACvCxB,SAAU,YAEZ,CAGA,IAAA,IAAkC8C,EAAlCD,EAAApE,EAAgBwD,KAAkBa,EAAAD,KAAAlE,MAAE,CAAzB,IAAAoE,EAACD,EAAAxK,MACXY,EAAGyJ,UAAU,CACZvE,SAAU2E,EAAEC,OACZ1F,eAAe,IAAI3F,EAAAA,OAAQd,KAAKkM,EAAEE,KAEpC,CAIA,IAAMC,GAAe,IAAIvL,SAAQd,KAChCmL,GAAiBD,EAAUa,YAAYxM,YAMxC8C,EAAGyJ,UAJkB,CACpBrF,cAAe4F,EACf9B,QAAQ,IAIT,IAAIP,EAAc,GACZC,EAAe5H,EAAGgF,QAAQiF,OAC/B,SAACC,EAAOC,GAAQ,OAAAD,EAAQrC,OAAOsC,EAAIjF,UAAY,EAAE,EACjD,IAEG4C,EAAM,EAAEjH,EA8KV,SAAWuJ,EAAGC,EAAAI,GACb,GAAsB,mBAAtBL,EAAAtH,GAAsB,CACtB,IAAawH,EAAAtI,EAAAT,EAAbyB,EAAAoH,EAAatH,KAuBd,cAtB8BrB,OACxB,QAAA6I,IAAiBE,QAAA/E,MAAiBgF,GAACA,MAExC,IADDhJ,EAAA4I,EAAAC,EAAclL,SACVqC,EAAmBR,KAAA,CACtB,IAAA0B,EAAWlB,GAGZ,cADOR,KAAAsJ,EAAAhJ,IAAAA,EAAAQ,EAAAM,KAAA,KAAAL,EAAA,IAAAG,EAAA,OADuBV,EAAAa,EAO9BN,EACAD,EAAEC,EAAA,EAAAP,KAESA,CAEX,CAAA,MAAAL,GACAW,EAAAC,MAAW,IAAAG,GAAA,EAAAf,EACX,CACA,IAEA4B,EAAGmI,OAAE,OACJ,SAAA/L,GACH,IAEiCkL,EAAA7E,MACjCzC,EAAWmI,eAET/J,GAEA,CAAA,OAAEhC,MAGwB4C,GAAAA,EAAAf,KAC5B,cAAgCmK,EAAA,SAAAhK,GAE1B,MAAAgK,EAAShK,EACf,GAECgK,GACA,QACCpJ,CACF,CAGA,KAAA,WAAkBoI,SAId,IAAMiB,UAAE,8BAUX,IAAAC,EAAG,GACgD7C,EAAA,EAAAA,EAAA2B,EAAAnL,OAAAwJ,IACnD6C,EAAAC,KAAAnB,aApIC,SAAWM,EAAAL,EAAAI,GACX,IAAAzI,EAAcT,EAAdkH,GAAA,SACA,SAAA8B,EAAK9I,OAEN,OAAIgH,cAAiEgC,IAAAA,MAEpE,IADDhJ,SACCA,EAAcR,KAAA,CACb,IAAA0B,EAAsBlB,GAGjB,cAANR,KAAAsJ,EAAAhJ,IAAAA,EAAAQ,EAAAM,KAAA,KAAAL,EAAA,IAAAG,EAAA,KAFCV,EAAAA,EAAMa,CAIN,KAGDN,EAAA,EAAAP,GACAO,EAAAP,QAGEL,GACFW,EAAAC,IAAQA,EAAG,IAAAG,GAAA,EAAAf,EACX,CAKE,CACAmJ,IAGF,CAyGDiB,CAAIF,EAAW,SAAgB7C,GAAA,SAAU6C,EAAO7C,GAAA,EAAAgC,GAlPrCE,CACOjC,EAAK,SAAbhJ,GACV,IAAMqG,EAAQtG,EAAiBC,GAAM,IAAIjB,SAAQ6F,OAChDuE,EACA,OACA,EACAnJ,EAAKwF,SACLzB,EAAAA,OAAO+F,WAAWhK,QAAMoG,QAAQlG,EAAKI,OAAQ,aAKT,OAFrCE,EAAGsJ,SAASvD,GAEZ4B,GAAeE,OAAOnI,EAAKwF,UAAUxE,QAAAC,QACzBoH,EAAW6C,WAAW5K,IAAGiB,KAAA4J,SAAAA,GAArC/C,EAAG+C,EAEClD,GAAeC,EAAeC,OAAOC,KAAIJ,EAAA,EAAA,EAG9C,EAACA,WAAAA,OAAAA,CAAA,GAAAhH,OAAAA,QAAAC,QAAAE,GAAAA,EAAAI,KAAAJ,EAAAI,KAAAd,GAAAA,IA0CF,CAAC,MAAAiB,UAAAV,QAAAa,OAAAH,4BGlIY,SACZqG,OAoBA,IAfA,IAewBtC,EAdvBuD,EAQGjB,EARHiB,MACA+C,EAOGhE,EAPHgE,aACA5C,EAMGpB,EANHoB,UACAC,EAKGrB,EALHqB,cAAaE,EAKVvB,EAJHwB,UACAnL,EAGG2J,EAHH3J,SACAmC,EAEGwH,EAFHxH,OAAM8K,EAEHtD,EADHsB,mBAAAA,OAAkB,IAAAgC,EAAG,GAAEA,EAGlBhD,EAAa,IAAIoB,+BANbH,EAAG7L,EAAkB6L,GAO3BhJ,EAAK,IAAIoJ,EAAaA,YAG1B9D,EAAAC,EAAmBmD,KAAKvD,EAAAG,KAAAG,MAAE,CAAf,IAAA/F,EAAIyF,EAAA/F,MACR2G,EAAQtG,EAAiBC,GAAM,IAAIjB,EAAAA,OAAQ6F,OAChDuE,EACA,OACA,EACAnJ,EAAKwF,SACLzB,SAAO+F,WAAWhK,EAAKA,MAACoG,QAAQlG,EAAKI,OAAQ,aAE9CE,EAAGsJ,SAASvD,EACb,CAGI0F,EAAaxM,OAAS,KACzBoC,QAAQ6H,KACP,iGAMF,IAAA,IAAsCU,EAAtCD,EAAApE,EAA0BkG,KAAY7B,EAAAD,KAAAlE,MAAE,KAA7BiG,EAAW9B,EAAAxK,MACrB,IAAKsM,EAAY7N,YAChB,MAAM,IAAIS,MAAM,gDAIjB,GAAIR,EACH,IAAAe,IAAAA,EAAA8M,EAAAA,EAAiB5M,OAAO6M,KAAK9N,GAASe,EAAA8M,EAAA1M,OAAAJ,IAAE,CAApC,IAAMM,EAAGwM,EAAA9M,QACUb,IAAlBF,EAASqB,WACLrB,EAASqB,EAElB,CAGDa,EAAGyJ,UAAU,CACZvE,SAAU,EACVd,eAAe,IAAI/G,GAAWM,KAC7B+N,EAAY9N,QACZ8N,EAAY7N,YACZ2D,EAAkB1D,KAGrB,CAGA,IAAA+N,IAAkCC,EAAlCD,EAAAtG,EAAgBwD,KAAkB+C,EAAAD,KAAApG,MAAE,CAAA,IAAzBoE,EAACiC,EAAA1M,MACXY,EAAGyJ,UAAU,CACZvE,SAAU2E,EAAEC,OACZ1F,eAAe,IAAI3F,SAAQd,KAAKkM,EAAEE,KAEpC,CAGA,IAAMgC,EAAarD,EAAMuB,OACxB,SAAC+B,EAAKtM,GAAI,OAAKsM,EAAMnE,OAAOnI,EAAKwF,SAAS,EAC1C,IAEK+G,EAAcjM,EAAGgF,QAAQiF,OAC9B,SAAC+B,EAAKtG,GAAM,OAAKsG,EAAMnE,OAAOnC,EAAOR,UAAY,EAAE,EACnD,IACC,OAAAxE,QAAAC,QAGyBoH,EAAW6C,WAAW5K,IAAGiB,cAA9CiL,GAAY,SAAA/L,IAAA,OAAAO,QAAAC,QA4BZX,EAAG8H,IAAIC,IAAW9G,uBAAAP,QAAAC,QAGlBX,EAAGS,QAAMQ,KAEf,WAMA,OANImH,IAEHA,EAAUlD,SADWlF,EAAGgF,QAAQhF,EAAGgF,QAAQ/F,OAAS,GAClBiG,SAClCkD,EAAUC,KAAOrI,EAAGqG,GAAG,QAGjB,CACNrG,GAAAA,EACAuI,eAAgBG,EAAMF,IAAI,SAAC9I,UAAYA,EAAK2I,KAAI,IAAI3I,EAAK4I,IAAI,GAC7DF,UAAAA,EACC,EAAA,EAAA,CAxCF,IAAIA,EACJ,GAAI2D,EAAaE,EAAcpE,OAAOqE,GAAe,CACpD,IAAMlC,GAAe,IAAIvL,SAAQd,KAChCmL,GAAiBD,EAAUa,YAAYxM,YAElCiL,EAAe,CACpB/D,cAAe4F,EACf9B,QAAQ,GAGTE,EAAY,CACXC,KAAM,GACNC,KAAMtI,EAAGgF,QAAQ/F,OACjBiG,SAAU,EACVpF,OAAQ9C,OAAOC,KAAK+M,EAAalN,QAAS,OAAOI,SAAS,WAG3D8C,EAAGyJ,UAAUtB,EACd,CAAC,IAAAtH,EAEGZ,WAAAA,GAAAA,EAAMS,OAAAA,QAAAC,QACEZ,EAASC,EAAIC,IAAOgB,KAAA,SAAAkL,GAA/BnM,EAAEmM,CAA8B,EAAA,CAD7BlM,GAC6B,OAAAY,GAAAA,EAAAI,KAAAJ,EAAAI,KAAAd,GAAAA,GAoBlC,EAAA,CAAC,MAAAiB,GAAA,OAAAV,QAAAa,OAAAH,EAAA,CAAA,wBVjFyB,SACzBxD,EACAwO,EACAC,EACAC,EACCC,QAFDF,IAAAA,IAAAA,EAAQ,aACRC,IAAAA,EAAS,YACRC,IAAAA,EAA2C,UACrB,IACvB,IAAIC,EAASpP,EAAQ,iBAAiBQ,EAAyByO,kBAAAA,EAAgBC,WAAAA,EAAS,IAUvF,OARGF,IAOHI,GAAG,KADcxP,OAAOC,KAAK2E,KAAKC,UALpB,CACb2G,IAAK,CACJiE,YAAa,CAAEL,aAAAA,OAGmClP,SAAS,WAE7DwD,QAAAC,QAEiB+L,MAAMF,IAAIvL,cAAtB0L,GACN,IAAKA,EAAIC,GACR,MAAU,IAAAtO,MAAsCV,gCAAAA,GAChD,OAAA8C,QAAAC,QAGoBgM,EAAIE,QAAM5L,KAA3B6L,SAAAA,GAUJ,IAAMC,GAPND,EAAWA,EAASE,OACnB,SAACC,GAGAC,IAAAA,EAAK,OAAe,IAAfD,EAAE/H,YAAyB,OAAPgI,EAACD,EAAE1J,OAAF2J,EAAQC,SAGT3E,IAC1B,SAAC9I,GAAoC,OAAQA,EAAK2I,KAAQ3I,IAAAA,EAAK4I,IAAI,GAClE,OAAA5H,QAAAC,QAEmB+L,MAAStP,EAAQ,8BAA+B,CACpEgQ,OAAQ,OACRC,QAAS,CACR,eAAgB,oBAEjBhD,KAAMzI,KAAKC,aAASyL,OAAKP,OACxB9L,cANIsM,GAQN,IAAKA,EAAOX,GACX,MAAM,IAAItO,MAAK,kCAAmCV,GAClD,OAAA8C,QAAAC,QAEmB4M,EAAOV,QAAM5L,KAAA,SAA3BuM,GA6BN,OA3BAV,EAAWU,EAAKhF,IACf,SAAC9I,GAMG,IAAII,EAASJ,EAAKI,OACK,QAAnByM,EACFzM,EAAS9C,OAAOC,KAAK6C,EAAQ,UAAU5C,SAAS,OACpB,QAAnBqP,IACTzM,EAAS2D,EAAAA,OAAOE,QAAQ3G,OAAOC,KAAK6C,EAAQ,UAAU5C,SAAS,QAAQwB,SAE5E,IAAM+O,EAAU,CACfC,OAAQhO,EAAKgO,OAAOC,SACpB7N,OAAAA,EACAwI,KAAM5I,EAAK4I,KACXD,KAAM3I,EAAK2I,KACXnD,SAAU,GAKX,OAHIkH,IACHqB,EAAQrB,aAAeA,GAEjBqB,CACR,EAG4B,EAC9B,EAAA,EAAA,EAAA,CAAC,MAAArM,GAAA,OAAAV,QAAAa,OAAAH,EASD,CAAA,wBA1H0B,SAAUxD,EAAiB2O,QAAAA,IAAAA,IAAAA,EAA2C,UAAQ,IACvG,IAAMqB,EAAYxQ,EAAQ,iBAAiBQ,EAA6B,uBAChD,OAAxByD,QAAQC,IAAI,CAAEsM,OAAAA,IAAUlN,QAAAC,QACH+L,MAAMkB,IAAO3M,cAA5B4M,GACN,IAAKA,EAAOjB,GACX,MAAU,IAAAtO,MAAM,4BAChB,OAAAoC,QAAAC,QACoBkN,EAAOhB,QAAM5L,KAA9B6M,SAAAA,GAEJA,EAAWA,EAASd,OAAO,SAACC,GAAuB,OAAoB,IAAfA,EAAE/H,QAAc,GAGxE,IAAM6I,EAAaxO,EAAgB3B,GAC7BoQ,GAAc,IAAIvP,EAAKA,OAAGd,KAAKoQ,EAAWxK,MAOhD,OANWuK,EAAStF,IAAI,SAAC9I,SAAyB,CACjD2I,KAAM3I,EAAK2I,KACXC,KAAM5I,EAAK4I,KACXpD,SAAUxF,EAAKwF,SACfpF,OAA2B,QAAnByM,GAA+C,WAAnBA,EAA8BvP,OAAOC,KAAK+Q,EAAYlK,YAAY5G,SAASqP,GAAkByB,EAAYtP,QAC7I,EACyB,IAC3B,CAAC,MAAA0C,GAAAV,OAAAA,QAAAa,OAAAH,sCAsGA6M,EACAC,EACAtQ,GAAe,IAEf,IAAM4O,EAASpP,EAAkBQ,UAAAA,EAAWqQ,KAAAA,IAAarR,QAAAA,UAAUuR,MAAQ,OAAS,MAAI,IAAID,EAAO,4BAA4B,OAAAxN,QAAAC,QAC7G+L,MAAMF,IAAIvL,KAAtB0L,SAAAA,GACN,IAAKA,EAAIC,GACR,MAAU,IAAAtO,MAAK,kBAAmB2P,EAAgB,UAClD,OAAAvN,QAAAC,QAGsBgM,EAAIE,QAAM5L,cAA7BmN,GAWJ,OATaA,EAAW5F,IAAI,SAAC9I,GAA8B,MAAA,CAC1D2O,IAAK3O,EAAK2O,IACVvO,OAAQJ,EAAKI,OACbwI,KAAM5I,EAAK4I,KACXD,KAAM3I,EAAK2I,KACXhC,GAAI6H,EACJhJ,SAAU,EACV,EAEgC,EAAA,EAClC,CAAC,MAAA9D,UAAAV,QAAAa,OAAAH,EAAA,CAAA,8BS5KY,SAA6BqG,GAAgC,IAAItH,IA4I3EuH,EA5I2EvH,aAsG7E,GAAIwH,EAAcC,EAAeC,OAAOC,GACvC,MAAM,IAAIxJ,8DAC+CqJ,EAAW,qBAAqBC,EAAY,UAAUE,GAE/G,OAAApH,QAAAC,QAGKX,EAAG8H,IAAIC,IAAW9G,KAAAP,WAAAA,OAAAA,QAAAC,QAGlBX,EAAGS,QAAMQ,KAAA,WAGf,IAAM+G,EAAkBhI,EAAGgF,QAAQiD,UAAU,SAAC7F,GAAM,OAAAA,EAAE8F,MAAM,GAC5D,IAAyB,IAArBF,EAAwB,CAC3B,IAAMG,EAAenI,EAAGgF,QAAQgD,GAChCI,EAAY,CACXlD,SAAUiD,EAAajD,SACvBmD,KAAMrI,EAAGqG,GAAG,OACZiC,KAAMN,EACNlI,OAAQ9C,OAAOC,KAAKkL,EAAa/D,cAAcN,YAAY5G,SAC1D,UAGH,CAQA,OANIkL,IAEHA,EAAUlD,SADWlF,EAAGgF,QAAQhF,EAAGgF,QAAQ/F,OAAS,GAClBiG,SAClCkD,EAAUC,KAAOrI,EAAGqG,GAAG,QAGjB,CACNrG,GAAAA,EACAuI,eAAgBvI,EAAGgG,OAAOwC,IACzB,SAACC,GAAC,OAAQA,EAAErC,WAAU,IAAIqC,EAAEvC,iBAAiB,GAE9CkC,UAAAA,EACC,EAAA,EAAA,EA1ID6F,EASGxG,EATHwG,SACAK,EAQG7G,EARH6G,QACA5F,EAOGjB,EAPHiB,MACAG,EAMGpB,EANHoB,UACAmC,EAKGvD,EALHuD,QACA7H,EAIGsE,EAJHtE,WACA2F,EAGGrB,EAHHqB,cAAaiC,EAGVtD,EAFHsB,mBAAAA,OAAqB,IAAHgC,EAAG,GAAEA,EAAA/B,EAEpBvB,EADHwB,UAGKlB,EAAa,IAAIoB,EAAmBA,yBAH7BhM,IAAH6L,EAAG7L,EAAkB6L,GAIzBhJ,EAAK,IAAIoJ,EAAaA,YAI5BpJ,EAAGsJ,SAAS,CACXC,yBAAyB,IAAItG,GAAU4B,gBACtCmG,EAAQ3B,YAAYnE,SACpBzB,EAAAA,OAAOE,QAAQ3G,OAAOC,KAAK+N,EAAQ3B,YAAYvJ,OAAQ,UAAU5C,SAAS,SAE3EkJ,WAAY4E,EAAQ3B,YAAYhB,KAChCnC,kBAAmB8E,EAAQ3B,YAAYf,KACvCxB,SAAU,aAKX,IAKIjJ,EA+BAuK,EApCEmG,EAAgD,CACrD1E,EAAG,SACH2E,GAAI,WACJH,IAAKrD,EAAQ3B,YAAYgF,KAG1B,GAAIJ,IAAarR,QAASA,UAACuR,MAC1BtQ,EAAWgC,EAAA,CAAA,EACP0O,EAAmB,CACtBE,KAAMH,QAED,IAAIL,IAAarR,QAASA,UAAC8R,MAMjC,MAAM,IAAIpQ,MAAM,oBALhBT,EAAWgC,EAAA,CAAA,EACP0O,EAAmB,CACtBlI,GAAIiI,GAIN,CACAtO,EAAGyJ,UAAU,CACZvE,SAAU,EACVd,eAAe,IAAI/G,GAAWM,KAAKwF,EAAY,CAC9ClF,QAAS2D,KAAKC,UAAUhE,GACxBK,YAAa,yBAKf,IAAAoH,IAAkCH,EAAlCG,EAAAC,EAAgBwD,KAAkB5D,EAAAG,KAAAG,MAAE,CAAA,IAAzBoE,EAAC1E,EAAA/F,MACXY,EAAGyJ,UAAU,CACZvE,SAAU2E,EAAEC,OACZ1F,eAAe,IAAI3F,EAAAA,OAAQd,KAAKkM,EAAEE,KAEpC,CAKA,IAAM7B,EAASY,GAAiBD,EAAUa,YAAYxM,WAChD8M,GAAe,IAAIvL,EAAAA,OAAQd,KAAKuK,GAKtClI,EAAGyJ,UAJe,CACjBrF,cAAe4F,EACf9B,QAAQ,IAIT,IAAIP,EAAc,GACZC,EAAe5H,EAAGgF,QAAQiF,OAC/B,SAACC,EAAOC,GAAQ,OAAAD,EAAQrC,OAAOsC,EAAIjF,UAAY,EAAE,EACjD,IAEG4C,EAAM,EAAEjH,WA0JIuJ,EAAgBC,EAAAI,MACxB,mBAANL,EAAMtH,GAAA,CAAA,IACNwH,EAAAtI,EAAAT,IAAA6I,EAAAtH,iBACDyH,EAAA9I,OAGD,QAAI6I,IAA0BE,QAAG/E,MAAUgF,GAAIA,MAI9C,MAHMJ,EAASC,EACdlL,SAEDqC,EAAAR,KAAA,CAE8D,IAAA0B,EAAAlB,GAM3D,YAFJA,EAAaR,KAAEsJ,EAAChJ,IAAAA,EAAAQ,EAAAM,KAAA,KAAAL,EAAA,IAAAG,EAAA,KAHhBV,EAAYA,EAACa,CAOZ,CAEAN,EAEOD,EAAAC,EAAA,EAAAP,GAEPO,EAAAP,EAEA,MAACL,GACDW,EAAAC,IAAAA,EAAA,IAAAG,GAAA,EAAAf,sQApGA,SAAAsJ,EAAAL,EAAyBI,OAIfzI,EAAAT,KAAA,EAsBV,gBArBiBgJ,EAAA9I,GACjB,IACA,OAAEgH,EAAAiC,EAAAzL,UAAAwL,IAAAA,MAEH,IADAhJ,EAAU4I,EAAA5B,YAC4C,CACrD,IAAC9F,EAAUlB,GAIZ,YADEA,EAAAR,KAAAsJ,EAAAhJ,IAAAA,EAAAQ,EAAAM,KAAA,KAAAL,EAAA,IAAAG,EAAA,KAFDV,EAAcA,EAAAa,CAKd,CAECN,IAC6BA,EAAA,EAAAP,GACxBO,EAAAP,CAEL,CAAA,MAAAL,GACAW,EAAAC,IAAWA,EAAA,IAAAG,GAAA,EAAAf,OAGZY,oCA7GW2I,CACOjC,EAAK,SAAbhJ,GACV,IAAMqG,EAAQtG,EAAiBC,GAAM,IAAIjB,EAAKA,OAAG6F,OAChDuE,EACA,OACA,EACAnJ,EAAKwF,SACLzB,EAAMA,OAAC+F,WAAWhK,QAAMoG,QAAQlG,EAAKI,OAAQ,aAKT,OAFrCE,EAAGsJ,SAASvD,GAEZ4B,GAAeE,OAAOnI,EAAKwF,UAAUxE,QAAAC,QACzBoH,EAAW6C,WAAW5K,IAAGiB,KAAA4J,SAAAA,GAArC/C,EAAG+C,EAEClD,GAAeC,EAAeC,OAAOC,KAAIJ,EAG9C,EAAA,EAAA,EAACA,WAAAA,OAAAA,CAAA,GAAAhH,OAAAA,QAAAC,QAAAE,GAAAA,EAAAI,KAAAJ,EAAAI,KAAAd,GAAAA,IA0CF,CAAC,MAAAiB,GAAAV,OAAAA,QAAAa,OAAAH,0BN9HY,SACZqG,GACgC,IAAA,IA+HQC,EA/HRiH,EAAA,WAAA,SAAAxO,IAAAO,OAAAA,QAAAC,QAmI1BX,EAAG8H,IAAIC,IAAW9G,KAAAP,WAAAA,OAAAA,QAAAC,QAGlBX,EAAGS,QAAMQ,KAAA,WAQf,OANImH,IAEHA,EAAUlD,SADWlF,EAAGgF,QAAQhF,EAAGgF,QAAQ/F,OAAS,GAClBiG,SAClCkD,EAAUC,KAAOrI,EAAGqG,GAAG,QAGjB,CACNrG,GAAAA,EACAuI,eAAAA,EACAH,UAAAA,EACC,KA1CF,GAAIT,EAAcC,EACjB,MAAM,IAAItJ,MAAM,+BAGjB,IAAI8J,EACJ,GAAIT,EAAcC,EAAeC,OAAOC,GAAM,CAC7C,IAAMkC,GAAe,IAAIvL,EAAAA,OAAQd,KAChC8J,EAAOqB,eAAiBrB,EAAOoB,UAAUa,YAAYxM,YAEhD0R,EAA+B,CACpCxK,cAAe4F,EACf9B,QAAQ,GAETE,EAAY,CACXC,KAAM,GACNC,KAAMtI,EAAGgF,QAAQ/F,OACjBiG,SAAU,EACVpF,OAAQ9C,OAAOC,KAAK+M,EAAalN,QAAS,OAAOI,SAAS,WAE3D8C,EAAGyJ,UAAUmF,EACd,CAAC,IAAA/N,EAEG4G,WAAAA,GAAAA,EAAOxH,OAAMS,OAAAA,QAAAC,QACLZ,EAASC,EAAIyH,EAAOxH,SAAOgB,cAAAkL,GAAtCnM,EAAEmM,CAAqC,EAAA,CADpC1E,GACoC,OAAA5G,GAAAA,EAAAI,KAAAJ,EAAAI,KAAAd,GAAAA,GAAAuH,EA9HnCD,EAAOwB,YACXxB,EAAOwB,UAAY9L,GAEfsK,EAAOsB,qBACXtB,EAAOsB,mBAAqB,SAEK/K,IAA9ByJ,EAAOoH,qBACVpH,EAAOoH,oBAAqB,GAS7B,IANA,IAMqC1J,EAN/B4C,EAAa,IAAIoB,EAAmBA,oBAAC1B,EAAOwB,WAC9CjJ,EAAK,IAAIoJ,EAAaA,YACpBb,EAA2B,GAIjCjD,EAAAC,EAAsBkC,EAAOqH,YAAQ3J,EAAAG,KAAAG,MAAE,CAA5B,IAAAsJ,EAAO5J,EAAA/F,MACjB,GAAyB,IAArB2P,EAAQ7J,SACX,MAAM,IAAI5G,MAAM,kDAGjB,IAAMyH,EAAQtG,EACbsP,GACA,IAAI1R,GAAWiH,OACdmD,EAAOmB,MACP,OACA,EACAmG,EAAQ7J,SACRzB,EAAAA,OAAO+F,WAAWhK,EAAAA,MAAMoG,QAAQmJ,EAAQjP,OAAQ,aAGlDyI,EAAegD,KAAQwD,EAAQ1G,KAAQ0G,IAAAA,EAAQzG,MAC/CtI,EAAGsJ,SAASvD,EACb,CAIA,GACC0B,EAAOoH,oBACPpH,EAAOgE,aAAaxM,SAAWwI,EAAOqH,SAAS7P,OAE/C,MAAU,IAAAX,MACT,mEAKF,IAAAqL,IAA6CC,EAA7CD,EAAApE,EAA0BkC,EAAOgE,gBAAY7B,EAAAD,KAAAlE,MAAE,KAAAuJ,EAAAC,EAC1C/M,EADMwJ,EAAW9B,EAAAxK,MAMpB8C,EAHuB,OAAvB8M,EAAAtD,EAAY7N,cAAZmR,EAAyB/Q,SACF,OADSgR,EAChCvD,EAAY7N,cAAZoR,EAAyB/Q,aAErB,IAAIb,GAAWM,KAClB+N,EAAY9N,QACZ8N,EAAY7N,YACZ2D,EAAkBiG,EAAO3J,YAGtB,IAAIW,EAAAA,OAAQd,KAAK+N,EAAY9N,SAGlCoC,EAAGyJ,UAAU,CACZvE,SAAU,EACVd,cAAelC,GAEjB,CAGA,IAAA,IAAyC4J,EAAzCD,EAAAtG,EAAgBkC,EAAOsB,sBAAkB+C,EAAAD,KAAApG,MAAE,CAAA,IAAhCoE,EAACiC,EAAA1M,MACXY,EAAGyJ,UAAU,CACZvE,SAAU2E,EAAEC,OACZ1F,eAAe,IAAI3F,EAAKA,OAAGd,KAAKkM,EAAEE,KAEpC,CAGA,IAAIpC,EAAc,GACZC,EAAe5H,EAAGgF,QAAQiF,OAC/B,SAACC,EAAOC,GAAQ,OAAAD,EAAQrC,OAAOsC,EAAIjF,UAAY,EAAE,EACjD,IAEG4C,EAAM,EAAEoH,sgBAsDX,SAAkBxE,EAAKL,KACvB,IAAArI,EAAkBT,EAAlBkH,GAAA,kBACS8B,EAAA9I,cAGHgH,EAAAiC,EAAAzL,UAAAwL,IAAAA,YACJJ,EAAA5B,KACYhH,EAAAR,KAAA,KACL0B,EAAAlB,uDACRA,EAAAA,EAAAa,sFA/DUqI,CACOlD,EAAO0H,aAAY,SAA3BzP,GACV,IAAMqG,EAAQtG,EAAiBC,GAAM,IAAIjB,EAAAA,OAAQ6F,OAChDmD,EAAOoB,UACP,OACA,EACAnJ,EAAKwF,SACLzB,EAAAA,OAAO+F,WAAWhK,QAAMoG,QAAQlG,EAAKI,OAAQ,aAMT,OAJrCyI,EAAegD,KAAQ7L,EAAK2I,SAAQ3I,EAAK4I,MAEzCtI,EAAGsJ,SAASvD,GAEZ4B,GAAeE,OAAOnI,EAAKwF,UAAUxE,QAAAC,QACzBoH,EAAW6C,WAAW5K,IAAGiB,KAAA4J,SAAAA,GAArC/C,EAAG+C,EAEClD,GAAeC,EAAeC,OAAOC,KAAIJ,EAAA,EAAA,EAG9C,EAACA,WAAAA,OAAAA,CAAA,GAAAhH,OAAAA,QAAAC,QAAAuO,GAAAA,EAAAjO,KAAAiO,EAAAjO,KAAA0N,GAAAA,IA6CF,CAAC,MAAAvN,UAAAV,QAAAa,OAAAH,EAAA,CAAA,oBC7JqB,SACrBqG,GAAuB,IAevB,QA8EEC,EA9E4BvC,EAdDhF,EAAA,WAiD7B,GAAIwH,EAAcC,EAAeE,EAChC,UAAUxJ,kDACmCqJ,EAAW,qBAAqBC,EAAY,UAAUE,GAKpG,IAAIM,EACJ,GAAIT,EAAcC,EAAeE,EAAK,CAErC,IAAMkC,GAAe,IAAIvL,SAAQd,KAAKmL,GAEhC8F,EAA+B,CACpCxK,cAAe4F,EACf9B,QAAQ,GAETE,EAAY,CACXC,KAAM,GACNC,KAAMtI,EAAGgF,QAAQ/F,OACjBiG,SAAU,EACVpF,OAAQ9C,OAAOC,KAAK+M,EAAalN,QAAS,OAAOI,SAAS,WAE3D8C,EAAGyJ,UAAUmF,EACd,MAAWjH,EAAcC,EAAeE,GACvCzG,QAAQC,IAAI,oBACZ,OAAAZ,QAAAC,QAGKX,EAAG8H,IAAIC,IAAW9G,KAAAP,WAAAA,OAAAA,QAAAC,QAGlBX,EAAGS,QAAMQ,KAAA,WAQf,OANImH,IAEHA,EAAUlD,SADWlF,EAAGgF,QAAQhF,EAAGgF,QAAQ/F,OAAS,GAClBiG,SAClCkD,EAAUC,KAAOrI,EAAGqG,GAAG,QAGjB,CACNrG,GAAAA,EACAuI,eAAgBG,EAAMF,IAAI,SAAC9I,GAAY,OAAAA,EAAK2I,SAAQ3I,EAAK4I,IAAI,GAC7DF,UAAAA,EACC,MA1FDM,EAKGjB,EALHiB,MACAG,EAIGpB,EAJHoB,UACAuG,EAGG3H,EAHH2H,SAAQpG,EAGLvB,EAFHwB,UAAAA,OAAY9L,IAAH6L,EAAG7L,EAAkB6L,EAAAqG,EAE3B5H,EADHqB,cAAAA,OAAgBD,IAAHwG,EAAGxG,EAAUa,YAAYxM,WAAUmS,EAG3CtH,EAAa,IAAIoB,EAAAA,oBAAoBF,GAErCjJ,EAAK,IAAIoJ,cAGf9D,EAAAC,EAAsB6J,KAAQjK,EAAAG,KAAAG,MAAE,CAArB,IAAA6J,EAAOnK,EAAA/F,MACXmQ,EAA+B,CACpCrK,SAAUoK,EAAQxF,OAClB1F,eAAe,IAAI3F,EAAAA,OAAQd,KAAK2R,EAAQvF,KAEzC/J,EAAGyJ,UAAU8F,EACd,CAGA,IAAI5H,EAAc,GACZC,EAAe5H,EAAGgF,QAAQiF,OAC/B,SAACC,EAAOC,GAAG,OAAKD,GAASC,EAAIjF,UAAY,EAAE,EAC3C,GAEG4C,EAAM,EAAEjH,uwBAAA8J,CACOjC,WAARhJ,GACV,IAAMqG,EAAQtG,EAAiBC,GAAM,IAAIjB,EAAKA,OAAG6F,OAChDuE,EACA,OACA,EACAnJ,EAAKwF,SACLzB,EAAAA,OAAO+F,WAAWhK,QAAMoG,QAAQlG,EAAKI,OAAQ,aAKT,OAHrCE,EAAGsJ,SAASvD,GAGZ4B,GAAeE,OAAOnI,EAAKwF,UAAUxE,QAAAC,QACzBoH,EAAW6C,WAAW5K,IAAGiB,KAAA4J,SAAAA,GAEjClD,GAAeC,GAFnBE,EAAG+C,KAEkCnD,EAAA,EAAA,EAGtC,EAAC,WAAA,OAAAA,CAAA,GAAAhH,OAAAA,QAAAC,QAAAE,GAAAA,EAAAI,KAAAJ,EAAAI,KAAAd,GAAAA,IA+CF,CAAC,MAAAiB,GAAA,OAAAV,QAAAa,OAAAH,EAAA,CAAA,wDCpF6B,SAAUqG,OAAqEtH,IA2N1GuH,EA3N0GvH,EAAAA,WAgL5G,GAAIwH,GAAcC,GAAeC,OAAOC,IACvC,MAAM,IAAIxJ,MAC+CqJ,wDAAAA,GAAgCC,qBAAAA,GAAsBE,UAAAA,IAE/G,OAAApH,QAAAC,QAGKX,EAAG8H,IAAIC,IAAW9G,KAAA,WAAA,OAAAP,QAAAC,QAGlBX,EAAGS,QAAMQ,KAAA,WAEf,IAAMoH,EAAOrI,EAAGqG,GAAG,OACfmJ,IACHA,EAAYnH,KAAOA,GAGpB,IAAML,EAAkBhI,EAAGgF,QAAQiD,UAAU,SAAC7F,GAAM,OAAAA,EAAE8F,MAAM,GAC5D,IAAyB,IAArBF,EAAwB,CAC3B,IAAMG,EAAenI,EAAGgF,QAAQgD,GAChCI,EAAY,CACXlD,SAAUiD,EAAajD,SACvBmD,KAAAA,EACAC,KAAMN,EACNlI,OAAQ9C,OAAOC,KAAKkL,EAAa/D,cAAcN,YAAY5G,SAC1D,UAGH,CAQA,OANIkL,IAEHA,EAAUlD,SADWlF,EAAGgF,QAAQhF,EAAGgF,QAAQ/F,OAAS,GAClBiG,SAClCkD,EAAUC,KAAOrI,EAAGqG,GAAG,QAGjB,CACNrG,GAAAA,EACAuI,eAAgBvI,EAAGgG,OAAOwC,IACzB,SAACC,GAAS,OAAAA,EAAErC,WAAU,IAAIqC,EAAEvC,iBAAiB,GAE9CkC,UAAAA,EACAoH,YAAAA,EACC,EAAA9H,EAAAA,EAzNDuG,EAcGxG,EAdHwG,SACAK,EAaG7G,EAbH6G,QACA5F,EAYGjB,EAZHiB,MACA+G,EAWGhI,EAXHgI,YACAC,EAUGjI,EAVHiI,cACA7G,EASGpB,EATHoB,UACAD,EAQGnB,EARHmB,MACAE,EAOGrB,EAPHqB,cACA6G,EAMGlI,EANHkI,mBAAkB3G,EAMfvB,EALHwB,UAAAA,OAAS,IAAAD,EAAG7L,EAAkB6L,EAExB+B,EAGHtD,EAFHsB,mBAAAA,OAAkB,IAAAgC,EAAG,GAAEA,EAAA6E,EAEpBnI,EADHoI,KAAAA,OAAO,IAAHD,GAAQA,EAITE,EAAY,GACZC,EAAa,GACbC,EAAc,GAGlB,IAAKP,EAAYQ,MAAM,SAACC,GAAK,OAAKA,EAAM7J,KAAOiI,CAAO,GACrD,MAAU,IAAAhQ,MAAM,kDAMjB,IAHA,IAG+B6G,EAuD3BqK,EAsDApH,EAhHEL,EAAa,IAAIoB,EAAmBA,oBAACF,GACrCjJ,EAAK,IAAIoJ,EAAAA,YAEf9D,EAAAC,EAAoBkK,KAAWtK,EAAAG,KAAAG,MAAE,CAAtB,IAAAyK,EAAK/K,EAAA/F,MACT6L,EAAoBzL,EAAKA,MAACoG,QAAQsK,EAAMpQ,OAAQ,UAChDoL,EAAczH,EAAMA,OAAC+F,WAAWyB,GACtCjL,EAAGsJ,SAAS,CACXC,yBAAyB,IAAIlM,GAAWiH,OACvCsE,EACA,OACA,EACAsH,EAAMhL,SACNgG,GAED9E,WAAY8J,EAAM7H,KAClBnC,kBAAmBgK,EAAM5H,KACzBxB,SAAU,aAGXiJ,GAAclI,OAAOqI,EAAM7B,IAC5B,CAGA,IAAA,IAAgCzE,EAAhCD,EAAApE,EAAmBmK,KAAa9F,EAAAD,KAAAlE,MAAE,CAAA,IAAvB0K,EAAIvG,EAAAxK,MACRmP,EAAgD,CACrD1E,EAAG,SACH2E,GAAIqB,EAAO,OAAS,WACpBxB,IAAK8B,EAAK9B,KAEPxQ,OACJ,EAAA,GAAIoQ,IAAarR,QAASA,UAACuR,MAC1BtQ,EAAWgC,EACP0O,CAAAA,EAAAA,EACHE,CAAAA,KAAMH,QAED,IAAIL,IAAarR,QAASA,UAAC8R,MAMjC,MAAU,IAAApQ,MAAM,oBALhBT,EAAWgC,EAAA,CAAA,EACP0O,EAAmB,CACtBlI,GAAIiI,GAIN,CAEAtO,EAAGyJ,UAAU,CACZvE,SAAU,EACVd,eAAe,IAAI/G,GAAWM,KAC7BwS,EAAKvS,QACL,CACCK,QAASjB,OAAOC,KAAK2E,KAAKC,UAAUhE,IAAcX,SAAS,UAC3DgB,YAAa,wBAIhB8R,GAAenI,OAAOsI,EAAK9B,IAC5B,CAKA,IAJAyB,EAAYC,EAAaC,GAIT,GACf,MAAU,IAAA1R,MAAM,6BAEjB,GAAIwR,EAAY,GAAI,CACnB,IAKIjS,EALE0Q,EAAgD,CACrD1E,EAAG,SACH2E,GAAI,WACJH,IAAKyB,EAAU5S,YAGhB,GAAI+Q,IAAarR,QAAAA,UAAUuR,MAC1BtQ,EAAWgC,EACP0O,CAAAA,EAAAA,EACHE,CAAAA,KAAMH,QAED,IAAIL,IAAarR,QAAAA,UAAU8R,MAMjC,MAAM,IAAIpQ,MAAM,oBALhBT,EAAWgC,EACP0O,CAAAA,EAAAA,EACHlI,CAAAA,GAAIiI,GAIN,CAEA,IAAMlK,GAAgB,IAAI/G,GAAWM,KACpCgS,GAAsB/G,EAAMc,YAAYxM,WACxC,CACCe,QAAS2D,KAAKC,UAAUhE,GACxBK,YAAa,uBAGToK,EAAOtI,EAAGgF,QAAQ/F,OACxBe,EAAGyJ,UAAU,CAAErF,cAAAA,EAAec,SAAU,IACxCsK,EAAc,CACbnJ,GAAIiI,EACJpJ,SAAU,EACVpF,OAAQ9C,OAAOC,KAAKmH,EAAcN,YAAY5G,SAAS,UACvDmL,KAAM,GACNC,KAAAA,EACA+F,IAAKyB,EAAU5S,WAEjB,CAGA,IAAA,IAAkC4O,EAAlCD,EAAAtG,EAAgBwD,KAAkB+C,EAAAD,KAAApG,MAAE,CAAzB,IAAAoE,EAACiC,EAAA1M,MACXY,EAAGyJ,UAAU,CACZvE,SAAU2E,EAAEC,OACZ1F,eAAe,IAAI3F,EAAAA,OAAQd,KAAKkM,EAAEE,KAEpC,CAKA,IAAM7B,EAASY,GAAiBD,EAAUa,YAAYxM,WAChD8M,GAAe,IAAIvL,EAAAA,OAAQd,KAAKuK,GAKtClI,EAAGyJ,UAJe,CACjBrF,cAAe4F,EACf9B,QAAQ,IAIT,IAAIP,GAAc,GACZC,GAAe5H,EAAGgF,QAAQiF,OAC/B,SAACC,EAAOC,GAAG,OAAKD,EAAQrC,OAAOsC,EAAIjF,UAAY,EAAE,EACjD,IAEG4C,GAAM,EAAEjH,GAyCX,SAAYuJ,EAAAC,EAAAI,MAC8B,mBAAzCL,EAAQtH,GAAiC,CAEzC,IADIwH,EAAAtI,EAAAT,IAAA6I,EAAAtH,QACJ,SAAAyH,EAAM9I,GACN,YAGC6I,EAAAtH,EAAAwH,QAAA/E,MAAAgF,GAAAA,MAGC,IAFHhJ,EAAA4I,EAAAC,EAAAlL,SAEcqC,EAACR,KAAA,CACf,IAAA0B,EAAkBlB,GAKZ,YAFNA,EAAAR,KAAAsJ,EAAAhJ,IAAAA,EAAAQ,EAAAM,KAAA,KAAAL,EAAA,IAAAG,EAAA,KAFAV,EAAAA,EAAkBa,EAUlBN,EACAD,EAACC,EAAA,EAAAP,uSAlGD,SAAciJ,EAAAL,EAAAI,GACb,IAAAzI,EAAWT,EAAXkH,GAAA,SACA,SAAA8B,EAAA9I,GACA,IACA,OAAAgH,EAAIiC,EAAIzL,UAAAwL,IAAAA,MAER,MADIJ,EAAA5B,KACChH,EAAAR,KAAU,KACf0B,EAAClB,eAIHA,EAAWR,KAAKsJ,EAAAhJ,IAAAA,EAAqBQ,EAAAM,KAAA,KAAAL,EAAA,IAAAG,EAAA,KAHpCV,EAAAA,EAAAa,EAQAN,EAEDD,EAA4BC,EAAA,EAAAP,GAG5BO,EAAMP,CAEN,CAAA,SACCM,EAAAC,IAAAA,EAA2B,IAAAG,GAAA,EAAAf,EAC3B,EAEDmJ,GAEIvI,CACJ,mCAIY2I,CACOjC,EAARhJ,SAAAA,GACV,IAAMqG,EAAQtG,EAAiBC,GAAM,IAAIjB,EAAAA,OAAQ6F,OAChDuE,EACA,OACA,EACAnJ,EAAKwF,SACLzB,EAAMA,OAAC+F,WAAWhK,EAAKA,MAACoG,QAAQlG,EAAKI,OAAQ,aAKT,OAFrCE,EAAGsJ,SAASvD,GAEZ4B,IAAeE,OAAOnI,EAAKwF,UAAUxE,QAAAC,QACzBoH,EAAW6C,WAAW5K,IAAGiB,KAAA4J,SAAAA,GAArC/C,GAAG+C,EAEClD,IAAeC,GAAeC,OAAOC,MAAIJ,EAG9C,EAAA,EAAA,EAACA,WAAAA,OAAAA,CAAA,GAAAhH,OAAAA,QAAAC,QAAAE,IAAAA,GAAAI,KAAAJ,GAAAI,KAAAd,GAAAA,IA+CF,CAAC,MAAAiB,GAAAV,OAAAA,QAAAa,OAAAH,EAAA,CAAA,8BMtPkC,SACjCgP,EACA3D,GAEA,IACE,GAAgB,eAAZ2D,EAA0B,CAC5B,IAAMC,EAAiB5D,EACvB,IAAK4D,EAAeC,YAClB,OAAW,IAAAhS,MAAM,sCAEnB,IAAK+R,EAAeE,SAClB,OAAO,IAAIjS,MAAM,mCAEnB,GAAI+R,EAAeG,aAAc,CAC/B,IAAK9O,MAAMC,QAAQ0O,EAAeG,cAChC,OAAW,IAAAlS,MAAM,kCAGnB,IAAK+R,EAAeG,aAAaP,MAAM,SAACQ,GACtC,OAAO1R,OAAOuM,OAAOmF,GAAOR,MAAM,SAAA7Q,SAA0B,iBAAVA,CAAkB,EACtE,GACE,OAAO,IAAId,MAAK,yBAA0B+R,EAAeG,aAE7D,CACA,GAAIH,EAAeK,OAAS,CAC1B,GAAqC,iBAA1BL,EAAeK,OAC1B,OAAW,IAAApS,MAAM,uCAEjB,GAAI+R,EAAeK,SAAW3R,OAAO6M,KAAKyE,EAAeK,QAAQT,MAAM,SAAA9Q,GAAG,MAAmB,iBAARA,GAA0D,iBAA/BkR,EAAeK,OAAOvR,EAAiB,GACrJ,OAAO,IAAIb,MAAM,4DAErB,CACF,CACA,GAAgB,mBAAZ8R,EAA8B,CAChC,IAAMO,EAAWlE,EACjB,IAAKkE,EAASvE,aACZ,OAAO,IAAI9N,MAAM,6BAEnB,IAAKqS,EAASvE,aAAawE,SAAS,KAClC,OAAW,IAAAtS,MAAM,0CAEnB,GAAmD,KAA/CqS,EAASvE,aAAayE,MAAM,KAAK,GAAG5R,OACtC,OAAW,IAAAX,MAAM,2CAEnB,GAAIwS,OAAOC,MAAMD,OAAOE,SAASL,EAASvE,aAAayE,MAAM,KAAK,KAChE,OAAW,IAAAvS,MAAM,2CAGnB,GAAIqS,EAASM,YAA6C,iBAAxBN,EAASM,WACzC,OAAO,IAAI3S,MAAM,gCAEnB,GAAIqS,EAASO,MAAiC,iBAAlBP,EAASO,KACnC,OAAO,IAAI5S,MAAM,yBAEnB,GAAIqS,EAASQ,aAA+C,iBAAzBR,EAASQ,YAC1C,OAAW,IAAA7S,MAAM,iCAEnB,GAAIqS,EAASD,QAAqC,iBAApBC,EAASD,OACrC,OAAO,IAAIpS,MAAM,4BAEnB,GAAIqS,EAASS,cAAgB1P,MAAMC,QAAQgP,EAASS,aAClD,OAAO,IAAI9S,MAAM,+BAErB,CACA,MACF,CAAE,MAAO+S,GACP,OAAW,IAAA/S,MAAM,oBACnB,CACF"}