{"version":3,"file":"index.cjs","sources":["../src/utils/strings.ts","../src/types.ts","../src/constants.ts","../src/templates/ordP2pkh.ts","../src/utils/utxo.ts","../src/signData.ts","../src/utils/subtypeData.ts","../src/createOrdinals.ts","../src/sendOrdinals.ts","../src/sendUtxos.ts","../src/transferOrdinals.ts","../src/templates/ordLock.ts","../src/createListings.ts","../src/cancelListings.ts","../src/purchaseOrdListing.ts","../src/utils/icon.ts","../src/deployBsv21.ts","../src/burnOrdinals.ts","../src/utils/paymail.ts","../src/validate.ts"],"sourcesContent":["/**\n * Converts a string to its hexadecimal representation\n *\n * @param {string} utf8Str - The string to convert\n * @returns {string} The hexadecimal representation of the input string\n */\nconst toHex = (utf8Str: string): string => {\n  return Buffer.from(utf8Str).toString(\"hex\");\n};\n\nexport { toHex };\n","import type { PrivateKey, Transaction } from \"@bsv/sdk\";\nimport type { AuthToken } from \"sigma-protocol\";\n\n// biome-ignore lint/complexity/noBannedTypes: Reserved for future use\ntype Signer = {};\n\nexport interface LocalSigner extends Signer {\n  idKey: PrivateKey;\n}\n\nexport interface RemoteSigner extends Signer {\n  keyHost: string;\n  authToken?: AuthToken;\n}\n\nexport type Destination = {\n  address: string;\n  inscription?: Inscription;\n};\n\n/**\n * @typedef {Object} Listing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n * @property {Utxo} listingUtxo - Utxo of the listing\n */\nexport type NewListing = {\n  payAddress: string;\n  price: number;\n  ordAddress: string;\n  listingUtxo: Utxo;\n}\n\n/**\n * @typedef {Object} ExistingListing\n * @property {string} payout - Payment output script base64 encoded\n * @property {Utxo} listingUtxo - Utxo of the listing\n */\nexport type ExistingListing = {\n  payout: string;\n  listingUtxo: Utxo;\n}\n\n/**\n * @typedef {Object} NewTokenListing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n * @property {number} tokens - Number of tokens in whole token display format. Ex. 0.5 for 0.5 tokens. Library handles conversion to 'tsat' format.\n */\nexport type NewTokenListing = {\n  payAddress: string;\n  price: number;\n  tokens: number;\n  ordAddress: string;\n}\n\n/**\n * @typedef {Object} Distribution\n * @property {string} address - Destination address. Must be a Ordinals address (BSV address for recieving 1Sat ordinals tokens).\n * @property {number} tokens - Number of tokens in whole token display format. Ex. 0.5 for 0.5 tokens. Library handles conversion to 'tsat' format. \n * @property {boolean} [omitMetaData] - Optional. Set to true to omit metadata from this distribution's output.\n */\nexport type Distribution = {\n  address: string;\n  tokens: number;\n  omitMetaData?: boolean;\n};\n\n/**\n * @typedef {Object} Utxo\n * @property {number} satoshis - Amount in satoshis\n * @property {string} txid - Transaction id\n * @property {number} vout - Output index\n * @property {string} script - Base64 encoded locking script\n */\nexport type Utxo = {\n  satoshis: number;\n  txid: string;\n  vout: number;\n  script: string;\n};\n\n/**\n * @typedef {Object} NftUtxo\n * @property {string} collectionId - Optional. Collection id of the NFT\n * @property {string} contentType - Media type of the NFT\n * @property {string} creatorBapId - Optional. Creator BAP id of the NFT\n * @property {string} origin - Origin address of the NFT\n * @property {number} satoshis - Always 1\n */\nexport interface NftUtxo extends Utxo {\n  collectionId?: string;\n  contentType: string;\n  creatorBapId?: string;\n  origin: string;\n  satoshis: 1;\n}\n\n/**\n * @typedef {Object} TokenUtxo\n * @property {string} amt - Number of tokens as a string in 'tsat' format. Ex. 100000000 for 1 token with 8 decimal places.\n * @property {string} id - Token id -  either tick or id depending on protocol\n * @property {string} satoshis - Always 1\n * @property {string} [payout] - Optional. Payment output script base64 encoded\n * @property {number} [price] - Optional. Listing price in satoshis\n * @property {boolean} [isListing] - Optional. True if the token is a listing\n */\nexport interface TokenUtxo extends Utxo {\n  amt: string;\n  id: string;\n  satoshis: 1;\n  payout?: string;\n  price?: number;\n  isListing?: boolean;\n}\n\nexport enum TokenSelectionStrategy {\n  SmallestFirst = \"smallest\",\n  LargestFirst = \"largest\",\n  RetainOrder = \"retain\",\n  Random = \"random\",\n}\n\nexport interface TokenSelectionOptions {\n  inputStrategy?: TokenSelectionStrategy;\n  outputStrategy?: TokenSelectionStrategy;\n}\n\nexport interface TokenSelectionResult {\n  selectedUtxos: TokenUtxo[];\n  totalSelected: number;\n  isEnough: boolean;\n}\n\nexport type Inscription = {\n  dataB64: string;\n  contentType: string;\n};\n\nexport type ImageContentType =\n  | \"image/png\"\n  | \"image/jpeg\"\n  | \"image/gif\"\n  | \"image/svg+xml\"\n  | \"image/webp\";\n\n/**\n * @typedef {Object} IconInscription\n * @property {string} dataB64 - Base64 encoded image data. Must be a square image.\n * @property {ImageContentType} contentType - Media type of the image\n */\nexport type IconInscription = {\n  dataB64: string;\n  contentType: ImageContentType;\n};\n\nexport type Payment = {\n  to: string;\n  amount: number;\n};\n\nexport type TokenInscription = {\n  p: \"bsv-20\";\n  amt: string;\n  op: \"transfer\" | \"mint\" | \"deploy+mint\" | \"burn\";\n  dec?: string;\n};\n\nexport interface MintTokenInscription extends TokenInscription {\n  op: \"mint\";\n}\n\nexport interface DeployMintTokenInscription extends TokenInscription {\n  op: \"deploy+mint\";\n  sym: string;\n  icon: string;\n}\n\nexport interface TransferTokenInscription extends TokenInscription {\n  p: \"bsv-20\";\n  amt: string;\n  op: \"transfer\" | \"burn\";\n}\n\nexport interface TransferBSV20Inscription extends TransferTokenInscription {\n  tick: string;\n}\n\nexport interface TransferBSV21Inscription extends TransferTokenInscription {\n  id: string;\n}\n\nexport enum TokenType {\n  BSV20 = \"bsv20\",\n  BSV21 = \"bsv21\",\n}\n\nexport type BaseResult = {\n  tx: Transaction;\n  spentOutpoints: string[];\n};\n\nexport interface ChangeResult extends BaseResult {\n  payChange?: Utxo;\n};\n\n/**\n * MAP (Magic Attribute Protocol) metadata object with stringified values for writing to the blockchain\n * @typedef {Object} MAP\n * @property {string} app - Application identifier\n * @property {string} type - Metadata type\n * @property {string} [prop] - Optional. Additional metadata properties\n */\nexport type MAP = {\n  app: string;\n  type: string;\n  [prop: string]: string;\n};\n\nexport type PreMAP = {\n  app: string;\n  type: string;\n  [prop: string]: unknown;\n  royalties?: Royalty[];\n  subTypeData?: CollectionSubTypeData | CollectionItemSubTypeData;\n};\n\nexport type CreateOrdinalsConfig = {\n  utxos: Utxo[];\n  destinations: Destination[];\n  paymentPk: PrivateKey;\n  changeAddress?: string;\n  satsPerKb?: number;\n  metaData?: PreMAP;\n  signer?: LocalSigner | RemoteSigner;\n  additionalPayments?: Payment[];\n};\n\nexport enum RoytaltyType {\n  Paymail = \"paymail\",\n  Address = \"address\",\n  Script = \"script\",\n}\n\n/**\n * Royalty object\n * @typedef {Object} Royalty\n * @property {RoytaltyType} type - Royalty type, string, one of \"paymail\", \"address\", \"script\"\n * @property {string} destination - Royalty destination\n * @property {string} percentage - Royalty percentage as a string float 0-1 (0.01 = 1%)\n */\nexport type Royalty = {\n  type: RoytaltyType;\n  destination: string;\n  percentage: string; // string float 0-1\n};\n\nexport interface CreateOrdinalsMetadata extends PreMAP {\n  type: \"ord\",\n  name: string,\n  previewUrl?: string,\n}\n\nexport interface CreateOrdinalsCollectionMetadata extends CreateOrdinalsMetadata {\n  subType: \"collection\",\n  subTypeData: CollectionSubTypeData, // JSON stringified CollectionSubTypeData\n  royalties?: Royalty[],\n};\n\nexport interface CreateOrdinalsCollectionItemMetadata extends CreateOrdinalsMetadata {\n  subType: \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n};\n\n/**\n * Configuration object for creating an ordinals collection\n * @typedef {Object} CreateOrdinalsCollectionConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collection\"\n * @property metaData.name - Collection name\n * @property metaData.subTypeData - JSON stringified CollectionSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionConfig extends CreateOrdinalsConfig {\n  metaData: CreateOrdinalsCollectionMetadata\n}\n\nexport type CollectionTraits = {\n  [trait: string]: CollectionTrait;\n};\n\nexport type CollectionTrait = {\n  values: string[];\n  occurancePercentages: string[];\n};\n\nexport type Rarity = {\n  [key: string]: string;\n}\n\nexport type RarityLabels = Rarity[]\nexport interface CollectionSubTypeData {\n  description: string;\n  quantity: number;\n  rarityLabels: RarityLabels;\n  traits: CollectionTraits;\n}\n\nexport interface CreateOrdinalsCollectionItemMetadata extends PreMAP {\n  type: \"ord\",\n  name: string,\n  subType: \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n  previewUrl?: string,\n}\n\n/**\n * Configuration object for creating an ordinals collection item\n * @typedef {Object} CreateOrdinalsCollectionItemConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection item\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collectionItem\"\n * @property metaData.name - Collection item name\n * @property metaData.subTypeData - JSON stringified CollectionItemSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionItemConfig extends CreateOrdinalsConfig {\n  metaData: CreateOrdinalsCollectionItemMetadata\n}\n\n/**\n * Subtype data for an ordinals collection item\n * @typedef {Object} CollectionItemSubTypeData\n * @property {string} collectionId - Collection id\n * @property {number} mintNumner - Mint number\n * @property {number} rank - Rank\n * @property {string} rarityLabel - Rarity label\n * @property {string} traits - traits object\n * @property {string} attachments - array of attachment objects\n */\nexport interface CollectionItemSubTypeData {\n  collectionId: string;\n  mintNumber?: number;\n  rank?: number;\n  rarityLabel?: RarityLabels;\n  traits?: CollectionItemTrait[];\n  attachments?: CollectionItemAttachment[];\n}\n\nexport type CollectionItemTrait = {\n  name: string;\n  value: string;\n  rarityLabel?: string;\n  occurancePercentrage?: string;\n};\n\nexport type CollectionItemAttachment = {\n  name: string;\n  description?: string;\n  \"content-type\": string;\n  url: string;\n}\n\nexport interface BurnMAP extends MAP {\n  type: \"ord\";\n  op: \"burn\";\n}\n\nexport type BurnOrdinalsConfig = {\n  ordPk: PrivateKey;\n  ordinals: Utxo[];\n  metaData?: BurnMAP;\n}\n\nexport type SendOrdinalsConfig = {\n  paymentUtxos: Utxo[];\n  ordinals: Utxo[];\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  destinations: Destination[];\n  changeAddress?: string;\n  satsPerKb?: number;\n  metaData?: PreMAP;\n  signer?: LocalSigner | RemoteSigner;\n  additionalPayments?: Payment[];\n  enforceUniformSend?: boolean;\n}\n\nexport type DeployBsv21TokenConfig = {\n  symbol: string;\n  decimals?: number;\n  icon: string | IconInscription;\n  utxos: Utxo[];\n  initialDistribution: Distribution;\n  paymentPk: PrivateKey;\n  destinationAddress: string;\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[];\n};\n\nexport type SendUtxosConfig = {\n  utxos: Utxo[];\n  paymentPk: PrivateKey;\n  payments: Payment[];\n  satsPerKb?: number;\n  changeAddress?: string;\n  metaData?: MAP;\n};\n\nexport interface TokenChangeResult extends ChangeResult {\n  tokenChange?: TokenUtxo[];\n}\n\n/**\n * Configuration object for token outputs\n * @typedef {Object} TokenSplitConfig\n * @property {number} outputs - Number of outputs to split the token into. Default is 1.\n * @property {number} threshold - Optional. Minimum amount of tokens per output.\n * @property {boolean} omitMetaData - Set to true to omit metadata from the token change outputs\n **/\nexport type TokenSplitConfig = {\n  outputs: number;\n  threshold?: number;\n  omitMetaData?: boolean;\n}\n\nexport enum TokenInputMode {\n  All = \"all\",\n  Needed = \"needed\",\n}\n\n/**\n * Configuration object for transferring token ordinals\n * @typedef {Object} TransferOrdTokensConfig\n * @property {TokenType} protocol - Token protocol\n * @property {string} tokenID - Token id\n * @property {number} decimals - Number of decimal places for this token.\n * @property {Utxo[]} utxos - Array of payment Utxos\n * @property {TokenUtxo[]} inputTokens - Array of TokenUtxos to be transferred\n * @property {Distribution[]} distributions - Array of Distribution objects\n * @property {PrivateKey} paymentPk - Private key of the payment address\n * @property {PrivateKey} ordPk - Private key of the ord address\n * @property {string} [changeAddress] - Optional. Address to send the change\n * @property {string} [tokenChangeAddress] - Optional. Address to send the token change\n * @property {number} [satsPerKb] - Optional. Satoshis per kilobyte\n * @property {PreMAP} [metaData] - Optional. MAP metadata object\n * @property {LocalSigner | RemoteSigner} [signer] - Optional. Signer object\n * @property {Payment[]} [additionalPayments] - Optional. Array of additional payments\n * @property {boolean} [burn] - Optional. Set to true to burn the input tokens\n * @property {TokenSplitConfig} [splitConfig] - Optional. Configuration object for splitting token change\n * @property {TokenInputMode} [tokenInputMode] - Optional. Token input mode. Default is \"needed\"\n */\nexport type TransferOrdTokensConfig = {\n  protocol: TokenType;\n  tokenID: string;\n  decimals: number;\n  utxos: Utxo[];\n  inputTokens: TokenUtxo[];\n  distributions: Distribution[];\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  inputMode?: TokenInputMode;\n  changeAddress?: string;\n  tokenChangeAddress?: string;\n  satsPerKb?: number;\n  metaData?: PreMAP;\n  signer?: LocalSigner | RemoteSigner;\n  additionalPayments?: Payment[];\n  burn?: boolean;\n  splitConfig?: TokenSplitConfig;\n  tokenInputMode?: TokenInputMode;\n}\n\nexport type CreateOrdListingsConfig = {\n  utxos: Utxo[];\n  listings: NewListing[];\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey,\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[];\n}\n\nexport type PurchaseOrdListingConfig = {\n  utxos: Utxo[];\n  paymentPk: PrivateKey;\n  listing: ExistingListing;\n  ordAddress: string;\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[],\n  royalties?: Royalty[],\n  metaData?: MAP,\n}\n\nexport type PurchaseOrdTokenListingConfig = {\n  protocol: TokenType;\n  tokenID: string;\n  utxos: Utxo[];\n  paymentPk: PrivateKey;\n  listingUtxo: TokenUtxo;\n  ordAddress: string;\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[],\n  metaData?: MAP,\n}\n\nexport type CancelOrdListingsConfig = {\n  utxos: Utxo[],\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  listingUtxos: Utxo[];\n  additionalPayments?: Payment[];\n  changeAddress?: string;\n  satsPerKb?: number;\n}\n\nexport interface CancelOrdTokenListingsConfig extends CancelOrdListingsConfig {\n  utxos: Utxo[],\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  listingUtxos: TokenUtxo[];\n  additionalPayments: Payment[];\n  changeAddress?: string;\n  satsPerKb?: number;\n  protocol: TokenType,\n  tokenID: string;\n  ordAddress?: string;\n}\n\n/**\n * Configuration object for creating a token listing\n * @typedef {Object} CreateOrdTokenListingsConfig\n * @property {Utxo[]} utxos - Array of payment Utxos\n * @property {TokenUtxo[]} inputTokens - Array of TokenUtxos to be listed\n * @property {NewTokenListing[]} listings - Array of NewTokenListings\n * @property {PrivateKey} paymentPk - Private key of the payment address\n * @property {PrivateKey} ordPk - Private key of the ord address\n * @property {string} tokenChangeAddress - Address to send the token change\n * @property {number} [satsPerKb] - Optional. Satoshis per kilobyte\n * @property {Payment[]} [additionalPayments] - Optional. Array of additional payments\n * @property {TokenType} protocol - Token protocol\n * @property {string} tokenID - Token id\n * @property {number} decimals - Number of decimal places for this token.\n */\nexport interface CreateOrdTokenListingsConfig {\n  utxos: Utxo[];\n  listings: NewTokenListing[];\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey,\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[];\n  protocol: TokenType;\n  tokenID: string;\n  decimals: number;\n  inputTokens: TokenUtxo[];\n  tokenChangeAddress: string;\n}\n\nexport const MAX_TOKEN_SUPPLY = 2n ** 64n - 1n;","export const MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\nexport const DEFAULT_SAT_PER_KB = 10;\nexport const API_HOST = \"https://ordinals.gorillapool.io/api\";","import {\n\tLockingScript,\n\tP2PKH,\n\ttype Script,\n} from \"@bsv/sdk\";\nimport type { Inscription, MAP } from \"../types\";\nimport { toHex } from \"../utils/strings\";\nimport { MAP_PREFIX } from \"../constants\";\n\n/**\n * OrdP2PKH (1Sat Ordinal + Pay To Public Key Hash) class implementing ScriptTemplate.\n *\n * This class provides methods to create an Ordinal with Pay To Public Key Hash locking and unlocking scripts. \n * It extends the standard P2PKH script template and provides a custom lock method.\n */\nexport default class OrdP2PKH extends P2PKH {\n\t/**\n\t * Creates a 1Sat Ordinal + P2PKH locking script for a given address string\n\t *\n\t * @param {string} address - An destination address for the Ordinal.\n\t * @param {Object} [inscription] - Base64 encoded file data and Content type of the file.\n\t * @param {MAP} [metaData] - (optional) MAP Metadata to be included in OP_RETURN.\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\t// unlock method inherits from p2pkh\n\tlock(\n\t\taddress: string,\n    inscription?: Inscription,\n\t\tmetaData?: MAP | undefined,\n\t): Script {\n\t\tlet ordAsm = \"\";\n\t\t// This can be omitted for reinscriptions that just update metadata\n\t\tif (inscription?.dataB64 !== undefined && inscription?.contentType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(inscription.dataB64, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(inscription.contentType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`;\n\t\t}\n\n\t\t// Create ordinal output and inscription in a single output\n\t\tconst lockingScript = new P2PKH().lock(address);\n\t\tlet inscriptionAsm = `${ordAsm ? `${ordAsm} ` : \"\"}${lockingScript.toASM()}`;\n\n\t\t// MAP.app and MAP.type keys are required\n\t\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t\t}\n\n\t\tif (metaData?.app && metaData?.type) {\n\t\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\t\tconst mapCmdValue = toHex(\"SET\");\n\t\t\tinscriptionAsm = `${inscriptionAsm ? `${inscriptionAsm} `: \"\"}OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\t\tif (key !== \"cmd\") {\n\t\t\t\t\tinscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\n\t\t\t\t\t\tvalue as string,\n\t\t\t\t\t)}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn LockingScript.fromASM(inscriptionAsm);\n\t}\n}\n","import {\n\ttype Transaction,\n\ttype UnlockingScript,\n\tfromUtxo,\n\ttype TransactionInput,\n\tUtils,\n\tP2PKH,\n  Script,\n} from \"@bsv/sdk\";\nimport { type NftUtxo, type TokenSelectionOptions, type TokenSelectionResult, TokenSelectionStrategy, TokenType, type TokenUtxo, type Utxo } from \"../types\";\nimport { API_HOST } from \"../constants\";\nimport { toToken } from \"satoshi-token\";\n\nconst { fromBase58Check } = Utils;\n\n/**\n * Converts a Utxo object with a base64 encoded script to a Utxo object with a hex encoded script\n * @param {Utxo} utxo - Utxo object with base64 encoded script\n * @param {Object} unlockScriptTemplate - Object with sign and estimateLength functions\n * @returns {TransactionInput} Utxo object with hex encoded script\n */\nexport const inputFromB64Utxo = (\n\tutxo: Utxo,\n\tunlockScriptTemplate: {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>;\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>;\n\t},\n): TransactionInput => {\n\tconst input = fromUtxo(\n\t\t{\n\t\t\t...utxo,\n\t\t\tscript: Buffer.from(utxo.script, \"base64\").toString(\"hex\"),\n\t\t},\n\t\tunlockScriptTemplate,\n\t);\n\treturn input;\n};\n\n/**\n * Fetches pay utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<Utxo[]>} Array of pay utxos\n */\nexport const fetchPayUtxos = async (address: string, scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\"): Promise<Utxo[]> => {\n\tconst payUrl = `${API_HOST}/txos/address/${address}/unspent?bsv20=false`;\n\tconsole.log({ payUrl });\n\tconst payRes = await fetch(payUrl);\n\tif (!payRes.ok) {\n\t\tthrow new Error(\"Error fetching pay utxos\");\n\t}\n\tlet payUtxos = await payRes.json();\n\t// exclude all 1 satoshi utxos\n\tpayUtxos = payUtxos.filter((u: Utxo) => u.satoshis !== 1 && !isLock(u));\n\n\t// Get pubkey hash from address\n\tconst pubKeyHash = fromBase58Check(address);\n\tconst p2pkhScript = new P2PKH().lock(pubKeyHash.data);\n\tpayUtxos = payUtxos.map((utxo: Partial<Utxo>) => ({\n\t\ttxid: utxo.txid,\n\t\tvout: utxo.vout,\n\t\tsatoshis: utxo.satoshis,\n\t\tscript: scriptEncoding === \"hex\" || scriptEncoding === \"base64\" ? Buffer.from(p2pkhScript.toBinary()).toString(scriptEncoding) : p2pkhScript.toASM(),\n\t}));\n\treturn payUtxos as Utxo[];\n};\n\n/**\n * Fetches NFT utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @param {string} [collectionId] - Optional. Collection id (collection insciprtion origin)\n * @param {number} [limit=10] - Optional. Number of utxos to fetch. Default is 10\n * @param {number} [offset=0] - Optional. Offset for fetching utxos. Default is 0\n * @param {string} [scriptEncoding=\"base64\"] - Optional. Encoding for the script. Default is base64. Options are hex, base64, or asm.\n * @returns {Promise<Utxo[]>} Array of NFT utxos\n */\nexport const fetchNftUtxos = async (\n\taddress: string,\n\tcollectionId?: string,\n\tlimit = 10,\n\toffset = 0,\n  scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\",\n): Promise<NftUtxo[]> => {\n\tlet url = `${API_HOST}/txos/address/${address}/unspent?limit=${limit}&offset=${offset}&`;\n\n\tif (collectionId) {\n\t\tconst query = {\n\t\t\tmap: {\n\t\t\t\tsubTypeData: { collectionId },\n\t\t\t},\n\t\t};\n\t\tconst b64Query = Buffer.from(JSON.stringify(query)).toString(\"base64\");\n\t\turl += `q=${b64Query}`;\n\t}\n\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching NFT utxos for ${address}`);\n\t}\n\n\t// Returns a BSV20Txo but we only need a few fields\n\tlet nftUtxos = await res.json();\n\n\t// Only include 1 satoshi outputs, non listings\n\tnftUtxos = nftUtxos.filter(\n\t\t(u: {\n\t\t\tsatoshis: number;\n\t\t\tdata: { list: { price: number; payout: string } | undefined } | null;\n\t\t}) => u.satoshis === 1 && !u.data?.list,\n\t);\n\n\tconst outpoints = nftUtxos.map(\n\t\t(utxo: { txid: string; vout: number }) => `${utxo.txid}_${utxo.vout}`,\n\t);\n\t// Fetch the scripts up to the limit\n\tconst nftRes = await fetch(`${API_HOST}/txos/outpoints?script=true`, {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t\tbody: JSON.stringify([...outpoints]),\n\t});\n\n\tif (!nftRes.ok) {\n\t\tthrow new Error(`Error fetching NFT scripts for ${address}`);\n\t}\n\n\tconst nfts = (await nftRes.json() || [])\n\n\tnftUtxos = nfts.map(\n\t\t(utxo: {\n\t\t\torigin: { outpoint: string };\n\t\t\tscript: string;\n\t\t\tvout: number;\n\t\t\ttxid: string;\n\t\t}) => {\n      let script = utxo.script;\n      if (scriptEncoding === \"hex\") {\n        script = Buffer.from(script, \"base64\").toString(\"hex\");\n      } else if (scriptEncoding === \"asm\") {\n        script = Script.fromHex(Buffer.from(script, \"base64\").toString(\"hex\")).toASM();\n      }\n\t\t\tconst nftUtxo = {\n\t\t\t\torigin: utxo.origin.outpoint,\n\t\t\t\tscript,\n\t\t\t\tvout: utxo.vout,\n\t\t\t\ttxid: utxo.txid,\n\t\t\t\tsatoshis: 1,\n\t\t\t} as NftUtxo;\n\t\t\tif (collectionId) {\n\t\t\t\tnftUtxo.collectionId = collectionId;\n\t\t\t}\n\t\t\treturn nftUtxo;\n\t\t},\n\t);\n\n\treturn nftUtxos as NftUtxo[];\n};\n\n/**\n * Fetches token utxos from the API\n * @param {TokenType} protocol - Token protocol. Either BSV20 or BSV21\n * @param {string} tokenId - Token id. Ticker for BSV20 and id (mint+deploy inscription origin) for BSV21\n * @param {string} address - Address to fetch utxos for\n * @param {number} [limit=10] - Number of utxos to fetch. Default is 10\n * @param {number} [offset=0] - Offset for fetching utxos. Default is 0\n * @returns {Promise<TokenUtxo[]>} Array of token utxos\n */\nexport const fetchTokenUtxos = async (\n\tprotocol: TokenType,\n\ttokenId: string,\n\taddress: string,\n  limit = 10,\n  offset = 0,\n): Promise<TokenUtxo[]> => {\n\tconst url = `${API_HOST}/bsv20/${address}/${protocol === TokenType.BSV20 ? \"tick\" : \"id\"}/${tokenId}?bsv20=true&listing=false&limit=${limit}&offset=${offset}`;\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching ${protocol} utxos`);\n\t}\n\n\t// returns a BSV20Txo but we only need a few fields\n\tlet tokenUtxos = await res.json();\n\n\ttokenUtxos = tokenUtxos.map((utxo: Partial<TokenUtxo>) => ({\n\t\tamt: utxo.amt,\n\t\tscript: utxo.script,\n\t\tvout: utxo.vout,\n\t\ttxid: utxo.txid,\n\t\tid: tokenId,\n\t\tsatoshis: 1,\n\t}));\n\n\treturn tokenUtxos as TokenUtxo[];\n};\n\nconst isLock = (utxo: Utxo) => {\n  return !!(utxo as unknown as { lock: { address: string, until: number } }).lock;\n}\n\n/**\n * Selects token UTXOs based on the required amount and specified strategies.\n * @param {TokenUtxo[]} tokenUtxos - Array of token UTXOs.\n * @param {number} requiredTokens - Required amount in tokens (displayed amount).\n * @param {number} decimals - Number of decimal places for the token.\n * @param {TokenSelectionOptions} [options={}] - Options for token selection.\n * @returns {TokenSelectionResult} Selected token UTXOs and total selected amount.\n */\nexport const selectTokenUtxos = (\n  tokenUtxos: TokenUtxo[],\n  requiredTokens: number,\n  decimals: number,\n  options: TokenSelectionOptions = {}\n): TokenSelectionResult => {\n  const {\n    inputStrategy = TokenSelectionStrategy.RetainOrder,\n    outputStrategy = TokenSelectionStrategy.RetainOrder,\n  } = options;\n  \n  // Sort the UTXOs based on the input strategy\n  const sortedUtxos = [...tokenUtxos].sort((a, b) => {\n    if (inputStrategy === TokenSelectionStrategy.RetainOrder) return 0;\n    const amtA = BigInt(a.amt);\n    const amtB = BigInt(b.amt);\n\n    switch (inputStrategy) {\n      case TokenSelectionStrategy.SmallestFirst:\n        return Number(amtA - amtB);\n      case TokenSelectionStrategy.LargestFirst:\n        return Number(amtB - amtA);\n      case TokenSelectionStrategy.Random:\n        return Math.random() - 0.5;\n      default:\n        return 0;\n    }\n  });\n\n  let totalSelected = 0;\n  const selectedUtxos: TokenUtxo[] = [];\n\n  for (const utxo of sortedUtxos) {\n    selectedUtxos.push(utxo);\n    totalSelected += toToken(utxo.amt, decimals);\n    if (totalSelected >= requiredTokens && requiredTokens > 0) {\n      break;\n    }\n  }\n\n  // Sort the selected UTXOs based on the output strategy\n  if (outputStrategy !== TokenSelectionStrategy.RetainOrder) {\n    selectedUtxos.sort((a, b) => {\n      const amtA = BigInt(a.amt);\n      const amtB = BigInt(b.amt);\n\n      switch (outputStrategy) {\n        case TokenSelectionStrategy.SmallestFirst:\n          return Number(amtA - amtB);\n        case TokenSelectionStrategy.LargestFirst:\n          return Number(amtB - amtA);\n        case TokenSelectionStrategy.Random:\n          return Math.random() - 0.5;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  return {\n    selectedUtxos,\n    totalSelected,\n    isEnough: totalSelected >= requiredTokens\n  };\n};","import type { Transaction } from \"@bsv/sdk\";\nimport { Sigma } from \"sigma-protocol\";\nimport type { LocalSigner, RemoteSigner } from \"./types\";\n\n/**\n * Signs data in the transaction with Sigma protocol\n * @param {Transaction} tx - Transaction to sign\n * @param {LocalSigner | RemoteSigner} signer - Local or remote signer (used for data signature)\n * @returns {Transaction} Transaction with signed data\n */\nexport const signData = async (\n\ttx: Transaction,\n\tsigner: LocalSigner | RemoteSigner,\n): Promise<Transaction> => {\n\t// Sign tx if idKey or remote signer like starfish/tokenpass\n\tconst idKey = (signer as LocalSigner)?.idKey;\n\tconst keyHost = (signer as RemoteSigner)?.keyHost;\n\n\tif (idKey) {\n\t\tconst sigma = new Sigma(tx);\n\t\tconst { signedTx } = sigma.sign(idKey);\n\t\treturn signedTx;\n\t}\n\tif (keyHost) {\n\t\tconst authToken = (signer as RemoteSigner)?.authToken;\n\t\tconst sigma = new Sigma(tx);\n\t\ttry {\n\t\t\tconst { signedTx } = await sigma.remoteSign(keyHost, authToken);\n\t\t\treturn signedTx;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthrow new Error(`Remote signing to ${keyHost} failed`);\n\t\t}\n\t}\n\tthrow new Error(\"Signer must be a LocalSigner or RemoteSigner\");\n};\n","import type { MAP, PreMAP } from \"../types\";\n\nconst stringifyMetaData = (metaData?: PreMAP): MAP | undefined => {\n  if (!metaData) return undefined;\n\tconst result: MAP = {\n\t\tapp: metaData.app,\n\t\ttype: metaData.type,\n\t};\n\n\tfor (const [key, value] of Object.entries(metaData)) {\n\t\tif (value !== undefined) {\n\t\t\tif (typeof value === \"string\") {\n\t\t\t\tresult[key] = value;\n\t\t\t} else if (Array.isArray(value) || typeof value === \"object\") {\n\t\t\t\tresult[key] = JSON.stringify(value);\n\t\t\t} else {\n\t\t\t\tresult[key] = String(value);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\nexport default stringifyMetaData;\n","import { Transaction, SatoshisPerKilobyte, P2PKH, Script, Utils } from \"@bsv/sdk\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n\tUtxo,\n\tCreateOrdinalsConfig,\n\tCreateOrdinalsCollectionConfig,\n\tCreateOrdinalsCollectionItemConfig,\n  ChangeResult,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Creates a transaction with inscription outputs\n * @param {CreateOrdinalsConfig | CreateOrdinalsCollectionConfig | CreateOrdinalsCollectionItemConfig} config - Configuration object for creating ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {string} config.changeAddress - Optional. Address to send change to. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Local or remote signer (used for data signature)\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<ChangeResult>} Transaction with inscription outputs\n */\nexport const createOrdinals = async (\n\tconfig:\n\t\t| CreateOrdinalsConfig\n\t\t| CreateOrdinalsCollectionConfig\n\t\t| CreateOrdinalsCollectionItemConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tutxos,\n\t\tdestinations,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t} = config;\n\t\n\t// Warn if creating many inscriptions at once\n\tif (destinations.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Outputs\n\t// Add inscription outputs\n\tfor (const destination of destinations) {\n\t\tif (!destination.inscription) {\n\t\t\tthrow new Error(\"Inscription is required for all destinations\");\n\t\t}\n\n\t\t// remove any undefined fields from metadata\n\t\tif (metaData) {\n\t\t\tfor(const key of Object.keys(metaData)) {\n\t\t\t\tif (metaData[key] === undefined) {\n\t\t\t\t\tdelete metaData[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription,\n\t\t\t\tstringifyMetaData(metaData),\n\t\t\t),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\tlet payChange: Utxo | undefined;\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\n\tif(signer) {\n\t\tconst utxo = utxos.pop() as Utxo\n\t\ttx.addInput(inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t)));\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\ttx = await signData(tx, signer);\n\t}\n\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to create ordinals. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\tScript,\n\ttype TransactionOutput,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type { SendOrdinalsConfig, Utxo, ChangeResult } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Sends ordinals to the given destinations\n * @param {SendOrdinalsConfig} config - Configuration object for sending ordinals\n * @param {Utxo[]} config.paymentUtxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.ordinals - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {string} [config.changeAddress] - Optional. Address to send change to, if any. If not provided, defaults to paymentPk address\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} [config.signer] - Optional. Signer object to sign the transaction\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to include in the transaction\n * @param {boolean} [config.enforceUniformSend] - Optional. Default: true. Enforce that the number of destinations matches the number of ordinals being sent. Sending ordinals requires a 1:1 mapping of destinations to ordinals. This is only used for sub-protocols like BSV21 that manage tokens without sending the inscriptions directly.\n * @returns {Promise<ChangeResult>} Transaction, spent outpoints, and change utxo\n */\nexport const sendOrdinals = async (\n\tconfig: SendOrdinalsConfig,\n): Promise<ChangeResult> => {\n\tif (!config.satsPerKb) {\n\t\tconfig.satsPerKb = DEFAULT_SAT_PER_KB;\n\t}\n\tif (!config.additionalPayments) {\n\t\tconfig.additionalPayments = [];\n\t}\n\tif (config.enforceUniformSend === undefined) {\n\t\tconfig.enforceUniformSend = true;\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(config.satsPerKb);\n\tlet tx = new Transaction();\n\tconst spentOutpoints: string[] = [];\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of config.ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(\n\t\t\tordUtxo,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tconfig.ordPk, \n\t\t\t\t\"all\",\n\t\t\t\ttrue, \n\t\t\t\tordUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(ordUtxo.script, 'base64'))\n\t\t\t),\n\t\t);\n\t\tspentOutpoints.push(`${ordUtxo.txid}_${ordUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// check that ordinals coming in matches ordinals going out if supplied\n\tif (\n\t\tconfig.enforceUniformSend &&\n\t\tconfig.destinations.length !== config.ordinals.length\n\t) {\n\t\tthrow new Error(\n\t\t\t\"Number of destinations must match number of ordinals being sent\",\n\t\t);\n\t}\n\n\t// Add ordinal outputs\n\tfor (const destination of config.destinations) {\n\t\tlet s: Script;\n\t\tif (\n\t\t\tdestination.inscription?.dataB64 &&\n\t\t\tdestination.inscription?.contentType\n\t\t) {\n\t\t\ts = new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription,\n\t\t\t\tstringifyMetaData(config.metaData),\n\t\t\t);\n\t\t} else {\n\t\t\ts = new P2PKH().lock(destination.address);\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: s,\n\t\t});\n\t}\n\n  \n\t// Add additional payments if any\n\tfor (const p of config.additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n  // add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = config.changeAddress || config.paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of config.paymentUtxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tconfig.paymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\tspentOutpoints.push(`${utxo.txid}_${utxo.vout}`);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (totalSatsIn < totalSatsOut) {\n\t\tthrow new Error(\"Not enough ordinals to send\");\n\t}\n\n\tif (config.signer) {\n\t\ttx = await signData(tx, config.signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChange,\n\t};\n};\n","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype TransactionOutput,\n\tUtils,\n\tScript,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type { ChangeResult, SendUtxosConfig, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\n\n/**\n * Sends utxos to the given destination\n * @param {SendUtxosConfig} config - Configuration object for sending utxos\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {Payment[]} config.payments - Array of payments with addresses and amounts\n * @param {number} [config.satsPerKb] - (Optional) Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {string} [config.changeAddress] - (Optional) Address to send change to. If not provided, defaults to paymentPk address\n * @param {string} [config.metaData] - (Optional) Metadata to include in OP_RETURN of the payment output\n * @returns {Promise<ChangeResult>} Transaction with utxo outputs\n */\nexport const sendUtxos = async (\n\tconfig: SendUtxosConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tpayments,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tchangeAddress = paymentPk.toAddress().toString(),\n    metaData,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\t// Outputs\n\tfor (const payment of payments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new OrdP2PKH().lock(payment.to, undefined, metaData),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + (out.satoshis || 0),\n\t\t0,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\ttx.addInput(input);\n\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + fee) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + fee) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to send. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChange: Utxo | undefined;\n\tif (totalSatsIn > totalSatsOut + fee) {\n\t\t// Change\n\t\tconst changeScript = new P2PKH().lock(changeAddress);\n\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t} else if (totalSatsIn < totalSatsOut + fee) {\n\t\tconsole.log(\"No change needed\");\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\t\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\tP2PKH,\n\ttype PrivateKey,\n\tSatoshisPerKilobyte,\n\tScript,\n\tTransaction,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport {\n\tTokenType,\n\ttype TokenUtxo,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferOrdTokensConfig,\n\ttype TokenChangeResult,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n\tTokenInputMode,\n\ttype TokenSplitConfig,\n\ttype PreMAP,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\nimport { ReturnTypes, toToken, toTokenSat } from \"satoshi-token\";\n\n/**\n * Transfer tokens to a destination\n * @param {TransferOrdTokensConfig} config - Configuration object for transferring tokens\n * @param {TokenType} config.protocol - Token protocol. Must be TokenType.BSV20 or TokenType.BSV21\n * @param {string} config.tokenID - Token ID. Either the tick or id value depending on the protocol\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {TokenUtxo[]} config.inputTokens - Token utxos to spend\n * @param {Distribution[]} config.distributions - Array of destinations with addresses and amounts\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {decimals} config.decimals - Number of decimal places for the token\n * @param {string} [config.changeAddress] - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {string} [config.tokenChangeAddress] - Optional. Address to send token change to, if any. If not provided, defaults to ordPk address\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} [config.signer] - Optional. Signer object to sign the transaction\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to include in the transaction\n * @param {TokenInputMode} [config.tokenInputMode] - Optional. \"all\" or \"needed\". Default is \"needed\"\n * @param {TokenSplitConfig} [config.tokenSplitConfig] - Optional. Configuration object for splitting token change\n * @param {burn} [config.burn] - Optional. Set to true to burn the tokens.\n * @returns {Promise<TokenChangeResult>} Transaction with token transfer outputs\n */\nexport const transferOrdTokens = async (\n\tconfig: TransferOrdTokensConfig,\n): Promise<TokenChangeResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tinputTokens,\n\t\tdistributions,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tchangeAddress,\n\t\ttokenChangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tdecimals,\n\t\tadditionalPayments = [],\n\t\tburn = false,\n\t\ttokenInputMode = TokenInputMode.Needed,\n\t\tsplitConfig = {\n\t\t\toutputs: 1,\n\t\t\tomitMetaData: false,\n\t\t},\n\t} = config;\n\n\t// Ensure these inputs are for the expected token\n\tif (!inputTokens.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\t// calculate change amount\n\tlet changeTsats = 0n;\n\tlet totalTsatIn = 0n;\n\tlet totalTsatOut = 0n;\n\tconst totalAmtNeeded = distributions.reduce(\n\t\t(acc, dist) => acc + toTokenSat(dist.tokens, decimals, ReturnTypes.BigInt),\n\t\t0n,\n\t);\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Handle token inputs based on tokenInputMode\n\tlet tokensToUse: TokenUtxo[];\n\tif (tokenInputMode === TokenInputMode.All) {\n\t\ttokensToUse = inputTokens;\n\t\ttotalTsatIn = inputTokens.reduce(\n\t\t\t(acc, token) => acc + BigInt(token.amt),\n\t\t\t0n,\n\t\t);\n\t} else {\n\t\ttokensToUse = [];\n\t\tfor (const token of inputTokens) {\n\t\t\ttokensToUse.push(token);\n\t\t\ttotalTsatIn += BigInt(token.amt);\n\t\t\tif (totalTsatIn >= totalAmtNeeded) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (totalTsatIn < totalAmtNeeded) {\n\t\t\tthrow new Error(\"Not enough tokens to satisfy the transfer amount\");\n\t\t}\n\t}\n\n\tfor (const token of tokensToUse) {\n\t\tconst inputScriptBinary = Utils.toArray(token.script, \"base64\");\n\t\tconst inputScript = Script.fromBinary(inputScriptBinary);\n\t\ttx.addInput(\n\t\t\tinputFromB64Utxo(\n\t\t\t\ttoken,\n\t\t\t\tnew OrdP2PKH().unlock(ordPk, \"all\", true, token.satoshis, inputScript),\n\t\t\t),\n\t\t);\n\t}\n\n\t// remove any undefined fields from metadata\n\tif (metaData) {\n\t\tfor (const key of Object.keys(metaData)) {\n\t\t\tif (metaData[key] === undefined) {\n\t\t\t\tdelete metaData[key];\n\t\t\t}\n\t\t}\n\t}\n\n\t// build destination inscriptions\n\tfor (const dest of distributions) {\n\t\tconst bigAmt = toTokenSat(dest.tokens, decimals, ReturnTypes.BigInt);\n    console.log({distTokenSat: bigAmt});\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: burn ? \"burn\" : \"transfer\",\n\t\t\tamt: bigAmt.toString(),\n\t\t};\n\t\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\ttick: tokenID,\n\t\t\t} as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n\t\t\tinscription = {\n\t\t\t\t...transferInscription,\n\t\t\t\tid: tokenID,\n\t\t\t} as TransferBSV21Inscription;\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid protocol\");\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdest.address,\n\t\t\t\t{\n\t\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\t\t\tcontentType: \"application/bsv-20\",\n\t\t\t\t},\n\t\t\t\t// when present, include metadata on each distribution if omit is not specified\n\t\t\t\tdest.omitMetaData ? undefined : stringifyMetaData(metaData),\n\t\t\t),\n\t\t});\n\t\ttotalTsatOut += bigAmt;\n\t}\n\n\tchangeTsats = totalTsatIn - totalTsatOut;\n\t\n\t// check that you have enough tokens to send and return change\n\tif (changeTsats < 0n) {\n\t\tthrow new Error(\"Not enough tokens to send\");\n\t}\n\n\tlet tokenChange: TokenUtxo[] = [];\n  console.log({changeTsats})\n\tif (changeTsats > 0n) {\n\t\ttokenChange = splitChangeOutputs(\n\t\t\ttx,\n\t\t\tchangeTsats,\n\t\t\tprotocol,\n\t\t\ttokenID,\n\t\t\ttokenChangeAddress || ordPk.toAddress().toString(),\n\t\t\tordPk,\n\t\t\tmetaData,\n\t\t\tsplitConfig,\n      decimals,\n\t\t);\n\t}\n\t// if (changeAmt > 0n) {\n\t//   tokenChange = splitChangeOutputs(\n\t//     tx,\n\t//     inputTokens.length,\n\t//     changeAmt,\n\t//     protocol,\n\t//     tokenID,\n\t//     tokenChangeAddress || ordPk.toAddress().toString(),\n\t//     ordPk,\n\t//     metaData,\n\t//     splitConfig,\n\t//   );\n\t// }\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo,\n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpaymentPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, \"base64\")),\n\t\t\t),\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to transfer tokens. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\tif (signer) {\n\t\ttx = await signData(tx, signer);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// assign txid to tokenChange outputs\n\tconst txid = tx.id(\"hex\") as string;\n\tfor (const change of tokenChange) {\n\t\tchange.txid = txid;\n\t}\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t\ttokenChange,\n\t};\n};\n\nconst splitChangeOutputs = (\n  tx: Transaction,\n  changeTsats: bigint,\n  protocol: TokenType,\n  tokenID: string,\n  tokenChangeAddress: string,\n  ordPk: PrivateKey,\n  metaData: PreMAP | undefined,\n  splitConfig: TokenSplitConfig,\n  decimals: number,\n): TokenUtxo[] => {\n  const tokenChanges: TokenUtxo[] = [];\n\n  const threshold = splitConfig.threshold !== undefined ? toTokenSat(splitConfig.threshold, decimals, ReturnTypes.BigInt) : undefined;\n  const maxOutputs = splitConfig.outputs;\n  const changeAmt = changeTsats;\n  console.log({splitChangeAmt: changeAmt})\n  let splitOutputs: bigint;\n  if (threshold !== undefined && threshold > 0n) {\n      splitOutputs = changeAmt / threshold;\n      splitOutputs = BigInt(Math.min(Number(splitOutputs), maxOutputs));\n  } else {\n      // If no threshold is specified, use maxOutputs directly\n      splitOutputs = BigInt(maxOutputs);\n  }\n  splitOutputs = BigInt(Math.max(Number(splitOutputs), 1));\n\n  const baseChangeAmount = changeAmt / splitOutputs;\n  let remainder = changeAmt % splitOutputs;\n\n  for (let i = 0n; i < splitOutputs; i++) {\n      let splitAmount = baseChangeAmount;\n      if (remainder > 0n) {\n          splitAmount += 1n;\n          remainder -= 1n;\n      }\n\n      const transferInscription: TransferTokenInscription = {\n          p: \"bsv-20\",\n          op: \"transfer\",\n          amt: splitAmount.toString(),\n      };\n      let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n      if (protocol === TokenType.BSV20) {\n          inscription = {\n              ...transferInscription,\n              tick: tokenID,\n          } as TransferBSV20Inscription;\n      } else if (protocol === TokenType.BSV21) {\n          inscription = {\n              ...transferInscription,\n              id: tokenID,\n          } as TransferBSV21Inscription;\n      } else {\n          throw new Error(\"Invalid protocol\");\n      }\n\n      const lockingScript = new OrdP2PKH().lock(\n          tokenChangeAddress || ordPk.toAddress().toString(),\n          {\n              dataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n              contentType: \"application/bsv-20\",\n          },\n          splitConfig.omitMetaData ? undefined : stringifyMetaData(metaData),\n      );\n\n      const vout = tx.outputs.length;\n      tx.addOutput({ lockingScript, satoshis: 1 });\n      tokenChanges.push({\n          id: tokenID,\n          satoshis: 1,\n          script: Buffer.from(lockingScript.toBinary()).toString(\"base64\"),\n          txid: \"\",\n          vout,\n          amt: splitAmount.toString(),\n      });\n  }\n\n  return tokenChanges;\n};\n\n// const splitChangeOutputs = (\n// \ttx: Transaction,\n// \tchangeAmt: bigint,\n// \tprotocol: TokenType,\n// \ttokenID: string,\n// \ttokenChangeAddress: string,\n// \tordPk: PrivateKey,\n// \tmetaData: PreMAP | undefined,\n// \tsplitConfig: TokenSplitConfig,\n// ): TokenUtxo[] => {\n// \tconst tokenChanges: TokenUtxo[] = [];\n// \tconst threshold = splitConfig.threshold || 0;\n// \tconst maxOutputs = splitConfig.outputs;\n\n// \tlet splitOutputs = 1;\n// \tif (threshold > 0) {\n// \t\tsplitOutputs = changeAmt / threshold;\n// \t\tsplitOutputs = Math.min(splitOutputs, maxOutputs);\n// \t\tsplitOutputs = Math.max(splitOutputs, 1);\n// \t}\n\n// \tconst baseChangeAmount = changeAmt / splitOutputs;\n// \tlet remainder = changeAmt % splitOutputs;\n\n// \tfor (let i = 0; i < splitOutputs; i++) {\n// \t\tlet splitAmount = baseChangeAmount;\n// \t\tif (remainder > 0n) {\n// \t\t\tsplitAmount += 1;\n// \t\t\tremainder -= 1;\n// \t\t}\n\n// \t\tconst transferInscription: TransferTokenInscription = {\n// \t\t\tp: \"bsv-20\",\n// \t\t\top: \"transfer\",\n// \t\t\tamt: splitAmount.toString(),\n// \t\t};\n// \t\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n// \t\tif (protocol === TokenType.BSV20) {\n// \t\t\tinscription = {\n// \t\t\t\t...transferInscription,\n// \t\t\t\ttick: tokenID,\n// \t\t\t} as TransferBSV20Inscription;\n// \t\t} else if (protocol === TokenType.BSV21) {\n// \t\t\tinscription = {\n// \t\t\t\t...transferInscription,\n// \t\t\t\tid: tokenID,\n// \t\t\t} as TransferBSV21Inscription;\n// \t\t} else {\n// \t\t\tthrow new Error(\"Invalid protocol\");\n// \t\t}\n\n// \t\tconst lockingScript = new OrdP2PKH().lock(\n// \t\t\ttokenChangeAddress || ordPk.toAddress().toString(),\n// \t\t\t{\n// \t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n// \t\t\t\tcontentType: \"application/bsv-20\",\n// \t\t\t},\n// \t\t\tsplitConfig.omitMetaData ? undefined : stringifyMetaData(metaData),\n// \t\t);\n\n// \t\tconst vout = tx.outputs.length;\n// \t\ttx.addOutput({ lockingScript, satoshis: 1 });\n// \t\ttokenChanges.push({\n// \t\t\tid: tokenID,\n// \t\t\tsatoshis: 1,\n// \t\t\tscript: Buffer.from(lockingScript.toBinary()).toString(\"base64\"),\n// \t\t\ttxid: \"\",\n// \t\t\tvout,\n// \t\t\tamt: splitAmount.toString(),\n// \t\t});\n// \t}\n\n// \treturn tokenChanges;\n// };\n","import {\n\tBigNumber,\n\ttype LockingScript,\n\tOP,\n\tP2PKH,\n\ttype PrivateKey,\n\tScript,\n\ttype Transaction,\n\tTransactionSignature,\n\tUnlockingScript,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { toHex } from \"../utils/strings\";\nimport type { Inscription } from \"../types\";\n\nexport const oLockPrefix =\n\t\"2097dfd76851bf465e8f715593b217714858bbe9570ff3bd5e33840a34e20ff0262102ba79df5f8ae7604a9830f03c7933028186aede0675a16f025dc4f8be8eec0382201008ce7480da41702918d1ec8e6849ba32b4d65b1e40dc669c31a1e6306b266c0000\";\nexport const oLockSuffix =\n\t\"615179547a75537a537a537a0079537a75527a527a7575615579008763567901c161517957795779210ac407f0e4bd44bfc207355a778b046225a7068fc59ee7eda43ad905aadbffc800206c266b30e6a1319c66dc401e5bd6b432ba49688eecd118297041da8074ce081059795679615679aa0079610079517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01007e81517a75615779567956795679567961537956795479577995939521414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff00517951796151795179970079009f63007952799367007968517a75517a75517a7561527a75517a517951795296a0630079527994527a75517a6853798277527982775379012080517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01205279947f7754537993527993013051797e527e54797e58797e527e53797e52797e57797e0079517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a756100795779ac517a75517a75517a75517a75517a75517a75517a75517a75517a7561517a75517a756169587951797e58797eaa577961007982775179517958947f7551790128947f77517a75517a75618777777777777777777767557951876351795779a9876957795779ac777777777777777767006868\";\n\n/**\n * OrdLock class implementing ScriptTemplate.\n *\n * This class provides methods for interacting with OrdinalLock contract \n */\nexport default class OrdLock {\n\t/**\n\t * Creates a 1Sat Ordinal Lock script\n\t *\n\t * @param {string} ordAddress - An address which can cancel listing.\n\t * @param {string} payAddress - Address which is paid on purchase\n\t * @param {number} price - Listing price in satoshis\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\tlock(\n\t\tordAddress: string,\n\t\tpayAddress: string,\n\t\tprice: number,\n\t\tinscription?: Inscription,\n\t): Script {\n\t\tconst cancelPkh = Utils.fromBase58Check(ordAddress).data as number[];\n\t\tconst payPkh = Utils.fromBase58Check(payAddress).data as number[];\n\n\t\tlet script = new Script()\n\t\tif (inscription?.dataB64 !== undefined && inscription?.contentType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(inscription.dataB64, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(inscription.contentType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tscript = Script.fromASM(`OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`);\n\t\t}\n\n\t\treturn script.writeScript(Script.fromHex(oLockPrefix))\n\t\t\t.writeBin(cancelPkh)\n\t\t\t.writeBin(OrdLock.buildOutput(price, new P2PKH().lock(payPkh).toBinary()))\n\t\t\t.writeScript(Script.fromHex(oLockSuffix))\n\t}\n\n\tcancelListing(\n\t\tprivateKey: PrivateKey,\n\t\tsignOutputs: 'all' | 'none' | 'single' = 'all',\n\t\tanyoneCanPay = false,\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: () => Promise<number>\n\t} {\n\t\tconst p2pkh = new P2PKH().unlock(privateKey, signOutputs, anyoneCanPay, sourceSatoshis, lockingScript)\n\t\treturn {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await p2pkh.sign(tx, inputIndex)).writeOpCode(OP.OP_1)\n\t\t\t},\n\t\t\testimateLength: async () => {\n\t\t\t\treturn 107\n\t\t\t}\n\t\t}\n\t}\n\n\tpurchaseListing(\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>\n\t} {\n\t\tconst purchase = {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\tif (tx.outputs.length < 2) {\n\t\t\t\t\tthrow new Error(\"Malformed transaction\")\n\t\t\t\t}\n\t\t\t\tconst script = new UnlockingScript()\n\t\t\t\t\t.writeBin(OrdLock.buildOutput(\n\t\t\t\t\t\ttx.outputs[0].satoshis || 0,\n\t\t\t\t\t\ttx.outputs[0].lockingScript.toBinary()\n\t\t\t\t\t))\n\t\t\t\tif (tx.outputs.length > 2) {\n\t\t\t\t\tconst writer = new Utils.Writer()\n\t\t\t\t\tfor (const output of tx.outputs.slice(2)) {\n\t\t\t\t\t\twriter.write(OrdLock.buildOutput(output.satoshis || 0, output.lockingScript.toBinary()))\n\t\t\t\t\t}\n\t\t\t\t\tscript.writeBin(writer.toArray())\n\t\t\t\t} else {\n\t\t\t\t\tscript.writeOpCode(OP.OP_0)\n\t\t\t\t}\n\n\t\t\t\tconst input = tx.inputs[inputIndex]\n\t\t\t\tlet sourceSats = sourceSatoshis as number\n\t\t\t\tif (!sourceSats && input.sourceTransaction) {\n\t\t\t\t\tsourceSats = input.sourceTransaction.outputs[input.sourceOutputIndex].satoshis as number\n\t\t\t\t} else if (!sourceSatoshis) {\n\t\t\t\t\tthrow new Error(\"sourceTransaction or sourceSatoshis is required\")\n\t\t\t\t}\n\n\t\t\t\tconst sourceTXID = (input.sourceTXID || input.sourceTransaction?.id('hex')) as string\n\t\t\t\tlet subscript = lockingScript as LockingScript\n\t\t\t\tif (!subscript) {\n\t\t\t\t\tsubscript = input.sourceTransaction?.outputs[input.sourceOutputIndex].lockingScript as LockingScript\n\t\t\t\t}\n\t\t\t\tconst preimage = TransactionSignature.format({\n\t\t\t\t\tsourceTXID,\n\t\t\t\t\tsourceOutputIndex: input.sourceOutputIndex,\n\t\t\t\t\tsourceSatoshis: sourceSats,\n\t\t\t\t\ttransactionVersion: tx.version,\n\t\t\t\t\totherInputs: [],\n\t\t\t\t\tinputIndex,\n\t\t\t\t\toutputs: tx.outputs,\n\t\t\t\t\tinputSequence: input.sequence,\n\t\t\t\t\tsubscript,\n\t\t\t\t\tlockTime: tx.lockTime,\n\t\t\t\t\tscope: TransactionSignature.SIGHASH_ALL |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_ANYONECANPAY |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_FORKID\n\t\t\t\t});\n\n\t\t\t\treturn script.writeBin(preimage).writeOpCode(OP.OP_0)\n\t\t\t},\n\t\t\testimateLength: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await purchase.sign(tx, inputIndex)).toBinary().length\n\t\t\t}\n\t\t}\n\t\treturn purchase\n\t}\n\n\tstatic buildOutput(satoshis: number, script: number[]): number[] {\n\t\tconst writer = new Utils.Writer()\n\t\twriter.writeUInt64LEBn(new BigNumber(satoshis))\n\t\twriter.writeVarIntNum(script.length)\n\t\twriter.write(script)\n\t\treturn writer.toArray()\n\t}\n}\n","import {\n  P2PKH,\n  SatoshisPerKilobyte,\n  Script,\n  Transaction,\n  Utils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport {\n  type TokenChangeResult,\n  TokenType,\n  type CreateOrdListingsConfig,\n  type CreateOrdTokenListingsConfig,\n  type TokenUtxo,\n  type TransferBSV20Inscription,\n  type TransferBSV21Inscription,\n  type TransferTokenInscription,\n  type Utxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { ReturnTypes, toToken, toTokenSat } from \"satoshi-token\";\nconst { toArray } = Utils;\n\n// TODO: Handle royalty\nexport const createOrdListings = async (config: CreateOrdListingsConfig) => {\n  const {\n    utxos,\n    listings,\n    paymentPk,\n    ordPk,\n    changeAddress,\n    satsPerKb = DEFAULT_SAT_PER_KB,\n    additionalPayments = [],\n  } = config;\n\n  const modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n  const tx = new Transaction();\n\n  // Warn if creating many inscriptions at once\n  if (listings.length > 100) {\n    console.warn(\n      \"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n    );\n  }\n\n  // Outputs\n  // Add listing outputs\n  for (const listing of listings) {\n    tx.addOutput({\n      satoshis: 1,\n      lockingScript: new OrdLock().lock(\n        listing.ordAddress,\n        listing.payAddress,\n        listing.price,\n      ),\n    });\n    const inputScriptBinary = toArray(listing.listingUtxo.script, \"base64\");\n    const inputScript = Script.fromBinary(inputScriptBinary);\n    tx.addInput(inputFromB64Utxo(\n      listing.listingUtxo,\n      new OrdP2PKH().unlock(\n        ordPk,\n        \"all\",\n        true,\n        listing.listingUtxo.satoshis,\n        inputScript,\n      ),\n    ));\n  }\n\n  // Add additional payments if any\n  for (const p of additionalPayments) {\n    tx.addOutput({\n      satoshis: p.amount,\n      lockingScript: new P2PKH().lock(p.to),\n    });\n  }\n\n  // Check if change is needed\n  let payChange: Utxo | undefined;\n  const changeScript = new P2PKH().lock(\n    changeAddress || paymentPk.toAddress().toString(),\n  );\n  const changeOutput = {\n    lockingScript: changeScript,\n    change: true,\n  };\n  tx.addOutput(changeOutput);\n\n  let totalSatsIn = 0n;\n  const totalSatsOut = tx.outputs.reduce(\n    (total, out) => total + BigInt(out.satoshis || 0),\n    0n,\n  );\n  let fee = 0;\n  for (const utxo of utxos) {\n    const input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n      paymentPk,\n      \"all\",\n      true,\n      utxo.satoshis,\n      Script.fromBinary(Utils.toArray(utxo.script, 'base64'))\n    ));\n\n    tx.addInput(input);\n    // stop adding inputs if the total amount is enough\n    totalSatsIn += BigInt(utxo.satoshis);\n    fee = await modelOrFee.computeFee(tx);\n\n    if (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n      break;\n    }\n  }\n\n  // make sure we have enough\n  if (totalSatsIn < totalSatsOut + BigInt(fee)) {\n    throw new Error(\n      `Not enough funds to create ordinal listings. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n    );\n  }\n\n  // Calculate fee\n  await tx.fee(modelOrFee);\n\n  // Sign the transaction\n  await tx.sign();\n\n  // check for change\n  const payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n  if (payChangeOutIdx !== -1) {\n    const changeOutput = tx.outputs[payChangeOutIdx];\n    payChange = {\n      satoshis: changeOutput.satoshis as number,\n      txid: tx.id(\"hex\") as string,\n      vout: payChangeOutIdx,\n      script: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n        \"base64\",\n      ),\n    };\n  }\n\n  if (payChange) {\n    const changeOutput = tx.outputs[tx.outputs.length - 1];\n    payChange.satoshis = changeOutput.satoshis as number;\n    payChange.txid = tx.id(\"hex\") as string;\n  }\n\n  return {\n    tx,\n    spentOutpoints: tx.inputs.map(\n      (i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n    ),\n    payChange,\n  };\n};\n\nexport const createOrdTokenListings = async (\n  config: CreateOrdTokenListingsConfig,\n): Promise<TokenChangeResult> => {\n  const {\n    utxos,\n    protocol,\n    tokenID,\n    ordPk,\n    paymentPk,\n    additionalPayments = [],\n    changeAddress,\n    tokenChangeAddress,\n    inputTokens,\n    listings,\n    decimals,\n    satsPerKb = DEFAULT_SAT_PER_KB,\n  } = config;\n\n\n  // Warn if creating many inscriptions at once\n  if (listings.length > 100) {\n    console.warn(\n      \"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n    );\n  }\n\n  // Ensure these inputs are for the expected token\n  if (!inputTokens.every((token) => token.id === tokenID)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n  // calculate change amount\n  let changeAmt = 0n;\n  let totalAmtIn = 0n;\n  let totalAmtOut = 0n;\n\n  // Ensure these inputs are for the expected token\n  if (!inputTokens.every((token) => token.id === tokenID)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n  const modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n  const tx = new Transaction();\n  // Outputs\n  // Add listing outputs\n  for (const listing of listings) {\n    // NewTokenListing is not adjusted for decimals\n    const bigAmt = toTokenSat(listing.tokens, decimals, ReturnTypes.BigInt);\n    const transferInscription: TransferTokenInscription = {\n      p: \"bsv-20\",\n      op: \"transfer\",\n      amt: bigAmt.toString(),\n    };\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n    if (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n    } else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n    tx.addOutput({\n      satoshis: 1,\n      lockingScript: new OrdLock().lock(\n        listing.ordAddress,\n        listing.payAddress,\n        listing.price,\n        {\n          dataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n          contentType: \"application/bsv-20\",\n        },\n      ),\n    });\n    totalAmtOut += bigAmt;\n  }\n\n  // Input tokens are already adjusted for decimals\n  for (const token of inputTokens) {\n    tx.addInput(inputFromB64Utxo(\n      token,\n      new OrdP2PKH().unlock(\n        ordPk,\n        \"all\",\n        true,\n        token.satoshis,\n        Script.fromBinary(toArray(token.script, \"base64\")),\n      ),\n    ));\n\n    totalAmtIn += BigInt(token.amt);\n  }\n  changeAmt = totalAmtIn - totalAmtOut;\n\n  let tokenChange: TokenUtxo[] | undefined;\n  // check that you have enough tokens to send and return change\n  if (changeAmt < 0n) {\n    throw new Error(\"Not enough tokens to send\");\n  }\n  if (changeAmt > 0n) {\n    const transferInscription: TransferTokenInscription = {\n      p: \"bsv-20\",\n      op: \"transfer\",\n      amt: changeAmt.toString(),\n    };\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n    if (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n    } else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n    const lockingScript = new OrdP2PKH().lock(tokenChangeAddress, {\n      dataB64: Buffer.from(JSON.stringify(inscription)).toString('base64'),\n      contentType: \"application/bsv-20\",\n    });\n    const vout = tx.outputs.length;\n    tx.addOutput({ lockingScript, satoshis: 1 });\n    tokenChange = [{\n      id: tokenID,\n      satoshis: 1,\n      script: Buffer.from(lockingScript.toBinary()).toString(\"base64\"),\n      txid: \"\",\n      vout,\n      amt: changeAmt.toString(),\n    }];\n  }\n\n  // Add additional payments if any\n  for (const p of additionalPayments) {\n    tx.addOutput({\n      satoshis: p.amount,\n      lockingScript: new P2PKH().lock(p.to),\n    });\n  }\n\n  // add change to the outputs\n  let payChange: Utxo | undefined;\n\n  const change = changeAddress || paymentPk.toAddress().toString();\n  const changeScript = new P2PKH().lock(change);\n  const changeOut = {\n    lockingScript: changeScript,\n    change: true,\n  };\n  tx.addOutput(changeOut);\n\n  let totalSatsIn = 0n;\n  const totalSatsOut = tx.outputs.reduce(\n    (total, out) => total + BigInt(out.satoshis || 0),\n    0n,\n  );\n  let fee = 0;\n  for (const utxo of utxos) {\n    const input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n      paymentPk,\n      \"all\",\n      true,\n      utxo.satoshis,\n      Script.fromBinary(Utils.toArray(utxo.script, 'base64'))\n    ));\n\n    tx.addInput(input);\n    // stop adding inputs if the total amount is enough\n    totalSatsIn += BigInt(utxo.satoshis);\n    fee = await modelOrFee.computeFee(tx);\n\n    if (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n      break;\n    }\n  }\n\n  // make sure we have enough\n  if (totalSatsIn < totalSatsOut + BigInt(fee)) {\n    throw new Error(\n      `Not enough funds to create token listings. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n    );\n  }\n\n  // estimate the cost of the transaction and assign change value\n  await tx.fee(modelOrFee);\n\n  // Sign the transaction\n  await tx.sign();\n\n  const txid = tx.id(\"hex\") as string;\n  if (tokenChange) {\n    tokenChange = tokenChange.map((tc) => ({ ...tc, txid }));\n  }\n  // check for change\n  const payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n  if (payChangeOutIdx !== -1) {\n    const changeOutput = tx.outputs[payChangeOutIdx];\n    payChange = {\n      satoshis: changeOutput.satoshis as number,\n      txid,\n      vout: payChangeOutIdx,\n      script: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n        \"base64\",\n      ),\n    };\n  }\n\n  if (payChange) {\n    const changeOutput = tx.outputs[tx.outputs.length - 1];\n    payChange.satoshis = changeOutput.satoshis as number;\n    payChange.txid = tx.id(\"hex\") as string;\n  }\n\n  return {\n    tx,\n    spentOutpoints: tx.inputs.map(\n      (i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n    ),\n    payChange,\n    tokenChange,\n  };\n};\n","import { P2PKH, SatoshisPerKilobyte, Script, Transaction, Utils } from \"@bsv/sdk\";\nimport {\n\tTokenType,\n\ttype TokenUtxo,\n\ttype CancelOrdListingsConfig,\n\ttype CancelOrdTokenListingsConfig,\n\ttype Destination,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n  type ChangeResult,\n  type TokenChangeResult,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\n\n/**\n * Cancel Ordinal Listings\n * @param {CancelOrdListingsConfig} config - Configuration object for cancelling ordinals\n * @param {PrivateKey} config.paymentPk - Private key to sign payment inputs\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.listingUtxos - Listing utxos to cancel (with base64 encoded scripts)\n * @param {string} [config.changeAddress] - Optional. Address to send change to\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to make\n * @returns {Promise<ChangeResult>} Transaction, spent outpoints, change utxo\n */\nexport const cancelOrdListings = async (config: CancelOrdListingsConfig): Promise<ChangeResult> => {\n\tconst {\n\t\tutxos,\n\t\tlistingUtxos,\n\t\tordPk,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tadditionalPayments = [],\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\n\t// Warn if creating many inscriptions at once\n\tif (listingUtxos.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\t\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinals we're cancelling\n\tfor (const listingUtxo of listingUtxos) {\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().cancelListing(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlistingUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, 'base64'))\n\t\t\t)\n\t\t));\n\t\t// Add cancel outputs returning listed ordinals\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new P2PKH().lock(ordPk.toAddress().toString()),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo, \n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpaymentPk, \n\t\t\t\t\"all\",\n\t\t\t\ttrue, \n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t\t)\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to cancel ordinal listings. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\n/**\n * Cancel Ordinal Token Listings\n * @param {CancelOrdTokenListingsConfig} config - Configuration object for cancelling token ordinals\n * @param {PrivateKey} config.paymentPk - Private key to sign payment inputs\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.listingUtxos - Listing utxos to cancel (with base64 encoded scripts)\n * @param {string} config.tokenID - Token ID of the token to cancel listings for\n * @param {string} config.ordAddress - Address to send the cancelled token to\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to make\n * @returns {Promise<TokenChangeResult>} Transaction, spent outpoints, change utxo, token change utxos\n */\nexport const cancelOrdTokenListings = async (\n\tconfig: CancelOrdTokenListingsConfig,\n): Promise<TokenChangeResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tadditionalPayments,\n\t\tlistingUtxos,\n\t\tutxos,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\t// calculate change amount\n\tlet totalAmtIn = 0;\n\n\tif (listingUtxos.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Ensure these inputs are for the expected token\n\tif (!listingUtxos.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinals we're cancelling\n\tfor (const listingUtxo of listingUtxos) {\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().cancelListing(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlistingUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, 'base64'))\n\t\t\t)\n\t\t));\n\t\ttotalAmtIn += Number.parseInt(listingUtxo.amt);\n\t}\n\n\tconst transferInscription: TransferTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"transfer\",\n\t\tamt: totalAmtIn.toString(),\n\t};\n\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\tif (protocol === TokenType.BSV20) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\ttick: tokenID,\n\t\t} as TransferBSV20Inscription;\n\t} else if (protocol === TokenType.BSV21) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\tid: tokenID,\n\t\t} as TransferBSV21Inscription;\n\t} else {\n\t\tthrow new Error(\"Invalid protocol\");\n\t}\n\n\tconst destination: Destination = {\n\t\taddress: ordAddress || ordPk.toAddress().toString(),\n\t\tinscription: {\n\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t},\n\t};\n\n  const lockingScript = new OrdP2PKH().lock(\n    destination.address,\n    destination.inscription\n  );\n\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript,\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to cancel token listings. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n  const tokenChange: TokenUtxo[] = [{\n    amt: totalAmtIn.toString(),\n    script: Buffer.from(lockingScript.toHex(), 'hex').toString('base64'),\n    txid: tx.id(\"hex\") as string,\n    vout: 0,\n    id: tokenID,\n    satoshis: 1\n  }];\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n    tokenChange,\n\t};\n};","import {\n\tLockingScript,\n\tP2PKH,\n\tSatoshisPerKilobyte,\n\tScript,\n\tTransaction,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport {\n\ttype ChangeResult,\n\tRoytaltyType,\n\tTokenType,\n\ttype PurchaseOrdListingConfig,\n\ttype PurchaseOrdTokenListingConfig,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n\tMAP,\n} from \"./types\";\nimport { resolvePaymail } from \"./utils/paymail\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Purchase a listing\n * @param {PurchaseOrdListingConfig} config - Configuration object for purchasing a listing\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign payment inputs\n * @param {ExistingListing} config.listing - Listing to purchase\n * @param {string} config.ordAddress - Address to send the ordinal to\n * @param {string} [config.changeAddress] - Optional. Address to send change to\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to make\n * @param {Royalty[]} [config.royalties] - Optional. Royalties to pay\n * @param {MAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include on purchased output\n * @returns {Promise<ChangeResult>} Transaction, spent outpoints, change utxo\n */\nexport const purchaseOrdListing = async (\n\tconfig: PurchaseOrdListingConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tlisting,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tadditionalPayments = [],\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\troyalties = [],\n\t\tmetaData,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinal we're purchasing\n\ttx.addInput(\n\t\tinputFromB64Utxo(\n\t\t\tlisting.listingUtxo,\n\t\t\tnew OrdLock().purchaseListing(\n\t\t\t\t1,\n\t\t\t\tScript.fromBinary(Utils.toArray(listing.listingUtxo.script, \"base64\")),\n\t\t\t),\n\t\t),\n\t);\n\n\t// Outputs\n\t// Add the purchased output\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(ordAddress, undefined, metaData),\n\t});\n\n\t// add the payment output\n\tconst reader = new Utils.Reader(Utils.toArray(listing.payout, \"base64\"));\n\tconst satoshis = reader.readUInt64LEBn().toNumber();\n\tconst scriptLength = reader.readVarIntNum();\n\tconst scriptBin = reader.read(scriptLength);\n\tconst lockingScript = LockingScript.fromBinary(scriptBin);\n\ttx.addOutput({\n\t\tsatoshis,\n\t\tlockingScript,\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Add any royalties\n\tfor (const r of royalties) {\n\t\tlet lockingScript: LockingScript | undefined;\n\t\tconst royaltySats = Math.floor(Number(r.percentage) * satoshis);\n\n\t\tswitch (r.type as RoytaltyType) {\n\t\t\tcase RoytaltyType.Paymail:\n\t\t\t\t// resolve paymail address\n\t\t\t\tlockingScript = await resolvePaymail(r.destination, royaltySats);\n\t\t\t\tbreak;\n\t\t\tcase RoytaltyType.Script:\n\t\t\t\tlockingScript = Script.fromBinary(\n\t\t\t\t\tUtils.toArray(r.destination, \"base64\"),\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase RoytaltyType.Address:\n\t\t\t\tlockingScript = new P2PKH().lock(r.destination);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"Invalid royalty type\");\n\t\t}\n\t\tif (!lockingScript) {\n\t\t\tthrow new Error(\"Invalid royalty destination\");\n\t\t}\n\t\ttx.addOutput({\n\t\t\tsatoshis: royaltySats,\n\t\t\tlockingScript,\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo,\n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpaymentPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, \"base64\")),\n\t\t\t),\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase ordinal listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\n/**\n *\n * @param {PurchaseOrdTokenListingConfig} config  - Configuration object for purchasing a token listing\n * @param {TokenType} config.protocol - Token protocol\n * @param {string} config.tokenID - Token ID\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign payment inputs\n * @param {Utxo} config.listingUtxo - Listing UTXO\n * @param {string} config.ordAddress - Address to send the ordinal to\n * @param {string} [config.changeAddress] - Optional. Address to send change to\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to make\n * @param {MAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include on the purchased transfer inscription output\n * @returns {Promise<ChangeResult>} Transaction, spent outpoints, change utxo\n */\nexport const purchaseOrdTokenListing = async (\n\tconfig: PurchaseOrdTokenListingConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tpaymentPk,\n\t\tlistingUtxo,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t\tmetaData,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinal we're purchasing\n\ttx.addInput(\n\t\tinputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().purchaseListing(\n\t\t\t\t1,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, \"base64\")),\n\t\t\t),\n\t\t),\n\t);\n\n\t// Outputs\n\tconst transferInscription: TransferTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"transfer\",\n\t\tamt: listingUtxo.amt,\n\t};\n\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\tif (protocol === TokenType.BSV20) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\ttick: tokenID,\n\t\t} as TransferBSV20Inscription;\n\t} else if (protocol === TokenType.BSV21) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\tid: tokenID,\n\t\t} as TransferBSV21Inscription;\n\t} else {\n\t\tthrow new Error(\"Invalid protocol\");\n\t}\n\tconst dataB64 = Buffer.from(JSON.stringify(inscription)).toString(\"base64\");\n\n\t// Add the purchased output\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\tordAddress,\n\t\t\t{\n\t\t\t\tdataB64,\n\t\t\t\tcontentType: \"application/bsv-20\",\n\t\t\t},\n\t\t\tmetaData,\n\t\t),\n\t});\n\n\tif (!listingUtxo.payout) {\n\t\tthrow new Error(\"Listing UTXO does not have a payout script\");\n\t}\n\n\t// Add the payment output\n\tconst reader = new Utils.Reader(Utils.toArray(listingUtxo.payout, \"base64\"));\n\tconst satoshis = reader.readUInt64LEBn().toNumber();\n\tconst scriptLength = reader.readVarIntNum();\n\tconst scriptBin = reader.read(scriptLength);\n\tconst lockingScript = LockingScript.fromBinary(scriptBin);\n\ttx.addOutput({\n\t\tsatoshis,\n\t\tlockingScript,\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo,\n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpaymentPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, \"base64\")),\n\t\t\t),\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase token listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n","import * as ImageSize from 'image-size';\nImageSize.disableFS(true);\nconst sizeOf = ImageSize.default;\n\nimport type { IconInscription, ImageContentType } from \"../types\";\n\nexport const ErrorOversizedIcon = new Error(\n    \"Image must be a square image with dimensions <= 400x400\",\n);\nexport const ErrorIconProportions = new Error(\"Image must be a square image\");\nexport const ErrorInvalidIconData = new Error(\"Error processing image\");\nexport const ErrorImageDimensionsUndefined = new Error(\n    \"Image dimensions are undefined\",\n);\n\nconst isImageContentType = (value: string): value is ImageContentType => {\n    return (value as ImageContentType) === value;\n};\n\nexport const validIconData = async (\n    icon: IconInscription,\n): Promise<Error | null> => {\n    const { dataB64, contentType } = icon;\n\n    if (contentType === \"image/svg+xml\") {\n        return validateSvg(dataB64);\n    }\n\n    if (!isImageContentType(contentType)) {\n        return ErrorInvalidIconData;\n    }\n\n    try {\n        const buffer = Buffer.from(dataB64, \"base64\");\n        const dimensions = sizeOf(buffer);\n\n        if (dimensions.width === undefined || dimensions.height === undefined) {\n            return ErrorImageDimensionsUndefined;\n        }\n        if (dimensions.width !== dimensions.height) {\n            return ErrorIconProportions;\n        }\n        if (dimensions.width > 400 || dimensions.height > 400) {\n            return ErrorOversizedIcon;\n        }\n\n        return null;\n    } catch (error) {\n        return ErrorInvalidIconData;\n    }\n};\n\nconst validateSvg = (svgBase64: string): Error | null => {\n    const svgString = Buffer.from(svgBase64, \"base64\").toString(\"utf-8\");\n    const widthMatch = svgString.match(/<svg[^>]*\\s+width=\"([^\"]+)\"/);\n    const heightMatch = svgString.match(/<svg[^>]*\\s+height=\"([^\"]+)\"/);\n    \n    if (!widthMatch || !heightMatch) {\n        return ErrorImageDimensionsUndefined;\n    }\n\n    const width = Number.parseInt(widthMatch[1], 10);\n    const height = Number.parseInt(heightMatch[1], 10);\n\n    if (Number.isNaN(width) || Number.isNaN(height)) {\n        return ErrorImageDimensionsUndefined;\n    }\n\n    if (width !== height) {\n        return ErrorIconProportions;\n    }\n    if (width > 400 || height > 400) {\n        return ErrorOversizedIcon;\n    }\n\n    return null;\n}\n\nexport const validIconFormat = (icon: string): boolean => {\n    if (!icon.includes(\"_\") || icon.endsWith(\"_\")) {\n        return false;\n    }\n\n    const iconVout = Number.parseInt(icon.split(\"_\")[1]);\n    if (Number.isNaN(iconVout)) {\n        return false;\n    }\n\n    if (!icon.startsWith(\"_\") && icon.split(\"_\")[0].length !== 64) {\n        return false;\n    }\n\n    return true;\n};","import {\n\tTransaction,\n\tP2PKH,\n\tSatoshisPerKilobyte,\n\ttype TransactionOutput,\n\tUtils,\n\tScript,\n} from \"@bsv/sdk\";\nimport type {\n  ChangeResult,\n\tDeployBsv21TokenConfig,\n\tDeployMintTokenInscription,\n\tInscription,\n\tUtxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { validIconData, validIconFormat } from \"./utils/icon\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\n\n/**\n * Deploys & Mints a BSV21 token to the given destination address\n * @param {DeployBsv21TokenConfig} config - Configuration object for deploying BSV21 token\n * @param {string} config.symbol - Token ticker symbol\n * @param {number} config.decimals - Number of decimal places to display\n * @param {string | IconInscription} config.icon - outpoint (format: txid_vout) or Inscription. If Inscription, must be a valid image type\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {Distribution} config.initialDistribution - Initial distribution with addresses and total supply (not adjusted for decimals, library will add zeros)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {string} config.destinationAddress - Address to deploy token to.\n * @param {string} [config.changeAddress] - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to include in the transaction\n * @returns {Promise<ChangeResult>} Transaction to deploy BSV 2.1 token\n */\nexport const deployBsv21Token = async (\n\tconfig: DeployBsv21TokenConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tsymbol,\n\t\ticon,\n    decimals,\n\t\tutxos,\n\t\tinitialDistribution,\n\t\tpaymentPk,\n\t\tdestinationAddress,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\tlet iconValue: string;\n\tif (typeof icon === \"string\") {\n\t\ticonValue = icon;\n\t} else {\n\t\tconst iconError = await validIconData(icon);\n\t\tif (iconError) {\n\t\t\tthrow iconError;\n\t\t}\n\t\t// add icon inscription to the transaction\n\t\tconst iconScript = new OrdP2PKH().lock(destinationAddress, icon);\n\t\tconst iconOut = {\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: iconScript,\n\t\t};\n\t\ttx.addOutput(iconOut);\n\t\t// relative output index of the icon\n\t\ticonValue = \"_0\";\n\t}\n\n\t// Ensure the icon format\n\tif (!validIconFormat(iconValue)) {\n\t\tthrow new Error(\n\t\t\t\"Invalid icon format. Must be either outpoint (format: txid_vout) or relative output index of the icon (format _vout). examples: ecb483eda58f26da1b1f8f15b782b1186abdf9c6399a1c3e63e0d429d5092a41_0 or _1\",\n\t\t);\n\t}\n  \n\t// Outputs\n  const tsatAmt = decimals ? BigInt(initialDistribution.tokens) * 10n ** BigInt(decimals) : BigInt(initialDistribution.tokens);\n\tconst fileData: DeployMintTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"deploy+mint\",\n\t\tsym: symbol,\n\t\ticon: iconValue,\n\t\tamt: tsatAmt.toString(),\n\t};\n\n  if (decimals) {\n    fileData.dec = decimals.toString();\n  }\n\n\tconst b64File = Buffer.from(JSON.stringify(fileData)).toString(\"base64\");\n\tconst sendTxOut = {\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(destinationAddress, {\n\t\t\tdataB64: b64File,\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t} as Inscription),\n\t};\n\ttx.addOutput(sendTxOut);\n\n\t// Additional payments\n\tfor (const payment of additionalPayments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new P2PKH().lock(payment.to),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpaymentPk, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to deploy token. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tScript,\n\tUtils,\n  PrivateKey,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB, MAP_PREFIX } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n  BaseResult,\n\tBurnOrdinalsConfig,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { toHex } from \"./utils/strings\";\n\n/**\n * Burn ordinals by consuming them as fees\n * @param {BurnOrdinalsConfig} config - Configuration object for sending ordinals\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Utxo} config.ordinals - 1Sat Ordinal Utxos to spend (with base64 encoded scripts)\n * @param {BurnMAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include in an unspendable output OP_FALSE OP_RETURN\n * @returns {Promise<BaseResult>} Transaction, spent outpoints\n */\nexport const burnOrdinals = async (\n\tconfig: BurnOrdinalsConfig,\n): Promise<BaseResult> => {\n\tconst tx = new Transaction();\n\tconst spentOutpoints: string[] = [];\n\tconst { ordinals, metaData } = config;\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(\n\t\t\tordUtxo,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tconfig.ordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tordUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(ordUtxo.script, \"base64\")),\n\t\t\t),\n\t\t);\n\t\tspentOutpoints.push(`${ordUtxo.txid}_${ordUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// Add metadata output\n\n\t// MAP.app and MAP.type keys are required\n\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t}\n\n\tlet metaAsm = \"\";\n\n\tif (metaData?.app && metaData?.type) {\n\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\tconst mapCmdValue = toHex(\"SET\");\n\t\tmetaAsm = `OP_FALSE OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\tif (key !== \"cmd\") {\n\t\t\t\tmetaAsm = `${metaAsm} ${toHex(key)} ${toHex(value as string)}`;\n\t\t\t}\n\t\t}\n\t}\n\n\ttx.addOutput({\n\t\tsatoshis: 0,\n\t\tlockingScript: Script.fromASM(metaAsm || \"OP_FALSE OP_RETURN\"),\n\t});\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t};\n};\n","// import { PaymailClient } from \"@bsv/paymail\";\nimport { LockingScript } from \"@bsv/sdk\";\n\n// const client = new PaymailClient();\n\nexport const resolvePaymail = async (paymailAddress: string, amtToReceive: number): Promise<LockingScript> => {\n  // const destinationTx = await client.getP2pPaymentDestination(paymailAddress, amtToReceive);\n  // // TODO: we are assuming only one output but in reality it can be many\n  // return destinationTx.outputs[0].script as LockingScript;\n  throw new Error(\"Not implemented\");\n}","import type { CollectionItemSubTypeData, CollectionSubTypeData } from \"./types\";\n\n/**\n * Validates sub type data\n * @param {string} subType - Sub type of the ordinals token\n * @param {string} subTypeData - Sub type data of the ordinals token\n * @returns {Error | undefined} Error if validation fails, undefined if validation passes\n */\nexport const validateSubTypeData = (\n  subType: \"collection\" | \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData | CollectionSubTypeData,\n): Error | undefined => {\n  try {\n    if (subType === \"collection\") {\n      const collectionData = subTypeData as CollectionSubTypeData;\n      if (!collectionData.description) {\n        return new Error(\"Collection description is required\");\n      }\n      if (!collectionData.quantity) {\n        return new Error(\"Collection quantity is required\");\n      }\n      if (collectionData.rarityLabels) {\n        if (!Array.isArray(collectionData.rarityLabels)) {\n          return new Error(\"Rarity labels must be an array\");\n        }\n        // make sure keys and values are strings\n        if (!collectionData.rarityLabels.every((label) => {\n          return Object.values(label).every(value => typeof value === 'string');\n        })) {\n          return new Error(`Invalid rarity labels ${collectionData.rarityLabels}`);\n        }\n      }\n      if (collectionData.traits ) {\n        if (typeof collectionData.traits !== \"object\") {\n        return new Error(\"Collection traits must be an object\");\n        }\n        if (collectionData.traits && !Object.keys(collectionData.traits).every(key => typeof key === 'string' && typeof collectionData.traits[key] === 'object')) {\n          return new Error(\"Collection traits must be a valid CollectionTraits object\");\n        }\n      }\n    }\n    if (subType === \"collectionItem\") {\n      const itemData = subTypeData as CollectionItemSubTypeData;\n      if (!itemData.collectionId) {\n        return new Error(\"Collection id is required\");\n      }\n      if (!itemData.collectionId.includes(\"_\")) {\n        return new Error(\"Collection id must be a valid outpoint\");\n      }\n      if (itemData.collectionId.split(\"_\")[0].length !== 64) {\n        return new Error(\"Collection id must contain a valid txid\");\n      }\n      if (Number.isNaN(Number.parseInt(itemData.collectionId.split(\"_\")[1]))) {\n        return new Error(\"Collection id must contain a valid vout\");\n      }\n\n      if (itemData.mintNumber && typeof itemData.mintNumber !== \"number\") {\n        return new Error(\"Mint number must be a number\");\n      }\n      if (itemData.rank && typeof itemData.rank !== \"number\") {\n        return new Error(\"Rank must be a number\");\n      }\n      if (itemData.rarityLabel && typeof itemData.rarityLabel !== \"string\") {\n        return new Error(\"Rarity label must be a string\");\n      }\n      if (itemData.traits && typeof itemData.traits !== \"object\") {\n        return new Error(\"Traits must be an object\");\n      }\n      if (itemData.attachments && !Array.isArray(itemData.attachments)) {\n        return new Error(\"Attachments must be an array\");\n      }\n    }\n    return undefined;\n  } catch (error) {\n    return new Error(\"Invalid JSON data\");\n  }\n};"],"names":["TokenSelectionStrategy","TokenType","RoytaltyType","TokenInputMode","toHex","utf8Str","Buffer","from","toString","MAP_PREFIX","DEFAULT_SAT_PER_KB","API_HOST","OrdP2PKH","_P2PKH","apply","arguments","_inheritsLoose","prototype","lock","address","inscription","metaData","ordAsm","undefined","dataB64","contentType","ordHex","fileHex","trim","Error","fileMediaType","inscriptionAsm","P2PKH","toASM","app","type","mapPrefixHex","_i","_Object$entries","Object","entries","length","_Object$entries$_i","key","value","LockingScript","fromASM","MAX_TOKEN_SUPPLY","Math","pow","fromBase58Check","Utils","inputFromB64Utxo","utxo","unlockScriptTemplate","fromUtxo","_extends","script","signData","tx","signer","_exit","_temp2","_result","idKey","keyHost","_sigma$sign","Sigma","sign","Promise","resolve","signedTx","_temp","authToken","sigma","remoteSign","then","_ref","_catch","e","console","log","reject","stringifyMetaData","result","Array","isArray","JSON","stringify","String","pact","state","s","_Pact","o","bind","v","_settle","observer","onFulfilled","this","_this","onRejected","_isSettledPact","thenable","_iteratorSymbol","Symbol","iterator","callback","OrdLock","_proto","ordAddress","payAddress","price","cancelPkh","data","payPkh","Script","writeScript","fromHex","writeBin","buildOutput","toBinary","cancelListing","privateKey","signOutputs","anyoneCanPay","sourceSatoshis","lockingScript","p2pkh","unlock","inputIndex","_p2pkh$sign","writeOpCode","OP","OP_1","estimateLength","purchaseListing","purchase","_input$sourceTransact","outputs","UnlockingScript","satoshis","_step","writer","Writer","_iterator","_createForOfIteratorHelperLoose","slice","done","output","write","toArray","OP_0","input","inputs","sourceSats","sourceTransaction","sourceOutputIndex","_input$sourceTransact2","sourceTXID","id","subscript","preimage","TransactionSignature","format","transactionVersion","version","otherInputs","inputSequence","sequence","lockTime","scope","SIGHASH_ALL","SIGHASH_ANYONECANPAY","SIGHASH_FORKID","_purchase$sign","writeUInt64LEBn","BigNumber","writeVarIntNum","_forOf","target","body","check","step","next","_cycle","return","_fixup","TypeError","values","i","push","array","_forTo","ImageSize","disableFS","sizeOf","ErrorOversizedIcon","ErrorIconProportions","ErrorInvalidIconData","ErrorImageDimensionsUndefined","config","Transaction","spentOutpoints","ordinals","ordUtxo","ordPk","fromBinary","txid","vout","addInput","metaAsm","mapCmdValue","addOutput","_interrupt","totalSatsIn","totalSatsOut","BigInt","fee","modelOrFee","payChangeOutIdx","findIndex","change","changeOutput","payChange","map","utxos","listingUtxos","paymentPk","changeAddress","_config$additionalPay","additionalPayments","_config$satsPerKb","satsPerKb","warn","SatoshisPerKilobyte","listingUtxo","toAddress","_step2","_iterator2","p","amount","to","changeScript","reduce","total","out","computeFee","_modelOrFee$computeFe","_interrupt2","_temp4","tokenChange","amt","totalAmtIn","tokenID","protocol","_config$satsPerKb2","every","token","_step3","_iterator3","Number","parseInt","transferInscription","op","BSV20","tick","BSV21","destination","_iterator4","_step4","_temp3","_modelOrFee$computeFe2","listings","listing","inputScriptBinary","inputScript","tc","_config$additionalPay2","tokenChangeAddress","inputTokens","decimals","changeAmt","totalAmtOut","bigAmt","toTokenSat","tokens","ReturnTypes","_step5","_iterator5","destinations","_Object$keys","keys","pop","_signData","iconValue","icon","includes","endsWith","iconVout","split","isNaN","startsWith","validIconFormat","tsatAmt","initialDistribution","fileData","sym","symbol","dec","b64File","sendTxOut","destinationAddress","payment","svgBase64","svgString","widthMatch","match","heightMatch","width","height","validateSvg","buffer","dimensions","error","validIconData","iconError","iconScript","collectionId","limit","offset","scriptEncoding","url","b64Query","subTypeData","fetch","res","ok","json","nftUtxos","outpoints","filter","u","_u$data","list","method","headers","concat","nftRes","nfts","nftUtxo","origin","outpoint","payUrl","payRes","payUtxos","pubKeyHash","p2pkhScript","tokenId","tokenUtxos","_temp6","_result2","_config$royalties","royalties","reader","Reader","payout","readUInt64LEBn","toNumber","scriptLength","readVarIntNum","scriptBin","read","_temp5","r","royaltySats","floor","percentage","_switch","Paymail","resolvePaymail","_resolvePaymail","Address","_temp8","_interrupt3","_temp7","requiredTokens","options","_options$inputStrateg","inputStrategy","RetainOrder","_options$outputStrate","outputStrategy","totalSelected","selectedUtxos","sort","a","b","amtA","amtB","SmallestFirst","LargestFirst","Random","random","toToken","isEnough","enforceUniformSend","_destination$inscript","_destination$inscript2","paymentUtxos","changeOut","payments","_config$changeAddress","distributions","_config$burn","burn","_config$tokenInputMod","tokenInputMode","Needed","_config$splitConfig","splitConfig","omitMetaData","changeTsats","tokensToUse","totalTsatIn","totalTsatOut","totalAmtNeeded","acc","dist","All","dest","distTokenSat","splitOutputs","tokenChanges","threshold","maxOutputs","splitChangeAmt","min","baseChangeAmount","max","remainder","splitAmount","splitChangeOutputs","subType","collectionData","description","quantity","rarityLabels","label","traits","itemData","mintNumber","rank","rarityLabel","attachments"],"mappings":"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"}