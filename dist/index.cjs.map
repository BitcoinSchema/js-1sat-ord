{"version":3,"file":"index.cjs","sources":["../src/utils/strings.ts","../src/types.ts","../src/constants.ts","../src/templates/ordP2pkh.ts","../src/utils/utxo.ts","../src/signData.ts","../src/utils/subtypeData.ts","../src/sendOrdinals.ts","../src/sendUtxos.ts","../src/templates/ordLock.ts","../src/createListings.ts","../src/cancelListing.ts","../src/purchaseOrdListing.ts","../src/createOrdinals.ts","../src/transferOrdinals.ts","../src/validate.ts"],"sourcesContent":["/**\n * Converts a string to its hexadecimal representation\n *\n * @param {string} utf8Str - The string to convert\n * @returns {string} The hexadecimal representation of the input string\n */\nconst toHex = (utf8Str: string): string => {\n  return Buffer.from(utf8Str).toString(\"hex\");\n};\n\nexport { toHex };\n","import type { PrivateKey, Script, Transaction } from \"@bsv/sdk\";\nimport type { AuthToken } from \"sigma-protocol\";\n\n// biome-ignore lint/complexity/noBannedTypes: Reserved for future use\ntype Signer = {};\n\nexport interface LocalSigner extends Signer {\n\tidKey: PrivateKey;\n}\n\nexport interface RemoteSigner extends Signer {\n\tkeyHost: string;\n\tauthToken?: AuthToken;\n}\n\nexport type Destination = {\n\taddress: string;\n\tinscription?: Inscription;\n};\n\n//jsdoc\n/**\n * @typedef {Object} Listing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n */\nexport type Listing = {\n  payAddress: string;\n  price: number;\n  ordAddress: string;\n  listingUtxo: Utxo\n}\n\n/**\n * @typedef {Object} Distribution\n * @property {string} address - Destination address. Must be a Ordinals address (BSV address for recieving 1Sat ordinals tokens).\n * @property {string} amt - Number of tokens as a string, considering decimals. Not display format. Ex. 100000000 for 1 token with 8 decimal places.\n */\nexport type Distribution = {\n\taddress: string;\n\tamt: string;\n};\n\n/**\n * @typedef {Object} Utxo\n * @property {number} satoshis - Amount in satoshis\n * @property {string} txid - Transaction id\n * @property {number} vout - Output index\n * @property {string} script - Base64 encoded locking script\n */\nexport type Utxo = {\n\tsatoshis: number;\n\ttxid: string;\n\tvout: number;\n\tscript: string;\n};\n\n/**\n * @typedef {Object} NftUtxo\n * @property {string} collectionId - Optional. Collection id of the NFT\n * @property {string} contentType - Media type of the NFT\n * @property {string} creatorBapId - Optional. Creator BAP id of the NFT\n * @property {string} origin - Origin address of the NFT\n * @property {number} satoshis - Always 1\n */\nexport interface NftUtxo extends Utxo {\n\tcollectionId?: string;\n\tcontentType: string;\n\tcreatorBapId?: string;\n\torigin: string;\n\tsatoshis: 1;\n}\n\n/**\n * @typedef {Object} TokenUtxo\n * @property {string} amt - Number of tokens as a string\n * @property {string} id - Token id -  either tick or id depending on protocol\n * @property {string} satoshis - Always 1\n */\nexport interface TokenUtxo extends Utxo {\n\tamt: string;\n\tid: string;\n\tsatoshis: 1;\n}\n\nexport type Inscription = {\n\tdataB64: string;\n\tcontentType: string;\n};\n\nexport type ImageContentType =\n\t| \"image/png\"\n\t| \"image/jpeg\"\n\t| \"image/gif\"\n\t| \"image/svg+xml\"\n\t| \"image/webp\";\n\n/**\n * @typedef {Object} IconInscription\n * @property {string} dataB64 - Base64 encoded image data. Must be a square image.\n * @property {ImageContentType} contentType - Media type of the image\n */\nexport type IconInscription = {\n\tdataB64: string;\n\tcontentType: ImageContentType;\n};\n\nexport type Payment = {\n\tto: string;\n\tamount: number;\n};\n\nexport type TokenInscription = {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\" | \"mint\" | \"deploy+mint\" | \"burn\";\n};\n\nexport interface MintTokenInscription extends TokenInscription {\n\top: \"mint\";\n}\n\nexport interface DeployMintTokenInscription extends TokenInscription {\n\top: \"deploy+mint\";\n\tsym: string;\n\ticon: string;\n}\n\nexport interface TransferTokenInscription extends TokenInscription {\n\tp: \"bsv-20\";\n\tamt: string;\n\top: \"transfer\" | \"burn\";\n}\n\nexport interface TransferBSV20Inscription extends TransferTokenInscription {\n\ttick: string;\n}\n\nexport interface TransferBSV21Inscription extends TransferTokenInscription {\n\tid: string;\n}\n\nexport enum TokenType {\n\tBSV20 = \"bsv20\",\n\tBSV21 = \"bsv21\",\n}\n\nexport type CreateOrdinalsResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\n/**\n * MAP (Magic Attribute Protocol) metadata object with stringified values for writing to the blockchain\n * @typedef {Object} MAP\n * @property {string} app - Application identifier\n * @property {string} type - Metadata type\n * @property {string} [prop] - Optional. Additional metadata properties\n */\nexport type MAP = {\n\tapp: string;\n\ttype: string;\n\t[prop: string]: string;\n};\n\nexport type PreMAP = {\n\tapp: string;\n\ttype: string;\n\t[prop: string]: unknown;\n\troyalties?: Royalty[];\n\tsubTypeData?: CollectionSubTypeData | CollectionItemSubTypeData;\n};\n\nexport type CreateOrdinalsConfig = {\n\tutxos: Utxo[];\n\tdestinations: Destination[];\n\tpaymentPk: PrivateKey;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: PreMAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n};\n\nexport enum RoytaltyType {\n\tPaymail = \"paymail\",\n\tAddress = \"address\",\n\tScript = \"script\",\n}\n\n/**\n * Royalty object\n * @typedef {Object} Royalty\n * @property {RoytaltyType} type - Royalty type, string, one of \"paymail\", \"address\", \"script\"\n * @property {string} destination - Royalty destination\n * @property {string} percentage - Royalty percentage as a string float 0-1\n */\nexport type Royalty = {\n\ttype: RoytaltyType;\n\tdestination: string;\n\tpercentage: string; // string float 0-1\n};\n\nexport interface CreateOrdinalsMetadata extends PreMAP {\n\ttype: \"ord\",\n\tname: string,\n\tpreviewUrl?: string,\n}\n\nexport interface CreateOrdinalsCollectionMetadata extends CreateOrdinalsMetadata {\n\tsubType: \"collection\",\n\tsubTypeData: CollectionSubTypeData, // JSON stringified CollectionSubTypeData\n\troyalties?: Royalty[],\n};\n\nexport interface CreateOrdinalsCollectionItemMetadata extends CreateOrdinalsMetadata {\n\tsubType: \"collectionItem\",\n\tsubTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n};\n\n/**\n * Configuration object for creating an ordinals collection\n * @typedef {Object} CreateOrdinalsCollectionConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collection\"\n * @property metaData.name - Collection name\n * @property metaData.subTypeData - JSON stringified CollectionSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface  CreateOrdinalsCollectionConfig extends CreateOrdinalsConfig {\n\tmetaData: CreateOrdinalsCollectionMetadata\n}\n\nexport type CollectionTraits = {\n\t[trait: string]: CollectionTrait;\n};\n\nexport type CollectionTrait = {\n\tvalues: string[];\n\toccurancePercentages: string[];\n};\n\nexport type Rarity = {\n  [key:string]: string;\n}\n\nexport type RarityLabels = Rarity[]\nexport interface CollectionSubTypeData {\n\tdescription: string;\n\tquantity: number;\n\trarityLabels: RarityLabels;\n\ttraits: CollectionTraits;\n}\n\nexport interface CreateOrdinalsCollectionItemMetadata extends PreMAP {\n\t\ttype: \"ord\",\n\t\tname: string,\n\t\tsubType: \"collectionItem\",\n\t\tsubTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n\t\troyalties?: Royalty[],\n\t\tpreviewUrl?: string,\t\n}\n\n/**\n * Configuration object for creating an ordinals collection item\n * @typedef {Object} CreateOrdinalsCollectionItemConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection item\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collectionItem\"\n * @property metaData.name - Collection item name\n * @property metaData.subTypeData - JSON stringified CollectionItemSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionItemConfig extends CreateOrdinalsConfig {\n\tmetaData: CreateOrdinalsCollectionItemMetadata\n}\n\n/**\n * Subtype data for an ordinals collection item\n * @typedef {Object} CollectionItemSubTypeData\n * @property {string} collectionId - Collection id\n * @property {number} mintNumner - Mint number\n * @property {number} rank - Rank\n * @property {string} rarityLabel - Rarity label\n * @property {string} traits - traits object\n * @property {string} attachments - array of attachment objects\n */\nexport interface CollectionItemSubTypeData {\n\tcollectionId: string;\n\tmintNumber?: number;\n\trank?: number;\n\trarityLabel?: RarityLabels;\n\ttraits?: CollectionItemTraits;\n\tattachments?: CollectionItemAttachment[];\n}\n\nexport type CollectionItemTraits = {\n\tname: string;\n\tvalue: string;\n\trarityLabel?: string;\n\toccurancePercentrage?: string;\n};\n\nexport type CollectionItemAttachment \t= {\n\tname: string;\n\tdescription?: string;\n\t\"content-type\": string;\n\turl: string;\n}\n\nexport type SendOrdinalsResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type SendOrdinalsConfig = {\n\tpaymentUtxos: Utxo[];\n\tordinals: Utxo[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tdestinations: Destination[];\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: PreMAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n\tenforceUniformSend?: boolean;\n}\n\nexport type DeployBsv21TokenResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type DeployBsv21TokenConfig = {\n\tsymbol: string;\n\ticon: string | IconInscription;\n\tutxos: Utxo[];\n\tinitialDistribution: Distribution;\n\tpaymentPk: PrivateKey;\n\tdestinationAddress: string;\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[];\n};\n\nexport type SendUtxosResult = {\n\ttx: Transaction;\n\tspentOutpoints: string[];\n\tpayChange?: Utxo;\n};\n\nexport type SendUtxosConfig = {\n\tutxos: Utxo[];\n\tpaymentPk: PrivateKey;\n\tpayments: Payment[];\n\tsatsPerKb?: number;\n\tchangeAddress?: string;\n};\n\nexport interface TransferOrdTokensResult extends SendOrdinalsResult {\n\ttokenChange?: TokenUtxo;\n}\n\nexport type TransferOrdTokensConfig = {\n\tprotocol: TokenType;\n\ttokenID: string;\n\tutxos: Utxo[];\n\tinputTokens: TokenUtxo[];\n\tdistributions: Distribution[];\n\tpaymentPk: PrivateKey;\n\tordPk: PrivateKey;\n\tchangeAddress?: string;\n\ttokenChangeAddress?: string;\n\tsatsPerKb?: number;\n\tmetaData?: PreMAP;\n\tsigner?: LocalSigner | RemoteSigner;\n\tadditionalPayments?: Payment[];\n  burn?: boolean;\n}\n\nexport type CreateOrdListingsConfig = {\n\tutxos: Utxo[];\n\tlistings: Listing[];\n  royalty: number;\n\tpaymentPk: PrivateKey;\n  ordPk: PrivateKey,\n\tchangeAddress?: string;\n\tsatsPerKb?: number;\n\tadditionalPayments?: Payment[];\n}\n\nexport type PurchaseOrdListingConfig = {\n  utxos: Utxo[];\n  paymentPk: PrivateKey;\n  listingUtxo: Utxo;\n  ordAddress: string;\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[],\n}\n\nexport type CancelOrdListingsConfig = {\n  utxos: Utxo[],\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  listingUtxos: Utxo[];\n  additionalPayments: Payment[];\n  changeAddress?: string;\n  satsPerKb?: number;\n}\n\nexport type CraeteOrdTokenListingsConfig = {\n  protocol: TokenType;\n  tokenID: string;\n  utxos: Utxo[];\n  inputTokens: TokenUtxo[];\n  distributions: Distribution[];\n  paymentPk: PrivateKey;\n  ordPk: PrivateKey;\n  changeAddress?: string;\n  tokenChangeAddress: string;\n  satsPerKb?: number;\n  additionalPayments: Payment[];\n}","export const MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\nexport const DEFAULT_SAT_PER_KB = 10;\nexport const API_HOST = \"https://ordinals.gorillapool.io/api\";","import {\n\tLockingScript,\n\tP2PKH,\n\ttype Script,\n} from \"@bsv/sdk\";\nimport type { MAP } from \"../types\";\nimport { toHex } from \"../utils/strings\";\nimport { MAP_PREFIX } from \"../constants\";\n\n/**\n * OrdP2PKH (1Sat Ordinal + Pay To Public Key Hash) class implementing ScriptTemplate.\n *\n * This class provides methods to create an Ordinal with Pay To Public Key Hash locking and unlocking scripts. \n * It extends the standard P2PKH script template and provides a custom lock method.\n */\nexport default class OrdP2PKH extends P2PKH {\n\t/**\n\t * Creates a 1Sat Ordinal + P2PKH locking script for a given address string\n\t *\n\t * @param {string} address - An destination address for the Ordinal.\n\t * @param {string} [b64File] - Base64 encoded file data.\n\t * @param {string} [mediaType] - Media type of the file.\n\t * @param {MAP} [metaData] - (optional) MAP Metadata to be included in OP_RETURN.\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\t// unlock method inherits from p2pkh\n\tlock(\n\t\taddress: string,\n\t\tb64File?: string | undefined,\n\t\tmediaType?: string | undefined,\n\t\tmetaData?: MAP | undefined,\n\t): Script {\n\t\tlet ordAsm = \"\";\n\t\t// This can be omitted for reinscriptions that just update metadata\n\t\tif (b64File !== undefined && mediaType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(b64File, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(mediaType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`;\n\t\t}\n\n\t\t// Create ordinal output and inscription in a single output\n\t\tconst lockingScript = new P2PKH().lock(address);\n\t\tlet inscriptionAsm = `${ordAsm ? `${ordAsm} ` : \"\"}${lockingScript.toASM()}`;\n\n\t\t// MAP.app and MAP.type keys are required\n\t\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t\t}\n\n\t\tif (metaData?.app && metaData?.type) {\n\t\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\t\tconst mapCmdValue = toHex(\"SET\");\n\t\t\tinscriptionAsm = `${inscriptionAsm} OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\t\tif (key !== \"cmd\") {\n\t\t\t\t\tinscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\n\t\t\t\t\t\tvalue as string,\n\t\t\t\t\t)}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn LockingScript.fromASM(inscriptionAsm);\n\t}\n}\n","import {\n\ttype Transaction,\n\ttype UnlockingScript,\n\tfromUtxo,\n\ttype TransactionInput,\n\tUtils,\n\tP2PKH,\n  Script,\n} from \"@bsv/sdk\";\nimport { type NftUtxo, TokenType, type TokenUtxo, type Utxo } from \"../types\";\nimport { API_HOST } from \"../constants\";\n\nconst { fromBase58Check } = Utils;\n\n/**\n * Converts a Utxo object with a base64 encoded script to a Utxo object with a hex encoded script\n * @param {Utxo} utxo - Utxo object with base64 encoded script\n * @param {Object} unlockScriptTemplate - Object with sign and estimateLength functions\n * @returns {TransactionInput} Utxo object with hex encoded script\n */\nexport const inputFromB64Utxo = (\n\tutxo: Utxo,\n\tunlockScriptTemplate: {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>;\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>;\n\t},\n): TransactionInput => {\n\tconst input = fromUtxo(\n\t\t{\n\t\t\t...utxo,\n\t\t\tscript: Buffer.from(utxo.script, \"base64\").toString(\"hex\"),\n\t\t},\n\t\tunlockScriptTemplate,\n\t);\n\treturn input;\n};\n\n/**\n * Fetches pay utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<Utxo[]>} Array of pay utxos\n */\nexport const fetchPayUtxos = async (address: string, scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\"): Promise<Utxo[]> => {\n\tconst payUrl = `${API_HOST}/txos/address/${address}/unspent?bsv20=false`;\n\tconsole.log({ payUrl });\n\tconst payRes = await fetch(payUrl);\n\tif (!payRes.ok) {\n\t\tthrow new Error(\"Error fetching pay utxos\");\n\t}\n\tlet payUtxos = await payRes.json();\n\t// exclude all 1 satoshi utxos\n\tpayUtxos = payUtxos.filter((u: { satoshis: number }) => u.satoshis !== 1);\n\n\t// Get pubkey hash from address\n\tconst pubKeyHash = fromBase58Check(address);\n\tconst p2pkhScript = new P2PKH().lock(pubKeyHash.data);\n\tpayUtxos = payUtxos.map((utxo: Partial<Utxo>) => ({\n\t\ttxid: utxo.txid,\n\t\tvout: utxo.vout,\n\t\tsatoshis: utxo.satoshis,\n\t\tscript: scriptEncoding === \"hex\" || scriptEncoding === \"base64\" ? Buffer.from(p2pkhScript.toBinary()).toString(scriptEncoding) : p2pkhScript.toASM(),\n\t}));\n\treturn payUtxos as Utxo[];\n};\n\n/**\n * Fetches NFT utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @param {string} [collectionId] - Optional. Collection id (collection insciprtion origin)\n * @param {number} [limit=10] - Optional. Number of utxos to fetch. Default is 10\n * @param {number} [offset=0] - Optional. Offset for fetching utxos. Default is 0\n * @param {string} [scriptEncoding=\"base64\"] - Optional. Encoding for the script. Default is base64. Options are hex, base64, or asm.\n * @returns {Promise<Utxo[]>} Array of NFT utxos\n */\nexport const fetchNftUtxos = async (\n\taddress: string,\n\tcollectionId?: string,\n\tlimit = 10,\n\toffset = 0,\n  scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\",\n): Promise<NftUtxo[]> => {\n\tlet url = `${API_HOST}/txos/address/${address}/unspent?limit=${limit}&offset=${offset}&`;\n\n\tif (collectionId) {\n\t\tconst query = {\n\t\t\tmap: {\n\t\t\t\tsubTypeData: { collectionId },\n\t\t\t},\n\t\t};\n\t\tconst b64Query = Buffer.from(JSON.stringify(query)).toString(\"base64\");\n\t\turl += `q=${b64Query}`;\n\t}\n\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching NFT utxos for ${address}`);\n\t}\n\n\t// Returns a BSV20Txo but we only need a few fields\n\tlet nftUtxos = await res.json();\n\n\t// Only include 1 satoshi outputs, non listings\n\tnftUtxos = nftUtxos.filter(\n\t\t(u: {\n\t\t\tsatoshis: number;\n\t\t\tdata: { list: { price: number; payout: string } | undefined } | null;\n\t\t}) => u.satoshis === 1 && !u.data?.list,\n\t);\n\n\tconst outpoints = nftUtxos.map(\n\t\t(utxo: { txid: string; vout: number }) => `${utxo.txid}_${utxo.vout}`,\n\t);\n\t// Fetch the scripts up to the limit\n\tconst nftRes = await fetch(`${API_HOST}/txos/outpoints?script=true`, {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t\tbody: JSON.stringify([...outpoints]),\n\t});\n\n\tif (!nftRes.ok) {\n\t\tthrow new Error(`Error fetching NFT scripts for ${address}`);\n\t}\n\n\tconst nfts = (await nftRes.json() || [])\n\n\tnftUtxos = nfts.map(\n\t\t(utxo: {\n\t\t\torigin: { outpoint: string };\n\t\t\tscript: string;\n\t\t\tvout: number;\n\t\t\ttxid: string;\n\t\t}) => {\n      let script = utxo.script;\n      if (scriptEncoding === \"hex\") {\n        script = Buffer.from(script, \"base64\").toString(\"hex\");\n      } else if (scriptEncoding === \"asm\") {\n        script = Script.fromHex(Buffer.from(script, \"base64\").toString(\"hex\")).toASM();\n      }\n\t\t\tconst nftUtxo = {\n\t\t\t\torigin: utxo.origin.outpoint,\n\t\t\t\tscript,\n\t\t\t\tvout: utxo.vout,\n\t\t\t\ttxid: utxo.txid,\n\t\t\t\tsatoshis: 1,\n\t\t\t} as NftUtxo;\n\t\t\tif (collectionId) {\n\t\t\t\tnftUtxo.collectionId = collectionId;\n\t\t\t}\n\t\t\treturn nftUtxo;\n\t\t},\n\t);\n\n\treturn nftUtxos as NftUtxo[];\n};\n\n/**\n * Fetches token utxos from the API\n * @param {TokenType} protocol - Token protocol. Either BSV20 or BSV21\n * @param {string} tokenId - Token id. Ticker for BSV20 and id (mint+deploy inscription origin) for BSV21\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<TokenUtxo[]>} Array of token utxos\n */\nexport const fetchTokenUtxos = async (\n\tprotocol: TokenType,\n\ttokenId: string,\n\taddress: string,\n): Promise<TokenUtxo[]> => {\n\tconst url = `${API_HOST}/bsv20/${address}/${protocol === TokenType.BSV20 ? \"tick\" : \"id\"}/${tokenId}?bsv20=true&listing=false`;\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching ${protocol} utxos`);\n\t}\n\n\t// returns a BSV20Txo but we only need a few fields\n\tlet tokenUtxos = await res.json();\n\n\ttokenUtxos = tokenUtxos.map((utxo: Partial<TokenUtxo>) => ({\n\t\tamt: utxo.amt,\n\t\tscript: utxo.script,\n\t\tvout: utxo.vout,\n\t\ttxid: utxo.txid,\n\t\tid: tokenId,\n\t\tsatoshis: 1,\n\t}));\n\n\treturn tokenUtxos as TokenUtxo[];\n};\n","import type { Transaction } from \"@bsv/sdk\";\nimport { Sigma } from \"sigma-protocol\";\nimport type { LocalSigner, RemoteSigner } from \"./types\";\n\n/**\n * Signs data in the transaction with Sigma protocol\n * @param {Transaction} tx - Transaction to sign\n * @param {LocalSigner | RemoteSigner} signer - Local or remote signer (used for data signature)\n * @returns {Transaction} Transaction with signed data\n */\nexport const signData = async (\n\ttx: Transaction,\n\tsigner: LocalSigner | RemoteSigner,\n): Promise<Transaction> => {\n\t// Sign tx if idKey or remote signer like starfish/tokenpass\n\tconst idKey = (signer as LocalSigner)?.idKey;\n\tconst keyHost = (signer as RemoteSigner)?.keyHost;\n\n\tif (idKey) {\n\t\tconst sigma = new Sigma(tx);\n\t\tconst { signedTx } = sigma.sign(idKey);\n\t\treturn signedTx;\n\t}\n\tif (keyHost) {\n\t\tconst authToken = (signer as RemoteSigner)?.authToken;\n\t\tconst sigma = new Sigma(tx);\n\t\ttry {\n\t\t\tconst { signedTx } = await sigma.remoteSign(keyHost, authToken);\n\t\t\treturn signedTx;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthrow new Error(`Remote signing to ${keyHost} failed`);\n\t\t}\n\t}\n\tthrow new Error(\"Signer must be a LocalSigner or RemoteSigner\");\n};\n","import type { MAP, PreMAP } from \"../types\";\n\nconst stringifyMetaData = (metaData?: PreMAP): MAP | undefined => {\n  if (!metaData) return undefined;\n\tconst result: MAP = {\n\t\tapp: metaData.app,\n\t\ttype: metaData.type,\n\t};\n\n\tfor (const [key, value] of Object.entries(metaData)) {\n\t\tif (value !== undefined) {\n\t\t\tif (typeof value === \"string\") {\n\t\t\t\tresult[key] = value;\n\t\t\t} else if (Array.isArray(value) || typeof value === \"object\") {\n\t\t\t\tresult[key] = JSON.stringify(value);\n\t\t\t} else {\n\t\t\t\tresult[key] = String(value);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\nexport default stringifyMetaData;\n","import {\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype Script,\n\ttype TransactionOutput,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type { SendOrdinalsResult, SendOrdinalsConfig, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Sends ordinals to the given destinations\n * @param {SendOrdinalsConfig} config - Configuration object for sending ordinals\n * @param {Utxo[]} config.paymentUtxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.ordinals - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {string} config.changeAddress - Optional. Address to send change to, if any. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @param {boolean} config.enforceUniformSend - Optional. Default: true. Enforce that the number of destinations matches the number of ordinals being sent. Sending ordinals requires a 1:1 mapping of destinations to ordinals. This is only used for sub-protocols like BSV21 that manage tokens without sending the inscriptions directly.\n * @returns {Promise<SendOrdinalsResult>} Transaction, spent outpoints, and change vout\n */\nexport const sendOrdinals = async (\n\tconfig: SendOrdinalsConfig,\n): Promise<SendOrdinalsResult> => {\n\tif (!config.satsPerKb) {\n\t\tconfig.satsPerKb = DEFAULT_SAT_PER_KB;\n\t}\n\tif (!config.additionalPayments) {\n\t\tconfig.additionalPayments = [];\n\t}\n\tif (config.enforceUniformSend === undefined) {\n\t\tconfig.enforceUniformSend = true;\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(config.satsPerKb);\n\tlet tx = new Transaction();\n\tconst spentOutpoints: string[] = [];\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of config.ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(\n\t\t\tordUtxo,\n\t\t\tnew OrdP2PKH().unlock(config.ordPk),\n\t\t);\n\t\tspentOutpoints.push(`${ordUtxo.txid}_${ordUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// check that ordinals coming in matches ordinals going out if supplied\n\tif (\n\t\tconfig.enforceUniformSend &&\n\t\tconfig.destinations.length !== config.ordinals.length\n\t) {\n\t\tthrow new Error(\n\t\t\t\"Number of destinations must match number of ordinals being sent\",\n\t\t);\n\t}\n\n\t// Add ordinal outputs\n\tfor (const destination of config.destinations) {\n\t\tlet s: Script;\n\t\tif (\n\t\t\tdestination.inscription?.dataB64 &&\n\t\t\tdestination.inscription?.contentType\n\t\t) {\n\t\t\ts = new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription.dataB64,\n\t\t\t\tdestination.inscription.contentType,\n\t\t\t\tstringifyMetaData(config.metaData),\n\t\t\t);\n\t\t} else {\n\t\t\ts = new P2PKH().lock(destination.address);\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: s,\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of config.additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of config.paymentUtxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(config.paymentPk));\n\t\tspentOutpoints.push(`${utxo.txid}_${utxo.vout}`);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (totalSatsIn < totalSatsOut) {\n\t\tthrow new Error(\"Not enough ordinals to send\");\n\t}\n\n\tlet payChange: Utxo | undefined;\n\tif (totalSatsIn > totalSatsOut + BigInt(fee)) {\n\t\tconst changeScript = new P2PKH().lock(\n\t\t\tconfig.changeAddress || config.paymentPk.toAddress().toString(),\n\t\t);\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not available until the transaction is signed\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t}\n\n\tif (config.signer) {\n\t\ttx = await signData(tx, config.signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChange,\n\t};\n};\n","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype TransactionOutput,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type { SendUtxosConfig, SendUtxosResult, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Sends utxos to the given destination\n * @param {SendUtxosConfig} config - Configuration object for sending utxos\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {Payment[]} config.payments - Array of payments with addresses and amounts\n * @param {number} [config.satsPerKb] - Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {string} [config.changeAddress] - Address to send change to. If not provided, defaults to paymentPk address\n * @returns {Promise<SendUtxosResult>} Transaction with utxo outputs\n */\nexport const sendUtxos = async (\n\tconfig: SendUtxosConfig,\n): Promise<SendUtxosResult> => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tpayments,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tchangeAddress = paymentPk.toAddress().toString(),\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\t// Outputs\n\tfor (const payment of payments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new P2PKH().lock(payment.to),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + (out.satoshis || 0),\n\t\t0,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + fee) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + fee) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to send. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChange: Utxo | undefined;\n\tif (totalSatsIn > totalSatsOut + fee) {\n\t\t// Change\n\t\tconst changeScript = new P2PKH().lock(changeAddress);\n\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t} else if (totalSatsIn < totalSatsOut + fee) {\n\t\tconsole.log(\"No change needed\");\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\tBigNumber,\n\tLockingScript,\n\tOP,\n\tP2PKH,\n\tPrivateKey,\n\tScript,\n\tTransaction,\n\tTransactionSignature,\n\tUnlockingScript,\n\tUtils,\n} from \"@bsv/sdk\";\n\nexport const oLockPrefix =\n\t\"2097dfd76851bf465e8f715593b217714858bbe9570ff3bd5e33840a34e20ff0262102ba79df5f8ae7604a9830f03c7933028186aede0675a16f025dc4f8be8eec0382201008ce7480da41702918d1ec8e6849ba32b4d65b1e40dc669c31a1e6306b266c0000\";\nexport const oLockSuffix =\n\t\"615179547a75537a537a537a0079537a75527a527a7575615579008763567901c161517957795779210ac407f0e4bd44bfc207355a778b046225a7068fc59ee7eda43ad905aadbffc800206c266b30e6a1319c66dc401e5bd6b432ba49688eecd118297041da8074ce081059795679615679aa0079610079517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01007e81517a75615779567956795679567961537956795479577995939521414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff00517951796151795179970079009f63007952799367007968517a75517a75517a7561527a75517a517951795296a0630079527994527a75517a6853798277527982775379012080517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01205279947f7754537993527993013051797e527e54797e58797e527e53797e52797e57797e0079517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a756100795779ac517a75517a75517a75517a75517a75517a75517a75517a75517a7561517a75517a756169587951797e58797eaa577961007982775179517958947f7551790128947f77517a75517a75618777777777777777777767557951876351795779a9876957795779ac777777777777777767006868\";\n\n/**\n * OrdLock class implementing ScriptTemplate.\n *\n * This class provides methods for interacting with OrdinalLock contract \n */\nexport default class OrdLock {\n\t/**\n\t * Creates a 1Sat Ordinal Lock script\n\t *\n\t * @param {string} ordAddress - An address which can cancel listing.\n\t * @param {string} payAddress - Address which is paid on purchase\n\t * @param {number} price - Listing price in satoshis\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\tlock(\n\t\tordAddress: string,\n\t\tpayAddress: string,\n\t\tprice: number,\n\t): Script {\n\t\tconst cancelPkh = Utils.fromBase58Check(ordAddress).data as number[];\n\t\tconst payPkh = Utils.fromBase58Check(payAddress).data as number[];\n\n\t\treturn Script.fromHex(oLockPrefix)\n\t\t\t.writeBin(cancelPkh)\n\t\t\t.writeBin(OrdLock.buildOutput(price, new P2PKH().lock(payPkh).toBinary()))\n\t\t\t.writeScript(Script.fromHex(oLockSuffix))\n\t}\n\n\tcancelListing(\n\t\tprivateKey: PrivateKey,\n\t\tsignOutputs: 'all' | 'none' | 'single' = 'all',\n\t\tanyoneCanPay: boolean = false,\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: () => Promise<number>\n\t} {\n\t\tconst p2pkh = new P2PKH().unlock(privateKey, signOutputs, anyoneCanPay, sourceSatoshis, lockingScript)\n\t\treturn {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await p2pkh.sign(tx, inputIndex)).writeOpCode(OP.OP_1)\n\t\t\t},\n\t\t\testimateLength: async () => {\n\t\t\t\treturn 107\n\t\t\t}\n\t\t}\n\t}\n\n\tpurchaseListing(\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>\n\t} {\n\t\tconst purchase = {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\tif (tx.outputs.length < 2) {\n\t\t\t\t\tthrow new Error(\"Malformed transaction\")\n\t\t\t\t}\n\t\t\t\tconst script = new UnlockingScript()\n\t\t\t\t\t.writeBin(OrdLock.buildOutput(\n\t\t\t\t\t\ttx.outputs[0].satoshis || 0,\n\t\t\t\t\t\ttx.outputs[0].lockingScript.toBinary()\n\t\t\t\t\t))\n\t\t\t\tif(tx.outputs.length > 2) {\n\t\t\t\t\tconst writer = new Utils.Writer()\n\t\t\t\t\tfor(const output of tx.outputs.slice(2)) {\n\t\t\t\t\t\twriter.write(OrdLock.buildOutput(output.satoshis || 0, output.lockingScript.toBinary()))\n\t\t\t\t\t}\n\t\t\t\t\tscript.writeBin(writer.toArray())\n\t\t\t\t} else {\n\t\t\t\t\tscript.writeOpCode(OP.OP_0)\n\t\t\t\t}\n\n\t\t\t\tconst input = tx.inputs[inputIndex]\n\t\t\t\tconst preimage = TransactionSignature.format({\n\t\t\t\t\tsourceTXID: input.sourceTXID || input.sourceTransaction!.id('hex'),\n\t\t\t\t\tsourceOutputIndex: input.sourceOutputIndex,\n\t\t\t\t\tsourceSatoshis: sourceSatoshis || \n\t\t\t\t\tinput.sourceTransaction!.outputs[input.sourceOutputIndex].satoshis!,\n\t\t\t\t\ttransactionVersion: tx.version,\n\t\t\t\t\totherInputs: [],\n\t\t\t\t\tinputIndex,\n\t\t\t\t\toutputs: tx.outputs,\n\t\t\t\t\tinputSequence: input.sequence,\n\t\t\t\t\tsubscript: lockingScript || input.sourceTransaction!.outputs[input.sourceOutputIndex].lockingScript,\n\t\t\t\t\tlockTime: tx.lockTime,\n\t\t\t\t\tscope: TransactionSignature.SIGHASH_ALL |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_ANYONECANPAY |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_FORKID\n\t\t\t\t  });\n\n\t\t\t\treturn script.writeBin(preimage).writeOpCode(OP.OP_0)\n\t\t\t},\n\t\t\testimateLength: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await purchase.sign(tx, inputIndex)).toBinary().length\n\t\t\t}\n\t\t}\n\t\treturn purchase\n\t}\n\n\tstatic buildOutput(satoshis: number, script: number[]): number[] {\n\t\tconst writer = new Utils.Writer()\n\t\twriter.writeUInt64LEBn(new BigNumber(satoshis))\n\t\twriter.writeVarIntNum(script.length)\n\t\twriter.write(script)\n\t\treturn writer.toArray()\n\t}\n}\n","// TODO: Create listing for NFT and FT\n\nimport {\n\tP2PKH,\n\tSatoshisPerKilobyte,\n\tScript,\n\tTransaction,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type {\n\tCraeteOrdTokenListingsConfig,\n\tCreateOrdListingsConfig,\n\tUtxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nconst { toArray } = Utils;\n\nexport const createOrdListings = async (config: CreateOrdListingsConfig) => {\n\tconst {\n\t\tutxos,\n\t\tlistings,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Warn if creating many inscriptions at once\n\tif (listings.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Outputs\n\t// Add listing outputs\n\tfor (const listing of listings) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdLock().lock(\n\t\t\t\tlisting.payAddress,\n\t\t\t\tlisting.ordAddress,\n\t\t\t\tlisting.price,\n\t\t\t),\n\t\t});\n\t\tconst inputScriptBinary = toArray(listing.listingUtxo.script, \"base64\");\n\t\tconst inputScript = Script.fromBinary(inputScriptBinary);\n\t\ttx.addInput({\n\t\t\tunlockingScriptTemplate: new OrdP2PKH().unlock(\n\t\t\t\tordPk,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlisting.listingUtxo.satoshis,\n\t\t\t\tinputScript,\n\t\t\t),\n\t\t\tsourceTXID: listing.listingUtxo.txid,\n\t\t\tsourceOutputIndex: listing.listingUtxo.vout,\n\t\t\tsequence: 0xffffffff,\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Check if change is needed\n\tlet payChange: Utxo | undefined;\n\tconst changeScript = new P2PKH().lock(\n\t\tchangeAddress || paymentPk.toAddress().toString(),\n\t);\n\tconst changeOutput = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOutput);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\nexport const createOrdTokenListings = async (\n\tconfig: CraeteOrdTokenListingsConfig,\n) => {};\n","// TODO: Cancel listing for NFT and FT\n\nimport { P2PKH, SatoshisPerKilobyte, Script, Transaction } from \"@bsv/sdk\";\nimport type { CancelOrdListingsConfig, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\n\nexport const cancelOrdListings = async (config: CancelOrdListingsConfig) => {\n\tconst {\n\t\tutxos,\n\t\tlistingUtxos,\n\t\tordPk,\n\t\tpaymentPk,\n\t\tchangeAddress,\n    additionalPayments,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinals we're cancelling\n\tfor (const listingUtxo of listingUtxos) {\n\t\ttx.addInput({\n\t\t\tunlockingScript: Script.fromHex(\n\t\t\t\tBuffer.from(listingUtxo.script, \"base64\").toString(\"hex\"),\n\t\t\t),\n\t\t\tunlockingScriptTemplate: new OrdLock().cancelListing(ordPk),\n\t\t\tsourceOutputIndex: listingUtxo.vout,\n\t\t\tsequence: 0xffffffff,\n\t\t});\n\t\t// Add cancel outputs returning listed ordinals\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new P2PKH().lock(ordPk.toAddress().toString()),\n\t\t});\n\t}\n\n  \t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\n\t// Warn if creating many inscriptions at once\n\tif (listingUtxos.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n  // make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map((i) => `${i.sourceTXID}_${i.sourceOutputIndex}`),\n\t\tpayChange,\n\t};\n};\n\n// const cancelTx = new Transaction(1, 0);\n\n// if (listing.id || listing.tick) {\n//   cancelling.value = false;\n//   throw new Error(\"BSV20 listing!\");\n// }\n\n// const cancelInput = new TxIn(\n//   Buffer.from(listing.txid, \"hex\"),\n//   listing.vout,\n//   Script.from_asm_string(\"\")\n// );\n// cancelTx.add_input(cancelInput);\n// const ordinalsAddress = P2PKHAddress.from_string(ordAddress.value);\n\n// const satOutScript = ordinalsAddress.get_locking_script();\n// const transferOut = new TxOut(BigInt(1), satOutScript);\n\n// cancelTx.add_output(transferOut);\n\n// const changeAddress = P2PKHAddress.from_string(fundingAddress.value);\n\n// // dummy outputs - change\n// const dummyChangeOutput = new TxOut(\n//   BigInt(0),\n//   changeAddress.get_locking_script()\n// );\n// cancelTx.add_output(dummyChangeOutput);\n\n// // Calculate the network fee\n// // account for funding input and market output (not added to tx yet)\n// const paymentUtxos: Utxo[] = [];\n// let satsCollected = 0;\n// // initialize fee and satsNeeded (updated with each added payment utxo)\n// let fee = calculateFee(1, cancelTx);\n// let satsNeeded = fee;\n// // collect the required utxos\n// const sortedFundingUtxos = utxos.value.sort((a, b) =>\n//   a.satoshis > b.satoshis ? -1 : 1\n// );\n// for (const utxo of sortedFundingUtxos) {\n//   if (satsCollected < satsNeeded) {\n//     satsCollected += utxo.satoshis;\n//     paymentUtxos.push(utxo);\n\n//     // if we had to add additional\n//     fee = calculateFee(paymentUtxos.length, cancelTx);\n//     satsNeeded = fee + BigInt(indexerBuyFee);\n//   }\n// }\n\n// // add payment utxos to the tx\n// for (const u of paymentUtxos) {\n//   const inx = new TxIn(\n//     Buffer.from(u.txid, \"hex\"),\n//     u.vout,\n//     Script.from_asm_string(\"\")\n//   );\n//   inx.set_satoshis(BigInt(u.satoshis));\n//   cancelTx.add_input(inx);\n// }\n\n// // Replace dummy change output\n// const changeAmt = BigInt(satsCollected) - satsNeeded;\n\n// const changeOutput = new TxOut(\n//   BigInt(changeAmt),\n//   changeAddress.get_locking_script()\n// );\n\n// cancelTx.set_output(1, changeOutput);\n\n// // sign the cancel input\n// const sig = cancelTx.sign(\n//   PrivateKey.from_wif(ordPk.value),\n//   SigHash.InputOutputs,\n//   0,\n//   Script.from_bytes(Buffer.from(listing.script, \"base64\")),\n//   BigInt(1)\n// );\n\n// cancelInput.set_unlocking_script(\n//   Script.from_asm_string(\n//     `${sig.to_hex()} ${PrivateKey.from_wif(ordPk.value)\n//       .to_public_key()\n//       .to_hex()} OP_1`\n//   )\n// );\n\n// cancelTx.set_input(0, cancelInput);\n\n// // sign the funding inputs\n// let idx = 1;\n// for (const u of paymentUtxos) {\n//   const inx = cancelTx.get_input(idx);\n\n//   if (!inx) {\n//     cancelling.value = false;\n//     return;\n//   }\n\n//   const sig = cancelTx.sign(\n//     PrivateKey.from_wif(payPk.value),\n//     SigHash.InputOutputs,\n//     idx,\n//     Script.from_asm_string(u.script),\n//     BigInt(u.satoshis)\n//   );\n\n//   inx.set_unlocking_script(\n//     Script.from_asm_string(\n//       `${sig.to_hex()} ${PrivateKey.from_wif(payPk.value)\n//         .to_public_key()\n//         .to_hex()}`\n//     )\n//   );\n\n//   cancelTx.set_input(idx, inx);\n//   idx++;\n// }\n","import { P2PKH, SatoshisPerKilobyte, Script, Transaction } from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type { PurchaseOrdListingConfig, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport OrdLock from \"./templates/ordLock\";\n\nexport const purchaseOrdListings = async (config: PurchaseOrdListingConfig) => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tlistingUtxo,\n\t\tordAddress,\n\t\tchangeAddress,\n\t\tadditionalPayments = [],\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinal we're purchasing\n\ttx.addInput({\n\t\tunlockingScriptTemplate: new OrdLock().purchaseListing(\n\t\t\t1,\n\t\t\tScript.fromHex(Buffer.from(listingUtxo.script, \"base64\").toString(\"hex\")),\n\t\t),\n\t\tsourceTXID: listingUtxo.txid,\n\t\tsourceOutputIndex: listingUtxo.vout,\n\t\tsequence: 0xffffffff,\n\t});\n\n\t// Outputs\n\t// Add the purchased output\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript: new P2PKH().lock(ordAddress),\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n\tconst change = changeAddress || paymentPk.toAddress().toString();\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n  \n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n  // make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map((i) => `${i.sourceTXID}_${i.sourceOutputIndex}`),\n\t\tpayChange,\n\t};\n};","import { Transaction, SatoshisPerKilobyte, P2PKH } from \"@bsv/sdk\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n\tUtxo,\n\tCreateOrdinalsConfig,\n\tCreateOrdinalsResult,\n\tCreateOrdinalsCollectionConfig,\n\tCreateOrdinalsCollectionItemConfig,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Creates a transaction with inscription outputs\n * @param {CreateOrdinalsConfig | CreateOrdinalsCollectionConfig | CreateOrdinalsCollectionItemConfig} config - Configuration object for creating ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {string} config.changeAddress - Optional. Address to send change to. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Local or remote signer (used for data signature)\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<CreateOrdinalsResult>} Transaction with inscription outputs\n */\nexport const createOrdinals = async (\n\tconfig:\n\t\t| CreateOrdinalsConfig\n\t\t| CreateOrdinalsCollectionConfig\n\t\t| CreateOrdinalsCollectionItemConfig,\n): Promise<CreateOrdinalsResult> => {\n\tconst {\n\t\tutxos,\n\t\tdestinations,\n\t\tpaymentPk,\n\t\tchangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Inputs\n\tfor (const utxo of utxos) {\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(paymentPk));\n\t\ttx.addInput(input);\n\t}\n\n\t// Warn if creating many inscriptions at once\n\tif (destinations.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Outputs\n\t// Add inscription outputs\n\tfor (const destination of destinations) {\n\t\tif (!destination.inscription) {\n\t\t\tthrow new Error(\"Inscription is required for all destinations\");\n\t\t}\n\n\t\t// remove any undefined fields from metadata\n\t\tif (metaData) {\n\t\t\tfor(const key of Object.keys(metaData)) {\n\t\t\t\tif (metaData[key] === undefined) {\n\t\t\t\t\tdelete metaData[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription.dataB64,\n\t\t\t\tdestination.inscription.contentType,\n\t\t\t\tstringifyMetaData(metaData),\n\t\t\t),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Calculate total input and output amounts\n\tconst totalInput = utxos.reduce(\n\t\t(sum, utxo) => sum + BigInt(utxo.satoshis),\n\t\t0n,\n\t);\n\tconst totalOutput = tx.outputs.reduce(\n\t\t(sum, output) => sum + BigInt(output.satoshis || 0),\n\t\t0n,\n\t);\n\n\t// Estimate fee\n\tconst estimatedFee = await modelOrFee.computeFee(tx);\n\n\t// Check if change is needed\n\tlet payChange: Utxo | undefined;\n\tif (totalInput > totalOutput + BigInt(estimatedFee)) {\n\t\tconst changeScript = new P2PKH().lock(\n\t\t\tchangeAddress || paymentPk.toAddress().toString(),\n\t\t);\n\t\tconst changeOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\t// Add change output\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet,\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\n\t\ttx.addOutput(changeOutput);\n\t}\n\n\tif (signer) {\n\t\ttx = await signData(tx, signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\ttype Destination,\n\tTokenType,\n\ttype TransferBSV20Inscription,\n\ttype TransferTokenInscription,\n  type TransferBSV21Inscription,\n\ttype TransferOrdTokensConfig,\n\ttype TransferOrdTokensResult,\n\ttype SendOrdinalsConfig,\n\ttype TokenUtxo,\n} from \"./types\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { sendOrdinals } from \"./sendOrdinals\";\n\n/**\n * Transfer tokens to a destination\n * @param {TransferOrdTokensConfig} config - Configuration object for transferring tokens\n * @param {TokenType} config.protocol - Token protocol. Must be TokenType.BSV20 or TokenType.BSV21\n * @param {string} config.tokenID - Token ID. Either the tick or id value depending on the protocol\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {TokenUtxo[]} config.inputTokens - Token utxos to spend\n * @param {Distribution[]} config.distributions - Array of destinations with addresses and amounts\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {string} config.changeAddress - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {string} config.tokenChangeAddress - Optional. Address to send token change to, if any. If not provided, defaults to ordPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Signer object to sign the transaction\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @param {burn} config.burn - Optional. Set to true to burn the tokens.\n * @returns {Promise<TransferOrdTokensResult>} Transaction with token transfer outputs\n */\nexport const transferOrdTokens = async (config: TransferOrdTokensConfig): Promise<TransferOrdTokensResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tinputTokens,\n\t\tdistributions,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tchangeAddress,\n\t\ttokenChangeAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n    burn = false\n\t} = config;\n\n\t// calculate change amount\n\tlet changeAmt = 0n;\n\tlet totalAmtIn = 0n;\n\tlet totalAmtOut = 0n;\n\n  // Ensure these inputs are for the expected token\n\tif(!inputTokens.every(\n\t\t(token) => token.id === tokenID,\n\t)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n\tfor (const token of inputTokens) {\n\t\ttotalAmtIn += BigInt(token.amt);\n\t}\n\n\tfor (const dest of distributions) {\n\t\ttotalAmtOut += BigInt(dest.amt);\n\t}\n\n\t// check that you have enough tokens to send\n\tif (totalAmtIn < totalAmtOut) {\n\t\tthrow new Error(\"Not enough tokens to send\");\n\t}\n\n\tchangeAmt = totalAmtIn - totalAmtOut;\n\n\t// add change to distributions\n\tif (changeAmt > 0n) {\n\t\tconst changeDistribution = {\n\t\t\taddress: tokenChangeAddress || ordPk.toAddress().toString(),\n\t\t\tamt: changeAmt.toString(),\n\t\t};\n\t\tdistributions.push(changeDistribution);\n\t}\n\n\t// build destination inscriptions\n\tconst destinations: Destination[] = distributions.map((dest) => {\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: burn ? \"burn\" : \"transfer\",\n\t\t\tamt: dest.amt,\n\t\t}\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n\t\treturn {\n\t\t\taddress: dest.address,\n\t\t\tinscription: {\n\t\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\t\tcontentType: \"application/bsv-20\",\n\t\t\t},\n\t\t};\n\t});\n\n\tconst sendOrdinalsConfig: SendOrdinalsConfig = {\n\t\tpaymentUtxos: utxos,\n\t\tordinals: inputTokens,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tdestinations,\n\t\tchangeAddress: changeAddress || paymentPk.toAddress().toString(),\n\t\tsatsPerKb,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments,\n\t\tenforceUniformSend: false\n\t};\n\n\tconst { tx, spentOutpoints, payChange } = await sendOrdinals(sendOrdinalsConfig);\n\t\n\t// find the tokenChangeVout by looking for the destination with the tokenChangeAddress\n\tconst tokenChangeVout = destinations.findIndex(\n\t\t(d) => d.address === (tokenChangeAddress || ordPk.toAddress().toString())\n\t);\n\t\n\tlet tokenChange: TokenUtxo | undefined;\n\tif (tokenChangeVout !== -1) {\n\t\ttokenChange = {\n\t\t\tid: tokenID,\n\t\t\tamt: changeAmt.toString(),\n\t\t\tsatoshis: 1,\n\t\t\ttxid: tx.id(\"hex\"),\n\t\t\tvout: tokenChangeVout,\n\t\t\tscript: Buffer.from(tx.outputs[tokenChangeVout].lockingScript.toHex(), \"hex\").toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChange,\n\t\ttokenChange,\n\t}\n};","import type { CollectionItemSubTypeData, CollectionSubTypeData } from \"./types\";\n\n/**\n * Validates sub type data\n * @param {string} subType - Sub type of the ordinals token\n * @param {string} subTypeData - Sub type data of the ordinals token\n * @returns {Error | undefined} Error if validation fails, undefined if validation passes\n */\nexport const validateSubTypeData = (\n  subType: \"collection\" | \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData | CollectionSubTypeData,\n): Error | undefined => {\n  try {\n    if (subType === \"collection\") {\n      const collectionData = subTypeData as CollectionSubTypeData;\n      if (!collectionData.description) {\n        return new Error(\"Collection description is required\");\n      }\n      if (!collectionData.quantity) {\n        return new Error(\"Collection quantity is required\");\n      }\n      if (collectionData.rarityLabels) {\n        if (!Array.isArray(collectionData.rarityLabels)) {\n          return new Error(\"Rarity labels must be an array\");\n        }\n        // make sure keys and values are strings\n        if (!collectionData.rarityLabels.every((label) => {\n          return Object.values(label).every(value => typeof value === 'string');\n        })) {\n          return new Error(`Invalid rarity labels ${collectionData.rarityLabels}`);\n        }\n      }\n      if (collectionData.traits ) {\n        if (typeof collectionData.traits !== \"object\") {\n        return new Error(\"Collection traits must be an object\");\n        }\n        if (collectionData.traits && !Object.keys(collectionData.traits).every(key => typeof key === 'string' && typeof collectionData.traits[key] === 'object')) {\n          return new Error(\"Collection traits must be a valid CollectionTraits object\");\n        }\n      }\n    }\n    if (subType === \"collectionItem\") {\n      const itemData = subTypeData as CollectionItemSubTypeData;\n      if (!itemData.collectionId) {\n        return new Error(\"Collection id is required\");\n      }\n      if (!itemData.collectionId.includes(\"_\")) {\n        return new Error(\"Collection id must be a valid outpoint\");\n      }\n      if (itemData.collectionId.split(\"_\")[0].length !== 64) {\n        return new Error(\"Collection id must contain a valid txid\");\n      }\n      if (Number.isNaN(Number.parseInt(itemData.collectionId.split(\"_\")[1]))) {\n        return new Error(\"Collection id must contain a valid vout\");\n      }\n\n      if (itemData.mintNumber && typeof itemData.mintNumber !== \"number\") {\n        return new Error(\"Mint number must be a number\");\n      }\n      if (itemData.rank && typeof itemData.rank !== \"number\") {\n        return new Error(\"Rank must be a number\");\n      }\n      if (itemData.rarityLabel && typeof itemData.rarityLabel !== \"string\") {\n        return new Error(\"Rarity label must be a string\");\n      }\n      if (itemData.traits && typeof itemData.traits !== \"object\") {\n        return new Error(\"Traits must be an object\");\n      }\n      if (itemData.attachments && !Array.isArray(itemData.attachments)) {\n        return new Error(\"Attachments must be an array\");\n      }\n    }\n    return undefined;\n  } catch (error) {\n    return new Error(\"Invalid JSON data\");\n  }\n};"],"names":["TokenType","RoytaltyType","toHex","utf8Str","Buffer","from","toString","DEFAULT_SAT_PER_KB","API_HOST","OrdP2PKH","_P2PKH","apply","this","arguments","prototype","lock","address","b64File","mediaType","metaData","ordAsm","undefined","ordHex","fileHex","trim","Error","fileMediaType","inscriptionAsm","P2PKH","toASM","app","type","mapCmdValue","_i","_Object$entries","Object","entries","length","_Object$entries$_i","key","value","LockingScript","fromASM","fromBase58Check","Utils","inputFromB64Utxo","utxo","unlockScriptTemplate","fromUtxo","_extends","script","signData","tx","signer","_exit","_temp2","_result","idKey","keyHost","_sigma$sign","Sigma","sign","Promise","resolve","signedTx","_temp","authToken","sigma","remoteSign","then","_ref","_catch","e","console","log","reject","stringifyMetaData","result","Array","isArray","JSON","stringify","String","_settle","pact","state","s","_Pact","o","bind","v","onFulfilled","_this","onRejected","_isSettledPact","thenable","sendOrdinals","config","_temp4","_interrupt","fee","modelOrFee","payChange","satoshis","outputs","txid","id","spentOutpoints","totalSatsIn","totalSatsOut","BigInt","changeScript","changeAddress","paymentPk","toAddress","changeOut","lockingScript","change","vout","addOutput","_signData","satsPerKb","additionalPayments","enforceUniformSend","_step","SatoshisPerKilobyte","Transaction","_iterator","_createForOfIteratorHelperLoose","ordinals","done","ordUtxo","input","unlock","ordPk","push","addInput","destinations","_iterator2","_step2","_destination$inscript","_destination$inscript2","destination","inscription","dataB64","contentType","_step3","_iterator3","p","amount","to","reduce","total","out","_temp3","array","body","i","_cycle","check","_forOf","paymentUtxos","computeFee","_modelOrFee$computeFe","observer","OrdLock","_proto","ordAddress","payAddress","price","cancelPkh","data","payPkh","Script","fromHex","writeBin","buildOutput","toBinary","writeScript","cancelListing","privateKey","signOutputs","anyoneCanPay","sourceSatoshis","p2pkh","inputIndex","_p2pkh$sign","writeOpCode","OP","OP_1","estimateLength","purchaseListing","purchase","UnlockingScript","writer","Writer","slice","output","write","toArray","OP_0","inputs","preimage","TransactionSignature","format","sourceTXID","sourceTransaction","sourceOutputIndex","transactionVersion","version","otherInputs","inputSequence","sequence","subscript","lockTime","scope","SIGHASH_ALL","SIGHASH_ANYONECANPAY","SIGHASH_FORKID","_purchase$sign","writeUInt64LEBn","BigNumber","writeVarIntNum","callback","_iteratorSymbol","Symbol","iterator","payChangeOutIdx","findIndex","changeOutput","map","utxos","listingUtxos","_config$satsPerKb","listingUtxo","unlockingScript","unlockingScriptTemplate","warn","target","step","next","listings","_config$additionalPay","listing","inputScriptBinary","inputScript","fromBinary","_Object$keys","keys","totalInput","sum","totalOutput","estimatedFee","collectionId","limit","offset","scriptEncoding","url","subTypeData","fetch","res","ok","json","nftUtxos","outpoints","filter","u","_u$data","list","method","headers","concat","nftRes","nfts","nftUtxo","origin","outpoint","payUrl","payRes","payUtxos","pubKeyHash","p2pkhScript","protocol","tokenId","BSV20","tokenUtxos","amt","payments","_config$changeAddress","payment","sendTxOut","tokenID","inputTokens","distributions","tokenChangeAddress","_config$burn","burn","changeAmt","totalAmtIn","totalAmtOut","every","token","changeDistribution","dest","transferInscription","op","tick","BSV21","sendOrdinalsConfig","tokenChange","tokenChangeVout","d","subType","collectionData","description","quantity","rarityLabels","label","values","traits","itemData","includes","split","Number","isNaN","parseInt","mintNumber","rank","rarityLabel","attachments","error"],"mappings":"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"}