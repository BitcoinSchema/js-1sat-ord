{"version":3,"file":"index.cjs","sources":["../node_modules/dotenv/lib/main.js","../src/utils/strings.ts","../src/index.ts"],"sourcesContent":["const fs = require('fs')\nconst path = require('path')\nconst os = require('os')\nconst packageJson = require('../package.json')\n\nconst version = packageJson.version\n\nconst LINE = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg\n\n// Parser src into an Object\nfunction parse (src) {\n  const obj = {}\n\n  // Convert buffer to string\n  let lines = src.toString()\n\n  // Convert line breaks to same format\n  lines = lines.replace(/\\r\\n?/mg, '\\n')\n\n  let match\n  while ((match = LINE.exec(lines)) != null) {\n    const key = match[1]\n\n    // Default undefined or null to empty string\n    let value = (match[2] || '')\n\n    // Remove whitespace\n    value = value.trim()\n\n    // Check if double quoted\n    const maybeQuote = value[0]\n\n    // Remove surrounding quotes\n    value = value.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, '$2')\n\n    // Expand newlines if double quoted\n    if (maybeQuote === '\"') {\n      value = value.replace(/\\\\n/g, '\\n')\n      value = value.replace(/\\\\r/g, '\\r')\n    }\n\n    // Add to object\n    obj[key] = value\n  }\n\n  return obj\n}\n\nfunction _log (message) {\n  console.log(`[dotenv@${version}][DEBUG] ${message}`)\n}\n\nfunction _resolveHome (envPath) {\n  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath\n}\n\n// Populates process.env from .env file\nfunction config (options) {\n  let dotenvPath = path.resolve(process.cwd(), '.env')\n  let encoding = 'utf8'\n  const debug = Boolean(options && options.debug)\n  const override = Boolean(options && options.override)\n\n  if (options) {\n    if (options.path != null) {\n      dotenvPath = _resolveHome(options.path)\n    }\n    if (options.encoding != null) {\n      encoding = options.encoding\n    }\n  }\n\n  try {\n    // Specifying an encoding returns a string instead of a buffer\n    const parsed = DotenvModule.parse(fs.readFileSync(dotenvPath, { encoding }))\n\n    Object.keys(parsed).forEach(function (key) {\n      if (!Object.prototype.hasOwnProperty.call(process.env, key)) {\n        process.env[key] = parsed[key]\n      } else {\n        if (override === true) {\n          process.env[key] = parsed[key]\n        }\n\n        if (debug) {\n          if (override === true) {\n            _log(`\"${key}\" is already defined in \\`process.env\\` and WAS overwritten`)\n          } else {\n            _log(`\"${key}\" is already defined in \\`process.env\\` and was NOT overwritten`)\n          }\n        }\n      }\n    })\n\n    return { parsed }\n  } catch (e) {\n    if (debug) {\n      _log(`Failed to load ${dotenvPath} ${e.message}`)\n    }\n\n    return { error: e }\n  }\n}\n\nconst DotenvModule = {\n  config,\n  parse\n}\n\nmodule.exports.config = DotenvModule.config\nmodule.exports.parse = DotenvModule.parse\nmodule.exports = DotenvModule\n","const toHex = (asciiStr: string) => {\n  var arr1: string[] = [];\n  for (var n = 0, l = asciiStr.length; n < l; n++) {\n    var hex = Number(asciiStr.charCodeAt(n)).toString(16);\n    arr1.push(hex);\n  }\n  return arr1.join(\"\");\n};\n\nconst toAscii = (hexStr: string) => {\n  var hex, i;\n\n  var result = \"\";\n  for (i = 0; i < hexStr.length; i++) {\n    hex = hexStr.charCodeAt(i).toString(16);\n    result += (\"000\" + hex).slice(-4);\n  }\n\n  return result;\n};\n\nexport { toHex, toAscii };\n","import {\n  P2PKHAddress,\n  PrivateKey,\n  Script,\n  SigHash,\n  Transaction,\n  TxIn,\n  TxOut,\n} from \"bsv-wasm\";\nimport { Buffer } from \"buffer\";\nimport * as dotenv from \"dotenv\";\nimport { AuthToken, Sigma } from \"sigma-protocol\";\nimport { toHex } from \"./utils/strings\";\n\ndotenv.config();\n\ntype Signer = {};\n\nexport interface LocalSigner extends Signer {\n  idKey: PrivateKey;\n}\n\nexport interface RemoteSigner extends Signer {\n  keyHost: string;\n  authToken?: AuthToken;\n}\n\nexport type Utxo = {\n  satoshis: number;\n  txid: string;\n  vout: number;\n  script: string;\n};\n\nexport type Inscription = {\n  dataB64: string;\n  contentType: string;\n};\n\nexport type MAP = {\n  app: string;\n  type: string;\n  [prop: string]: string | string[];\n};\n\nconst MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\n\nconst buildInscription = (\n  destinationAddress: P2PKHAddress,\n  b64File?: string | undefined,\n  mediaType?: string | undefined,\n  metaData?: MAP | undefined\n): Script => {\n  let ordAsm = \"\";\n  // This can be omitted for reinscriptions that just update metadata\n  if (b64File !== undefined && mediaType !== undefined) {\n    const ordHex = toHex(\"ord\");\n    const fsBuffer = Buffer.from(b64File, \"base64\");\n    const fireShardHex = fsBuffer.toString(\"hex\");\n    const fireShardMediaType = toHex(mediaType);\n    ordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fireShardMediaType} OP_0 ${fireShardHex} OP_ENDIF`;\n  }\n\n  // Create ordinal output and inscription in a single output\n  let inscriptionAsm = `${destinationAddress\n    .get_locking_script()\n    .to_asm_string()}${ordAsm ? \" \" + ordAsm : \"\"}`;\n\n  // MAP.app and MAP.type keys are required\n  if (metaData && metaData?.app && metaData?.type) {\n    const mapPrefixHex = toHex(MAP_PREFIX);\n    const mapCmdValue = toHex(\"SET\");\n    inscriptionAsm = `${inscriptionAsm} OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n    for (const [key, value] of Object.entries(metaData)) {\n      if (key !== \"cmd\") {\n        inscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\n          value as string\n        )}`;\n      }\n    }\n  }\n\n  return Script.from_asm_string(inscriptionAsm);\n};\n\nexport const buildReinscriptionTemplate = async (\n  ordinal: Utxo,\n  destinationAddress: string,\n  reinscription?: Inscription,\n  metaData?: MAP\n): Promise<Transaction> => {\n  let tx = new Transaction(1, 0);\n\n  // Inputs\n  let utxoIn = new TxIn(\n    Buffer.from(ordinal.txid, \"hex\"),\n    ordinal.vout,\n    Script.from_asm_string(ordinal.script)\n  );\n\n  tx.add_input(utxoIn);\n\n  // Outputs\n  const inscriptionScript = buildInscription(\n    P2PKHAddress.from_string(destinationAddress),\n    reinscription?.dataB64,\n    reinscription?.contentType,\n    metaData\n  );\n\n  let satOut = new TxOut(BigInt(1), inscriptionScript);\n  tx.add_output(satOut);\n\n  return tx;\n};\n\nconst createOrdinal = async (\n  utxo: Utxo,\n  destinationAddress: string,\n  paymentPk: PrivateKey,\n  changeAddress: string,\n  satPerByteFee: number,\n  inscription: Inscription,\n  metaData?: MAP,\n  signer?: LocalSigner | RemoteSigner\n): Promise<Transaction> => {\n  let tx = new Transaction(1, 0);\n\n  // Inputs\n  let utxoIn = new TxIn(\n    Buffer.from(utxo.txid, \"hex\"),\n    utxo.vout,\n    Script.from_asm_string(\"\")\n  );\n\n  tx.add_input(utxoIn);\n\n  // Outputs\n  const inscriptionScript = buildInscription(\n    P2PKHAddress.from_string(destinationAddress),\n    inscription.dataB64,\n    inscription.contentType,\n    metaData\n  );\n\n  let satOut = new TxOut(BigInt(1), inscriptionScript);\n  tx.add_output(satOut);\n\n  // add change\n  const changeaddr = P2PKHAddress.from_string(changeAddress);\n  const changeScript = changeaddr.get_locking_script();\n  let emptyOut = new TxOut(BigInt(1), changeScript);\n  const fee = Math.ceil(\n    satPerByteFee * (tx.get_size() + emptyOut.to_bytes().byteLength)\n  );\n  const change = utxo.satoshis - 1 - fee;\n  if (change < 0) throw new Error(\"Inadequate satoshis for fee\");\n  if (change > 0) {\n    let changeOut = new TxOut(BigInt(change), changeScript);\n    tx.add_output(changeOut);\n  }\n\n  // sign tx if idKey or remote signer like starfish/tokenpass\n  const idKey = (signer as LocalSigner)?.idKey;\n  const keyHost = (signer as RemoteSigner)?.keyHost;\n  if (idKey) {\n    // input txids are available so sigma signature\n    // can be final before signing the tx\n    const sigma = new Sigma(tx);\n    const { signedTx } = sigma.sign(idKey);\n    tx = signedTx;\n  } else if (keyHost) {\n    const authToken = (signer as RemoteSigner)?.authToken;\n    const sigma = new Sigma(tx);\n    try {\n      const { signedTx } = await sigma.remoteSign(keyHost, authToken);\n      tx = signedTx;\n    } catch (e) {\n      console.log(e);\n      throw new Error(\"Remote signing to \" + keyHost + \" failed\");\n    }\n  }\n\n  const sig = tx.sign(\n    paymentPk,\n    SigHash.ALL | SigHash.FORKID,\n    0,\n    Script.from_asm_string(utxo.script),\n    BigInt(utxo.satoshis)\n  );\n\n  utxoIn.set_unlocking_script(\n    Script.from_asm_string(\n      `${sig.to_hex()} ${paymentPk.to_public_key().to_hex()}`\n    )\n  );\n\n  tx.set_input(0, utxoIn);\n\n  return tx;\n};\n\nconst sendOrdinal = async (\n  paymentUtxo: Utxo,\n  ordinal: Utxo,\n  paymentPk: PrivateKey,\n  changeAddress: string,\n  satPerByteFee: number,\n  ordPk: PrivateKey,\n  ordDestinationAddress: string,\n  reinscription?: Inscription,\n  metaData?: MAP\n): Promise<Transaction> => {\n  let tx = new Transaction(1, 0);\n\n  let ordIn = new TxIn(\n    Buffer.from(ordinal.txid, \"hex\"),\n    ordinal.vout,\n    Script.from_asm_string(\"\")\n  );\n  tx.add_input(ordIn);\n\n  // Inputs\n  let utxoIn = new TxIn(\n    Buffer.from(paymentUtxo.txid, \"hex\"),\n    paymentUtxo.vout,\n    Script.from_asm_string(\"\")\n  );\n\n  tx.add_input(utxoIn);\n\n  let s: Script;\n  const destinationAddress = P2PKHAddress.from_string(ordDestinationAddress);\n  if (reinscription?.dataB64 && reinscription?.contentType) {\n    s = buildInscription(\n      destinationAddress,\n      reinscription.dataB64,\n      reinscription.contentType,\n      metaData\n    );\n  } else {\n    s = destinationAddress.get_locking_script();\n  }\n  let satOut = new TxOut(BigInt(1), s);\n  tx.add_output(satOut);\n\n  // add change\n  const changeaddr = P2PKHAddress.from_string(changeAddress);\n  const changeScript = changeaddr.get_locking_script();\n  let emptyOut = new TxOut(BigInt(1), changeScript);\n  const fee = Math.ceil(\n    satPerByteFee * (tx.get_size() + emptyOut.to_bytes().byteLength)\n  );\n  const change = paymentUtxo.satoshis - fee;\n  let changeOut = new TxOut(BigInt(change), changeScript);\n\n  tx.add_output(changeOut);\n\n  // sign ordinal\n  const sig = tx.sign(\n    ordPk,\n    SigHash.InputOutput,\n    0,\n    Script.from_asm_string(ordinal.script),\n    BigInt(ordinal.satoshis)\n  );\n\n  ordIn.set_unlocking_script(\n    Script.from_asm_string(`${sig.to_hex()} ${ordPk.to_public_key().to_hex()}`)\n  );\n\n  tx.set_input(0, ordIn);\n\n  // sign fee payment\n  const sig2 = tx.sign(\n    paymentPk,\n    SigHash.InputOutput,\n    1,\n    Script.from_asm_string(paymentUtxo.script),\n    BigInt(paymentUtxo.satoshis)\n  );\n\n  utxoIn.set_unlocking_script(\n    Script.from_asm_string(\n      `${sig2.to_hex()} ${paymentPk.to_public_key().to_hex()}`\n    )\n  );\n\n  tx.set_input(1, utxoIn);\n\n  return tx;\n};\n\n// sendUtxos sends p2pkh utxos to the given destinationAddress\nconst sendUtxos = async (\n  utxos: Utxo[],\n  paymentPk: PrivateKey,\n  address: P2PKHAddress,\n  feeSats: number\n): Promise<Transaction> => {\n  const tx = new Transaction(1, 0);\n\n  // Outputs\n  let inputValue = 0;\n  for (let u of utxos || []) {\n    inputValue += u.satoshis;\n  }\n  const satsIn = inputValue;\n  const satsOut = satsIn - feeSats;\n  console.log({ feeSats, satsIn, satsOut });\n  tx.add_output(new TxOut(BigInt(satsOut), address.get_locking_script()));\n\n  // build txins from our UTXOs\n  let idx = 0;\n  for (let u of utxos || []) {\n    console.log({ u });\n    const inx = new TxIn(\n      Buffer.from(u.txid, \"hex\"),\n      u.vout,\n      Script.from_asm_string(\"\")\n    );\n    console.log({ inx });\n    inx.set_satoshis(BigInt(u.satoshis));\n    tx.add_input(inx);\n\n    const sig = tx.sign(\n      paymentPk,\n      SigHash.InputOutputs,\n      idx,\n      Script.from_asm_string(u.script),\n      BigInt(u.satoshis)\n    );\n\n    inx.set_unlocking_script(\n      Script.from_asm_string(\n        `${sig.to_hex()} ${paymentPk.to_public_key().to_hex()}`\n      )\n    );\n\n    tx.set_input(idx, inx);\n    idx++;\n  }\n  return tx;\n};\n\nexport { buildInscription, createOrdinal, sendOrdinal, sendUtxos };\n"],"names":["LINE","_log","message","console","log","DotenvModule","config","options","dotenvPath","path","resolve","process","cwd","encoding","debug","Boolean","override","envPath","join","os","homedir","slice","parsed","parse","fs","readFileSync","Object","keys","forEach","key","prototype","hasOwnProperty","call","env","e","error","src","obj","match","lines","toString","replace","exec","value","trim","maybeQuote","config_1","parse_1","main","toHex","asciiStr","arr1","n","l","length","hex","Number","charCodeAt","push","dotenv","buildInscription","destinationAddress","b64File","mediaType","metaData","ordAsm","undefined","ordHex","fireShardHex","Buffer","from","fireShardMediaType","inscriptionAsm","get_locking_script","to_asm_string","app","type","mapCmdValue","_i","_Object$entries","entries","_Object$entries$_i","Script","from_asm_string","ordinal","reinscription","tx","Transaction","utxoIn","TxIn","txid","vout","script","add_input","inscriptionScript","P2PKHAddress","from_string","dataB64","contentType","satOut","TxOut","BigInt","add_output","Promise","reject","utxo","paymentPk","changeAddress","satPerByteFee","inscription","signer","_temp2","_result3","sig","sign","SigHash","ALL","FORKID","satoshis","set_unlocking_script","to_hex","to_public_key","set_input","changeScript","emptyOut","fee","Math","ceil","get_size","to_bytes","byteLength","change","Error","changeOut","idKey","keyHost","_temp","authToken","sigma","Sigma","remoteSign","then","_ref","signedTx","_catch","_sigma$sign","paymentUtxo","ordPk","ordDestinationAddress","ordIn","s","InputOutput","sig2","utxos","address","feeSats","_step","inputValue","_iterator","_createForOfIteratorHelperLoose","done","satsOut","satsIn","_step2","idx","_iterator2","u","inx","set_satoshis","InputOutputs"],"mappings":"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"}